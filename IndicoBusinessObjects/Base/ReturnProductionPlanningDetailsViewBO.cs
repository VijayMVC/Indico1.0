// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

//using Indico.BusinessObjects.Util;
//using Indico.BusinessObjects;
using Indico.DAL;


namespace Indico.BusinessObjects
{
    /// <summary>
    /// ReturnProductionPlanningDetailsViewBO provides the business logic for maintaining Indico.DAL.ReturnProductionPlanningDetailsView records in the data store.
    /// </summary>
    /// <remarks>
    /// ReturnProductionPlanningDetailsViewBO provides the business logic for maintaining Indico.DAL.ReturnProductionPlanningDetailsView records in the data store. 
    /// By default it provides basic Search methods for retrieving Indico.DAL.ReturnProductionPlanningDetailsView
    /// records using the ReturnProductionPlanningDetailsView DAL class. Other methods implement atomic chunks of Business Logic according to
    /// the business rules.
    /// </remarks>
    public partial class ReturnProductionPlanningDetailsViewBO : BusinessObject, IComparable
    {
        #region fields
        private int? _weeklyProductionCapacity;
        private string _week;
        private int? _orderDetail;
        private string _pattern;
        private string _orderType;
        private string _purchaseOrder;
        private string _product;
        private int? _quantity;
        private decimal? _sMV;
        private decimal? _totalSMV;
        private string _client;
        private string _mode;
        private string _shipTo;
        private string _port;
        private string _country;
        private int? _productionLine;
        private DateTime? _sewingDate;
        private bool? _fOCPenalty;
        #endregion
        
        #region Properties
        /// <summary></summary>
        public int? WeeklyProductionCapacity
        {   get {return _weeklyProductionCapacity;}
            set 
            {
                _weeklyProductionCapacity = value;
            }
        }
        /// <summary></summary>
        public string Week
        {   get {return _week;}
            set 
            {
                _week = value;
            }
        }
        /// <summary></summary>
        public int? OrderDetail
        {   get {return _orderDetail;}
            set 
            {
                _orderDetail = value;
            }
        }
        /// <summary></summary>
        public string Pattern
        {   get {return _pattern;}
            set 
            {
                _pattern = value;
            }
        }
        /// <summary></summary>
        public string OrderType
        {   get {return _orderType;}
            set 
            {
                _orderType = value;
            }
        }
        /// <summary></summary>
        public string PurchaseOrder
        {   get {return _purchaseOrder;}
            set 
            {
                _purchaseOrder = value;
            }
        }
        /// <summary></summary>
        public string Product
        {   get {return _product;}
            set 
            {
                _product = value;
            }
        }
        /// <summary></summary>
        public int? Quantity
        {   get {return _quantity;}
            set 
            {
                _quantity = value;
            }
        }
        /// <summary></summary>
        public decimal? SMV
        {   get {return _sMV;}
            set 
            {
                _sMV = value;
            }
        }
        /// <summary></summary>
        public decimal? TotalSMV
        {   get {return _totalSMV;}
            set 
            {
                _totalSMV = value;
            }
        }
        /// <summary></summary>
        public string Client
        {   get {return _client;}
            set 
            {
                _client = value;
            }
        }
        /// <summary></summary>
        public string Mode
        {   get {return _mode;}
            set 
            {
                _mode = value;
            }
        }
        /// <summary></summary>
        public string ShipTo
        {   get {return _shipTo;}
            set 
            {
                _shipTo = value;
            }
        }
        /// <summary></summary>
        public string Port
        {   get {return _port;}
            set 
            {
                _port = value;
            }
        }
        /// <summary></summary>
        public string Country
        {   get {return _country;}
            set 
            {
                _country = value;
            }
        }
        /// <summary></summary>
        public int? ProductionLine
        {   get {return _productionLine;}
            set 
            {
                _productionLine = value;
            }
        }
        /// <summary></summary>
        public DateTime? SewingDate
        {   get {return _sewingDate;}
            set 
            {
                _sewingDate = value;
            }
        }
        /// <summary></summary>
        public bool? FOCPenalty
        {   get {return _fOCPenalty;}
            set 
            {
                _fOCPenalty = value;
            }
        }
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the ReturnProductionPlanningDetailsViewBO class using the supplied Indico.DAL.ReturnProductionPlanningDetailsView. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.ReturnProductionPlanningDetailsView whose properties will be used to initialise the ReturnProductionPlanningDetailsViewBO</param>
        internal ReturnProductionPlanningDetailsViewBO(Indico.DAL.ReturnProductionPlanningDetailsView obj)
        {
            // set the properties from the Indico.DAL.ReturnProductionPlanningDetailsView 
            this.WeeklyProductionCapacity = obj.WeeklyProductionCapacity;
            this.Week = obj.Week;
            this.OrderDetail = obj.OrderDetail;
            this.Pattern = obj.Pattern;
            this.OrderType = obj.OrderType;
            this.PurchaseOrder = obj.PurchaseOrder;
            this.Product = obj.Product;
            this.Quantity = obj.Quantity;
            this.SMV = obj.SMV;
            this.TotalSMV = obj.TotalSMV;
            this.Client = obj.Client;
            this.Mode = obj.Mode;
            this.ShipTo = obj.ShipTo;
            this.Port = obj.Port;
            this.Country = obj.Country;
            this.ProductionLine = obj.ProductionLine;
            this.SewingDate = obj.SewingDate;
            this.FOCPenalty = obj.FOCPenalty;
        }
        #endregion
        
        #region Internal utility methods
        internal void SetDAL(Indico.DAL.ReturnProductionPlanningDetailsView obj, IndicoEntities context)
        {
            // set the Indico.DAL.ReturnProductionPlanningDetailsView properties
            obj.WeeklyProductionCapacity = Convert.ToInt32(WeeklyProductionCapacity);
            obj.Week = Week;
            obj.OrderDetail = Convert.ToInt32(OrderDetail);
            obj.Pattern = Pattern;
            obj.OrderType = OrderType;
            obj.PurchaseOrder = PurchaseOrder;
            obj.Product = Product;
            obj.Quantity = Convert.ToInt32(Quantity);
            obj.SMV = Convert.ToDecimal(SMV);
            obj.TotalSMV = Convert.ToDecimal(TotalSMV);
            obj.Client = Client;
            obj.Mode = Mode;
            obj.ShipTo = ShipTo;
            obj.Port = Port;
            obj.Country = Country;
            obj.ProductionLine = Convert.ToInt32(ProductionLine);
            obj.SewingDate = Convert.ToDateTime(SewingDate);
            obj.FOCPenalty = Convert.ToBoolean(FOCPenalty);
        }
        
        internal void SetBO(Indico.DAL.ReturnProductionPlanningDetailsView obj)
        {
            // set the Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO properties    
            this.WeeklyProductionCapacity = obj.WeeklyProductionCapacity;
            this.Week = obj.Week;
            this.OrderDetail = obj.OrderDetail;
            this.Pattern = obj.Pattern;
            this.OrderType = obj.OrderType;
            this.PurchaseOrder = obj.PurchaseOrder;
            this.Product = obj.Product;
            this.Quantity = obj.Quantity;
            this.SMV = obj.SMV;
            this.TotalSMV = obj.TotalSMV;
            this.Client = obj.Client;
            this.Mode = obj.Mode;
            this.ShipTo = obj.ShipTo;
            this.Port = obj.Port;
            this.Country = obj.Country;
            this.ProductionLine = obj.ProductionLine;
            this.SewingDate = obj.SewingDate;
            this.FOCPenalty = obj.FOCPenalty;
        }
        
        internal void SetBO(Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO obj)
        {
            // set this Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO properties
            this.WeeklyProductionCapacity = obj.WeeklyProductionCapacity;
            this.Week = obj.Week;
            this.OrderDetail = obj.OrderDetail;
            this.Pattern = obj.Pattern;
            this.OrderType = obj.OrderType;
            this.PurchaseOrder = obj.PurchaseOrder;
            this.Product = obj.Product;
            this.Quantity = obj.Quantity;
            this.SMV = obj.SMV;
            this.TotalSMV = obj.TotalSMV;
            this.Client = obj.Client;
            this.Mode = obj.Mode;
            this.ShipTo = obj.ShipTo;
            this.Port = obj.Port;
            this.Country = obj.Country;
            this.ProductionLine = obj.ProductionLine;
            this.SewingDate = obj.SewingDate;
            this.FOCPenalty = obj.FOCPenalty;
        }
        
        private static List<Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO> IQueryableToList(IQueryable<Indico.DAL.ReturnProductionPlanningDetailsView> oQuery)
        {
            List<Indico.DAL.ReturnProductionPlanningDetailsView> oList = oQuery.ToList();
            List<Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO> rList = new List<Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO>(oList.Count);
            foreach (Indico.DAL.ReturnProductionPlanningDetailsView o in oList)
            {
                Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO obj = new Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO(o);
                rList.Add(obj);
            }
            return rList;
        }
        #endregion
        
        #region BusinessObject methods
        
        #region GetAllObject
        public static List<Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public static List<Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public static List<Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public static List<Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnProductionPlanningDetailsView> oQuery =
                (from o in context.ReturnProductionPlanningDetailsView
                 orderby o.WeeklyProductionCapacity
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.WeeklyProductionCapacity).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO> returnproductionplanningdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return returnproductionplanningdetailsviews;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnProductionPlanningDetailsView> oQuery =
                (from o in context.ReturnProductionPlanningDetailsView
                 where
                    (this.WeeklyProductionCapacity == null || this.WeeklyProductionCapacity == o.WeeklyProductionCapacity) &&
                    (this.Week == null || this.Week == o.Week) &&
                    (this.OrderDetail == null || this.OrderDetail == o.OrderDetail) &&
                    (this.Pattern == null || this.Pattern == o.Pattern) &&
                    (this.OrderType == null || this.OrderType == o.OrderType) &&
                    (this.PurchaseOrder == null || this.PurchaseOrder == o.PurchaseOrder) &&
                    (this.Product == null || this.Product == o.Product) &&
                    (this.Quantity == null || this.Quantity == o.Quantity) &&
                    (this.SMV == null || this.SMV == o.SMV) &&
                    (this.TotalSMV == null || this.TotalSMV == o.TotalSMV) &&
                    (this.Client == null || this.Client == o.Client) &&
                    (this.Mode == null || this.Mode == o.Mode) &&
                    (this.ShipTo == null || this.ShipTo == o.ShipTo) &&
                    (this.Port == null || this.Port == o.Port) &&
                    (this.Country == null || this.Country == o.Country) &&
                    (this.ProductionLine == null || this.ProductionLine == o.ProductionLine) &&
                    (this.SewingDate == null || this.SewingDate == o.SewingDate) &&
                    (this.FOCPenalty == null || this.FOCPenalty == o.FOCPenalty) 
                 orderby o.WeeklyProductionCapacity
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.WeeklyProductionCapacity).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO> returnproductionplanningdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return returnproductionplanningdetailsviews;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnProductionPlanningDetailsView
                 where
                    (this.WeeklyProductionCapacity == null || this.WeeklyProductionCapacity == o.WeeklyProductionCapacity) &&
                    (this.Week == null || this.Week == o.Week) &&
                    (this.OrderDetail == null || this.OrderDetail == o.OrderDetail) &&
                    (this.Pattern == null || this.Pattern == o.Pattern) &&
                    (this.OrderType == null || this.OrderType == o.OrderType) &&
                    (this.PurchaseOrder == null || this.PurchaseOrder == o.PurchaseOrder) &&
                    (this.Product == null || this.Product == o.Product) &&
                    (this.Quantity == null || this.Quantity == o.Quantity) &&
                    (this.SMV == null || this.SMV == o.SMV) &&
                    (this.TotalSMV == null || this.TotalSMV == o.TotalSMV) &&
                    (this.Client == null || this.Client == o.Client) &&
                    (this.Mode == null || this.Mode == o.Mode) &&
                    (this.ShipTo == null || this.ShipTo == o.ShipTo) &&
                    (this.Port == null || this.Port == o.Port) &&
                    (this.Country == null || this.Country == o.Country) &&
                    (this.ProductionLine == null || this.ProductionLine == o.ProductionLine) &&
                    (this.SewingDate == null || this.SewingDate == o.SewingDate) &&
                    (this.FOCPenalty == null || this.FOCPenalty == o.FOCPenalty) 
                 orderby o.WeeklyProductionCapacity
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnProductionPlanningDetailsView> oQuery =
                (from o in context.ReturnProductionPlanningDetailsView
                 where
                    (this.WeeklyProductionCapacity == null || o.WeeklyProductionCapacity == this.WeeklyProductionCapacity) &&
                    (this.Week == null || o.Week.Contains(this.Week)) &&
                    (this.OrderDetail == null || o.OrderDetail == this.OrderDetail) &&
                    (this.Pattern == null || o.Pattern.Contains(this.Pattern)) &&
                    (this.OrderType == null || o.OrderType.Contains(this.OrderType)) &&
                    (this.PurchaseOrder == null || o.PurchaseOrder.Contains(this.PurchaseOrder)) &&
                    (this.Product == null || o.Product.Contains(this.Product)) &&
                    (this.Quantity == null || o.Quantity == this.Quantity) &&
                    (this.SMV == null || o.SMV == this.SMV) &&
                    (this.TotalSMV == null || o.TotalSMV == this.TotalSMV) &&
                    (this.Client == null || o.Client.Contains(this.Client)) &&
                    (this.Mode == null || o.Mode.Contains(this.Mode)) &&
                    (this.ShipTo == null || o.ShipTo.Contains(this.ShipTo)) &&
                    (this.Port == null || o.Port.Contains(this.Port)) &&
                    (this.Country == null || o.Country.Contains(this.Country)) &&
                    (this.ProductionLine == null || o.ProductionLine == this.ProductionLine) &&
                    (this.SewingDate == null || o.SewingDate == this.SewingDate) &&
                    (this.FOCPenalty == null || o.FOCPenalty == this.FOCPenalty) 
                 orderby o.WeeklyProductionCapacity
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.WeeklyProductionCapacity).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO> returnproductionplanningdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return returnproductionplanningdetailsviews;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnProductionPlanningDetailsView
                 where
                    (this.WeeklyProductionCapacity == null || o.WeeklyProductionCapacity == this.WeeklyProductionCapacity) &&
                    (this.Week == null || o.Week.Contains(this.Week)) &&
                    (this.OrderDetail == null || o.OrderDetail == this.OrderDetail) &&
                    (this.Pattern == null || o.Pattern.Contains(this.Pattern)) &&
                    (this.OrderType == null || o.OrderType.Contains(this.OrderType)) &&
                    (this.PurchaseOrder == null || o.PurchaseOrder.Contains(this.PurchaseOrder)) &&
                    (this.Product == null || o.Product.Contains(this.Product)) &&
                    (this.Quantity == null || o.Quantity == this.Quantity) &&
                    (this.SMV == null || o.SMV == this.SMV) &&
                    (this.TotalSMV == null || o.TotalSMV == this.TotalSMV) &&
                    (this.Client == null || o.Client.Contains(this.Client)) &&
                    (this.Mode == null || o.Mode.Contains(this.Mode)) &&
                    (this.ShipTo == null || o.ShipTo.Contains(this.ShipTo)) &&
                    (this.Port == null || o.Port.Contains(this.Port)) &&
                    (this.Country == null || o.Country.Contains(this.Country)) &&
                    (this.ProductionLine == null || o.ProductionLine == this.ProductionLine) &&
                    (this.SewingDate == null || o.SewingDate == this.SewingDate) &&
                    (this.FOCPenalty == null || o.FOCPenalty == this.FOCPenalty) 
                 orderby o.WeeklyProductionCapacity
                 select o).Count();
            
        }
        
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnProductionPlanningDetailsView> oQuery =
                (from o in context.ReturnProductionPlanningDetailsView
                 where
                    (this.WeeklyProductionCapacity == null || this.WeeklyProductionCapacity == o.WeeklyProductionCapacity) && 
                    (this.OrderDetail == null || this.OrderDetail == o.OrderDetail) && 
                    (this.Quantity == null || this.Quantity == o.Quantity) && 
                    (this.SMV == null || this.SMV == o.SMV) && 
                    (this.TotalSMV == null || this.TotalSMV == o.TotalSMV) && 
                    (this.ProductionLine == null || this.ProductionLine == o.ProductionLine) && 
                    (this.SewingDate == null || this.SewingDate == o.SewingDate) && 
                    (this.FOCPenalty == null || this.FOCPenalty == o.FOCPenalty) && 
                    ((o.Week.Contains(this.Week)) ||
                    (o.Pattern.Contains(this.Pattern)) ||
                    (o.OrderType.Contains(this.OrderType)) ||
                    (o.PurchaseOrder.Contains(this.PurchaseOrder)) ||
                    (o.Product.Contains(this.Product)) ||
                    (o.Client.Contains(this.Client)) ||
                    (o.Mode.Contains(this.Mode)) ||
                    (o.ShipTo.Contains(this.ShipTo)) ||
                    (o.Port.Contains(this.Port)) ||
                    (o.Country.Contains(this.Country)) ||
                    (this.Week == null && this.Pattern == null && this.OrderType == null && this.PurchaseOrder == null && this.Product == null && this.Client == null && this.Mode == null && this.ShipTo == null && this.Port == null && this.Country == null ))
                 orderby o.WeeklyProductionCapacity
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.WeeklyProductionCapacity).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO> returnproductionplanningdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return returnproductionplanningdetailsviews;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnProductionPlanningDetailsView
                 where
                    (this.WeeklyProductionCapacity == null || this.WeeklyProductionCapacity == o.WeeklyProductionCapacity) && 
                    (this.OrderDetail == null || this.OrderDetail == o.OrderDetail) && 
                    (this.Quantity == null || this.Quantity == o.Quantity) && 
                    (this.SMV == null || this.SMV == o.SMV) && 
                    (this.TotalSMV == null || this.TotalSMV == o.TotalSMV) && 
                    (this.ProductionLine == null || this.ProductionLine == o.ProductionLine) && 
                    (this.SewingDate == null || this.SewingDate == o.SewingDate) && 
                    (this.FOCPenalty == null || this.FOCPenalty == o.FOCPenalty) && 
                    ((o.Week.Contains(this.Week)) ||
                    (o.Pattern.Contains(this.Pattern)) ||
                    (o.OrderType.Contains(this.OrderType)) ||
                    (o.PurchaseOrder.Contains(this.PurchaseOrder)) ||
                    (o.Product.Contains(this.Product)) ||
                    (o.Client.Contains(this.Client)) ||
                    (o.Mode.Contains(this.Mode)) ||
                    (o.ShipTo.Contains(this.ShipTo)) ||
                    (o.Port.Contains(this.Port)) ||
                    (o.Country.Contains(this.Country)) ||
                    (this.Week == null && this.Pattern == null && this.OrderType == null && this.PurchaseOrder == null && this.Product == null && this.Client == null && this.Mode == null && this.ShipTo == null && this.Port == null && this.Country == null ))
                 orderby o.WeeklyProductionCapacity
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO))
                return 1;
            Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBOComparer c = new Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO);
        }

        #endregion
        #endregion
    }
    
    #region ReturnProductionPlanningDetailsViewBOComparer
    public class ReturnProductionPlanningDetailsViewBOComparer : IComparer<Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO>
    {
        private string propertyToCompareName;
        public ReturnProductionPlanningDetailsViewBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public ReturnProductionPlanningDetailsViewBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO> Members
        public int Compare(Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO x, Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO x, Indico.BusinessObjects.ReturnProductionPlanningDetailsViewBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
