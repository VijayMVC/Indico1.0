// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class QuoteDetailBO : BusinessObject, IComparable
    {
        #region fields
        #region Scalar Fields
        private int id;
        private DateTime? _delivaryDate;
        private decimal? _designFee;
        private int? _designType;
        private int _fabric;
        private decimal? _gST;
        private decimal? _indimanPrice;
        private bool? _isGST;
        private string _notes;
        private int _pattern;
        private int? _priceTerm;
        private int _qty;
        private int _quote;
        private int? _unit;
        private int? _visualLayout;
        #endregion
        
        #region Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.DesignTypeBO _objDesignType;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.FabricCodeBO _objFabric;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.PatternBO _objPattern;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.PriceTermBO _objPriceTerm;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.QuoteBO _objQuote;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UnitBO _objUnit;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.VisualLayoutBO _objVisualLayout;
        #endregion
        
        #region Foreign Table Foreign Key fields
        #endregion
        
        #region Other fields
        
        private Indico.DAL.QuoteDetail _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>.</summary>
        public DateTime? DelivaryDate
        {   
            get {return _delivaryDate;}
            set 
            {
                OnDelivaryDateChanging(value);
                _delivaryDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.DelivaryDate = value;
                }
                OnDelivaryDateChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? DesignFee
        {   
            get {return _designFee;}
            set 
            {
                OnDesignFeeChanging(value);
                _designFee = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.DesignFee = value;
                }
                OnDesignFeeChanged();
            }
        }
        /// <summary>.</summary>
        public int? DesignType
        {   
            get {return _designType;}
            set 
            {
                OnDesignTypeChanging(value);
                _designType = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.DesignType = (from o in this._context.Context.DesignType
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.DesignType>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.DesignType = null;
                OnDesignTypeChanged();
            }
        }
        /// <summary>.</summary>
        public int Fabric
        {   
            get {return _fabric;}
            set 
            {
                OnFabricChanging(value);
                _fabric = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Fabric = (from o in this._context.Context.FabricCode
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.FabricCode>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Fabric = null;
                OnFabricChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? GST
        {   
            get {return _gST;}
            set 
            {
                OnGSTChanging(value);
                _gST = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.GST = value;
                }
                OnGSTChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? IndimanPrice
        {   
            get {return _indimanPrice;}
            set 
            {
                OnIndimanPriceChanging(value);
                _indimanPrice = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IndimanPrice = value;
                }
                OnIndimanPriceChanged();
            }
        }
        /// <summary>.</summary>
        public bool? IsGST
        {   
            get {return _isGST;}
            set 
            {
                OnIsGSTChanging(value);
                _isGST = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsGST = value;
                }
                OnIsGSTChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string Notes
        {   
            get {return _notes;}
            set 
            {
                OnNotesChanging(value);
                _notes = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Notes = value;
                }
                OnNotesChanged();
            }
        }
        /// <summary>.</summary>
        public int Pattern
        {   
            get {return _pattern;}
            set 
            {
                OnPatternChanging(value);
                _pattern = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Pattern = (from o in this._context.Context.Pattern
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Pattern>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Pattern = null;
                OnPatternChanged();
            }
        }
        /// <summary>.</summary>
        public int? PriceTerm
        {   
            get {return _priceTerm;}
            set 
            {
                OnPriceTermChanging(value);
                _priceTerm = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.PriceTerm = (from o in this._context.Context.PriceTerm
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.PriceTerm>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.PriceTerm = null;
                OnPriceTermChanged();
            }
        }
        /// <summary>.</summary>
        public int Qty
        {   
            get {return _qty;}
            set 
            {
                OnQtyChanging(value);
                _qty = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Qty = value;
                }
                OnQtyChanged();
            }
        }
        /// <summary>.</summary>
        public int Quote
        {   
            get {return _quote;}
            set 
            {
                OnQuoteChanging(value);
                _quote = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Quote = (from o in this._context.Context.Quote
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Quote>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Quote = null;
                OnQuoteChanged();
            }
        }
        /// <summary>.</summary>
        public int? Unit
        {   
            get {return _unit;}
            set 
            {
                OnUnitChanging(value);
                _unit = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.Unit = (from o in this._context.Context.Unit
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Unit>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Unit = null;
                OnUnitChanged();
            }
        }
        /// <summary>.</summary>
        public int? VisualLayout
        {   
            get {return _visualLayout;}
            set 
            {
                OnVisualLayoutChanging(value);
                _visualLayout = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.VisualLayout = (from o in this._context.Context.VisualLayout
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.VisualLayout>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.VisualLayout = null;
                OnVisualLayoutChanged();
            }
        }
        
        internal Indico.DAL.QuoteDetail ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        ///<summary>The DesignTypeBO object identified by the value of DesignType</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.DesignTypeBO objDesignType
        {
            get
            {
                if (_designType != null && _designType > 0 && _objDesignType == null)
                {
                        if (this._context == null)
                        {
                            _objDesignType = new Indico.BusinessObjects.DesignTypeBO();
                        }
                        else
                        {
                            _objDesignType = new Indico.BusinessObjects.DesignTypeBO(ref this._context);
                        }
                        _objDesignType.ID = Convert.ToInt32(_designType);
                        _objDesignType.GetObject(); 
                }
                return _objDesignType;
            }
            set
            { 
                _objDesignType = value;
                _designType = _objDesignType.ID;
            }
        }
        ///<summary>The FabricCodeBO object identified by the value of Fabric</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.FabricCodeBO objFabric
        {
            get
            {
                if ( _fabric > 0 && _objFabric == null)
                {
                        if (this._context == null)
                        {
                            _objFabric = new Indico.BusinessObjects.FabricCodeBO();
                        }
                        else
                        {
                            _objFabric = new Indico.BusinessObjects.FabricCodeBO(ref this._context);
                        }
                        _objFabric.ID = _fabric;
                        _objFabric.GetObject(); 
                }
                return _objFabric;
            }
            set
            { 
                _objFabric = value;
                _fabric = _objFabric.ID;
            }
        }
        ///<summary>The PatternBO object identified by the value of Pattern</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.PatternBO objPattern
        {
            get
            {
                if ( _pattern > 0 && _objPattern == null)
                {
                        if (this._context == null)
                        {
                            _objPattern = new Indico.BusinessObjects.PatternBO();
                        }
                        else
                        {
                            _objPattern = new Indico.BusinessObjects.PatternBO(ref this._context);
                        }
                        _objPattern.ID = _pattern;
                        _objPattern.GetObject(); 
                }
                return _objPattern;
            }
            set
            { 
                _objPattern = value;
                _pattern = _objPattern.ID;
            }
        }
        ///<summary>The PriceTermBO object identified by the value of PriceTerm</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.PriceTermBO objPriceTerm
        {
            get
            {
                if (_priceTerm != null && _priceTerm > 0 && _objPriceTerm == null)
                {
                        if (this._context == null)
                        {
                            _objPriceTerm = new Indico.BusinessObjects.PriceTermBO();
                        }
                        else
                        {
                            _objPriceTerm = new Indico.BusinessObjects.PriceTermBO(ref this._context);
                        }
                        _objPriceTerm.ID = Convert.ToInt32(_priceTerm);
                        _objPriceTerm.GetObject(); 
                }
                return _objPriceTerm;
            }
            set
            { 
                _objPriceTerm = value;
                _priceTerm = _objPriceTerm.ID;
            }
        }
        ///<summary>The QuoteBO object identified by the value of Quote</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.QuoteBO objQuote
        {
            get
            {
                if ( _quote > 0 && _objQuote == null)
                {
                        if (this._context == null)
                        {
                            _objQuote = new Indico.BusinessObjects.QuoteBO();
                        }
                        else
                        {
                            _objQuote = new Indico.BusinessObjects.QuoteBO(ref this._context);
                        }
                        _objQuote.ID = _quote;
                        _objQuote.GetObject(); 
                }
                return _objQuote;
            }
            set
            { 
                _objQuote = value;
                _quote = _objQuote.ID;
            }
        }
        ///<summary>The UnitBO object identified by the value of Unit</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UnitBO objUnit
        {
            get
            {
                if (_unit != null && _unit > 0 && _objUnit == null)
                {
                        if (this._context == null)
                        {
                            _objUnit = new Indico.BusinessObjects.UnitBO();
                        }
                        else
                        {
                            _objUnit = new Indico.BusinessObjects.UnitBO(ref this._context);
                        }
                        _objUnit.ID = Convert.ToInt32(_unit);
                        _objUnit.GetObject(); 
                }
                return _objUnit;
            }
            set
            { 
                _objUnit = value;
                _unit = _objUnit.ID;
            }
        }
        ///<summary>The VisualLayoutBO object identified by the value of VisualLayout</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.VisualLayoutBO objVisualLayout
        {
            get
            {
                if (_visualLayout != null && _visualLayout > 0 && _objVisualLayout == null)
                {
                        if (this._context == null)
                        {
                            _objVisualLayout = new Indico.BusinessObjects.VisualLayoutBO();
                        }
                        else
                        {
                            _objVisualLayout = new Indico.BusinessObjects.VisualLayoutBO(ref this._context);
                        }
                        _objVisualLayout.ID = Convert.ToInt32(_visualLayout);
                        _objVisualLayout.GetObject(); 
                }
                return _objVisualLayout;
            }
            set
            { 
                _objVisualLayout = value;
                _visualLayout = _objVisualLayout.ID;
            }
        }
        #endregion
        
        #region Foreign Object Foreign Key Collections
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the QuoteDetailBO class using the supplied Indico.DAL.QuoteDetail. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.QuoteDetail whose properties will be used to initialise the QuoteDetailBO</param>
        internal QuoteDetailBO(Indico.DAL.QuoteDetail obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.QuoteDetail 
            this.ID = obj.ID;
            
            this.DelivaryDate = obj.DelivaryDate;
            this.DesignFee = obj.DesignFee;
            this.DesignType = (obj.DesignTypeReference.EntityKey != null && obj.DesignTypeReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.DesignTypeReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Fabric = (obj.FabricReference.EntityKey != null && obj.FabricReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.FabricReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.GST = obj.GST;
            this.IndimanPrice = obj.IndimanPrice;
            this.IsGST = obj.IsGST;
            this.Notes = obj.Notes;
            this.Pattern = (obj.PatternReference.EntityKey != null && obj.PatternReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PatternReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.PriceTerm = (obj.PriceTermReference.EntityKey != null && obj.PriceTermReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PriceTermReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Qty = obj.Qty;
            this.Quote = (obj.QuoteReference.EntityKey != null && obj.QuoteReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.QuoteReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Unit = (obj.UnitReference.EntityKey != null && obj.UnitReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.UnitReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.VisualLayout = (obj.VisualLayoutReference.EntityKey != null && obj.VisualLayoutReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.VisualLayoutReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.QuoteDetail SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.QuoteDetail properties
            Indico.DAL.QuoteDetail obj = new Indico.DAL.QuoteDetail();
            
            if (this.ID > 0)
            {
                obj = context.QuoteDetail.FirstOrDefault<QuoteDetail>(o => o.ID == this.ID);
            }
            
            obj.DelivaryDate = this.DelivaryDate;
            obj.DesignFee = this.DesignFee;
            obj.GST = this.GST;
            obj.IndimanPrice = this.IndimanPrice;
            obj.IsGST = this.IsGST;
            obj.Notes = this.Notes;
            obj.Qty = this.Qty;
            
            if (this.DesignType != null && this.DesignType > 0) obj.DesignType = context.DesignType.FirstOrDefault(o => o.ID == this.DesignType);
            if (this.Fabric > 0) obj.Fabric = context.FabricCode.FirstOrDefault(o => o.ID == this.Fabric);
            if (this.Pattern > 0) obj.Pattern = context.Pattern.FirstOrDefault(o => o.ID == this.Pattern);
            if (this.PriceTerm != null && this.PriceTerm > 0) obj.PriceTerm = context.PriceTerm.FirstOrDefault(o => o.ID == this.PriceTerm);
            if (this.Quote > 0) obj.Quote = context.Quote.FirstOrDefault(o => o.ID == this.Quote);
            if (this.Unit != null && this.Unit > 0) obj.Unit = context.Unit.FirstOrDefault(o => o.ID == this.Unit);
            if (this.VisualLayout != null && this.VisualLayout > 0) obj.VisualLayout = context.VisualLayout.FirstOrDefault(o => o.ID == this.VisualLayout);
            
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.QuoteDetail))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.QuoteDetail obj = (Indico.DAL.QuoteDetail)eObj;
            
            // set the Indico.BusinessObjects.QuoteDetailBO properties
            this.ID = obj.ID;
            
            this.DelivaryDate = obj.DelivaryDate;
            this.DesignFee = obj.DesignFee;
            this.GST = obj.GST;
            this.IndimanPrice = obj.IndimanPrice;
            this.IsGST = obj.IsGST;
            this.Notes = obj.Notes;
            this.Qty = obj.Qty;
            
            this.DesignType = (obj.DesignTypeReference.EntityKey != null && obj.DesignTypeReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.DesignTypeReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Fabric = (obj.FabricReference.EntityKey != null && obj.FabricReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.FabricReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Pattern = (obj.PatternReference.EntityKey != null && obj.PatternReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PatternReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.PriceTerm = (obj.PriceTermReference.EntityKey != null && obj.PriceTermReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PriceTermReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Quote = (obj.QuoteReference.EntityKey != null && obj.QuoteReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.QuoteReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Unit = (obj.UnitReference.EntityKey != null && obj.UnitReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.UnitReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.VisualLayout = (obj.VisualLayoutReference.EntityKey != null && obj.VisualLayoutReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.VisualLayoutReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.QuoteDetailBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.QuoteDetailBO properties
            this.ID = obj.ID;
            
            this.DelivaryDate = obj.DelivaryDate;
            this.DesignFee = obj.DesignFee;
            this.DesignType = obj.DesignType;
            this.Fabric = obj.Fabric;
            this.GST = obj.GST;
            this.IndimanPrice = obj.IndimanPrice;
            this.IsGST = obj.IsGST;
            this.Notes = obj.Notes;
            this.Pattern = obj.Pattern;
            this.PriceTerm = obj.PriceTerm;
            this.Qty = obj.Qty;
            this.Quote = obj.Quote;
            this.Unit = obj.Unit;
            this.VisualLayout = obj.VisualLayout;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.QuoteDetailBO> IQueryableToList(IQueryable<Indico.DAL.QuoteDetail> oQuery)
        {
            List<Indico.DAL.QuoteDetail> oList = oQuery.ToList();
            List<Indico.BusinessObjects.QuoteDetailBO> rList = new List<Indico.BusinessObjects.QuoteDetailBO>(oList.Count);
            foreach (Indico.DAL.QuoteDetail o in oList)
            {
                Indico.BusinessObjects.QuoteDetailBO obj = new Indico.BusinessObjects.QuoteDetailBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.QuoteDetailBO> ToList(IEnumerable<Indico.DAL.QuoteDetail> oQuery)
        {
            List<Indico.DAL.QuoteDetail> oList = oQuery.ToList();
            List<Indico.BusinessObjects.QuoteDetailBO> rList = new List<Indico.BusinessObjects.QuoteDetailBO>(oList.Count);
            foreach (Indico.DAL.QuoteDetail o in oList)
            {
                Indico.BusinessObjects.QuoteDetailBO obj = new Indico.BusinessObjects.QuoteDetailBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.QuoteDetail> ToEntityList(List<QuoteDetailBO> bos, IndicoEntities context)
        {
            // build a List of QuoteDetail entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.QuoteDetail.Count() == 0) ? new List<Indico.DAL.QuoteDetail>() : (context.QuoteDetail.Where(BuildContainsExpression<QuoteDetail, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.QuoteDetail>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.QuoteDetail> ToEntityCollection(List<QuoteDetailBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of QuoteDetail entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.QuoteDetail> el = (context.QuoteDetail.Count() == 0) ? new List<Indico.DAL.QuoteDetail>() : 
                context.QuoteDetail.Where(BuildContainsExpression<QuoteDetail, int>(e => e.ID, ids))
                .ToList<Indico.DAL.QuoteDetail>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.QuoteDetail> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.QuoteDetail>();
                
            foreach (Indico.DAL.QuoteDetail r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.QuoteDetail ToEntity(IndicoEntities context)
        {
            return (from o in context.QuoteDetail
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToQuoteDetail(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.QuoteDetail obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToQuoteDetail(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.QuoteDetail obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.QuoteDetail obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.QuoteDetailBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.QuoteDetailBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.QuoteDetail> oQuery =
                        from o in context.QuoteDetail
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.QuoteDetail> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.QuoteDetailBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.QuoteDetailBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.QuoteDetailBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.QuoteDetailBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.QuoteDetail> oQuery =
                (from o in context.QuoteDetail
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.QuoteDetailBO> quotedetails = IQueryableToList(oQuery);
            context.Dispose();
            return quotedetails;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.QuoteDetailBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.QuoteDetailBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.QuoteDetailBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.QuoteDetailBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.QuoteDetail> oQuery =
                (from o in context.QuoteDetail
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Pattern == 0 || this.Pattern == o.Pattern.ID) &&
                    (this.Fabric == 0 || this.Fabric == o.Fabric.ID) &&
                    (this.PriceTerm == null || this.PriceTerm == o.PriceTerm.ID) &&
                    (this.DesignType == null || this.DesignType == o.DesignType.ID) &&
                    (this.Unit == null || this.Unit == o.Unit.ID) &&
                    (this.IsGST == null || this.IsGST == o.IsGST) &&
                    (this.GST == null || this.GST == o.GST) &&
                    (this.IndimanPrice == null || this.IndimanPrice == o.IndimanPrice) &&
                    (this.Notes == null || this.Notes == o.Notes) &&
                    (this.DelivaryDate == null || this.DelivaryDate == o.DelivaryDate) &&
                    (this.Qty == 0 || this.Qty == o.Qty) &&
                    (this.DesignFee == null || this.DesignFee == o.DesignFee) &&
                    (this.Quote == 0 || this.Quote == o.Quote.ID) &&
                    (this.VisualLayout == null || this.VisualLayout == o.VisualLayout.ID) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.QuoteDetailBO> quotedetails = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return quotedetails;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.QuoteDetail
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Pattern == 0 || this.Pattern == o.Pattern.ID) &&
                    (this.Fabric == 0 || this.Fabric == o.Fabric.ID) &&
                    (this.PriceTerm == null || this.PriceTerm == o.PriceTerm.ID) &&
                    (this.DesignType == null || this.DesignType == o.DesignType.ID) &&
                    (this.Unit == null || this.Unit == o.Unit.ID) &&
                    (this.IsGST == null || this.IsGST == o.IsGST) &&
                    (this.GST == null || this.GST == o.GST) &&
                    (this.IndimanPrice == null || this.IndimanPrice == o.IndimanPrice) &&
                    (this.Notes == null || this.Notes == o.Notes) &&
                    (this.DelivaryDate == null || this.DelivaryDate == o.DelivaryDate) &&
                    (this.Qty == 0 || this.Qty == o.Qty) &&
                    (this.DesignFee == null || this.DesignFee == o.DesignFee) &&
                    (this.Quote == 0 || this.Quote == o.Quote.ID) &&
                    (this.VisualLayout == null || this.VisualLayout == o.VisualLayout.ID) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.QuoteDetailBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.QuoteDetailBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.QuoteDetailBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.QuoteDetailBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.QuoteDetail> oQuery =
                (from o in context.QuoteDetail
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Pattern == 0 || o.Pattern.ID == this.Pattern) &&
                    (this.Fabric == 0 || o.Fabric.ID == this.Fabric) &&
                    (this.PriceTerm == null || o.PriceTerm.ID == this.PriceTerm) &&
                    (this.DesignType == null || o.DesignType.ID == this.DesignType) &&
                    (this.Unit == null || o.Unit.ID == this.Unit) &&
                    (this.IsGST == null || o.IsGST == this.IsGST) &&
                    (this.GST == null || o.GST == this.GST) &&
                    (this.IndimanPrice == null || o.IndimanPrice == this.IndimanPrice) &&
                    (this.Notes == null || o.Notes.Contains(this.Notes)) &&
                    (this.DelivaryDate == null || o.DelivaryDate == this.DelivaryDate) &&
                    (this.Qty == 0 || o.Qty == this.Qty) &&
                    (this.DesignFee == null || o.DesignFee == this.DesignFee) &&
                    (this.Quote == 0 || o.Quote.ID == this.Quote) &&
                    (this.VisualLayout == null || o.VisualLayout.ID == this.VisualLayout) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.QuoteDetailBO> quotedetails = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return quotedetails;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.QuoteDetail
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Pattern == 0 || o.Pattern.ID == this.Pattern) &&
                    (this.Fabric == 0 || o.Fabric.ID == this.Fabric) &&
                    (this.PriceTerm == null || o.PriceTerm.ID == this.PriceTerm) &&
                    (this.DesignType == null || o.DesignType.ID == this.DesignType) &&
                    (this.Unit == null || o.Unit.ID == this.Unit) &&
                    (this.IsGST == null || o.IsGST == this.IsGST) &&
                    (this.GST == null || o.GST == this.GST) &&
                    (this.IndimanPrice == null || o.IndimanPrice == this.IndimanPrice) &&
                    (this.Notes == null || o.Notes.Contains(this.Notes)) &&
                    (this.DelivaryDate == null || o.DelivaryDate == this.DelivaryDate) &&
                    (this.Qty == 0 || o.Qty == this.Qty) &&
                    (this.DesignFee == null || o.DesignFee == this.DesignFee) &&
                    (this.Quote == 0 || o.Quote.ID == this.Quote) &&
                    (this.VisualLayout == null || o.VisualLayout.ID == this.VisualLayout) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.QuoteDetailBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.QuoteDetailBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.QuoteDetailBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.QuoteDetailBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.QuoteDetail> oQuery =
                (from o in context.QuoteDetail
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Pattern == 0 || this.Pattern == o.Pattern.ID) && 
                    (this.Fabric == 0 || this.Fabric == o.Fabric.ID) && 
                    (this.PriceTerm == null || this.PriceTerm == o.PriceTerm.ID) && 
                    (this.DesignType == null || this.DesignType == o.DesignType.ID) && 
                    (this.Unit == null || this.Unit == o.Unit.ID) && 
                    (this.IsGST == null || this.IsGST == o.IsGST) && 
                    (this.GST == null || this.GST == o.GST) && 
                    (this.IndimanPrice == null || this.IndimanPrice == o.IndimanPrice) && 
                    (this.DelivaryDate == null || this.DelivaryDate == o.DelivaryDate) && 
                    (this.Qty == 0 || this.Qty == o.Qty) && 
                    (this.DesignFee == null || this.DesignFee == o.DesignFee) && 
                    (this.Quote == 0 || this.Quote == o.Quote.ID) && 
                    (this.VisualLayout == null || this.VisualLayout == o.VisualLayout.ID) && 
                    ((o.Notes.Contains(this.Notes)) ||
                    (this.Notes == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.QuoteDetailBO> quotedetails = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return quotedetails;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.QuoteDetail
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Pattern == 0 || this.Pattern == o.Pattern.ID) && 
                    (this.Fabric == 0 || this.Fabric == o.Fabric.ID) && 
                    (this.PriceTerm == null || this.PriceTerm == o.PriceTerm.ID) && 
                    (this.DesignType == null || this.DesignType == o.DesignType.ID) && 
                    (this.Unit == null || this.Unit == o.Unit.ID) && 
                    (this.IsGST == null || this.IsGST == o.IsGST) && 
                    (this.GST == null || this.GST == o.GST) && 
                    (this.IndimanPrice == null || this.IndimanPrice == o.IndimanPrice) && 
                    (this.DelivaryDate == null || this.DelivaryDate == o.DelivaryDate) && 
                    (this.Qty == 0 || this.Qty == o.Qty) && 
                    (this.DesignFee == null || this.DesignFee == o.DesignFee) && 
                    (this.Quote == 0 || this.Quote == o.Quote.ID) && 
                    (this.VisualLayout == null || this.VisualLayout == o.VisualLayout.ID) && 
                    ((o.Notes.Contains(this.Notes)) ||
                    (this.Notes == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.QuoteDetailBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.QuoteDetailBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.QuoteDetailBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.QuoteDetailBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.QuoteDetailBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.QuoteDetailBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnQuoteDetailBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("QuoteDetailBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnQuoteDetailBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnQuoteDetailBOIDChanged();
        partial void OnQuoteDetailBOIDChanging(int value);
        
        partial void OnPatternChanged()
        {
            OnQuoteDetailBOPatternChanged();
        }
        
        partial void OnPatternChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("QuoteDetailBO.Pattern must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnQuoteDetailBOPatternChanging(value);
        }
        partial void OnPatternChanged();
        partial void OnPatternChanging(int value);
        partial void OnQuoteDetailBOPatternChanged();
        partial void OnQuoteDetailBOPatternChanging(int value);
        
        partial void OnFabricChanged()
        {
            OnQuoteDetailBOFabricChanged();
        }
        
        partial void OnFabricChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("QuoteDetailBO.Fabric must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnQuoteDetailBOFabricChanging(value);
        }
        partial void OnFabricChanged();
        partial void OnFabricChanging(int value);
        partial void OnQuoteDetailBOFabricChanged();
        partial void OnQuoteDetailBOFabricChanging(int value);
        
        partial void OnPriceTermChanged()
        {
            OnQuoteDetailBOPriceTermChanged();
        }
        
        partial void OnPriceTermChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("QuoteDetailBO.PriceTerm must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnQuoteDetailBOPriceTermChanging(value);
        }
        partial void OnPriceTermChanged();
        partial void OnPriceTermChanging(int? value);
        partial void OnQuoteDetailBOPriceTermChanged();
        partial void OnQuoteDetailBOPriceTermChanging(int? value);
        
        partial void OnDesignTypeChanged()
        {
            OnQuoteDetailBODesignTypeChanged();
        }
        
        partial void OnDesignTypeChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("QuoteDetailBO.DesignType must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnQuoteDetailBODesignTypeChanging(value);
        }
        partial void OnDesignTypeChanged();
        partial void OnDesignTypeChanging(int? value);
        partial void OnQuoteDetailBODesignTypeChanged();
        partial void OnQuoteDetailBODesignTypeChanging(int? value);
        
        partial void OnUnitChanged()
        {
            OnQuoteDetailBOUnitChanged();
        }
        
        partial void OnUnitChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("QuoteDetailBO.Unit must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnQuoteDetailBOUnitChanging(value);
        }
        partial void OnUnitChanged();
        partial void OnUnitChanging(int? value);
        partial void OnQuoteDetailBOUnitChanged();
        partial void OnQuoteDetailBOUnitChanging(int? value);
        
        partial void OnIsGSTChanged()
        {
            OnQuoteDetailBOIsGSTChanged();
        }
        
        partial void OnIsGSTChanging(bool? value)
        {
            OnQuoteDetailBOIsGSTChanging(value);
        }
        partial void OnIsGSTChanged();
        partial void OnIsGSTChanging(bool? value);
        partial void OnQuoteDetailBOIsGSTChanged();
        partial void OnQuoteDetailBOIsGSTChanging(bool? value);
        
        partial void OnGSTChanged()
        {
            OnQuoteDetailBOGSTChanged();
        }
        
        partial void OnGSTChanging(decimal? value)
        {
            OnQuoteDetailBOGSTChanging(value);
        }
        partial void OnGSTChanged();
        partial void OnGSTChanging(decimal? value);
        partial void OnQuoteDetailBOGSTChanged();
        partial void OnQuoteDetailBOGSTChanging(decimal? value);
        
        partial void OnIndimanPriceChanged()
        {
            OnQuoteDetailBOIndimanPriceChanged();
        }
        
        partial void OnIndimanPriceChanging(decimal? value)
        {
            OnQuoteDetailBOIndimanPriceChanging(value);
        }
        partial void OnIndimanPriceChanged();
        partial void OnIndimanPriceChanging(decimal? value);
        partial void OnQuoteDetailBOIndimanPriceChanged();
        partial void OnQuoteDetailBOIndimanPriceChanging(decimal? value);
        
        partial void OnNotesChanged()
        {
            OnQuoteDetailBONotesChanged();
        }
        
        partial void OnNotesChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("QuoteDetailBO.Notes has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnQuoteDetailBONotesChanging(value);
        }
        partial void OnNotesChanged();
        partial void OnNotesChanging(string value);
        partial void OnQuoteDetailBONotesChanged();
        partial void OnQuoteDetailBONotesChanging(string value);
        
        partial void OnDelivaryDateChanged()
        {
            OnQuoteDetailBODelivaryDateChanged();
        }
        
        partial void OnDelivaryDateChanging(DateTime? value)
        {
            OnQuoteDetailBODelivaryDateChanging(value);
        }
        partial void OnDelivaryDateChanged();
        partial void OnDelivaryDateChanging(DateTime? value);
        partial void OnQuoteDetailBODelivaryDateChanged();
        partial void OnQuoteDetailBODelivaryDateChanging(DateTime? value);
        
        partial void OnQtyChanged()
        {
            OnQuoteDetailBOQtyChanged();
        }
        
        partial void OnQtyChanging(int value)
        {
            OnQuoteDetailBOQtyChanging(value);
        }
        partial void OnQtyChanged();
        partial void OnQtyChanging(int value);
        partial void OnQuoteDetailBOQtyChanged();
        partial void OnQuoteDetailBOQtyChanging(int value);
        
        partial void OnDesignFeeChanged()
        {
            OnQuoteDetailBODesignFeeChanged();
        }
        
        partial void OnDesignFeeChanging(decimal? value)
        {
            OnQuoteDetailBODesignFeeChanging(value);
        }
        partial void OnDesignFeeChanged();
        partial void OnDesignFeeChanging(decimal? value);
        partial void OnQuoteDetailBODesignFeeChanged();
        partial void OnQuoteDetailBODesignFeeChanging(decimal? value);
        
        partial void OnQuoteChanged()
        {
            OnQuoteDetailBOQuoteChanged();
        }
        
        partial void OnQuoteChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("QuoteDetailBO.Quote must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnQuoteDetailBOQuoteChanging(value);
        }
        partial void OnQuoteChanged();
        partial void OnQuoteChanging(int value);
        partial void OnQuoteDetailBOQuoteChanged();
        partial void OnQuoteDetailBOQuoteChanging(int value);
        
        partial void OnVisualLayoutChanged()
        {
            OnQuoteDetailBOVisualLayoutChanged();
        }
        
        partial void OnVisualLayoutChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("QuoteDetailBO.VisualLayout must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnQuoteDetailBOVisualLayoutChanging(value);
        }
        partial void OnVisualLayoutChanged();
        partial void OnVisualLayoutChanging(int? value);
        partial void OnQuoteDetailBOVisualLayoutChanged();
        partial void OnQuoteDetailBOVisualLayoutChanging(int? value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.QuoteDetailBO))
                return 1;
            Indico.BusinessObjects.QuoteDetailBOComparer c = new Indico.BusinessObjects.QuoteDetailBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.QuoteDetailBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.QuoteDetail)sender);
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region QuoteDetailBOComparer
    public class QuoteDetailBOComparer : IComparer<Indico.BusinessObjects.QuoteDetailBO>
    {
        private string propertyToCompareName;
        public QuoteDetailBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.QuoteDetailBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.QuoteDetailBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public QuoteDetailBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.QuoteDetailBO> Members
        public int Compare(Indico.BusinessObjects.QuoteDetailBO x, Indico.BusinessObjects.QuoteDetailBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.QuoteDetailBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.QuoteDetailBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.QuoteDetailBO x, Indico.BusinessObjects.QuoteDetailBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
