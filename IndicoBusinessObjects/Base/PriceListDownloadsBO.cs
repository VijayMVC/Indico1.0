// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class PriceListDownloadsBO : BusinessObject, IComparable
    {
        #region fields
        #region Scalar Fields
        private int id;
        private DateTime _createdDate = DateTime.MinValue;
        private decimal? _creativeDesign;
        private int _creator;
        private int? _distributor;
        private bool _editedPrice;
        private string _fileName;
        private decimal? _position1;
        private decimal? _position2;
        private decimal? _position3;
        private int _priceTerm;
        private decimal? _studioDesign;
        private decimal? _thirdPartyDesign;
        #endregion
        
        #region Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objCreator;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.CompanyBO _objDistributor;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.PriceTermBO _objPriceTerm;
        #endregion
        
        #region Foreign Table Foreign Key fields
        #endregion
        
        #region Other fields
        
        private Indico.DAL.PriceListDownloads _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>.</summary>
        public DateTime CreatedDate
        {   
            get {return _createdDate;}
            set 
            {
                OnCreatedDateChanging(value);
                _createdDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CreatedDate = value;
                }
                OnCreatedDateChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? CreativeDesign
        {   
            get {return _creativeDesign;}
            set 
            {
                OnCreativeDesignChanging(value);
                _creativeDesign = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CreativeDesign = value;
                }
                OnCreativeDesignChanged();
            }
        }
        /// <summary>.</summary>
        public int Creator
        {   
            get {return _creator;}
            set 
            {
                OnCreatorChanging(value);
                _creator = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Creator = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Creator = null;
                OnCreatorChanged();
            }
        }
        /// <summary>.</summary>
        public int? Distributor
        {   
            get {return _distributor;}
            set 
            {
                OnDistributorChanging(value);
                _distributor = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.Distributor = (from o in this._context.Context.Company
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Company>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Distributor = null;
                OnDistributorChanged();
            }
        }
        /// <summary>.</summary>
        public bool EditedPrice
        {   
            get {return _editedPrice;}
            set 
            {
                OnEditedPriceChanging(value);
                _editedPrice = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.EditedPrice = value;
                }
                OnEditedPriceChanged();
            }
        }
        /// <summary>. The maximum length of this property is 256.</summary>
        public string FileName
        {   
            get {return _fileName;}
            set 
            {
                OnFileNameChanging(value);
                _fileName = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.FileName = value;
                }
                OnFileNameChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? Position1
        {   
            get {return _position1;}
            set 
            {
                OnPosition1Changing(value);
                _position1 = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Position1 = value;
                }
                OnPosition1Changed();
            }
        }
        /// <summary>.</summary>
        public decimal? Position2
        {   
            get {return _position2;}
            set 
            {
                OnPosition2Changing(value);
                _position2 = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Position2 = value;
                }
                OnPosition2Changed();
            }
        }
        /// <summary>.</summary>
        public decimal? Position3
        {   
            get {return _position3;}
            set 
            {
                OnPosition3Changing(value);
                _position3 = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Position3 = value;
                }
                OnPosition3Changed();
            }
        }
        /// <summary>.</summary>
        public int PriceTerm
        {   
            get {return _priceTerm;}
            set 
            {
                OnPriceTermChanging(value);
                _priceTerm = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.PriceTerm = (from o in this._context.Context.PriceTerm
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.PriceTerm>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.PriceTerm = null;
                OnPriceTermChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? StudioDesign
        {   
            get {return _studioDesign;}
            set 
            {
                OnStudioDesignChanging(value);
                _studioDesign = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.StudioDesign = value;
                }
                OnStudioDesignChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? ThirdPartyDesign
        {   
            get {return _thirdPartyDesign;}
            set 
            {
                OnThirdPartyDesignChanging(value);
                _thirdPartyDesign = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ThirdPartyDesign = value;
                }
                OnThirdPartyDesignChanged();
            }
        }
        
        internal Indico.DAL.PriceListDownloads ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        ///<summary>The UserBO object identified by the value of Creator</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objCreator
        {
            get
            {
                if ( _creator > 0 && _objCreator == null)
                {
                        if (this._context == null)
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objCreator.ID = _creator;
                        _objCreator.GetObject(); 
                }
                return _objCreator;
            }
            set
            { 
                _objCreator = value;
                _creator = _objCreator.ID;
            }
        }
        ///<summary>The CompanyBO object identified by the value of Distributor</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.CompanyBO objDistributor
        {
            get
            {
                if (_distributor != null && _distributor > 0 && _objDistributor == null)
                {
                        if (this._context == null)
                        {
                            _objDistributor = new Indico.BusinessObjects.CompanyBO();
                        }
                        else
                        {
                            _objDistributor = new Indico.BusinessObjects.CompanyBO(ref this._context);
                        }
                        _objDistributor.ID = Convert.ToInt32(_distributor);
                        _objDistributor.GetObject(); 
                }
                return _objDistributor;
            }
            set
            { 
                _objDistributor = value;
                _distributor = _objDistributor.ID;
            }
        }
        ///<summary>The PriceTermBO object identified by the value of PriceTerm</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.PriceTermBO objPriceTerm
        {
            get
            {
                if ( _priceTerm > 0 && _objPriceTerm == null)
                {
                        if (this._context == null)
                        {
                            _objPriceTerm = new Indico.BusinessObjects.PriceTermBO();
                        }
                        else
                        {
                            _objPriceTerm = new Indico.BusinessObjects.PriceTermBO(ref this._context);
                        }
                        _objPriceTerm.ID = _priceTerm;
                        _objPriceTerm.GetObject(); 
                }
                return _objPriceTerm;
            }
            set
            { 
                _objPriceTerm = value;
                _priceTerm = _objPriceTerm.ID;
            }
        }
        #endregion
        
        #region Foreign Object Foreign Key Collections
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the PriceListDownloadsBO class using the supplied Indico.DAL.PriceListDownloads. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.PriceListDownloads whose properties will be used to initialise the PriceListDownloadsBO</param>
        internal PriceListDownloadsBO(Indico.DAL.PriceListDownloads obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.PriceListDownloads 
            this.ID = obj.ID;
            
            this.CreatedDate = obj.CreatedDate;
            this.CreativeDesign = obj.CreativeDesign;
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Distributor = (obj.DistributorReference.EntityKey != null && obj.DistributorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.DistributorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.EditedPrice = obj.EditedPrice;
            this.FileName = obj.FileName;
            this.Position1 = obj.Position1;
            this.Position2 = obj.Position2;
            this.Position3 = obj.Position3;
            this.PriceTerm = (obj.PriceTermReference.EntityKey != null && obj.PriceTermReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PriceTermReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.StudioDesign = obj.StudioDesign;
            this.ThirdPartyDesign = obj.ThirdPartyDesign;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.PriceListDownloads SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.PriceListDownloads properties
            Indico.DAL.PriceListDownloads obj = new Indico.DAL.PriceListDownloads();
            
            if (this.ID > 0)
            {
                obj = context.PriceListDownloads.FirstOrDefault<PriceListDownloads>(o => o.ID == this.ID);
            }
            
            obj.CreatedDate = this.CreatedDate;
            obj.CreativeDesign = this.CreativeDesign;
            obj.EditedPrice = this.EditedPrice;
            obj.FileName = this.FileName;
            obj.Position1 = this.Position1;
            obj.Position2 = this.Position2;
            obj.Position3 = this.Position3;
            obj.StudioDesign = this.StudioDesign;
            obj.ThirdPartyDesign = this.ThirdPartyDesign;
            
            if (this.Creator > 0) obj.Creator = context.User.FirstOrDefault(o => o.ID == this.Creator);
            if (this.Distributor != null && this.Distributor > 0) obj.Distributor = context.Company.FirstOrDefault(o => o.ID == this.Distributor);
            if (this.PriceTerm > 0) obj.PriceTerm = context.PriceTerm.FirstOrDefault(o => o.ID == this.PriceTerm);
            
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.PriceListDownloads))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.PriceListDownloads obj = (Indico.DAL.PriceListDownloads)eObj;
            
            // set the Indico.BusinessObjects.PriceListDownloadsBO properties
            this.ID = obj.ID;
            
            this.CreatedDate = obj.CreatedDate;
            this.CreativeDesign = obj.CreativeDesign;
            this.EditedPrice = obj.EditedPrice;
            this.FileName = obj.FileName;
            this.Position1 = obj.Position1;
            this.Position2 = obj.Position2;
            this.Position3 = obj.Position3;
            this.StudioDesign = obj.StudioDesign;
            this.ThirdPartyDesign = obj.ThirdPartyDesign;
            
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Distributor = (obj.DistributorReference.EntityKey != null && obj.DistributorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.DistributorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.PriceTerm = (obj.PriceTermReference.EntityKey != null && obj.PriceTermReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PriceTermReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.PriceListDownloadsBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.PriceListDownloadsBO properties
            this.ID = obj.ID;
            
            this.CreatedDate = obj.CreatedDate;
            this.CreativeDesign = obj.CreativeDesign;
            this.Creator = obj.Creator;
            this.Distributor = obj.Distributor;
            this.EditedPrice = obj.EditedPrice;
            this.FileName = obj.FileName;
            this.Position1 = obj.Position1;
            this.Position2 = obj.Position2;
            this.Position3 = obj.Position3;
            this.PriceTerm = obj.PriceTerm;
            this.StudioDesign = obj.StudioDesign;
            this.ThirdPartyDesign = obj.ThirdPartyDesign;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.PriceListDownloadsBO> IQueryableToList(IQueryable<Indico.DAL.PriceListDownloads> oQuery)
        {
            List<Indico.DAL.PriceListDownloads> oList = oQuery.ToList();
            List<Indico.BusinessObjects.PriceListDownloadsBO> rList = new List<Indico.BusinessObjects.PriceListDownloadsBO>(oList.Count);
            foreach (Indico.DAL.PriceListDownloads o in oList)
            {
                Indico.BusinessObjects.PriceListDownloadsBO obj = new Indico.BusinessObjects.PriceListDownloadsBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.PriceListDownloadsBO> ToList(IEnumerable<Indico.DAL.PriceListDownloads> oQuery)
        {
            List<Indico.DAL.PriceListDownloads> oList = oQuery.ToList();
            List<Indico.BusinessObjects.PriceListDownloadsBO> rList = new List<Indico.BusinessObjects.PriceListDownloadsBO>(oList.Count);
            foreach (Indico.DAL.PriceListDownloads o in oList)
            {
                Indico.BusinessObjects.PriceListDownloadsBO obj = new Indico.BusinessObjects.PriceListDownloadsBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.PriceListDownloads> ToEntityList(List<PriceListDownloadsBO> bos, IndicoEntities context)
        {
            // build a List of PriceListDownloads entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.PriceListDownloads.Count() == 0) ? new List<Indico.DAL.PriceListDownloads>() : (context.PriceListDownloads.Where(BuildContainsExpression<PriceListDownloads, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.PriceListDownloads>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.PriceListDownloads> ToEntityCollection(List<PriceListDownloadsBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of PriceListDownloads entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.PriceListDownloads> el = (context.PriceListDownloads.Count() == 0) ? new List<Indico.DAL.PriceListDownloads>() : 
                context.PriceListDownloads.Where(BuildContainsExpression<PriceListDownloads, int>(e => e.ID, ids))
                .ToList<Indico.DAL.PriceListDownloads>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.PriceListDownloads> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.PriceListDownloads>();
                
            foreach (Indico.DAL.PriceListDownloads r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.PriceListDownloads ToEntity(IndicoEntities context)
        {
            return (from o in context.PriceListDownloads
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToPriceListDownloads(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.PriceListDownloads obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToPriceListDownloads(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.PriceListDownloads obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.PriceListDownloads obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.PriceListDownloadsBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.PriceListDownloadsBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.PriceListDownloads> oQuery =
                        from o in context.PriceListDownloads
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.PriceListDownloads> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.PriceListDownloadsBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.PriceListDownloadsBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PriceListDownloadsBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PriceListDownloadsBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.PriceListDownloads> oQuery =
                (from o in context.PriceListDownloads
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PriceListDownloadsBO> pricelistdownloadss = IQueryableToList(oQuery);
            context.Dispose();
            return pricelistdownloadss;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.PriceListDownloadsBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.PriceListDownloadsBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PriceListDownloadsBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PriceListDownloadsBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.PriceListDownloads> oQuery =
                (from o in context.PriceListDownloads
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Distributor == null || this.Distributor == o.Distributor.ID) &&
                    (this.PriceTerm == 0 || this.PriceTerm == o.PriceTerm.ID) &&
                    (this.EditedPrice == false || this.EditedPrice == o.EditedPrice) &&
                    (this.CreativeDesign == null || this.CreativeDesign == o.CreativeDesign) &&
                    (this.StudioDesign == null || this.StudioDesign == o.StudioDesign) &&
                    (this.ThirdPartyDesign == null || this.ThirdPartyDesign == o.ThirdPartyDesign) &&
                    (this.Position1 == null || this.Position1 == o.Position1) &&
                    (this.Position2 == null || this.Position2 == o.Position2) &&
                    (this.Position3 == null || this.Position3 == o.Position3) &&
                    (this.FileName == null || this.FileName == o.FileName) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PriceListDownloadsBO> pricelistdownloadss = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return pricelistdownloadss;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.PriceListDownloads
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Distributor == null || this.Distributor == o.Distributor.ID) &&
                    (this.PriceTerm == 0 || this.PriceTerm == o.PriceTerm.ID) &&
                    (this.EditedPrice == false || this.EditedPrice == o.EditedPrice) &&
                    (this.CreativeDesign == null || this.CreativeDesign == o.CreativeDesign) &&
                    (this.StudioDesign == null || this.StudioDesign == o.StudioDesign) &&
                    (this.ThirdPartyDesign == null || this.ThirdPartyDesign == o.ThirdPartyDesign) &&
                    (this.Position1 == null || this.Position1 == o.Position1) &&
                    (this.Position2 == null || this.Position2 == o.Position2) &&
                    (this.Position3 == null || this.Position3 == o.Position3) &&
                    (this.FileName == null || this.FileName == o.FileName) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.PriceListDownloadsBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.PriceListDownloadsBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PriceListDownloadsBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PriceListDownloadsBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.PriceListDownloads> oQuery =
                (from o in context.PriceListDownloads
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Distributor == null || o.Distributor.ID == this.Distributor) &&
                    (this.PriceTerm == 0 || o.PriceTerm.ID == this.PriceTerm) &&
                    (this.EditedPrice == false || o.EditedPrice == this.EditedPrice) &&
                    (this.CreativeDesign == null || o.CreativeDesign == this.CreativeDesign) &&
                    (this.StudioDesign == null || o.StudioDesign == this.StudioDesign) &&
                    (this.ThirdPartyDesign == null || o.ThirdPartyDesign == this.ThirdPartyDesign) &&
                    (this.Position1 == null || o.Position1 == this.Position1) &&
                    (this.Position2 == null || o.Position2 == this.Position2) &&
                    (this.Position3 == null || o.Position3 == this.Position3) &&
                    (this.FileName == null || o.FileName.Contains(this.FileName)) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PriceListDownloadsBO> pricelistdownloadss = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return pricelistdownloadss;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.PriceListDownloads
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Distributor == null || o.Distributor.ID == this.Distributor) &&
                    (this.PriceTerm == 0 || o.PriceTerm.ID == this.PriceTerm) &&
                    (this.EditedPrice == false || o.EditedPrice == this.EditedPrice) &&
                    (this.CreativeDesign == null || o.CreativeDesign == this.CreativeDesign) &&
                    (this.StudioDesign == null || o.StudioDesign == this.StudioDesign) &&
                    (this.ThirdPartyDesign == null || o.ThirdPartyDesign == this.ThirdPartyDesign) &&
                    (this.Position1 == null || o.Position1 == this.Position1) &&
                    (this.Position2 == null || o.Position2 == this.Position2) &&
                    (this.Position3 == null || o.Position3 == this.Position3) &&
                    (this.FileName == null || o.FileName.Contains(this.FileName)) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.PriceListDownloadsBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.PriceListDownloadsBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PriceListDownloadsBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PriceListDownloadsBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.PriceListDownloads> oQuery =
                (from o in context.PriceListDownloads
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Distributor == null || this.Distributor == o.Distributor.ID) && 
                    (this.PriceTerm == 0 || this.PriceTerm == o.PriceTerm.ID) && 
                    (this.EditedPrice == false || this.EditedPrice == o.EditedPrice) && 
                    (this.CreativeDesign == null || this.CreativeDesign == o.CreativeDesign) && 
                    (this.StudioDesign == null || this.StudioDesign == o.StudioDesign) && 
                    (this.ThirdPartyDesign == null || this.ThirdPartyDesign == o.ThirdPartyDesign) && 
                    (this.Position1 == null || this.Position1 == o.Position1) && 
                    (this.Position2 == null || this.Position2 == o.Position2) && 
                    (this.Position3 == null || this.Position3 == o.Position3) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    ((o.FileName.Contains(this.FileName)) ||
                    (this.FileName == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PriceListDownloadsBO> pricelistdownloadss = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return pricelistdownloadss;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.PriceListDownloads
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Distributor == null || this.Distributor == o.Distributor.ID) && 
                    (this.PriceTerm == 0 || this.PriceTerm == o.PriceTerm.ID) && 
                    (this.EditedPrice == false || this.EditedPrice == o.EditedPrice) && 
                    (this.CreativeDesign == null || this.CreativeDesign == o.CreativeDesign) && 
                    (this.StudioDesign == null || this.StudioDesign == o.StudioDesign) && 
                    (this.ThirdPartyDesign == null || this.ThirdPartyDesign == o.ThirdPartyDesign) && 
                    (this.Position1 == null || this.Position1 == o.Position1) && 
                    (this.Position2 == null || this.Position2 == o.Position2) && 
                    (this.Position3 == null || this.Position3 == o.Position3) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    ((o.FileName.Contains(this.FileName)) ||
                    (this.FileName == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.PriceListDownloadsBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.PriceListDownloadsBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.PriceListDownloadsBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.PriceListDownloadsBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.PriceListDownloadsBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.PriceListDownloadsBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnPriceListDownloadsBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PriceListDownloadsBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPriceListDownloadsBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnPriceListDownloadsBOIDChanged();
        partial void OnPriceListDownloadsBOIDChanging(int value);
        
        partial void OnDistributorChanged()
        {
            OnPriceListDownloadsBODistributorChanged();
        }
        
        partial void OnDistributorChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("PriceListDownloadsBO.Distributor must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPriceListDownloadsBODistributorChanging(value);
        }
        partial void OnDistributorChanged();
        partial void OnDistributorChanging(int? value);
        partial void OnPriceListDownloadsBODistributorChanged();
        partial void OnPriceListDownloadsBODistributorChanging(int? value);
        
        partial void OnPriceTermChanged()
        {
            OnPriceListDownloadsBOPriceTermChanged();
        }
        
        partial void OnPriceTermChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PriceListDownloadsBO.PriceTerm must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPriceListDownloadsBOPriceTermChanging(value);
        }
        partial void OnPriceTermChanged();
        partial void OnPriceTermChanging(int value);
        partial void OnPriceListDownloadsBOPriceTermChanged();
        partial void OnPriceListDownloadsBOPriceTermChanging(int value);
        
        partial void OnEditedPriceChanged()
        {
            OnPriceListDownloadsBOEditedPriceChanged();
        }
        
        partial void OnEditedPriceChanging(bool value)
        {
            OnPriceListDownloadsBOEditedPriceChanging(value);
        }
        partial void OnEditedPriceChanged();
        partial void OnEditedPriceChanging(bool value);
        partial void OnPriceListDownloadsBOEditedPriceChanged();
        partial void OnPriceListDownloadsBOEditedPriceChanging(bool value);
        
        partial void OnCreativeDesignChanged()
        {
            OnPriceListDownloadsBOCreativeDesignChanged();
        }
        
        partial void OnCreativeDesignChanging(decimal? value)
        {
            OnPriceListDownloadsBOCreativeDesignChanging(value);
        }
        partial void OnCreativeDesignChanged();
        partial void OnCreativeDesignChanging(decimal? value);
        partial void OnPriceListDownloadsBOCreativeDesignChanged();
        partial void OnPriceListDownloadsBOCreativeDesignChanging(decimal? value);
        
        partial void OnStudioDesignChanged()
        {
            OnPriceListDownloadsBOStudioDesignChanged();
        }
        
        partial void OnStudioDesignChanging(decimal? value)
        {
            OnPriceListDownloadsBOStudioDesignChanging(value);
        }
        partial void OnStudioDesignChanged();
        partial void OnStudioDesignChanging(decimal? value);
        partial void OnPriceListDownloadsBOStudioDesignChanged();
        partial void OnPriceListDownloadsBOStudioDesignChanging(decimal? value);
        
        partial void OnThirdPartyDesignChanged()
        {
            OnPriceListDownloadsBOThirdPartyDesignChanged();
        }
        
        partial void OnThirdPartyDesignChanging(decimal? value)
        {
            OnPriceListDownloadsBOThirdPartyDesignChanging(value);
        }
        partial void OnThirdPartyDesignChanged();
        partial void OnThirdPartyDesignChanging(decimal? value);
        partial void OnPriceListDownloadsBOThirdPartyDesignChanged();
        partial void OnPriceListDownloadsBOThirdPartyDesignChanging(decimal? value);
        
        partial void OnPosition1Changed()
        {
            OnPriceListDownloadsBOPosition1Changed();
        }
        
        partial void OnPosition1Changing(decimal? value)
        {
            OnPriceListDownloadsBOPosition1Changing(value);
        }
        partial void OnPosition1Changed();
        partial void OnPosition1Changing(decimal? value);
        partial void OnPriceListDownloadsBOPosition1Changed();
        partial void OnPriceListDownloadsBOPosition1Changing(decimal? value);
        
        partial void OnPosition2Changed()
        {
            OnPriceListDownloadsBOPosition2Changed();
        }
        
        partial void OnPosition2Changing(decimal? value)
        {
            OnPriceListDownloadsBOPosition2Changing(value);
        }
        partial void OnPosition2Changed();
        partial void OnPosition2Changing(decimal? value);
        partial void OnPriceListDownloadsBOPosition2Changed();
        partial void OnPriceListDownloadsBOPosition2Changing(decimal? value);
        
        partial void OnPosition3Changed()
        {
            OnPriceListDownloadsBOPosition3Changed();
        }
        
        partial void OnPosition3Changing(decimal? value)
        {
            OnPriceListDownloadsBOPosition3Changing(value);
        }
        partial void OnPosition3Changed();
        partial void OnPosition3Changing(decimal? value);
        partial void OnPriceListDownloadsBOPosition3Changed();
        partial void OnPriceListDownloadsBOPosition3Changing(decimal? value);
        
        partial void OnFileNameChanged()
        {
            OnPriceListDownloadsBOFileNameChanged();
        }
        
        partial void OnFileNameChanging(string value)
        {
            if (value != null && value.Length > 256)
            {
                throw new Exception(String.Format("PriceListDownloadsBO.FileName has a maximum length of 256. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPriceListDownloadsBOFileNameChanging(value);
        }
        partial void OnFileNameChanged();
        partial void OnFileNameChanging(string value);
        partial void OnPriceListDownloadsBOFileNameChanged();
        partial void OnPriceListDownloadsBOFileNameChanging(string value);
        
        partial void OnCreatorChanged()
        {
            OnPriceListDownloadsBOCreatorChanged();
        }
        
        partial void OnCreatorChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PriceListDownloadsBO.Creator must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPriceListDownloadsBOCreatorChanging(value);
        }
        partial void OnCreatorChanged();
        partial void OnCreatorChanging(int value);
        partial void OnPriceListDownloadsBOCreatorChanged();
        partial void OnPriceListDownloadsBOCreatorChanging(int value);
        
        partial void OnCreatedDateChanged()
        {
            OnPriceListDownloadsBOCreatedDateChanged();
        }
        
        partial void OnCreatedDateChanging(DateTime value)
        {
            OnPriceListDownloadsBOCreatedDateChanging(value);
        }
        partial void OnCreatedDateChanged();
        partial void OnCreatedDateChanging(DateTime value);
        partial void OnPriceListDownloadsBOCreatedDateChanged();
        partial void OnPriceListDownloadsBOCreatedDateChanging(DateTime value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.PriceListDownloadsBO))
                return 1;
            Indico.BusinessObjects.PriceListDownloadsBOComparer c = new Indico.BusinessObjects.PriceListDownloadsBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.PriceListDownloadsBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.PriceListDownloads)sender);
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region PriceListDownloadsBOComparer
    public class PriceListDownloadsBOComparer : IComparer<Indico.BusinessObjects.PriceListDownloadsBO>
    {
        private string propertyToCompareName;
        public PriceListDownloadsBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.PriceListDownloadsBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.PriceListDownloadsBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public PriceListDownloadsBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.PriceListDownloadsBO> Members
        public int Compare(Indico.BusinessObjects.PriceListDownloadsBO x, Indico.BusinessObjects.PriceListDownloadsBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.PriceListDownloadsBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.PriceListDownloadsBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.PriceListDownloadsBO x, Indico.BusinessObjects.PriceListDownloadsBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
