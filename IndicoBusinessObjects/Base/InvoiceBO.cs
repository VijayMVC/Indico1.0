// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class InvoiceBO : BusinessObject, IComparable
    {
        #region fields
        #region Scalar Fields
        private int id;
        private string _aWBNo;
        private int _bank;
        private int? _billTo;
        private DateTime _createdDate = DateTime.MinValue;
        private int _creator;
        private DateTime? _indimanInvoiceDate;
        private string _indimanInvoiceNo;
        private DateTime _invoiceDate = DateTime.MinValue;
        private string _invoiceNo = string.Empty;
        private bool? _isBillTo;
        private DateTime _modifiedDate = DateTime.MinValue;
        private int _modifier;
        private DateTime _shipmentDate = DateTime.MinValue;
        private int _shipmentMode;
        private int _shipTo;
        private int _status;
        private int _weeklyProductionCapacity;
        #endregion
        
        #region Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.BankBO _objBank;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.DistributorClientAddressBO _objBillTo;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objCreator;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objModifier;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.ShipmentModeBO _objShipmentMode;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.DistributorClientAddressBO _objShipTo;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.InvoiceStatusBO _objStatus;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.WeeklyProductionCapacityBO _objWeeklyProductionCapacity;
        #endregion
        
        #region Foreign Table Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.InvoiceOrderBO> invoiceOrdersWhereThisIsInvoiceList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _invoiceOrdersWhereThisIsInvoiceLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.OrderBO> ordersWhereThisIsInvoiceList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _ordersWhereThisIsInvoiceLoaded;
        #endregion
        
        #region Other fields
        
        private Indico.DAL.Invoice _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>. The maximum length of this property is 255.</summary>
        public string AWBNo
        {   
            get {return _aWBNo;}
            set 
            {
                OnAWBNoChanging(value);
                _aWBNo = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.AWBNo = value;
                }
                OnAWBNoChanged();
            }
        }
        /// <summary>.</summary>
        public int Bank
        {   
            get {return _bank;}
            set 
            {
                OnBankChanging(value);
                _bank = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Bank = (from o in this._context.Context.Bank
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Bank>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Bank = null;
                OnBankChanged();
            }
        }
        /// <summary>.</summary>
        public int? BillTo
        {   
            get {return _billTo;}
            set 
            {
                OnBillToChanging(value);
                _billTo = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.BillTo = (from o in this._context.Context.DistributorClientAddress
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.DistributorClientAddress>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.BillTo = null;
                OnBillToChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime CreatedDate
        {   
            get {return _createdDate;}
            set 
            {
                OnCreatedDateChanging(value);
                _createdDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CreatedDate = value;
                }
                OnCreatedDateChanged();
            }
        }
        /// <summary>.</summary>
        public int Creator
        {   
            get {return _creator;}
            set 
            {
                OnCreatorChanging(value);
                _creator = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Creator = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Creator = null;
                OnCreatorChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime? IndimanInvoiceDate
        {   
            get {return _indimanInvoiceDate;}
            set 
            {
                OnIndimanInvoiceDateChanging(value);
                _indimanInvoiceDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IndimanInvoiceDate = value;
                }
                OnIndimanInvoiceDateChanged();
            }
        }
        /// <summary>. The maximum length of this property is 64.</summary>
        public string IndimanInvoiceNo
        {   
            get {return _indimanInvoiceNo;}
            set 
            {
                OnIndimanInvoiceNoChanging(value);
                _indimanInvoiceNo = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IndimanInvoiceNo = value;
                }
                OnIndimanInvoiceNoChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime InvoiceDate
        {   
            get {return _invoiceDate;}
            set 
            {
                OnInvoiceDateChanging(value);
                _invoiceDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.InvoiceDate = value;
                }
                OnInvoiceDateChanged();
            }
        }
        /// <summary>. The maximum length of this property is 64.</summary>
        public string InvoiceNo
        {   
            get {return _invoiceNo;}
            set 
            {
                OnInvoiceNoChanging(value);
                _invoiceNo = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.InvoiceNo = value;
                }
                OnInvoiceNoChanged();
            }
        }
        /// <summary>.</summary>
        public bool? IsBillTo
        {   
            get {return _isBillTo;}
            set 
            {
                OnIsBillToChanging(value);
                _isBillTo = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsBillTo = value;
                }
                OnIsBillToChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime ModifiedDate
        {   
            get {return _modifiedDate;}
            set 
            {
                OnModifiedDateChanging(value);
                _modifiedDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ModifiedDate = value;
                }
                OnModifiedDateChanged();
            }
        }
        /// <summary>.</summary>
        public int Modifier
        {   
            get {return _modifier;}
            set 
            {
                OnModifierChanging(value);
                _modifier = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Modifier = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Modifier = null;
                OnModifierChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime ShipmentDate
        {   
            get {return _shipmentDate;}
            set 
            {
                OnShipmentDateChanging(value);
                _shipmentDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ShipmentDate = value;
                }
                OnShipmentDateChanged();
            }
        }
        /// <summary>.</summary>
        public int ShipmentMode
        {   
            get {return _shipmentMode;}
            set 
            {
                OnShipmentModeChanging(value);
                _shipmentMode = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.ShipmentMode = (from o in this._context.Context.ShipmentMode
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.ShipmentMode>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.ShipmentMode = null;
                OnShipmentModeChanged();
            }
        }
        /// <summary>.</summary>
        public int ShipTo
        {   
            get {return _shipTo;}
            set 
            {
                OnShipToChanging(value);
                _shipTo = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.ShipTo = (from o in this._context.Context.DistributorClientAddress
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.DistributorClientAddress>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.ShipTo = null;
                OnShipToChanged();
            }
        }
        /// <summary>.</summary>
        public int Status
        {   
            get {return _status;}
            set 
            {
                OnStatusChanging(value);
                _status = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Status = (from o in this._context.Context.InvoiceStatus
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.InvoiceStatus>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Status = null;
                OnStatusChanged();
            }
        }
        /// <summary>.</summary>
        public int WeeklyProductionCapacity
        {   
            get {return _weeklyProductionCapacity;}
            set 
            {
                OnWeeklyProductionCapacityChanging(value);
                _weeklyProductionCapacity = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.WeeklyProductionCapacity = (from o in this._context.Context.WeeklyProductionCapacity
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.WeeklyProductionCapacity>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.WeeklyProductionCapacity = null;
                OnWeeklyProductionCapacityChanged();
            }
        }
        
        internal Indico.DAL.Invoice ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        ///<summary>The BankBO object identified by the value of Bank</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.BankBO objBank
        {
            get
            {
                if ( _bank > 0 && _objBank == null)
                {
                        if (this._context == null)
                        {
                            _objBank = new Indico.BusinessObjects.BankBO();
                        }
                        else
                        {
                            _objBank = new Indico.BusinessObjects.BankBO(ref this._context);
                        }
                        _objBank.ID = _bank;
                        _objBank.GetObject(); 
                }
                return _objBank;
            }
            set
            { 
                _objBank = value;
                _bank = _objBank.ID;
            }
        }
        ///<summary>The DistributorClientAddressBO object identified by the value of BillTo</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.DistributorClientAddressBO objBillTo
        {
            get
            {
                if (_billTo != null && _billTo > 0 && _objBillTo == null)
                {
                        if (this._context == null)
                        {
                            _objBillTo = new Indico.BusinessObjects.DistributorClientAddressBO();
                        }
                        else
                        {
                            _objBillTo = new Indico.BusinessObjects.DistributorClientAddressBO(ref this._context);
                        }
                        _objBillTo.ID = Convert.ToInt32(_billTo);
                        _objBillTo.GetObject(); 
                }
                return _objBillTo;
            }
            set
            { 
                _objBillTo = value;
                _billTo = _objBillTo.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Creator</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objCreator
        {
            get
            {
                if ( _creator > 0 && _objCreator == null)
                {
                        if (this._context == null)
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objCreator.ID = _creator;
                        _objCreator.GetObject(); 
                }
                return _objCreator;
            }
            set
            { 
                _objCreator = value;
                _creator = _objCreator.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Modifier</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objModifier
        {
            get
            {
                if ( _modifier > 0 && _objModifier == null)
                {
                        if (this._context == null)
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objModifier.ID = _modifier;
                        _objModifier.GetObject(); 
                }
                return _objModifier;
            }
            set
            { 
                _objModifier = value;
                _modifier = _objModifier.ID;
            }
        }
        ///<summary>The ShipmentModeBO object identified by the value of ShipmentMode</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.ShipmentModeBO objShipmentMode
        {
            get
            {
                if ( _shipmentMode > 0 && _objShipmentMode == null)
                {
                        if (this._context == null)
                        {
                            _objShipmentMode = new Indico.BusinessObjects.ShipmentModeBO();
                        }
                        else
                        {
                            _objShipmentMode = new Indico.BusinessObjects.ShipmentModeBO(ref this._context);
                        }
                        _objShipmentMode.ID = _shipmentMode;
                        _objShipmentMode.GetObject(); 
                }
                return _objShipmentMode;
            }
            set
            { 
                _objShipmentMode = value;
                _shipmentMode = _objShipmentMode.ID;
            }
        }
        ///<summary>The DistributorClientAddressBO object identified by the value of ShipTo</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.DistributorClientAddressBO objShipTo
        {
            get
            {
                if ( _shipTo > 0 && _objShipTo == null)
                {
                        if (this._context == null)
                        {
                            _objShipTo = new Indico.BusinessObjects.DistributorClientAddressBO();
                        }
                        else
                        {
                            _objShipTo = new Indico.BusinessObjects.DistributorClientAddressBO(ref this._context);
                        }
                        _objShipTo.ID = _shipTo;
                        _objShipTo.GetObject(); 
                }
                return _objShipTo;
            }
            set
            { 
                _objShipTo = value;
                _shipTo = _objShipTo.ID;
            }
        }
        ///<summary>The InvoiceStatusBO object identified by the value of Status</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.InvoiceStatusBO objStatus
        {
            get
            {
                if ( _status > 0 && _objStatus == null)
                {
                        if (this._context == null)
                        {
                            _objStatus = new Indico.BusinessObjects.InvoiceStatusBO();
                        }
                        else
                        {
                            _objStatus = new Indico.BusinessObjects.InvoiceStatusBO(ref this._context);
                        }
                        _objStatus.ID = _status;
                        _objStatus.GetObject(); 
                }
                return _objStatus;
            }
            set
            { 
                _objStatus = value;
                _status = _objStatus.ID;
            }
        }
        ///<summary>The WeeklyProductionCapacityBO object identified by the value of WeeklyProductionCapacity</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.WeeklyProductionCapacityBO objWeeklyProductionCapacity
        {
            get
            {
                if ( _weeklyProductionCapacity > 0 && _objWeeklyProductionCapacity == null)
                {
                        if (this._context == null)
                        {
                            _objWeeklyProductionCapacity = new Indico.BusinessObjects.WeeklyProductionCapacityBO();
                        }
                        else
                        {
                            _objWeeklyProductionCapacity = new Indico.BusinessObjects.WeeklyProductionCapacityBO(ref this._context);
                        }
                        _objWeeklyProductionCapacity.ID = _weeklyProductionCapacity;
                        _objWeeklyProductionCapacity.GetObject(); 
                }
                return _objWeeklyProductionCapacity;
            }
            set
            { 
                _objWeeklyProductionCapacity = value;
                _weeklyProductionCapacity = _objWeeklyProductionCapacity.ID;
            }
        }
        #endregion
        
        #region Foreign Object Foreign Key Collections
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.InvoiceOrderBO> InvoiceOrdersWhereThisIsInvoice // FK_InvoiceOrder_Invoice
        {
            get
            {
                if (!_invoiceOrdersWhereThisIsInvoiceLoaded)
                {
                    _invoiceOrdersWhereThisIsInvoiceLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Invoice obj = (from o in context.Invoice
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.InvoiceOrdersWhereThisIsInvoice.Load();
                        invoiceOrdersWhereThisIsInvoiceList = new IndicoList<Indico.BusinessObjects.InvoiceOrderBO>(obj.InvoiceOrdersWhereThisIsInvoice.Count);
                        
                        foreach (Indico.DAL.InvoiceOrder o in obj.InvoiceOrdersWhereThisIsInvoice)
                        {
                            Indico.BusinessObjects.InvoiceOrderBO fkObj = new Indico.BusinessObjects.InvoiceOrderBO(o, ref this._context);
                            invoiceOrdersWhereThisIsInvoiceList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        invoiceOrdersWhereThisIsInvoiceList = new IndicoList<Indico.BusinessObjects.InvoiceOrderBO>();
                    }
                    
                    invoiceOrdersWhereThisIsInvoiceList.OnBeforeRemove += new EventHandler(InvoiceOrdersWhereThisIsInvoiceList_OnBeforeRemove);
                    invoiceOrdersWhereThisIsInvoiceList.OnAfterAdd += new EventHandler(InvoiceOrdersWhereThisIsInvoiceList_OnAfterAdd);
                }
                
                return invoiceOrdersWhereThisIsInvoiceList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.OrderBO> OrdersWhereThisIsInvoice // FK_Order_Invoice
        {
            get
            {
                if (!_ordersWhereThisIsInvoiceLoaded)
                {
                    _ordersWhereThisIsInvoiceLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Invoice obj = (from o in context.Invoice
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.OrdersWhereThisIsInvoice.Load();
                        ordersWhereThisIsInvoiceList = new IndicoList<Indico.BusinessObjects.OrderBO>(obj.OrdersWhereThisIsInvoice.Count);
                        
                        foreach (Indico.DAL.Order o in obj.OrdersWhereThisIsInvoice)
                        {
                            Indico.BusinessObjects.OrderBO fkObj = new Indico.BusinessObjects.OrderBO(o, ref this._context);
                            ordersWhereThisIsInvoiceList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        ordersWhereThisIsInvoiceList = new IndicoList<Indico.BusinessObjects.OrderBO>();
                    }
                    
                    ordersWhereThisIsInvoiceList.OnBeforeRemove += new EventHandler(OrdersWhereThisIsInvoiceList_OnBeforeRemove);
                    ordersWhereThisIsInvoiceList.OnAfterAdd += new EventHandler(OrdersWhereThisIsInvoiceList_OnAfterAdd);
                }
                
                return ordersWhereThisIsInvoiceList;
            }
        }
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the InvoiceBO class using the supplied Indico.DAL.Invoice. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.Invoice whose properties will be used to initialise the InvoiceBO</param>
        internal InvoiceBO(Indico.DAL.Invoice obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.Invoice 
            this.ID = obj.ID;
            
            this.AWBNo = obj.AWBNo;
            this.Bank = (obj.BankReference.EntityKey != null && obj.BankReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.BankReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.BillTo = (obj.BillToReference.EntityKey != null && obj.BillToReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.BillToReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.CreatedDate = obj.CreatedDate;
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.IndimanInvoiceDate = obj.IndimanInvoiceDate;
            this.IndimanInvoiceNo = obj.IndimanInvoiceNo;
            this.InvoiceDate = obj.InvoiceDate;
            this.InvoiceNo = obj.InvoiceNo;
            this.IsBillTo = obj.IsBillTo;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.ShipmentDate = obj.ShipmentDate;
            this.ShipmentMode = (obj.ShipmentModeReference.EntityKey != null && obj.ShipmentModeReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ShipmentModeReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.ShipTo = (obj.ShipToReference.EntityKey != null && obj.ShipToReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ShipToReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Status = (obj.StatusReference.EntityKey != null && obj.StatusReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.StatusReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.WeeklyProductionCapacity = (obj.WeeklyProductionCapacityReference.EntityKey != null && obj.WeeklyProductionCapacityReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.WeeklyProductionCapacityReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.Invoice SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.Invoice properties
            Indico.DAL.Invoice obj = new Indico.DAL.Invoice();
            
            if (this.ID > 0)
            {
                obj = context.Invoice.FirstOrDefault<Invoice>(o => o.ID == this.ID);
            }
            
            obj.AWBNo = this.AWBNo;
            obj.CreatedDate = this.CreatedDate;
            obj.IndimanInvoiceDate = this.IndimanInvoiceDate;
            obj.IndimanInvoiceNo = this.IndimanInvoiceNo;
            obj.InvoiceDate = this.InvoiceDate;
            obj.InvoiceNo = this.InvoiceNo;
            obj.IsBillTo = this.IsBillTo;
            obj.ModifiedDate = this.ModifiedDate;
            obj.ShipmentDate = this.ShipmentDate;
            
            if (this.Bank > 0) obj.Bank = context.Bank.FirstOrDefault(o => o.ID == this.Bank);
            if (this.BillTo != null && this.BillTo > 0) obj.BillTo = context.DistributorClientAddress.FirstOrDefault(o => o.ID == this.BillTo);
            if (this.Creator > 0) obj.Creator = context.User.FirstOrDefault(o => o.ID == this.Creator);
            if (this.Modifier > 0) obj.Modifier = context.User.FirstOrDefault(o => o.ID == this.Modifier);
            if (this.ShipmentMode > 0) obj.ShipmentMode = context.ShipmentMode.FirstOrDefault(o => o.ID == this.ShipmentMode);
            if (this.ShipTo > 0) obj.ShipTo = context.DistributorClientAddress.FirstOrDefault(o => o.ID == this.ShipTo);
            if (this.Status > 0) obj.Status = context.InvoiceStatus.FirstOrDefault(o => o.ID == this.Status);
            if (this.WeeklyProductionCapacity > 0) obj.WeeklyProductionCapacity = context.WeeklyProductionCapacity.FirstOrDefault(o => o.ID == this.WeeklyProductionCapacity);
            
            if (_invoiceOrdersWhereThisIsInvoiceLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.InvoiceOrderBO.ToEntityList(this.InvoiceOrdersWhereThisIsInvoice, context), 
                    obj.InvoiceOrdersWhereThisIsInvoice);
            if (_ordersWhereThisIsInvoiceLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.OrderBO.ToEntityList(this.OrdersWhereThisIsInvoice, context), 
                    obj.OrdersWhereThisIsInvoice);
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.Invoice))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.Invoice obj = (Indico.DAL.Invoice)eObj;
            
            // set the Indico.BusinessObjects.InvoiceBO properties
            this.ID = obj.ID;
            
            this.AWBNo = obj.AWBNo;
            this.CreatedDate = obj.CreatedDate;
            this.IndimanInvoiceDate = obj.IndimanInvoiceDate;
            this.IndimanInvoiceNo = obj.IndimanInvoiceNo;
            this.InvoiceDate = obj.InvoiceDate;
            this.InvoiceNo = obj.InvoiceNo;
            this.IsBillTo = obj.IsBillTo;
            this.ModifiedDate = obj.ModifiedDate;
            this.ShipmentDate = obj.ShipmentDate;
            
            this.Bank = (obj.BankReference.EntityKey != null && obj.BankReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.BankReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.BillTo = (obj.BillToReference.EntityKey != null && obj.BillToReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.BillToReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.ShipmentMode = (obj.ShipmentModeReference.EntityKey != null && obj.ShipmentModeReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ShipmentModeReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.ShipTo = (obj.ShipToReference.EntityKey != null && obj.ShipToReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ShipToReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Status = (obj.StatusReference.EntityKey != null && obj.StatusReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.StatusReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.WeeklyProductionCapacity = (obj.WeeklyProductionCapacityReference.EntityKey != null && obj.WeeklyProductionCapacityReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.WeeklyProductionCapacityReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.InvoiceBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.InvoiceBO properties
            this.ID = obj.ID;
            
            this.AWBNo = obj.AWBNo;
            this.Bank = obj.Bank;
            this.BillTo = obj.BillTo;
            this.CreatedDate = obj.CreatedDate;
            this.Creator = obj.Creator;
            this.IndimanInvoiceDate = obj.IndimanInvoiceDate;
            this.IndimanInvoiceNo = obj.IndimanInvoiceNo;
            this.InvoiceDate = obj.InvoiceDate;
            this.InvoiceNo = obj.InvoiceNo;
            this.IsBillTo = obj.IsBillTo;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = obj.Modifier;
            this.ShipmentDate = obj.ShipmentDate;
            this.ShipmentMode = obj.ShipmentMode;
            this.ShipTo = obj.ShipTo;
            this.Status = obj.Status;
            this.WeeklyProductionCapacity = obj.WeeklyProductionCapacity;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.InvoiceBO> IQueryableToList(IQueryable<Indico.DAL.Invoice> oQuery)
        {
            List<Indico.DAL.Invoice> oList = oQuery.ToList();
            List<Indico.BusinessObjects.InvoiceBO> rList = new List<Indico.BusinessObjects.InvoiceBO>(oList.Count);
            foreach (Indico.DAL.Invoice o in oList)
            {
                Indico.BusinessObjects.InvoiceBO obj = new Indico.BusinessObjects.InvoiceBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.InvoiceBO> ToList(IEnumerable<Indico.DAL.Invoice> oQuery)
        {
            List<Indico.DAL.Invoice> oList = oQuery.ToList();
            List<Indico.BusinessObjects.InvoiceBO> rList = new List<Indico.BusinessObjects.InvoiceBO>(oList.Count);
            foreach (Indico.DAL.Invoice o in oList)
            {
                Indico.BusinessObjects.InvoiceBO obj = new Indico.BusinessObjects.InvoiceBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.Invoice> ToEntityList(List<InvoiceBO> bos, IndicoEntities context)
        {
            // build a List of Invoice entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.Invoice.Count() == 0) ? new List<Indico.DAL.Invoice>() : (context.Invoice.Where(BuildContainsExpression<Invoice, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.Invoice>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Invoice> ToEntityCollection(List<InvoiceBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of Invoice entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.Invoice> el = (context.Invoice.Count() == 0) ? new List<Indico.DAL.Invoice>() : 
                context.Invoice.Where(BuildContainsExpression<Invoice, int>(e => e.ID, ids))
                .ToList<Indico.DAL.Invoice>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Invoice> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Invoice>();
                
            foreach (Indico.DAL.Invoice r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.Invoice ToEntity(IndicoEntities context)
        {
            return (from o in context.Invoice
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToInvoice(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Invoice obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToInvoice(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.Invoice obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Invoice obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.InvoiceBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.InvoiceBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.Invoice> oQuery =
                        from o in context.Invoice
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.Invoice> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.InvoiceBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.InvoiceBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.InvoiceBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.InvoiceBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.Invoice> oQuery =
                (from o in context.Invoice
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.InvoiceBO> invoices = IQueryableToList(oQuery);
            context.Dispose();
            return invoices;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.InvoiceBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.InvoiceBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.InvoiceBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.InvoiceBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Invoice> oQuery =
                (from o in context.Invoice
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.InvoiceNo == string.Empty || this.InvoiceNo == o.InvoiceNo) &&
                    (this.InvoiceDate == DateTime.MinValue || this.InvoiceDate == o.InvoiceDate) &&
                    (this.ShipTo == 0 || this.ShipTo == o.ShipTo.ID) &&
                    (this.AWBNo == null || this.AWBNo == o.AWBNo) &&
                    (this.WeeklyProductionCapacity == 0 || this.WeeklyProductionCapacity == o.WeeklyProductionCapacity.ID) &&
                    (this.IndimanInvoiceNo == null || this.IndimanInvoiceNo == o.IndimanInvoiceNo) &&
                    (this.ShipmentMode == 0 || this.ShipmentMode == o.ShipmentMode.ID) &&
                    (this.IndimanInvoiceDate == null || this.IndimanInvoiceDate == o.IndimanInvoiceDate) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) &&
                    (this.Status == 0 || this.Status == o.Status.ID) &&
                    (this.ShipmentDate == DateTime.MinValue || this.ShipmentDate == o.ShipmentDate) &&
                    (this.BillTo == null || this.BillTo == o.BillTo.ID) &&
                    (this.IsBillTo == null || this.IsBillTo == o.IsBillTo) &&
                    (this.Bank == 0 || this.Bank == o.Bank.ID) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.InvoiceBO> invoices = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return invoices;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Invoice
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.InvoiceNo == string.Empty || this.InvoiceNo == o.InvoiceNo) &&
                    (this.InvoiceDate == DateTime.MinValue || this.InvoiceDate == o.InvoiceDate) &&
                    (this.ShipTo == 0 || this.ShipTo == o.ShipTo.ID) &&
                    (this.AWBNo == null || this.AWBNo == o.AWBNo) &&
                    (this.WeeklyProductionCapacity == 0 || this.WeeklyProductionCapacity == o.WeeklyProductionCapacity.ID) &&
                    (this.IndimanInvoiceNo == null || this.IndimanInvoiceNo == o.IndimanInvoiceNo) &&
                    (this.ShipmentMode == 0 || this.ShipmentMode == o.ShipmentMode.ID) &&
                    (this.IndimanInvoiceDate == null || this.IndimanInvoiceDate == o.IndimanInvoiceDate) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) &&
                    (this.Status == 0 || this.Status == o.Status.ID) &&
                    (this.ShipmentDate == DateTime.MinValue || this.ShipmentDate == o.ShipmentDate) &&
                    (this.BillTo == null || this.BillTo == o.BillTo.ID) &&
                    (this.IsBillTo == null || this.IsBillTo == o.IsBillTo) &&
                    (this.Bank == 0 || this.Bank == o.Bank.ID) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.InvoiceBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.InvoiceBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.InvoiceBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.InvoiceBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Invoice> oQuery =
                (from o in context.Invoice
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.InvoiceNo == string.Empty || o.InvoiceNo.Contains(this.InvoiceNo)) &&
                    (this.InvoiceDate == DateTime.MinValue || o.InvoiceDate == this.InvoiceDate) &&
                    (this.ShipTo == 0 || o.ShipTo.ID == this.ShipTo) &&
                    (this.AWBNo == null || o.AWBNo.Contains(this.AWBNo)) &&
                    (this.WeeklyProductionCapacity == 0 || o.WeeklyProductionCapacity.ID == this.WeeklyProductionCapacity) &&
                    (this.IndimanInvoiceNo == null || o.IndimanInvoiceNo.Contains(this.IndimanInvoiceNo)) &&
                    (this.ShipmentMode == 0 || o.ShipmentMode.ID == this.ShipmentMode) &&
                    (this.IndimanInvoiceDate == null || o.IndimanInvoiceDate == this.IndimanInvoiceDate) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.ModifiedDate == DateTime.MinValue || o.ModifiedDate == this.ModifiedDate) &&
                    (this.Status == 0 || o.Status.ID == this.Status) &&
                    (this.ShipmentDate == DateTime.MinValue || o.ShipmentDate == this.ShipmentDate) &&
                    (this.BillTo == null || o.BillTo.ID == this.BillTo) &&
                    (this.IsBillTo == null || o.IsBillTo == this.IsBillTo) &&
                    (this.Bank == 0 || o.Bank.ID == this.Bank) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.InvoiceBO> invoices = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return invoices;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Invoice
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.InvoiceNo == string.Empty || o.InvoiceNo.Contains(this.InvoiceNo)) &&
                    (this.InvoiceDate == DateTime.MinValue || o.InvoiceDate == this.InvoiceDate) &&
                    (this.ShipTo == 0 || o.ShipTo.ID == this.ShipTo) &&
                    (this.AWBNo == null || o.AWBNo.Contains(this.AWBNo)) &&
                    (this.WeeklyProductionCapacity == 0 || o.WeeklyProductionCapacity.ID == this.WeeklyProductionCapacity) &&
                    (this.IndimanInvoiceNo == null || o.IndimanInvoiceNo.Contains(this.IndimanInvoiceNo)) &&
                    (this.ShipmentMode == 0 || o.ShipmentMode.ID == this.ShipmentMode) &&
                    (this.IndimanInvoiceDate == null || o.IndimanInvoiceDate == this.IndimanInvoiceDate) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.ModifiedDate == DateTime.MinValue || o.ModifiedDate == this.ModifiedDate) &&
                    (this.Status == 0 || o.Status.ID == this.Status) &&
                    (this.ShipmentDate == DateTime.MinValue || o.ShipmentDate == this.ShipmentDate) &&
                    (this.BillTo == null || o.BillTo.ID == this.BillTo) &&
                    (this.IsBillTo == null || o.IsBillTo == this.IsBillTo) &&
                    (this.Bank == 0 || o.Bank.ID == this.Bank) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.InvoiceBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.InvoiceBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.InvoiceBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.InvoiceBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Invoice> oQuery =
                (from o in context.Invoice
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.InvoiceDate == DateTime.MinValue || this.InvoiceDate == o.InvoiceDate) && 
                    (this.ShipTo == 0 || this.ShipTo == o.ShipTo.ID) && 
                    (this.WeeklyProductionCapacity == 0 || this.WeeklyProductionCapacity == o.WeeklyProductionCapacity.ID) && 
                    (this.ShipmentMode == 0 || this.ShipmentMode == o.ShipmentMode.ID) && 
                    (this.IndimanInvoiceDate == null || this.IndimanInvoiceDate == o.IndimanInvoiceDate) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) && 
                    (this.Status == 0 || this.Status == o.Status.ID) && 
                    (this.ShipmentDate == DateTime.MinValue || this.ShipmentDate == o.ShipmentDate) && 
                    (this.BillTo == null || this.BillTo == o.BillTo.ID) && 
                    (this.IsBillTo == null || this.IsBillTo == o.IsBillTo) && 
                    (this.Bank == 0 || this.Bank == o.Bank.ID) && 
                    ((o.InvoiceNo.Contains(this.InvoiceNo)) ||
                    (o.AWBNo.Contains(this.AWBNo)) ||
                    (o.IndimanInvoiceNo.Contains(this.IndimanInvoiceNo)) ||
                    (this.InvoiceNo == null && this.AWBNo == null && this.IndimanInvoiceNo == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.InvoiceBO> invoices = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return invoices;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Invoice
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.InvoiceDate == DateTime.MinValue || this.InvoiceDate == o.InvoiceDate) && 
                    (this.ShipTo == 0 || this.ShipTo == o.ShipTo.ID) && 
                    (this.WeeklyProductionCapacity == 0 || this.WeeklyProductionCapacity == o.WeeklyProductionCapacity.ID) && 
                    (this.ShipmentMode == 0 || this.ShipmentMode == o.ShipmentMode.ID) && 
                    (this.IndimanInvoiceDate == null || this.IndimanInvoiceDate == o.IndimanInvoiceDate) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) && 
                    (this.Status == 0 || this.Status == o.Status.ID) && 
                    (this.ShipmentDate == DateTime.MinValue || this.ShipmentDate == o.ShipmentDate) && 
                    (this.BillTo == null || this.BillTo == o.BillTo.ID) && 
                    (this.IsBillTo == null || this.IsBillTo == o.IsBillTo) && 
                    (this.Bank == 0 || this.Bank == o.Bank.ID) && 
                    ((o.InvoiceNo.Contains(this.InvoiceNo)) ||
                    (o.AWBNo.Contains(this.AWBNo)) ||
                    (o.IndimanInvoiceNo.Contains(this.IndimanInvoiceNo)) ||
                    (this.InvoiceNo == null && this.AWBNo == null && this.IndimanInvoiceNo == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.InvoiceBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.InvoiceBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.InvoiceBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.InvoiceBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.InvoiceBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.InvoiceBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnInvoiceBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("InvoiceBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnInvoiceBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnInvoiceBOIDChanged();
        partial void OnInvoiceBOIDChanging(int value);
        
        partial void OnInvoiceNoChanged()
        {
            OnInvoiceBOInvoiceNoChanged();
        }
        
        partial void OnInvoiceNoChanging(string value)
        {
            if (value != null && value.Length > 64)
            {
                throw new Exception(String.Format("InvoiceBO.InvoiceNo has a maximum length of 64. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnInvoiceBOInvoiceNoChanging(value);
        }
        partial void OnInvoiceNoChanged();
        partial void OnInvoiceNoChanging(string value);
        partial void OnInvoiceBOInvoiceNoChanged();
        partial void OnInvoiceBOInvoiceNoChanging(string value);
        
        partial void OnInvoiceDateChanged()
        {
            OnInvoiceBOInvoiceDateChanged();
        }
        
        partial void OnInvoiceDateChanging(DateTime value)
        {
            OnInvoiceBOInvoiceDateChanging(value);
        }
        partial void OnInvoiceDateChanged();
        partial void OnInvoiceDateChanging(DateTime value);
        partial void OnInvoiceBOInvoiceDateChanged();
        partial void OnInvoiceBOInvoiceDateChanging(DateTime value);
        
        partial void OnShipToChanged()
        {
            OnInvoiceBOShipToChanged();
        }
        
        partial void OnShipToChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("InvoiceBO.ShipTo must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnInvoiceBOShipToChanging(value);
        }
        partial void OnShipToChanged();
        partial void OnShipToChanging(int value);
        partial void OnInvoiceBOShipToChanged();
        partial void OnInvoiceBOShipToChanging(int value);
        
        partial void OnAWBNoChanged()
        {
            OnInvoiceBOAWBNoChanged();
        }
        
        partial void OnAWBNoChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("InvoiceBO.AWBNo has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnInvoiceBOAWBNoChanging(value);
        }
        partial void OnAWBNoChanged();
        partial void OnAWBNoChanging(string value);
        partial void OnInvoiceBOAWBNoChanged();
        partial void OnInvoiceBOAWBNoChanging(string value);
        
        partial void OnWeeklyProductionCapacityChanged()
        {
            OnInvoiceBOWeeklyProductionCapacityChanged();
        }
        
        partial void OnWeeklyProductionCapacityChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("InvoiceBO.WeeklyProductionCapacity must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnInvoiceBOWeeklyProductionCapacityChanging(value);
        }
        partial void OnWeeklyProductionCapacityChanged();
        partial void OnWeeklyProductionCapacityChanging(int value);
        partial void OnInvoiceBOWeeklyProductionCapacityChanged();
        partial void OnInvoiceBOWeeklyProductionCapacityChanging(int value);
        
        partial void OnIndimanInvoiceNoChanged()
        {
            OnInvoiceBOIndimanInvoiceNoChanged();
        }
        
        partial void OnIndimanInvoiceNoChanging(string value)
        {
            if (value != null && value.Length > 64)
            {
                throw new Exception(String.Format("InvoiceBO.IndimanInvoiceNo has a maximum length of 64. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnInvoiceBOIndimanInvoiceNoChanging(value);
        }
        partial void OnIndimanInvoiceNoChanged();
        partial void OnIndimanInvoiceNoChanging(string value);
        partial void OnInvoiceBOIndimanInvoiceNoChanged();
        partial void OnInvoiceBOIndimanInvoiceNoChanging(string value);
        
        partial void OnShipmentModeChanged()
        {
            OnInvoiceBOShipmentModeChanged();
        }
        
        partial void OnShipmentModeChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("InvoiceBO.ShipmentMode must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnInvoiceBOShipmentModeChanging(value);
        }
        partial void OnShipmentModeChanged();
        partial void OnShipmentModeChanging(int value);
        partial void OnInvoiceBOShipmentModeChanged();
        partial void OnInvoiceBOShipmentModeChanging(int value);
        
        partial void OnIndimanInvoiceDateChanged()
        {
            OnInvoiceBOIndimanInvoiceDateChanged();
        }
        
        partial void OnIndimanInvoiceDateChanging(DateTime? value)
        {
            OnInvoiceBOIndimanInvoiceDateChanging(value);
        }
        partial void OnIndimanInvoiceDateChanged();
        partial void OnIndimanInvoiceDateChanging(DateTime? value);
        partial void OnInvoiceBOIndimanInvoiceDateChanged();
        partial void OnInvoiceBOIndimanInvoiceDateChanging(DateTime? value);
        
        partial void OnCreatorChanged()
        {
            OnInvoiceBOCreatorChanged();
        }
        
        partial void OnCreatorChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("InvoiceBO.Creator must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnInvoiceBOCreatorChanging(value);
        }
        partial void OnCreatorChanged();
        partial void OnCreatorChanging(int value);
        partial void OnInvoiceBOCreatorChanged();
        partial void OnInvoiceBOCreatorChanging(int value);
        
        partial void OnCreatedDateChanged()
        {
            OnInvoiceBOCreatedDateChanged();
        }
        
        partial void OnCreatedDateChanging(DateTime value)
        {
            OnInvoiceBOCreatedDateChanging(value);
        }
        partial void OnCreatedDateChanged();
        partial void OnCreatedDateChanging(DateTime value);
        partial void OnInvoiceBOCreatedDateChanged();
        partial void OnInvoiceBOCreatedDateChanging(DateTime value);
        
        partial void OnModifierChanged()
        {
            OnInvoiceBOModifierChanged();
        }
        
        partial void OnModifierChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("InvoiceBO.Modifier must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnInvoiceBOModifierChanging(value);
        }
        partial void OnModifierChanged();
        partial void OnModifierChanging(int value);
        partial void OnInvoiceBOModifierChanged();
        partial void OnInvoiceBOModifierChanging(int value);
        
        partial void OnModifiedDateChanged()
        {
            OnInvoiceBOModifiedDateChanged();
        }
        
        partial void OnModifiedDateChanging(DateTime value)
        {
            OnInvoiceBOModifiedDateChanging(value);
        }
        partial void OnModifiedDateChanged();
        partial void OnModifiedDateChanging(DateTime value);
        partial void OnInvoiceBOModifiedDateChanged();
        partial void OnInvoiceBOModifiedDateChanging(DateTime value);
        
        partial void OnStatusChanged()
        {
            OnInvoiceBOStatusChanged();
        }
        
        partial void OnStatusChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("InvoiceBO.Status must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnInvoiceBOStatusChanging(value);
        }
        partial void OnStatusChanged();
        partial void OnStatusChanging(int value);
        partial void OnInvoiceBOStatusChanged();
        partial void OnInvoiceBOStatusChanging(int value);
        
        partial void OnShipmentDateChanged()
        {
            OnInvoiceBOShipmentDateChanged();
        }
        
        partial void OnShipmentDateChanging(DateTime value)
        {
            OnInvoiceBOShipmentDateChanging(value);
        }
        partial void OnShipmentDateChanged();
        partial void OnShipmentDateChanging(DateTime value);
        partial void OnInvoiceBOShipmentDateChanged();
        partial void OnInvoiceBOShipmentDateChanging(DateTime value);
        
        partial void OnBillToChanged()
        {
            OnInvoiceBOBillToChanged();
        }
        
        partial void OnBillToChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("InvoiceBO.BillTo must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnInvoiceBOBillToChanging(value);
        }
        partial void OnBillToChanged();
        partial void OnBillToChanging(int? value);
        partial void OnInvoiceBOBillToChanged();
        partial void OnInvoiceBOBillToChanging(int? value);
        
        partial void OnIsBillToChanged()
        {
            OnInvoiceBOIsBillToChanged();
        }
        
        partial void OnIsBillToChanging(bool? value)
        {
            OnInvoiceBOIsBillToChanging(value);
        }
        partial void OnIsBillToChanged();
        partial void OnIsBillToChanging(bool? value);
        partial void OnInvoiceBOIsBillToChanged();
        partial void OnInvoiceBOIsBillToChanging(bool? value);
        
        partial void OnBankChanged()
        {
            OnInvoiceBOBankChanged();
        }
        
        partial void OnBankChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("InvoiceBO.Bank must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnInvoiceBOBankChanging(value);
        }
        partial void OnBankChanged();
        partial void OnBankChanging(int value);
        partial void OnInvoiceBOBankChanged();
        partial void OnInvoiceBOBankChanging(int value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.InvoiceBO))
                return 1;
            Indico.BusinessObjects.InvoiceBOComparer c = new Indico.BusinessObjects.InvoiceBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.InvoiceBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.Invoice)sender);
            }
        }
        
        void InvoiceOrdersWhereThisIsInvoiceList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.InvoiceOrder obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.InvoiceOrderBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.InvoiceOrderBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceOrderBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.InvoiceOrdersWhereThisIsInvoice.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.InvoiceOrderBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceOrderBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.InvoiceOrdersWhereThisIsInvoice.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void InvoiceOrdersWhereThisIsInvoiceList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.InvoiceOrder obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.InvoiceOrderBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.InvoiceOrderBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceOrderBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.InvoiceOrdersWhereThisIsInvoice.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.InvoiceOrderBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceOrderBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.InvoiceOrdersWhereThisIsInvoice.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrdersWhereThisIsInvoiceList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Order obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrdersWhereThisIsInvoice.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrdersWhereThisIsInvoice.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrdersWhereThisIsInvoiceList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Order obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrdersWhereThisIsInvoice.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrdersWhereThisIsInvoice.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
            this._invoiceOrdersWhereThisIsInvoiceLoaded = false;
            if (this.invoiceOrdersWhereThisIsInvoiceList != null)
            {
                this.invoiceOrdersWhereThisIsInvoiceList.OnBeforeRemove -= new EventHandler(InvoiceOrdersWhereThisIsInvoiceList_OnBeforeRemove);
                this.invoiceOrdersWhereThisIsInvoiceList.OnAfterAdd -= new EventHandler(InvoiceOrdersWhereThisIsInvoiceList_OnAfterAdd);
            }
            this._ordersWhereThisIsInvoiceLoaded = false;
            if (this.ordersWhereThisIsInvoiceList != null)
            {
                this.ordersWhereThisIsInvoiceList.OnBeforeRemove -= new EventHandler(OrdersWhereThisIsInvoiceList_OnBeforeRemove);
                this.ordersWhereThisIsInvoiceList.OnAfterAdd -= new EventHandler(OrdersWhereThisIsInvoiceList_OnAfterAdd);
            }
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region InvoiceBOComparer
    public class InvoiceBOComparer : IComparer<Indico.BusinessObjects.InvoiceBO>
    {
        private string propertyToCompareName;
        public InvoiceBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.InvoiceBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.InvoiceBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public InvoiceBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.InvoiceBO> Members
        public int Compare(Indico.BusinessObjects.InvoiceBO x, Indico.BusinessObjects.InvoiceBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.InvoiceBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.InvoiceBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.InvoiceBO x, Indico.BusinessObjects.InvoiceBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
