// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

//using Indico.BusinessObjects.Util;
//using Indico.BusinessObjects;
using Indico.DAL;


namespace Indico.BusinessObjects
{
    /// <summary>
    /// ReservationDetailsViewBO provides the business logic for maintaining Indico.DAL.ReservationDetailsView records in the data store.
    /// </summary>
    /// <remarks>
    /// ReservationDetailsViewBO provides the business logic for maintaining Indico.DAL.ReservationDetailsView records in the data store. 
    /// By default it provides basic Search methods for retrieving Indico.DAL.ReservationDetailsView
    /// records using the ReservationDetailsView DAL class. Other methods implement atomic chunks of Business Logic according to
    /// the business rules.
    /// </remarks>
    public partial class ReservationDetailsViewBO : BusinessObject, IComparable
    {
        #region fields
        private int? _iD;
        private string _reservationNo;
        private DateTime? _orderDate;
        private int? _patternID;
        private string _pattern;
        private int? _coordinatorID;
        private string _coordinator;
        private int? _distributorID;
        private string _distributor;
        private string _client;
        private int? _shipToID;
        private string _shipTo;
        private int? _shipmentModeID;
        private string _shipmentMode;
        private DateTime? _shipmentDate;
        private int? _qty;
        private int? _usedQty;
        private int? _balance;
        private string _notes;
        private DateTime? _dateCreated;
        private DateTime? _dateModified;
        private int? _creatorID;
        private string _creator;
        private int? _modifierID;
        private string _modifier;
        private int? _statusID;
        private string _status;
        #endregion
        
        #region Properties
        /// <summary></summary>
        public int? ID
        {   get {return _iD;}
            set 
            {
                _iD = value;
            }
        }
        /// <summary></summary>
        public string ReservationNo
        {   get {return _reservationNo;}
            set 
            {
                _reservationNo = value;
            }
        }
        /// <summary></summary>
        public DateTime? OrderDate
        {   get {return _orderDate;}
            set 
            {
                _orderDate = value;
            }
        }
        /// <summary></summary>
        public int? PatternID
        {   get {return _patternID;}
            set 
            {
                _patternID = value;
            }
        }
        /// <summary></summary>
        public string Pattern
        {   get {return _pattern;}
            set 
            {
                _pattern = value;
            }
        }
        /// <summary></summary>
        public int? CoordinatorID
        {   get {return _coordinatorID;}
            set 
            {
                _coordinatorID = value;
            }
        }
        /// <summary></summary>
        public string Coordinator
        {   get {return _coordinator;}
            set 
            {
                _coordinator = value;
            }
        }
        /// <summary></summary>
        public int? DistributorID
        {   get {return _distributorID;}
            set 
            {
                _distributorID = value;
            }
        }
        /// <summary></summary>
        public string Distributor
        {   get {return _distributor;}
            set 
            {
                _distributor = value;
            }
        }
        /// <summary></summary>
        public string Client
        {   get {return _client;}
            set 
            {
                _client = value;
            }
        }
        /// <summary></summary>
        public int? ShipToID
        {   get {return _shipToID;}
            set 
            {
                _shipToID = value;
            }
        }
        /// <summary></summary>
        public string ShipTo
        {   get {return _shipTo;}
            set 
            {
                _shipTo = value;
            }
        }
        /// <summary></summary>
        public int? ShipmentModeID
        {   get {return _shipmentModeID;}
            set 
            {
                _shipmentModeID = value;
            }
        }
        /// <summary></summary>
        public string ShipmentMode
        {   get {return _shipmentMode;}
            set 
            {
                _shipmentMode = value;
            }
        }
        /// <summary></summary>
        public DateTime? ShipmentDate
        {   get {return _shipmentDate;}
            set 
            {
                _shipmentDate = value;
            }
        }
        /// <summary></summary>
        public int? Qty
        {   get {return _qty;}
            set 
            {
                _qty = value;
            }
        }
        /// <summary></summary>
        public int? UsedQty
        {   get {return _usedQty;}
            set 
            {
                _usedQty = value;
            }
        }
        /// <summary></summary>
        public int? Balance
        {   get {return _balance;}
            set 
            {
                _balance = value;
            }
        }
        /// <summary></summary>
        public string Notes
        {   get {return _notes;}
            set 
            {
                _notes = value;
            }
        }
        /// <summary></summary>
        public DateTime? DateCreated
        {   get {return _dateCreated;}
            set 
            {
                _dateCreated = value;
            }
        }
        /// <summary></summary>
        public DateTime? DateModified
        {   get {return _dateModified;}
            set 
            {
                _dateModified = value;
            }
        }
        /// <summary></summary>
        public int? CreatorID
        {   get {return _creatorID;}
            set 
            {
                _creatorID = value;
            }
        }
        /// <summary></summary>
        public string Creator
        {   get {return _creator;}
            set 
            {
                _creator = value;
            }
        }
        /// <summary></summary>
        public int? ModifierID
        {   get {return _modifierID;}
            set 
            {
                _modifierID = value;
            }
        }
        /// <summary></summary>
        public string Modifier
        {   get {return _modifier;}
            set 
            {
                _modifier = value;
            }
        }
        /// <summary></summary>
        public int? StatusID
        {   get {return _statusID;}
            set 
            {
                _statusID = value;
            }
        }
        /// <summary></summary>
        public string Status
        {   get {return _status;}
            set 
            {
                _status = value;
            }
        }
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the ReservationDetailsViewBO class using the supplied Indico.DAL.ReservationDetailsView. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.ReservationDetailsView whose properties will be used to initialise the ReservationDetailsViewBO</param>
        internal ReservationDetailsViewBO(Indico.DAL.ReservationDetailsView obj)
        {
            // set the properties from the Indico.DAL.ReservationDetailsView 
            this.ID = obj.ID;
            this.ReservationNo = obj.ReservationNo;
            this.OrderDate = obj.OrderDate;
            this.PatternID = obj.PatternID;
            this.Pattern = obj.Pattern;
            this.CoordinatorID = obj.CoordinatorID;
            this.Coordinator = obj.Coordinator;
            this.DistributorID = obj.DistributorID;
            this.Distributor = obj.Distributor;
            this.Client = obj.Client;
            this.ShipToID = obj.ShipToID;
            this.ShipTo = obj.ShipTo;
            this.ShipmentModeID = obj.ShipmentModeID;
            this.ShipmentMode = obj.ShipmentMode;
            this.ShipmentDate = obj.ShipmentDate;
            this.Qty = obj.Qty;
            this.UsedQty = obj.UsedQty;
            this.Balance = obj.Balance;
            this.Notes = obj.Notes;
            this.DateCreated = obj.DateCreated;
            this.DateModified = obj.DateModified;
            this.CreatorID = obj.CreatorID;
            this.Creator = obj.Creator;
            this.ModifierID = obj.ModifierID;
            this.Modifier = obj.Modifier;
            this.StatusID = obj.StatusID;
            this.Status = obj.Status;
        }
        #endregion
        
        #region Internal utility methods
        internal void SetDAL(Indico.DAL.ReservationDetailsView obj, IndicoEntities context)
        {
            // set the Indico.DAL.ReservationDetailsView properties
            obj.ID = Convert.ToInt32(ID);
            obj.ReservationNo = ReservationNo;
            obj.OrderDate = Convert.ToDateTime(OrderDate);
            obj.PatternID = Convert.ToInt32(PatternID);
            obj.Pattern = Pattern;
            obj.CoordinatorID = Convert.ToInt32(CoordinatorID);
            obj.Coordinator = Coordinator;
            obj.DistributorID = Convert.ToInt32(DistributorID);
            obj.Distributor = Distributor;
            obj.Client = Client;
            obj.ShipToID = Convert.ToInt32(ShipToID);
            obj.ShipTo = ShipTo;
            obj.ShipmentModeID = Convert.ToInt32(ShipmentModeID);
            obj.ShipmentMode = ShipmentMode;
            obj.ShipmentDate = Convert.ToDateTime(ShipmentDate);
            obj.Qty = Convert.ToInt32(Qty);
            obj.UsedQty = Convert.ToInt32(UsedQty);
            obj.Balance = Convert.ToInt32(Balance);
            obj.Notes = Notes;
            obj.DateCreated = Convert.ToDateTime(DateCreated);
            obj.DateModified = Convert.ToDateTime(DateModified);
            obj.CreatorID = Convert.ToInt32(CreatorID);
            obj.Creator = Creator;
            obj.ModifierID = Convert.ToInt32(ModifierID);
            obj.Modifier = Modifier;
            obj.StatusID = Convert.ToInt32(StatusID);
            obj.Status = Status;
        }
        
        internal void SetBO(Indico.DAL.ReservationDetailsView obj)
        {
            // set the Indico.BusinessObjects.ReservationDetailsViewBO properties    
            this.ID = obj.ID;
            this.ReservationNo = obj.ReservationNo;
            this.OrderDate = obj.OrderDate;
            this.PatternID = obj.PatternID;
            this.Pattern = obj.Pattern;
            this.CoordinatorID = obj.CoordinatorID;
            this.Coordinator = obj.Coordinator;
            this.DistributorID = obj.DistributorID;
            this.Distributor = obj.Distributor;
            this.Client = obj.Client;
            this.ShipToID = obj.ShipToID;
            this.ShipTo = obj.ShipTo;
            this.ShipmentModeID = obj.ShipmentModeID;
            this.ShipmentMode = obj.ShipmentMode;
            this.ShipmentDate = obj.ShipmentDate;
            this.Qty = obj.Qty;
            this.UsedQty = obj.UsedQty;
            this.Balance = obj.Balance;
            this.Notes = obj.Notes;
            this.DateCreated = obj.DateCreated;
            this.DateModified = obj.DateModified;
            this.CreatorID = obj.CreatorID;
            this.Creator = obj.Creator;
            this.ModifierID = obj.ModifierID;
            this.Modifier = obj.Modifier;
            this.StatusID = obj.StatusID;
            this.Status = obj.Status;
        }
        
        internal void SetBO(Indico.BusinessObjects.ReservationDetailsViewBO obj)
        {
            // set this Indico.BusinessObjects.ReservationDetailsViewBO properties
            this.ID = obj.ID;
            this.ReservationNo = obj.ReservationNo;
            this.OrderDate = obj.OrderDate;
            this.PatternID = obj.PatternID;
            this.Pattern = obj.Pattern;
            this.CoordinatorID = obj.CoordinatorID;
            this.Coordinator = obj.Coordinator;
            this.DistributorID = obj.DistributorID;
            this.Distributor = obj.Distributor;
            this.Client = obj.Client;
            this.ShipToID = obj.ShipToID;
            this.ShipTo = obj.ShipTo;
            this.ShipmentModeID = obj.ShipmentModeID;
            this.ShipmentMode = obj.ShipmentMode;
            this.ShipmentDate = obj.ShipmentDate;
            this.Qty = obj.Qty;
            this.UsedQty = obj.UsedQty;
            this.Balance = obj.Balance;
            this.Notes = obj.Notes;
            this.DateCreated = obj.DateCreated;
            this.DateModified = obj.DateModified;
            this.CreatorID = obj.CreatorID;
            this.Creator = obj.Creator;
            this.ModifierID = obj.ModifierID;
            this.Modifier = obj.Modifier;
            this.StatusID = obj.StatusID;
            this.Status = obj.Status;
        }
        
        private static List<Indico.BusinessObjects.ReservationDetailsViewBO> IQueryableToList(IQueryable<Indico.DAL.ReservationDetailsView> oQuery)
        {
            List<Indico.DAL.ReservationDetailsView> oList = oQuery.ToList();
            List<Indico.BusinessObjects.ReservationDetailsViewBO> rList = new List<Indico.BusinessObjects.ReservationDetailsViewBO>(oList.Count);
            foreach (Indico.DAL.ReservationDetailsView o in oList)
            {
                Indico.BusinessObjects.ReservationDetailsViewBO obj = new Indico.BusinessObjects.ReservationDetailsViewBO(o);
                rList.Add(obj);
            }
            return rList;
        }
        #endregion
        
        #region BusinessObject methods
        
        #region GetAllObject
        public static List<Indico.BusinessObjects.ReservationDetailsViewBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public static List<Indico.BusinessObjects.ReservationDetailsViewBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public static List<Indico.BusinessObjects.ReservationDetailsViewBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public static List<Indico.BusinessObjects.ReservationDetailsViewBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReservationDetailsView> oQuery =
                (from o in context.ReservationDetailsView
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReservationDetailsViewBO> reservationdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return reservationdetailsviews;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.ReservationDetailsViewBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.ReservationDetailsViewBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReservationDetailsViewBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReservationDetailsViewBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReservationDetailsView> oQuery =
                (from o in context.ReservationDetailsView
                 where
                    (this.ID == null || this.ID == o.ID) &&
                    (this.ReservationNo == null || this.ReservationNo == o.ReservationNo) &&
                    (this.OrderDate == null || this.OrderDate == o.OrderDate) &&
                    (this.PatternID == null || this.PatternID == o.PatternID) &&
                    (this.Pattern == null || this.Pattern == o.Pattern) &&
                    (this.CoordinatorID == null || this.CoordinatorID == o.CoordinatorID) &&
                    (this.Coordinator == null || this.Coordinator == o.Coordinator) &&
                    (this.DistributorID == null || this.DistributorID == o.DistributorID) &&
                    (this.Distributor == null || this.Distributor == o.Distributor) &&
                    (this.Client == null || this.Client == o.Client) &&
                    (this.ShipToID == null || this.ShipToID == o.ShipToID) &&
                    (this.ShipTo == null || this.ShipTo == o.ShipTo) &&
                    (this.ShipmentModeID == null || this.ShipmentModeID == o.ShipmentModeID) &&
                    (this.ShipmentMode == null || this.ShipmentMode == o.ShipmentMode) &&
                    (this.ShipmentDate == null || this.ShipmentDate == o.ShipmentDate) &&
                    (this.Qty == null || this.Qty == o.Qty) &&
                    (this.UsedQty == null || this.UsedQty == o.UsedQty) &&
                    (this.Balance == null || this.Balance == o.Balance) &&
                    (this.Notes == null || this.Notes == o.Notes) &&
                    (this.DateCreated == null || this.DateCreated == o.DateCreated) &&
                    (this.DateModified == null || this.DateModified == o.DateModified) &&
                    (this.CreatorID == null || this.CreatorID == o.CreatorID) &&
                    (this.Creator == null || this.Creator == o.Creator) &&
                    (this.ModifierID == null || this.ModifierID == o.ModifierID) &&
                    (this.Modifier == null || this.Modifier == o.Modifier) &&
                    (this.StatusID == null || this.StatusID == o.StatusID) &&
                    (this.Status == null || this.Status == o.Status) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReservationDetailsViewBO> reservationdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return reservationdetailsviews;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReservationDetailsView
                 where
                    (this.ID == null || this.ID == o.ID) &&
                    (this.ReservationNo == null || this.ReservationNo == o.ReservationNo) &&
                    (this.OrderDate == null || this.OrderDate == o.OrderDate) &&
                    (this.PatternID == null || this.PatternID == o.PatternID) &&
                    (this.Pattern == null || this.Pattern == o.Pattern) &&
                    (this.CoordinatorID == null || this.CoordinatorID == o.CoordinatorID) &&
                    (this.Coordinator == null || this.Coordinator == o.Coordinator) &&
                    (this.DistributorID == null || this.DistributorID == o.DistributorID) &&
                    (this.Distributor == null || this.Distributor == o.Distributor) &&
                    (this.Client == null || this.Client == o.Client) &&
                    (this.ShipToID == null || this.ShipToID == o.ShipToID) &&
                    (this.ShipTo == null || this.ShipTo == o.ShipTo) &&
                    (this.ShipmentModeID == null || this.ShipmentModeID == o.ShipmentModeID) &&
                    (this.ShipmentMode == null || this.ShipmentMode == o.ShipmentMode) &&
                    (this.ShipmentDate == null || this.ShipmentDate == o.ShipmentDate) &&
                    (this.Qty == null || this.Qty == o.Qty) &&
                    (this.UsedQty == null || this.UsedQty == o.UsedQty) &&
                    (this.Balance == null || this.Balance == o.Balance) &&
                    (this.Notes == null || this.Notes == o.Notes) &&
                    (this.DateCreated == null || this.DateCreated == o.DateCreated) &&
                    (this.DateModified == null || this.DateModified == o.DateModified) &&
                    (this.CreatorID == null || this.CreatorID == o.CreatorID) &&
                    (this.Creator == null || this.Creator == o.Creator) &&
                    (this.ModifierID == null || this.ModifierID == o.ModifierID) &&
                    (this.Modifier == null || this.Modifier == o.Modifier) &&
                    (this.StatusID == null || this.StatusID == o.StatusID) &&
                    (this.Status == null || this.Status == o.Status) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.ReservationDetailsViewBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.ReservationDetailsViewBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReservationDetailsViewBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReservationDetailsViewBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReservationDetailsView> oQuery =
                (from o in context.ReservationDetailsView
                 where
                    (this.ID == null || o.ID == this.ID) &&
                    (this.ReservationNo == null || o.ReservationNo.Contains(this.ReservationNo)) &&
                    (this.OrderDate == null || o.OrderDate == this.OrderDate) &&
                    (this.PatternID == null || o.PatternID == this.PatternID) &&
                    (this.Pattern == null || o.Pattern.Contains(this.Pattern)) &&
                    (this.CoordinatorID == null || o.CoordinatorID == this.CoordinatorID) &&
                    (this.Coordinator == null || o.Coordinator.Contains(this.Coordinator)) &&
                    (this.DistributorID == null || o.DistributorID == this.DistributorID) &&
                    (this.Distributor == null || o.Distributor.Contains(this.Distributor)) &&
                    (this.Client == null || o.Client.Contains(this.Client)) &&
                    (this.ShipToID == null || o.ShipToID == this.ShipToID) &&
                    (this.ShipTo == null || o.ShipTo.Contains(this.ShipTo)) &&
                    (this.ShipmentModeID == null || o.ShipmentModeID == this.ShipmentModeID) &&
                    (this.ShipmentMode == null || o.ShipmentMode.Contains(this.ShipmentMode)) &&
                    (this.ShipmentDate == null || o.ShipmentDate == this.ShipmentDate) &&
                    (this.Qty == null || o.Qty == this.Qty) &&
                    (this.UsedQty == null || o.UsedQty == this.UsedQty) &&
                    (this.Balance == null || o.Balance == this.Balance) &&
                    (this.Notes == null || o.Notes.Contains(this.Notes)) &&
                    (this.DateCreated == null || o.DateCreated == this.DateCreated) &&
                    (this.DateModified == null || o.DateModified == this.DateModified) &&
                    (this.CreatorID == null || o.CreatorID == this.CreatorID) &&
                    (this.Creator == null || o.Creator.Contains(this.Creator)) &&
                    (this.ModifierID == null || o.ModifierID == this.ModifierID) &&
                    (this.Modifier == null || o.Modifier.Contains(this.Modifier)) &&
                    (this.StatusID == null || o.StatusID == this.StatusID) &&
                    (this.Status == null || o.Status.Contains(this.Status)) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReservationDetailsViewBO> reservationdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return reservationdetailsviews;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReservationDetailsView
                 where
                    (this.ID == null || o.ID == this.ID) &&
                    (this.ReservationNo == null || o.ReservationNo.Contains(this.ReservationNo)) &&
                    (this.OrderDate == null || o.OrderDate == this.OrderDate) &&
                    (this.PatternID == null || o.PatternID == this.PatternID) &&
                    (this.Pattern == null || o.Pattern.Contains(this.Pattern)) &&
                    (this.CoordinatorID == null || o.CoordinatorID == this.CoordinatorID) &&
                    (this.Coordinator == null || o.Coordinator.Contains(this.Coordinator)) &&
                    (this.DistributorID == null || o.DistributorID == this.DistributorID) &&
                    (this.Distributor == null || o.Distributor.Contains(this.Distributor)) &&
                    (this.Client == null || o.Client.Contains(this.Client)) &&
                    (this.ShipToID == null || o.ShipToID == this.ShipToID) &&
                    (this.ShipTo == null || o.ShipTo.Contains(this.ShipTo)) &&
                    (this.ShipmentModeID == null || o.ShipmentModeID == this.ShipmentModeID) &&
                    (this.ShipmentMode == null || o.ShipmentMode.Contains(this.ShipmentMode)) &&
                    (this.ShipmentDate == null || o.ShipmentDate == this.ShipmentDate) &&
                    (this.Qty == null || o.Qty == this.Qty) &&
                    (this.UsedQty == null || o.UsedQty == this.UsedQty) &&
                    (this.Balance == null || o.Balance == this.Balance) &&
                    (this.Notes == null || o.Notes.Contains(this.Notes)) &&
                    (this.DateCreated == null || o.DateCreated == this.DateCreated) &&
                    (this.DateModified == null || o.DateModified == this.DateModified) &&
                    (this.CreatorID == null || o.CreatorID == this.CreatorID) &&
                    (this.Creator == null || o.Creator.Contains(this.Creator)) &&
                    (this.ModifierID == null || o.ModifierID == this.ModifierID) &&
                    (this.Modifier == null || o.Modifier.Contains(this.Modifier)) &&
                    (this.StatusID == null || o.StatusID == this.StatusID) &&
                    (this.Status == null || o.Status.Contains(this.Status)) 
                 orderby o.ID
                 select o).Count();
            
        }
        
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.ReservationDetailsViewBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.ReservationDetailsViewBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReservationDetailsViewBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReservationDetailsViewBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReservationDetailsView> oQuery =
                (from o in context.ReservationDetailsView
                 where
                    (this.ID == null || this.ID == o.ID) && 
                    (this.OrderDate == null || this.OrderDate == o.OrderDate) && 
                    (this.PatternID == null || this.PatternID == o.PatternID) && 
                    (this.CoordinatorID == null || this.CoordinatorID == o.CoordinatorID) && 
                    (this.DistributorID == null || this.DistributorID == o.DistributorID) && 
                    (this.ShipToID == null || this.ShipToID == o.ShipToID) && 
                    (this.ShipmentModeID == null || this.ShipmentModeID == o.ShipmentModeID) && 
                    (this.ShipmentDate == null || this.ShipmentDate == o.ShipmentDate) && 
                    (this.Qty == null || this.Qty == o.Qty) && 
                    (this.UsedQty == null || this.UsedQty == o.UsedQty) && 
                    (this.Balance == null || this.Balance == o.Balance) && 
                    (this.DateCreated == null || this.DateCreated == o.DateCreated) && 
                    (this.DateModified == null || this.DateModified == o.DateModified) && 
                    (this.CreatorID == null || this.CreatorID == o.CreatorID) && 
                    (this.ModifierID == null || this.ModifierID == o.ModifierID) && 
                    (this.StatusID == null || this.StatusID == o.StatusID) && 
                    ((o.ReservationNo.Contains(this.ReservationNo)) ||
                    (o.Pattern.Contains(this.Pattern)) ||
                    (o.Coordinator.Contains(this.Coordinator)) ||
                    (o.Distributor.Contains(this.Distributor)) ||
                    (o.Client.Contains(this.Client)) ||
                    (o.ShipTo.Contains(this.ShipTo)) ||
                    (o.ShipmentMode.Contains(this.ShipmentMode)) ||
                    (o.Notes.Contains(this.Notes)) ||
                    (o.Creator.Contains(this.Creator)) ||
                    (o.Modifier.Contains(this.Modifier)) ||
                    (o.Status.Contains(this.Status)) ||
                    (this.ReservationNo == null && this.Pattern == null && this.Coordinator == null && this.Distributor == null && this.Client == null && this.ShipTo == null && this.ShipmentMode == null && this.Notes == null && this.Creator == null && this.Modifier == null && this.Status == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReservationDetailsViewBO> reservationdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return reservationdetailsviews;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReservationDetailsView
                 where
                    (this.ID == null || this.ID == o.ID) && 
                    (this.OrderDate == null || this.OrderDate == o.OrderDate) && 
                    (this.PatternID == null || this.PatternID == o.PatternID) && 
                    (this.CoordinatorID == null || this.CoordinatorID == o.CoordinatorID) && 
                    (this.DistributorID == null || this.DistributorID == o.DistributorID) && 
                    (this.ShipToID == null || this.ShipToID == o.ShipToID) && 
                    (this.ShipmentModeID == null || this.ShipmentModeID == o.ShipmentModeID) && 
                    (this.ShipmentDate == null || this.ShipmentDate == o.ShipmentDate) && 
                    (this.Qty == null || this.Qty == o.Qty) && 
                    (this.UsedQty == null || this.UsedQty == o.UsedQty) && 
                    (this.Balance == null || this.Balance == o.Balance) && 
                    (this.DateCreated == null || this.DateCreated == o.DateCreated) && 
                    (this.DateModified == null || this.DateModified == o.DateModified) && 
                    (this.CreatorID == null || this.CreatorID == o.CreatorID) && 
                    (this.ModifierID == null || this.ModifierID == o.ModifierID) && 
                    (this.StatusID == null || this.StatusID == o.StatusID) && 
                    ((o.ReservationNo.Contains(this.ReservationNo)) ||
                    (o.Pattern.Contains(this.Pattern)) ||
                    (o.Coordinator.Contains(this.Coordinator)) ||
                    (o.Distributor.Contains(this.Distributor)) ||
                    (o.Client.Contains(this.Client)) ||
                    (o.ShipTo.Contains(this.ShipTo)) ||
                    (o.ShipmentMode.Contains(this.ShipmentMode)) ||
                    (o.Notes.Contains(this.Notes)) ||
                    (o.Creator.Contains(this.Creator)) ||
                    (o.Modifier.Contains(this.Modifier)) ||
                    (o.Status.Contains(this.Status)) ||
                    (this.ReservationNo == null && this.Pattern == null && this.Coordinator == null && this.Distributor == null && this.Client == null && this.ShipTo == null && this.ShipmentMode == null && this.Notes == null && this.Creator == null && this.Modifier == null && this.Status == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.ReservationDetailsViewBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.ReservationDetailsViewBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.ReservationDetailsViewBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.ReservationDetailsViewBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.ReservationDetailsViewBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.ReservationDetailsViewBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.ReservationDetailsViewBO))
                return 1;
            Indico.BusinessObjects.ReservationDetailsViewBOComparer c = new Indico.BusinessObjects.ReservationDetailsViewBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.ReservationDetailsViewBO);
        }

        #endregion
        #endregion
    }
    
    #region ReservationDetailsViewBOComparer
    public class ReservationDetailsViewBOComparer : IComparer<Indico.BusinessObjects.ReservationDetailsViewBO>
    {
        private string propertyToCompareName;
        public ReservationDetailsViewBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.ReservationDetailsViewBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.ReservationDetailsViewBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public ReservationDetailsViewBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.ReservationDetailsViewBO> Members
        public int Compare(Indico.BusinessObjects.ReservationDetailsViewBO x, Indico.BusinessObjects.ReservationDetailsViewBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.ReservationDetailsViewBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.ReservationDetailsViewBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.ReservationDetailsViewBO x, Indico.BusinessObjects.ReservationDetailsViewBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
