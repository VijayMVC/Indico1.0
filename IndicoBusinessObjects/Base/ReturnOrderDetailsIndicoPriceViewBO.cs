// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

//using Indico.BusinessObjects.Util;
//using Indico.BusinessObjects;
using Indico.DAL;


namespace Indico.BusinessObjects
{
    /// <summary>
    /// ReturnOrderDetailsIndicoPriceViewBO provides the business logic for maintaining Indico.DAL.ReturnOrderDetailsIndicoPriceView records in the data store.
    /// </summary>
    /// <remarks>
    /// ReturnOrderDetailsIndicoPriceViewBO provides the business logic for maintaining Indico.DAL.ReturnOrderDetailsIndicoPriceView records in the data store. 
    /// By default it provides basic Search methods for retrieving Indico.DAL.ReturnOrderDetailsIndicoPriceView
    /// records using the ReturnOrderDetailsIndicoPriceView DAL class. Other methods implement atomic chunks of Business Logic according to
    /// the business rules.
    /// </remarks>
    public partial class ReturnOrderDetailsIndicoPriceViewBO : BusinessObject, IComparable
    {
        #region fields
        private int? _orderDetail;
        private string _orderType;
        private string _visualLayout;
        private int? _visualLayoutID;
        private int? _artWorkID;
        private string _pattern;
        private int? _patternID;
        private int? _fabricID;
        private int? _distributor;
        private string _fabric;
        private string _visualLayoutNotes;
        private int? _order;
        private int? _label;
        private string _status;
        private int? _statusID;
        private DateTime? _shipmentDate;
        private DateTime? _sheduledDate;
        private bool? _isRepeat;
        private DateTime? _requestedDate;
        private decimal? _editedPrice;
        private string _editedPriceRemarks;
        private int? _quantity;
        private decimal? _editedIndicoPrice;
        private decimal? _totalIndicoPrice;
        private decimal? _surcharge;
        #endregion
        
        #region Properties
        /// <summary></summary>
        public int? OrderDetail
        {   get {return _orderDetail;}
            set 
            {
                _orderDetail = value;
            }
        }
        /// <summary></summary>
        public string OrderType
        {   get {return _orderType;}
            set 
            {
                _orderType = value;
            }
        }
        /// <summary></summary>
        public string VisualLayout
        {   get {return _visualLayout;}
            set 
            {
                _visualLayout = value;
            }
        }
        /// <summary></summary>
        public int? VisualLayoutID
        {   get {return _visualLayoutID;}
            set 
            {
                _visualLayoutID = value;
            }
        }
        /// <summary></summary>
        public int? ArtWorkID
        {   get {return _artWorkID;}
            set 
            {
                _artWorkID = value;
            }
        }
        /// <summary></summary>
        public string Pattern
        {   get {return _pattern;}
            set 
            {
                _pattern = value;
            }
        }
        /// <summary></summary>
        public int? PatternID
        {   get {return _patternID;}
            set 
            {
                _patternID = value;
            }
        }
        /// <summary></summary>
        public int? FabricID
        {   get {return _fabricID;}
            set 
            {
                _fabricID = value;
            }
        }
        /// <summary></summary>
        public int? Distributor
        {   get {return _distributor;}
            set 
            {
                _distributor = value;
            }
        }
        /// <summary></summary>
        public string Fabric
        {   get {return _fabric;}
            set 
            {
                _fabric = value;
            }
        }
        /// <summary></summary>
        public string VisualLayoutNotes
        {   get {return _visualLayoutNotes;}
            set 
            {
                _visualLayoutNotes = value;
            }
        }
        /// <summary></summary>
        public int? Order
        {   get {return _order;}
            set 
            {
                _order = value;
            }
        }
        /// <summary></summary>
        public int? Label
        {   get {return _label;}
            set 
            {
                _label = value;
            }
        }
        /// <summary></summary>
        public string Status
        {   get {return _status;}
            set 
            {
                _status = value;
            }
        }
        /// <summary></summary>
        public int? StatusID
        {   get {return _statusID;}
            set 
            {
                _statusID = value;
            }
        }
        /// <summary></summary>
        public DateTime? ShipmentDate
        {   get {return _shipmentDate;}
            set 
            {
                _shipmentDate = value;
            }
        }
        /// <summary></summary>
        public DateTime? SheduledDate
        {   get {return _sheduledDate;}
            set 
            {
                _sheduledDate = value;
            }
        }
        /// <summary></summary>
        public bool? IsRepeat
        {   get {return _isRepeat;}
            set 
            {
                _isRepeat = value;
            }
        }
        /// <summary></summary>
        public DateTime? RequestedDate
        {   get {return _requestedDate;}
            set 
            {
                _requestedDate = value;
            }
        }
        /// <summary></summary>
        public decimal? EditedPrice
        {   get {return _editedPrice;}
            set 
            {
                _editedPrice = value;
            }
        }
        /// <summary></summary>
        public string EditedPriceRemarks
        {   get {return _editedPriceRemarks;}
            set 
            {
                _editedPriceRemarks = value;
            }
        }
        /// <summary></summary>
        public int? Quantity
        {   get {return _quantity;}
            set 
            {
                _quantity = value;
            }
        }
        /// <summary></summary>
        public decimal? EditedIndicoPrice
        {   get {return _editedIndicoPrice;}
            set 
            {
                _editedIndicoPrice = value;
            }
        }
        /// <summary></summary>
        public decimal? TotalIndicoPrice
        {   get {return _totalIndicoPrice;}
            set 
            {
                _totalIndicoPrice = value;
            }
        }
        /// <summary></summary>
        public decimal? Surcharge
        {   get {return _surcharge;}
            set 
            {
                _surcharge = value;
            }
        }
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the ReturnOrderDetailsIndicoPriceViewBO class using the supplied Indico.DAL.ReturnOrderDetailsIndicoPriceView. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.ReturnOrderDetailsIndicoPriceView whose properties will be used to initialise the ReturnOrderDetailsIndicoPriceViewBO</param>
        internal ReturnOrderDetailsIndicoPriceViewBO(Indico.DAL.ReturnOrderDetailsIndicoPriceView obj)
        {
            // set the properties from the Indico.DAL.ReturnOrderDetailsIndicoPriceView 
            this.OrderDetail = obj.OrderDetail;
            this.OrderType = obj.OrderType;
            this.VisualLayout = obj.VisualLayout;
            this.VisualLayoutID = obj.VisualLayoutID;
            this.ArtWorkID = obj.ArtWorkID;
            this.Pattern = obj.Pattern;
            this.PatternID = obj.PatternID;
            this.FabricID = obj.FabricID;
            this.Distributor = obj.Distributor;
            this.Fabric = obj.Fabric;
            this.VisualLayoutNotes = obj.VisualLayoutNotes;
            this.Order = obj.Order;
            this.Label = obj.Label;
            this.Status = obj.Status;
            this.StatusID = obj.StatusID;
            this.ShipmentDate = obj.ShipmentDate;
            this.SheduledDate = obj.SheduledDate;
            this.IsRepeat = obj.IsRepeat;
            this.RequestedDate = obj.RequestedDate;
            this.EditedPrice = obj.EditedPrice;
            this.EditedPriceRemarks = obj.EditedPriceRemarks;
            this.Quantity = obj.Quantity;
            this.EditedIndicoPrice = obj.EditedIndicoPrice;
            this.TotalIndicoPrice = obj.TotalIndicoPrice;
            this.Surcharge = obj.Surcharge;
        }
        #endregion
        
        #region Internal utility methods
        internal void SetDAL(Indico.DAL.ReturnOrderDetailsIndicoPriceView obj, IndicoEntities context)
        {
            // set the Indico.DAL.ReturnOrderDetailsIndicoPriceView properties
            obj.OrderDetail = Convert.ToInt32(OrderDetail);
            obj.OrderType = OrderType;
            obj.VisualLayout = VisualLayout;
            obj.VisualLayoutID = Convert.ToInt32(VisualLayoutID);
            obj.ArtWorkID = Convert.ToInt32(ArtWorkID);
            obj.Pattern = Pattern;
            obj.PatternID = Convert.ToInt32(PatternID);
            obj.FabricID = Convert.ToInt32(FabricID);
            obj.Distributor = Convert.ToInt32(Distributor);
            obj.Fabric = Fabric;
            obj.VisualLayoutNotes = VisualLayoutNotes;
            obj.Order = Convert.ToInt32(Order);
            obj.Label = Convert.ToInt32(Label);
            obj.Status = Status;
            obj.StatusID = Convert.ToInt32(StatusID);
            obj.ShipmentDate = Convert.ToDateTime(ShipmentDate);
            obj.SheduledDate = Convert.ToDateTime(SheduledDate);
            obj.IsRepeat = Convert.ToBoolean(IsRepeat);
            obj.RequestedDate = Convert.ToDateTime(RequestedDate);
            obj.EditedPrice = Convert.ToDecimal(EditedPrice);
            obj.EditedPriceRemarks = EditedPriceRemarks;
            obj.Quantity = Convert.ToInt32(Quantity);
            obj.EditedIndicoPrice = Convert.ToDecimal(EditedIndicoPrice);
            obj.TotalIndicoPrice = Convert.ToDecimal(TotalIndicoPrice);
            obj.Surcharge = Convert.ToDecimal(Surcharge);
        }
        
        internal void SetBO(Indico.DAL.ReturnOrderDetailsIndicoPriceView obj)
        {
            // set the Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO properties    
            this.OrderDetail = obj.OrderDetail;
            this.OrderType = obj.OrderType;
            this.VisualLayout = obj.VisualLayout;
            this.VisualLayoutID = obj.VisualLayoutID;
            this.ArtWorkID = obj.ArtWorkID;
            this.Pattern = obj.Pattern;
            this.PatternID = obj.PatternID;
            this.FabricID = obj.FabricID;
            this.Distributor = obj.Distributor;
            this.Fabric = obj.Fabric;
            this.VisualLayoutNotes = obj.VisualLayoutNotes;
            this.Order = obj.Order;
            this.Label = obj.Label;
            this.Status = obj.Status;
            this.StatusID = obj.StatusID;
            this.ShipmentDate = obj.ShipmentDate;
            this.SheduledDate = obj.SheduledDate;
            this.IsRepeat = obj.IsRepeat;
            this.RequestedDate = obj.RequestedDate;
            this.EditedPrice = obj.EditedPrice;
            this.EditedPriceRemarks = obj.EditedPriceRemarks;
            this.Quantity = obj.Quantity;
            this.EditedIndicoPrice = obj.EditedIndicoPrice;
            this.TotalIndicoPrice = obj.TotalIndicoPrice;
            this.Surcharge = obj.Surcharge;
        }
        
        internal void SetBO(Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO obj)
        {
            // set this Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO properties
            this.OrderDetail = obj.OrderDetail;
            this.OrderType = obj.OrderType;
            this.VisualLayout = obj.VisualLayout;
            this.VisualLayoutID = obj.VisualLayoutID;
            this.ArtWorkID = obj.ArtWorkID;
            this.Pattern = obj.Pattern;
            this.PatternID = obj.PatternID;
            this.FabricID = obj.FabricID;
            this.Distributor = obj.Distributor;
            this.Fabric = obj.Fabric;
            this.VisualLayoutNotes = obj.VisualLayoutNotes;
            this.Order = obj.Order;
            this.Label = obj.Label;
            this.Status = obj.Status;
            this.StatusID = obj.StatusID;
            this.ShipmentDate = obj.ShipmentDate;
            this.SheduledDate = obj.SheduledDate;
            this.IsRepeat = obj.IsRepeat;
            this.RequestedDate = obj.RequestedDate;
            this.EditedPrice = obj.EditedPrice;
            this.EditedPriceRemarks = obj.EditedPriceRemarks;
            this.Quantity = obj.Quantity;
            this.EditedIndicoPrice = obj.EditedIndicoPrice;
            this.TotalIndicoPrice = obj.TotalIndicoPrice;
            this.Surcharge = obj.Surcharge;
        }
        
        private static List<Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO> IQueryableToList(IQueryable<Indico.DAL.ReturnOrderDetailsIndicoPriceView> oQuery)
        {
            List<Indico.DAL.ReturnOrderDetailsIndicoPriceView> oList = oQuery.ToList();
            List<Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO> rList = new List<Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO>(oList.Count);
            foreach (Indico.DAL.ReturnOrderDetailsIndicoPriceView o in oList)
            {
                Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO obj = new Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO(o);
                rList.Add(obj);
            }
            return rList;
        }
        #endregion
        
        #region BusinessObject methods
        
        #region GetAllObject
        public static List<Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public static List<Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public static List<Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public static List<Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnOrderDetailsIndicoPriceView> oQuery =
                (from o in context.ReturnOrderDetailsIndicoPriceView
                 orderby o.OrderDetail
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.OrderDetail).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO> returnorderdetailsindicopriceviews = IQueryableToList(oQuery);
            context.Dispose();
            return returnorderdetailsindicopriceviews;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnOrderDetailsIndicoPriceView> oQuery =
                (from o in context.ReturnOrderDetailsIndicoPriceView
                 where
                    (this.OrderDetail == null || this.OrderDetail == o.OrderDetail) &&
                    (this.OrderType == null || this.OrderType == o.OrderType) &&
                    (this.VisualLayout == null || this.VisualLayout == o.VisualLayout) &&
                    (this.VisualLayoutID == null || this.VisualLayoutID == o.VisualLayoutID) &&
                    (this.ArtWorkID == null || this.ArtWorkID == o.ArtWorkID) &&
                    (this.Pattern == null || this.Pattern == o.Pattern) &&
                    (this.PatternID == null || this.PatternID == o.PatternID) &&
                    (this.FabricID == null || this.FabricID == o.FabricID) &&
                    (this.Distributor == null || this.Distributor == o.Distributor) &&
                    (this.Fabric == null || this.Fabric == o.Fabric) &&
                    (this.VisualLayoutNotes == null || this.VisualLayoutNotes == o.VisualLayoutNotes) &&
                    (this.Order == null || this.Order == o.Order) &&
                    (this.Label == null || this.Label == o.Label) &&
                    (this.Status == null || this.Status == o.Status) &&
                    (this.StatusID == null || this.StatusID == o.StatusID) &&
                    (this.ShipmentDate == null || this.ShipmentDate == o.ShipmentDate) &&
                    (this.SheduledDate == null || this.SheduledDate == o.SheduledDate) &&
                    (this.IsRepeat == null || this.IsRepeat == o.IsRepeat) &&
                    (this.RequestedDate == null || this.RequestedDate == o.RequestedDate) &&
                    (this.EditedPrice == null || this.EditedPrice == o.EditedPrice) &&
                    (this.EditedPriceRemarks == null || this.EditedPriceRemarks == o.EditedPriceRemarks) &&
                    (this.Quantity == null || this.Quantity == o.Quantity) &&
                    (this.EditedIndicoPrice == null || this.EditedIndicoPrice == o.EditedIndicoPrice) &&
                    (this.TotalIndicoPrice == null || this.TotalIndicoPrice == o.TotalIndicoPrice) &&
                    (this.Surcharge == null || this.Surcharge == o.Surcharge) 
                 orderby o.OrderDetail
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.OrderDetail).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO> returnorderdetailsindicopriceviews = IQueryableToList(oQuery);
            context.Dispose();
            return returnorderdetailsindicopriceviews;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnOrderDetailsIndicoPriceView
                 where
                    (this.OrderDetail == null || this.OrderDetail == o.OrderDetail) &&
                    (this.OrderType == null || this.OrderType == o.OrderType) &&
                    (this.VisualLayout == null || this.VisualLayout == o.VisualLayout) &&
                    (this.VisualLayoutID == null || this.VisualLayoutID == o.VisualLayoutID) &&
                    (this.ArtWorkID == null || this.ArtWorkID == o.ArtWorkID) &&
                    (this.Pattern == null || this.Pattern == o.Pattern) &&
                    (this.PatternID == null || this.PatternID == o.PatternID) &&
                    (this.FabricID == null || this.FabricID == o.FabricID) &&
                    (this.Distributor == null || this.Distributor == o.Distributor) &&
                    (this.Fabric == null || this.Fabric == o.Fabric) &&
                    (this.VisualLayoutNotes == null || this.VisualLayoutNotes == o.VisualLayoutNotes) &&
                    (this.Order == null || this.Order == o.Order) &&
                    (this.Label == null || this.Label == o.Label) &&
                    (this.Status == null || this.Status == o.Status) &&
                    (this.StatusID == null || this.StatusID == o.StatusID) &&
                    (this.ShipmentDate == null || this.ShipmentDate == o.ShipmentDate) &&
                    (this.SheduledDate == null || this.SheduledDate == o.SheduledDate) &&
                    (this.IsRepeat == null || this.IsRepeat == o.IsRepeat) &&
                    (this.RequestedDate == null || this.RequestedDate == o.RequestedDate) &&
                    (this.EditedPrice == null || this.EditedPrice == o.EditedPrice) &&
                    (this.EditedPriceRemarks == null || this.EditedPriceRemarks == o.EditedPriceRemarks) &&
                    (this.Quantity == null || this.Quantity == o.Quantity) &&
                    (this.EditedIndicoPrice == null || this.EditedIndicoPrice == o.EditedIndicoPrice) &&
                    (this.TotalIndicoPrice == null || this.TotalIndicoPrice == o.TotalIndicoPrice) &&
                    (this.Surcharge == null || this.Surcharge == o.Surcharge) 
                 orderby o.OrderDetail
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnOrderDetailsIndicoPriceView> oQuery =
                (from o in context.ReturnOrderDetailsIndicoPriceView
                 where
                    (this.OrderDetail == null || o.OrderDetail == this.OrderDetail) &&
                    (this.OrderType == null || o.OrderType.Contains(this.OrderType)) &&
                    (this.VisualLayout == null || o.VisualLayout.Contains(this.VisualLayout)) &&
                    (this.VisualLayoutID == null || o.VisualLayoutID == this.VisualLayoutID) &&
                    (this.ArtWorkID == null || o.ArtWorkID == this.ArtWorkID) &&
                    (this.Pattern == null || o.Pattern.Contains(this.Pattern)) &&
                    (this.PatternID == null || o.PatternID == this.PatternID) &&
                    (this.FabricID == null || o.FabricID == this.FabricID) &&
                    (this.Distributor == null || o.Distributor == this.Distributor) &&
                    (this.Fabric == null || o.Fabric.Contains(this.Fabric)) &&
                    (this.VisualLayoutNotes == null || o.VisualLayoutNotes.Contains(this.VisualLayoutNotes)) &&
                    (this.Order == null || o.Order == this.Order) &&
                    (this.Label == null || o.Label == this.Label) &&
                    (this.Status == null || o.Status.Contains(this.Status)) &&
                    (this.StatusID == null || o.StatusID == this.StatusID) &&
                    (this.ShipmentDate == null || o.ShipmentDate == this.ShipmentDate) &&
                    (this.SheduledDate == null || o.SheduledDate == this.SheduledDate) &&
                    (this.IsRepeat == null || o.IsRepeat == this.IsRepeat) &&
                    (this.RequestedDate == null || o.RequestedDate == this.RequestedDate) &&
                    (this.EditedPrice == null || o.EditedPrice == this.EditedPrice) &&
                    (this.EditedPriceRemarks == null || o.EditedPriceRemarks.Contains(this.EditedPriceRemarks)) &&
                    (this.Quantity == null || o.Quantity == this.Quantity) &&
                    (this.EditedIndicoPrice == null || o.EditedIndicoPrice == this.EditedIndicoPrice) &&
                    (this.TotalIndicoPrice == null || o.TotalIndicoPrice == this.TotalIndicoPrice) &&
                    (this.Surcharge == null || o.Surcharge == this.Surcharge) 
                 orderby o.OrderDetail
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.OrderDetail).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO> returnorderdetailsindicopriceviews = IQueryableToList(oQuery);
            context.Dispose();
            return returnorderdetailsindicopriceviews;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnOrderDetailsIndicoPriceView
                 where
                    (this.OrderDetail == null || o.OrderDetail == this.OrderDetail) &&
                    (this.OrderType == null || o.OrderType.Contains(this.OrderType)) &&
                    (this.VisualLayout == null || o.VisualLayout.Contains(this.VisualLayout)) &&
                    (this.VisualLayoutID == null || o.VisualLayoutID == this.VisualLayoutID) &&
                    (this.ArtWorkID == null || o.ArtWorkID == this.ArtWorkID) &&
                    (this.Pattern == null || o.Pattern.Contains(this.Pattern)) &&
                    (this.PatternID == null || o.PatternID == this.PatternID) &&
                    (this.FabricID == null || o.FabricID == this.FabricID) &&
                    (this.Distributor == null || o.Distributor == this.Distributor) &&
                    (this.Fabric == null || o.Fabric.Contains(this.Fabric)) &&
                    (this.VisualLayoutNotes == null || o.VisualLayoutNotes.Contains(this.VisualLayoutNotes)) &&
                    (this.Order == null || o.Order == this.Order) &&
                    (this.Label == null || o.Label == this.Label) &&
                    (this.Status == null || o.Status.Contains(this.Status)) &&
                    (this.StatusID == null || o.StatusID == this.StatusID) &&
                    (this.ShipmentDate == null || o.ShipmentDate == this.ShipmentDate) &&
                    (this.SheduledDate == null || o.SheduledDate == this.SheduledDate) &&
                    (this.IsRepeat == null || o.IsRepeat == this.IsRepeat) &&
                    (this.RequestedDate == null || o.RequestedDate == this.RequestedDate) &&
                    (this.EditedPrice == null || o.EditedPrice == this.EditedPrice) &&
                    (this.EditedPriceRemarks == null || o.EditedPriceRemarks.Contains(this.EditedPriceRemarks)) &&
                    (this.Quantity == null || o.Quantity == this.Quantity) &&
                    (this.EditedIndicoPrice == null || o.EditedIndicoPrice == this.EditedIndicoPrice) &&
                    (this.TotalIndicoPrice == null || o.TotalIndicoPrice == this.TotalIndicoPrice) &&
                    (this.Surcharge == null || o.Surcharge == this.Surcharge) 
                 orderby o.OrderDetail
                 select o).Count();
            
        }
        
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnOrderDetailsIndicoPriceView> oQuery =
                (from o in context.ReturnOrderDetailsIndicoPriceView
                 where
                    (this.OrderDetail == null || this.OrderDetail == o.OrderDetail) && 
                    (this.VisualLayoutID == null || this.VisualLayoutID == o.VisualLayoutID) && 
                    (this.ArtWorkID == null || this.ArtWorkID == o.ArtWorkID) && 
                    (this.PatternID == null || this.PatternID == o.PatternID) && 
                    (this.FabricID == null || this.FabricID == o.FabricID) && 
                    (this.Distributor == null || this.Distributor == o.Distributor) && 
                    (this.Order == null || this.Order == o.Order) && 
                    (this.Label == null || this.Label == o.Label) && 
                    (this.StatusID == null || this.StatusID == o.StatusID) && 
                    (this.ShipmentDate == null || this.ShipmentDate == o.ShipmentDate) && 
                    (this.SheduledDate == null || this.SheduledDate == o.SheduledDate) && 
                    (this.IsRepeat == null || this.IsRepeat == o.IsRepeat) && 
                    (this.RequestedDate == null || this.RequestedDate == o.RequestedDate) && 
                    (this.EditedPrice == null || this.EditedPrice == o.EditedPrice) && 
                    (this.Quantity == null || this.Quantity == o.Quantity) && 
                    (this.EditedIndicoPrice == null || this.EditedIndicoPrice == o.EditedIndicoPrice) && 
                    (this.TotalIndicoPrice == null || this.TotalIndicoPrice == o.TotalIndicoPrice) && 
                    (this.Surcharge == null || this.Surcharge == o.Surcharge) && 
                    ((o.OrderType.Contains(this.OrderType)) ||
                    (o.VisualLayout.Contains(this.VisualLayout)) ||
                    (o.Pattern.Contains(this.Pattern)) ||
                    (o.Fabric.Contains(this.Fabric)) ||
                    (o.VisualLayoutNotes.Contains(this.VisualLayoutNotes)) ||
                    (o.Status.Contains(this.Status)) ||
                    (o.EditedPriceRemarks.Contains(this.EditedPriceRemarks)) ||
                    (this.OrderType == null && this.VisualLayout == null && this.Pattern == null && this.Fabric == null && this.VisualLayoutNotes == null && this.Status == null && this.EditedPriceRemarks == null ))
                 orderby o.OrderDetail
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.OrderDetail).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO> returnorderdetailsindicopriceviews = IQueryableToList(oQuery);
            context.Dispose();
            return returnorderdetailsindicopriceviews;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnOrderDetailsIndicoPriceView
                 where
                    (this.OrderDetail == null || this.OrderDetail == o.OrderDetail) && 
                    (this.VisualLayoutID == null || this.VisualLayoutID == o.VisualLayoutID) && 
                    (this.ArtWorkID == null || this.ArtWorkID == o.ArtWorkID) && 
                    (this.PatternID == null || this.PatternID == o.PatternID) && 
                    (this.FabricID == null || this.FabricID == o.FabricID) && 
                    (this.Distributor == null || this.Distributor == o.Distributor) && 
                    (this.Order == null || this.Order == o.Order) && 
                    (this.Label == null || this.Label == o.Label) && 
                    (this.StatusID == null || this.StatusID == o.StatusID) && 
                    (this.ShipmentDate == null || this.ShipmentDate == o.ShipmentDate) && 
                    (this.SheduledDate == null || this.SheduledDate == o.SheduledDate) && 
                    (this.IsRepeat == null || this.IsRepeat == o.IsRepeat) && 
                    (this.RequestedDate == null || this.RequestedDate == o.RequestedDate) && 
                    (this.EditedPrice == null || this.EditedPrice == o.EditedPrice) && 
                    (this.Quantity == null || this.Quantity == o.Quantity) && 
                    (this.EditedIndicoPrice == null || this.EditedIndicoPrice == o.EditedIndicoPrice) && 
                    (this.TotalIndicoPrice == null || this.TotalIndicoPrice == o.TotalIndicoPrice) && 
                    (this.Surcharge == null || this.Surcharge == o.Surcharge) && 
                    ((o.OrderType.Contains(this.OrderType)) ||
                    (o.VisualLayout.Contains(this.VisualLayout)) ||
                    (o.Pattern.Contains(this.Pattern)) ||
                    (o.Fabric.Contains(this.Fabric)) ||
                    (o.VisualLayoutNotes.Contains(this.VisualLayoutNotes)) ||
                    (o.Status.Contains(this.Status)) ||
                    (o.EditedPriceRemarks.Contains(this.EditedPriceRemarks)) ||
                    (this.OrderType == null && this.VisualLayout == null && this.Pattern == null && this.Fabric == null && this.VisualLayoutNotes == null && this.Status == null && this.EditedPriceRemarks == null ))
                 orderby o.OrderDetail
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO))
                return 1;
            Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBOComparer c = new Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO);
        }

        #endregion
        #endregion
    }
    
    #region ReturnOrderDetailsIndicoPriceViewBOComparer
    public class ReturnOrderDetailsIndicoPriceViewBOComparer : IComparer<Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO>
    {
        private string propertyToCompareName;
        public ReturnOrderDetailsIndicoPriceViewBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public ReturnOrderDetailsIndicoPriceViewBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO> Members
        public int Compare(Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO x, Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO x, Indico.BusinessObjects.ReturnOrderDetailsIndicoPriceViewBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
