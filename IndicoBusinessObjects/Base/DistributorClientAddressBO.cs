// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class DistributorClientAddressBO : BusinessObject, IComparable
    {
        #region fields
        #region Scalar Fields
        private int id;
        private string _address = string.Empty;
        private int? _addressType;
        private int? _client;
        private string _companyName = string.Empty;
        private string _contactName = string.Empty;
        private string _contactPhone = string.Empty;
        private int _country;
        private int? _distributor;
        private string _emailAddress;
        private bool _isAdelaideWarehouse;
        private int? _port;
        private string _postCode = string.Empty;
        private string _state;
        private string _suburb = string.Empty;
        #endregion
        
        #region Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.JobNameBO _objClient;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.CountryBO _objCountry;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.CompanyBO _objDistributor;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.DestinationPortBO _objPort;
        #endregion
        
        #region Foreign Table Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.InvoiceBO> invoicesWhereThisIsBillToList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _invoicesWhereThisIsBillToLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.InvoiceBO> invoicesWhereThisIsShipToList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _invoicesWhereThisIsShipToLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.OrderBO> ordersWhereThisIsBillingAddressList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _ordersWhereThisIsBillingAddressLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.OrderBO> ordersWhereThisIsDespatchToAddressList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _ordersWhereThisIsDespatchToAddressLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.OrderDetailBO> orderDetailsWhereThisIsDespatchToList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _orderDetailsWhereThisIsDespatchToLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.ReservationBO> reservationsWhereThisIsShipToList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _reservationsWhereThisIsShipToLoaded;
        #endregion
        
        #region Other fields
        
        private Indico.DAL.DistributorClientAddress _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>. The maximum length of this property is 255.</summary>
        public string Address
        {   
            get {return _address;}
            set 
            {
                OnAddressChanging(value);
                _address = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Address = value;
                }
                OnAddressChanged();
            }
        }
        /// <summary>.</summary>
        public int? AddressType
        {   
            get {return _addressType;}
            set 
            {
                OnAddressTypeChanging(value);
                _addressType = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.AddressType = value;
                }
                OnAddressTypeChanged();
            }
        }
        /// <summary>.</summary>
        public int? Client
        {   
            get {return _client;}
            set 
            {
                OnClientChanging(value);
                _client = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.Client = (from o in this._context.Context.JobName
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.JobName>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Client = null;
                OnClientChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string CompanyName
        {   
            get {return _companyName;}
            set 
            {
                OnCompanyNameChanging(value);
                _companyName = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CompanyName = value;
                }
                OnCompanyNameChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string ContactName
        {   
            get {return _contactName;}
            set 
            {
                OnContactNameChanging(value);
                _contactName = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ContactName = value;
                }
                OnContactNameChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string ContactPhone
        {   
            get {return _contactPhone;}
            set 
            {
                OnContactPhoneChanging(value);
                _contactPhone = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ContactPhone = value;
                }
                OnContactPhoneChanged();
            }
        }
        /// <summary>.</summary>
        public int Country
        {   
            get {return _country;}
            set 
            {
                OnCountryChanging(value);
                _country = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Country = (from o in this._context.Context.Country
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Country>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Country = null;
                OnCountryChanged();
            }
        }
        /// <summary>.</summary>
        public int? Distributor
        {   
            get {return _distributor;}
            set 
            {
                OnDistributorChanging(value);
                _distributor = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.Distributor = (from o in this._context.Context.Company
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Company>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Distributor = null;
                OnDistributorChanged();
            }
        }
        /// <summary>. The maximum length of this property is 128.</summary>
        public string EmailAddress
        {   
            get {return _emailAddress;}
            set 
            {
                OnEmailAddressChanging(value);
                _emailAddress = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.EmailAddress = value;
                }
                OnEmailAddressChanged();
            }
        }
        /// <summary>.</summary>
        public bool IsAdelaideWarehouse
        {   
            get {return _isAdelaideWarehouse;}
            set 
            {
                OnIsAdelaideWarehouseChanging(value);
                _isAdelaideWarehouse = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsAdelaideWarehouse = value;
                }
                OnIsAdelaideWarehouseChanged();
            }
        }
        /// <summary>.</summary>
        public int? Port
        {   
            get {return _port;}
            set 
            {
                OnPortChanging(value);
                _port = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.Port = (from o in this._context.Context.DestinationPort
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.DestinationPort>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Port = null;
                OnPortChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string PostCode
        {   
            get {return _postCode;}
            set 
            {
                OnPostCodeChanging(value);
                _postCode = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.PostCode = value;
                }
                OnPostCodeChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string State
        {   
            get {return _state;}
            set 
            {
                OnStateChanging(value);
                _state = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.State = value;
                }
                OnStateChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string Suburb
        {   
            get {return _suburb;}
            set 
            {
                OnSuburbChanging(value);
                _suburb = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Suburb = value;
                }
                OnSuburbChanged();
            }
        }
        
        internal Indico.DAL.DistributorClientAddress ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        ///<summary>The JobNameBO object identified by the value of Client</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.JobNameBO objClient
        {
            get
            {
                if (_client != null && _client > 0 && _objClient == null)
                {
                        if (this._context == null)
                        {
                            _objClient = new Indico.BusinessObjects.JobNameBO();
                        }
                        else
                        {
                            _objClient = new Indico.BusinessObjects.JobNameBO(ref this._context);
                        }
                        _objClient.ID = Convert.ToInt32(_client);
                        _objClient.GetObject(); 
                }
                return _objClient;
            }
            set
            { 
                _objClient = value;
                _client = _objClient.ID;
            }
        }
        ///<summary>The CountryBO object identified by the value of Country</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.CountryBO objCountry
        {
            get
            {
                if ( _country > 0 && _objCountry == null)
                {
                        if (this._context == null)
                        {
                            _objCountry = new Indico.BusinessObjects.CountryBO();
                        }
                        else
                        {
                            _objCountry = new Indico.BusinessObjects.CountryBO(ref this._context);
                        }
                        _objCountry.ID = _country;
                        _objCountry.GetObject(); 
                }
                return _objCountry;
            }
            set
            { 
                _objCountry = value;
                _country = _objCountry.ID;
            }
        }
        ///<summary>The CompanyBO object identified by the value of Distributor</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.CompanyBO objDistributor
        {
            get
            {
                if (_distributor != null && _distributor > 0 && _objDistributor == null)
                {
                        if (this._context == null)
                        {
                            _objDistributor = new Indico.BusinessObjects.CompanyBO();
                        }
                        else
                        {
                            _objDistributor = new Indico.BusinessObjects.CompanyBO(ref this._context);
                        }
                        _objDistributor.ID = Convert.ToInt32(_distributor);
                        _objDistributor.GetObject(); 
                }
                return _objDistributor;
            }
            set
            { 
                _objDistributor = value;
                _distributor = _objDistributor.ID;
            }
        }
        ///<summary>The DestinationPortBO object identified by the value of Port</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.DestinationPortBO objPort
        {
            get
            {
                if (_port != null && _port > 0 && _objPort == null)
                {
                        if (this._context == null)
                        {
                            _objPort = new Indico.BusinessObjects.DestinationPortBO();
                        }
                        else
                        {
                            _objPort = new Indico.BusinessObjects.DestinationPortBO(ref this._context);
                        }
                        _objPort.ID = Convert.ToInt32(_port);
                        _objPort.GetObject(); 
                }
                return _objPort;
            }
            set
            { 
                _objPort = value;
                _port = _objPort.ID;
            }
        }
        #endregion
        
        #region Foreign Object Foreign Key Collections
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.InvoiceBO> InvoicesWhereThisIsBillTo // FK_Invoice_BillTo
        {
            get
            {
                if (!_invoicesWhereThisIsBillToLoaded)
                {
                    _invoicesWhereThisIsBillToLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.DistributorClientAddress obj = (from o in context.DistributorClientAddress
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.InvoicesWhereThisIsBillTo.Load();
                        invoicesWhereThisIsBillToList = new IndicoList<Indico.BusinessObjects.InvoiceBO>(obj.InvoicesWhereThisIsBillTo.Count);
                        
                        foreach (Indico.DAL.Invoice o in obj.InvoicesWhereThisIsBillTo)
                        {
                            Indico.BusinessObjects.InvoiceBO fkObj = new Indico.BusinessObjects.InvoiceBO(o, ref this._context);
                            invoicesWhereThisIsBillToList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        invoicesWhereThisIsBillToList = new IndicoList<Indico.BusinessObjects.InvoiceBO>();
                    }
                    
                    invoicesWhereThisIsBillToList.OnBeforeRemove += new EventHandler(InvoicesWhereThisIsBillToList_OnBeforeRemove);
                    invoicesWhereThisIsBillToList.OnAfterAdd += new EventHandler(InvoicesWhereThisIsBillToList_OnAfterAdd);
                }
                
                return invoicesWhereThisIsBillToList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.InvoiceBO> InvoicesWhereThisIsShipTo // FK_Invoice_ShipTo
        {
            get
            {
                if (!_invoicesWhereThisIsShipToLoaded)
                {
                    _invoicesWhereThisIsShipToLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.DistributorClientAddress obj = (from o in context.DistributorClientAddress
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.InvoicesWhereThisIsShipTo.Load();
                        invoicesWhereThisIsShipToList = new IndicoList<Indico.BusinessObjects.InvoiceBO>(obj.InvoicesWhereThisIsShipTo.Count);
                        
                        foreach (Indico.DAL.Invoice o in obj.InvoicesWhereThisIsShipTo)
                        {
                            Indico.BusinessObjects.InvoiceBO fkObj = new Indico.BusinessObjects.InvoiceBO(o, ref this._context);
                            invoicesWhereThisIsShipToList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        invoicesWhereThisIsShipToList = new IndicoList<Indico.BusinessObjects.InvoiceBO>();
                    }
                    
                    invoicesWhereThisIsShipToList.OnBeforeRemove += new EventHandler(InvoicesWhereThisIsShipToList_OnBeforeRemove);
                    invoicesWhereThisIsShipToList.OnAfterAdd += new EventHandler(InvoicesWhereThisIsShipToList_OnAfterAdd);
                }
                
                return invoicesWhereThisIsShipToList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.OrderBO> OrdersWhereThisIsBillingAddress // FK_Order_BillingAddress
        {
            get
            {
                if (!_ordersWhereThisIsBillingAddressLoaded)
                {
                    _ordersWhereThisIsBillingAddressLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.DistributorClientAddress obj = (from o in context.DistributorClientAddress
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.OrdersWhereThisIsBillingAddress.Load();
                        ordersWhereThisIsBillingAddressList = new IndicoList<Indico.BusinessObjects.OrderBO>(obj.OrdersWhereThisIsBillingAddress.Count);
                        
                        foreach (Indico.DAL.Order o in obj.OrdersWhereThisIsBillingAddress)
                        {
                            Indico.BusinessObjects.OrderBO fkObj = new Indico.BusinessObjects.OrderBO(o, ref this._context);
                            ordersWhereThisIsBillingAddressList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        ordersWhereThisIsBillingAddressList = new IndicoList<Indico.BusinessObjects.OrderBO>();
                    }
                    
                    ordersWhereThisIsBillingAddressList.OnBeforeRemove += new EventHandler(OrdersWhereThisIsBillingAddressList_OnBeforeRemove);
                    ordersWhereThisIsBillingAddressList.OnAfterAdd += new EventHandler(OrdersWhereThisIsBillingAddressList_OnAfterAdd);
                }
                
                return ordersWhereThisIsBillingAddressList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.OrderBO> OrdersWhereThisIsDespatchToAddress // FK_Order_DespatchToAddress
        {
            get
            {
                if (!_ordersWhereThisIsDespatchToAddressLoaded)
                {
                    _ordersWhereThisIsDespatchToAddressLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.DistributorClientAddress obj = (from o in context.DistributorClientAddress
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.OrdersWhereThisIsDespatchToAddress.Load();
                        ordersWhereThisIsDespatchToAddressList = new IndicoList<Indico.BusinessObjects.OrderBO>(obj.OrdersWhereThisIsDespatchToAddress.Count);
                        
                        foreach (Indico.DAL.Order o in obj.OrdersWhereThisIsDespatchToAddress)
                        {
                            Indico.BusinessObjects.OrderBO fkObj = new Indico.BusinessObjects.OrderBO(o, ref this._context);
                            ordersWhereThisIsDespatchToAddressList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        ordersWhereThisIsDespatchToAddressList = new IndicoList<Indico.BusinessObjects.OrderBO>();
                    }
                    
                    ordersWhereThisIsDespatchToAddressList.OnBeforeRemove += new EventHandler(OrdersWhereThisIsDespatchToAddressList_OnBeforeRemove);
                    ordersWhereThisIsDespatchToAddressList.OnAfterAdd += new EventHandler(OrdersWhereThisIsDespatchToAddressList_OnAfterAdd);
                }
                
                return ordersWhereThisIsDespatchToAddressList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.OrderDetailBO> OrderDetailsWhereThisIsDespatchTo // FK_OrderDetail_DespatchTo
        {
            get
            {
                if (!_orderDetailsWhereThisIsDespatchToLoaded)
                {
                    _orderDetailsWhereThisIsDespatchToLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.DistributorClientAddress obj = (from o in context.DistributorClientAddress
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.OrderDetailsWhereThisIsDespatchTo.Load();
                        orderDetailsWhereThisIsDespatchToList = new IndicoList<Indico.BusinessObjects.OrderDetailBO>(obj.OrderDetailsWhereThisIsDespatchTo.Count);
                        
                        foreach (Indico.DAL.OrderDetail o in obj.OrderDetailsWhereThisIsDespatchTo)
                        {
                            Indico.BusinessObjects.OrderDetailBO fkObj = new Indico.BusinessObjects.OrderDetailBO(o, ref this._context);
                            orderDetailsWhereThisIsDespatchToList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        orderDetailsWhereThisIsDespatchToList = new IndicoList<Indico.BusinessObjects.OrderDetailBO>();
                    }
                    
                    orderDetailsWhereThisIsDespatchToList.OnBeforeRemove += new EventHandler(OrderDetailsWhereThisIsDespatchToList_OnBeforeRemove);
                    orderDetailsWhereThisIsDespatchToList.OnAfterAdd += new EventHandler(OrderDetailsWhereThisIsDespatchToList_OnAfterAdd);
                }
                
                return orderDetailsWhereThisIsDespatchToList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.ReservationBO> ReservationsWhereThisIsShipTo // FK_Reservation_ShipTo
        {
            get
            {
                if (!_reservationsWhereThisIsShipToLoaded)
                {
                    _reservationsWhereThisIsShipToLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.DistributorClientAddress obj = (from o in context.DistributorClientAddress
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.ReservationsWhereThisIsShipTo.Load();
                        reservationsWhereThisIsShipToList = new IndicoList<Indico.BusinessObjects.ReservationBO>(obj.ReservationsWhereThisIsShipTo.Count);
                        
                        foreach (Indico.DAL.Reservation o in obj.ReservationsWhereThisIsShipTo)
                        {
                            Indico.BusinessObjects.ReservationBO fkObj = new Indico.BusinessObjects.ReservationBO(o, ref this._context);
                            reservationsWhereThisIsShipToList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        reservationsWhereThisIsShipToList = new IndicoList<Indico.BusinessObjects.ReservationBO>();
                    }
                    
                    reservationsWhereThisIsShipToList.OnBeforeRemove += new EventHandler(ReservationsWhereThisIsShipToList_OnBeforeRemove);
                    reservationsWhereThisIsShipToList.OnAfterAdd += new EventHandler(ReservationsWhereThisIsShipToList_OnAfterAdd);
                }
                
                return reservationsWhereThisIsShipToList;
            }
        }
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the DistributorClientAddressBO class using the supplied Indico.DAL.DistributorClientAddress. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.DistributorClientAddress whose properties will be used to initialise the DistributorClientAddressBO</param>
        internal DistributorClientAddressBO(Indico.DAL.DistributorClientAddress obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.DistributorClientAddress 
            this.ID = obj.ID;
            
            this.Address = obj.Address;
            this.AddressType = obj.AddressType;
            this.Client = (obj.ClientReference.EntityKey != null && obj.ClientReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ClientReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.CompanyName = obj.CompanyName;
            this.ContactName = obj.ContactName;
            this.ContactPhone = obj.ContactPhone;
            this.Country = (obj.CountryReference.EntityKey != null && obj.CountryReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CountryReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Distributor = (obj.DistributorReference.EntityKey != null && obj.DistributorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.DistributorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.EmailAddress = obj.EmailAddress;
            this.IsAdelaideWarehouse = obj.IsAdelaideWarehouse;
            this.Port = (obj.PortReference.EntityKey != null && obj.PortReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PortReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.PostCode = obj.PostCode;
            this.State = obj.State;
            this.Suburb = obj.Suburb;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.DistributorClientAddress SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.DistributorClientAddress properties
            Indico.DAL.DistributorClientAddress obj = new Indico.DAL.DistributorClientAddress();
            
            if (this.ID > 0)
            {
                obj = context.DistributorClientAddress.FirstOrDefault<DistributorClientAddress>(o => o.ID == this.ID);
            }
            
            obj.Address = this.Address;
            obj.AddressType = this.AddressType;
            obj.CompanyName = this.CompanyName;
            obj.ContactName = this.ContactName;
            obj.ContactPhone = this.ContactPhone;
            obj.EmailAddress = this.EmailAddress;
            obj.IsAdelaideWarehouse = this.IsAdelaideWarehouse;
            obj.PostCode = this.PostCode;
            obj.State = this.State;
            obj.Suburb = this.Suburb;
            
            if (this.Client != null && this.Client > 0) obj.Client = context.JobName.FirstOrDefault(o => o.ID == this.Client);
            if (this.Country > 0) obj.Country = context.Country.FirstOrDefault(o => o.ID == this.Country);
            if (this.Distributor != null && this.Distributor > 0) obj.Distributor = context.Company.FirstOrDefault(o => o.ID == this.Distributor);
            if (this.Port != null && this.Port > 0) obj.Port = context.DestinationPort.FirstOrDefault(o => o.ID == this.Port);
            
            if (_invoicesWhereThisIsBillToLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.InvoiceBO.ToEntityList(this.InvoicesWhereThisIsBillTo, context), 
                    obj.InvoicesWhereThisIsBillTo);
            if (_invoicesWhereThisIsShipToLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.InvoiceBO.ToEntityList(this.InvoicesWhereThisIsShipTo, context), 
                    obj.InvoicesWhereThisIsShipTo);
            if (_ordersWhereThisIsBillingAddressLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.OrderBO.ToEntityList(this.OrdersWhereThisIsBillingAddress, context), 
                    obj.OrdersWhereThisIsBillingAddress);
            if (_ordersWhereThisIsDespatchToAddressLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.OrderBO.ToEntityList(this.OrdersWhereThisIsDespatchToAddress, context), 
                    obj.OrdersWhereThisIsDespatchToAddress);
            if (_orderDetailsWhereThisIsDespatchToLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.OrderDetailBO.ToEntityList(this.OrderDetailsWhereThisIsDespatchTo, context), 
                    obj.OrderDetailsWhereThisIsDespatchTo);
            if (_reservationsWhereThisIsShipToLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.ReservationBO.ToEntityList(this.ReservationsWhereThisIsShipTo, context), 
                    obj.ReservationsWhereThisIsShipTo);
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.DistributorClientAddress))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.DistributorClientAddress obj = (Indico.DAL.DistributorClientAddress)eObj;
            
            // set the Indico.BusinessObjects.DistributorClientAddressBO properties
            this.ID = obj.ID;
            
            this.Address = obj.Address;
            this.AddressType = obj.AddressType;
            this.CompanyName = obj.CompanyName;
            this.ContactName = obj.ContactName;
            this.ContactPhone = obj.ContactPhone;
            this.EmailAddress = obj.EmailAddress;
            this.IsAdelaideWarehouse = obj.IsAdelaideWarehouse;
            this.PostCode = obj.PostCode;
            this.State = obj.State;
            this.Suburb = obj.Suburb;
            
            this.Client = (obj.ClientReference.EntityKey != null && obj.ClientReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ClientReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Country = (obj.CountryReference.EntityKey != null && obj.CountryReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CountryReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Distributor = (obj.DistributorReference.EntityKey != null && obj.DistributorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.DistributorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Port = (obj.PortReference.EntityKey != null && obj.PortReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PortReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.DistributorClientAddressBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.DistributorClientAddressBO properties
            this.ID = obj.ID;
            
            this.Address = obj.Address;
            this.AddressType = obj.AddressType;
            this.Client = obj.Client;
            this.CompanyName = obj.CompanyName;
            this.ContactName = obj.ContactName;
            this.ContactPhone = obj.ContactPhone;
            this.Country = obj.Country;
            this.Distributor = obj.Distributor;
            this.EmailAddress = obj.EmailAddress;
            this.IsAdelaideWarehouse = obj.IsAdelaideWarehouse;
            this.Port = obj.Port;
            this.PostCode = obj.PostCode;
            this.State = obj.State;
            this.Suburb = obj.Suburb;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.DistributorClientAddressBO> IQueryableToList(IQueryable<Indico.DAL.DistributorClientAddress> oQuery)
        {
            List<Indico.DAL.DistributorClientAddress> oList = oQuery.ToList();
            List<Indico.BusinessObjects.DistributorClientAddressBO> rList = new List<Indico.BusinessObjects.DistributorClientAddressBO>(oList.Count);
            foreach (Indico.DAL.DistributorClientAddress o in oList)
            {
                Indico.BusinessObjects.DistributorClientAddressBO obj = new Indico.BusinessObjects.DistributorClientAddressBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.DistributorClientAddressBO> ToList(IEnumerable<Indico.DAL.DistributorClientAddress> oQuery)
        {
            List<Indico.DAL.DistributorClientAddress> oList = oQuery.ToList();
            List<Indico.BusinessObjects.DistributorClientAddressBO> rList = new List<Indico.BusinessObjects.DistributorClientAddressBO>(oList.Count);
            foreach (Indico.DAL.DistributorClientAddress o in oList)
            {
                Indico.BusinessObjects.DistributorClientAddressBO obj = new Indico.BusinessObjects.DistributorClientAddressBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.DistributorClientAddress> ToEntityList(List<DistributorClientAddressBO> bos, IndicoEntities context)
        {
            // build a List of DistributorClientAddress entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.DistributorClientAddress.Count() == 0) ? new List<Indico.DAL.DistributorClientAddress>() : (context.DistributorClientAddress.Where(BuildContainsExpression<DistributorClientAddress, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.DistributorClientAddress>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.DistributorClientAddress> ToEntityCollection(List<DistributorClientAddressBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of DistributorClientAddress entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.DistributorClientAddress> el = (context.DistributorClientAddress.Count() == 0) ? new List<Indico.DAL.DistributorClientAddress>() : 
                context.DistributorClientAddress.Where(BuildContainsExpression<DistributorClientAddress, int>(e => e.ID, ids))
                .ToList<Indico.DAL.DistributorClientAddress>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.DistributorClientAddress> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.DistributorClientAddress>();
                
            foreach (Indico.DAL.DistributorClientAddress r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.DistributorClientAddress ToEntity(IndicoEntities context)
        {
            return (from o in context.DistributorClientAddress
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToDistributorClientAddress(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.DistributorClientAddress obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToDistributorClientAddress(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.DistributorClientAddress obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.DistributorClientAddress obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.DistributorClientAddressBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.DistributorClientAddressBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.DistributorClientAddress> oQuery =
                        from o in context.DistributorClientAddress
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.DistributorClientAddress> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.DistributorClientAddressBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.DistributorClientAddressBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.DistributorClientAddressBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.DistributorClientAddressBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.DistributorClientAddress> oQuery =
                (from o in context.DistributorClientAddress
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.DistributorClientAddressBO> distributorclientaddresss = IQueryableToList(oQuery);
            context.Dispose();
            return distributorclientaddresss;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.DistributorClientAddressBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.DistributorClientAddressBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.DistributorClientAddressBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.DistributorClientAddressBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.DistributorClientAddress> oQuery =
                (from o in context.DistributorClientAddress
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Address == string.Empty || this.Address == o.Address) &&
                    (this.Suburb == string.Empty || this.Suburb == o.Suburb) &&
                    (this.PostCode == string.Empty || this.PostCode == o.PostCode) &&
                    (this.Country == 0 || this.Country == o.Country.ID) &&
                    (this.ContactName == string.Empty || this.ContactName == o.ContactName) &&
                    (this.ContactPhone == string.Empty || this.ContactPhone == o.ContactPhone) &&
                    (this.CompanyName == string.Empty || this.CompanyName == o.CompanyName) &&
                    (this.State == null || this.State == o.State) &&
                    (this.Port == null || this.Port == o.Port.ID) &&
                    (this.EmailAddress == null || this.EmailAddress == o.EmailAddress) &&
                    (this.AddressType == null || this.AddressType == o.AddressType) &&
                    (this.Client == null || this.Client == o.Client.ID) &&
                    (this.IsAdelaideWarehouse == false || this.IsAdelaideWarehouse == o.IsAdelaideWarehouse) &&
                    (this.Distributor == null || this.Distributor == o.Distributor.ID) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.DistributorClientAddressBO> distributorclientaddresss = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return distributorclientaddresss;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.DistributorClientAddress
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Address == string.Empty || this.Address == o.Address) &&
                    (this.Suburb == string.Empty || this.Suburb == o.Suburb) &&
                    (this.PostCode == string.Empty || this.PostCode == o.PostCode) &&
                    (this.Country == 0 || this.Country == o.Country.ID) &&
                    (this.ContactName == string.Empty || this.ContactName == o.ContactName) &&
                    (this.ContactPhone == string.Empty || this.ContactPhone == o.ContactPhone) &&
                    (this.CompanyName == string.Empty || this.CompanyName == o.CompanyName) &&
                    (this.State == null || this.State == o.State) &&
                    (this.Port == null || this.Port == o.Port.ID) &&
                    (this.EmailAddress == null || this.EmailAddress == o.EmailAddress) &&
                    (this.AddressType == null || this.AddressType == o.AddressType) &&
                    (this.Client == null || this.Client == o.Client.ID) &&
                    (this.IsAdelaideWarehouse == false || this.IsAdelaideWarehouse == o.IsAdelaideWarehouse) &&
                    (this.Distributor == null || this.Distributor == o.Distributor.ID) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.DistributorClientAddressBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.DistributorClientAddressBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.DistributorClientAddressBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.DistributorClientAddressBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.DistributorClientAddress> oQuery =
                (from o in context.DistributorClientAddress
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Address == string.Empty || o.Address.Contains(this.Address)) &&
                    (this.Suburb == string.Empty || o.Suburb.Contains(this.Suburb)) &&
                    (this.PostCode == string.Empty || o.PostCode.Contains(this.PostCode)) &&
                    (this.Country == 0 || o.Country.ID == this.Country) &&
                    (this.ContactName == string.Empty || o.ContactName.Contains(this.ContactName)) &&
                    (this.ContactPhone == string.Empty || o.ContactPhone.Contains(this.ContactPhone)) &&
                    (this.CompanyName == string.Empty || o.CompanyName.Contains(this.CompanyName)) &&
                    (this.State == null || o.State.Contains(this.State)) &&
                    (this.Port == null || o.Port.ID == this.Port) &&
                    (this.EmailAddress == null || o.EmailAddress.Contains(this.EmailAddress)) &&
                    (this.AddressType == null || o.AddressType == this.AddressType) &&
                    (this.Client == null || o.Client.ID == this.Client) &&
                    (this.IsAdelaideWarehouse == false || o.IsAdelaideWarehouse == this.IsAdelaideWarehouse) &&
                    (this.Distributor == null || o.Distributor.ID == this.Distributor) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.DistributorClientAddressBO> distributorclientaddresss = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return distributorclientaddresss;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.DistributorClientAddress
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Address == string.Empty || o.Address.Contains(this.Address)) &&
                    (this.Suburb == string.Empty || o.Suburb.Contains(this.Suburb)) &&
                    (this.PostCode == string.Empty || o.PostCode.Contains(this.PostCode)) &&
                    (this.Country == 0 || o.Country.ID == this.Country) &&
                    (this.ContactName == string.Empty || o.ContactName.Contains(this.ContactName)) &&
                    (this.ContactPhone == string.Empty || o.ContactPhone.Contains(this.ContactPhone)) &&
                    (this.CompanyName == string.Empty || o.CompanyName.Contains(this.CompanyName)) &&
                    (this.State == null || o.State.Contains(this.State)) &&
                    (this.Port == null || o.Port.ID == this.Port) &&
                    (this.EmailAddress == null || o.EmailAddress.Contains(this.EmailAddress)) &&
                    (this.AddressType == null || o.AddressType == this.AddressType) &&
                    (this.Client == null || o.Client.ID == this.Client) &&
                    (this.IsAdelaideWarehouse == false || o.IsAdelaideWarehouse == this.IsAdelaideWarehouse) &&
                    (this.Distributor == null || o.Distributor.ID == this.Distributor) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.DistributorClientAddressBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.DistributorClientAddressBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.DistributorClientAddressBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.DistributorClientAddressBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.DistributorClientAddress> oQuery =
                (from o in context.DistributorClientAddress
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Country == 0 || this.Country == o.Country.ID) && 
                    (this.Port == null || this.Port == o.Port.ID) && 
                    (this.AddressType == null || this.AddressType == o.AddressType) && 
                    (this.Client == null || this.Client == o.Client.ID) && 
                    (this.IsAdelaideWarehouse == false || this.IsAdelaideWarehouse == o.IsAdelaideWarehouse) && 
                    (this.Distributor == null || this.Distributor == o.Distributor.ID) && 
                    ((o.Address.Contains(this.Address)) ||
                    (o.Suburb.Contains(this.Suburb)) ||
                    (o.PostCode.Contains(this.PostCode)) ||
                    (o.ContactName.Contains(this.ContactName)) ||
                    (o.ContactPhone.Contains(this.ContactPhone)) ||
                    (o.CompanyName.Contains(this.CompanyName)) ||
                    (o.State.Contains(this.State)) ||
                    (o.EmailAddress.Contains(this.EmailAddress)) ||
                    (this.Address == null && this.Suburb == null && this.PostCode == null && this.ContactName == null && this.ContactPhone == null && this.CompanyName == null && this.State == null && this.EmailAddress == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.DistributorClientAddressBO> distributorclientaddresss = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return distributorclientaddresss;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.DistributorClientAddress
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Country == 0 || this.Country == o.Country.ID) && 
                    (this.Port == null || this.Port == o.Port.ID) && 
                    (this.AddressType == null || this.AddressType == o.AddressType) && 
                    (this.Client == null || this.Client == o.Client.ID) && 
                    (this.IsAdelaideWarehouse == false || this.IsAdelaideWarehouse == o.IsAdelaideWarehouse) && 
                    (this.Distributor == null || this.Distributor == o.Distributor.ID) && 
                    ((o.Address.Contains(this.Address)) ||
                    (o.Suburb.Contains(this.Suburb)) ||
                    (o.PostCode.Contains(this.PostCode)) ||
                    (o.ContactName.Contains(this.ContactName)) ||
                    (o.ContactPhone.Contains(this.ContactPhone)) ||
                    (o.CompanyName.Contains(this.CompanyName)) ||
                    (o.State.Contains(this.State)) ||
                    (o.EmailAddress.Contains(this.EmailAddress)) ||
                    (this.Address == null && this.Suburb == null && this.PostCode == null && this.ContactName == null && this.ContactPhone == null && this.CompanyName == null && this.State == null && this.EmailAddress == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.DistributorClientAddressBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.DistributorClientAddressBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.DistributorClientAddressBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.DistributorClientAddressBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.DistributorClientAddressBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.DistributorClientAddressBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnDistributorClientAddressBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("DistributorClientAddressBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnDistributorClientAddressBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnDistributorClientAddressBOIDChanged();
        partial void OnDistributorClientAddressBOIDChanging(int value);
        
        partial void OnAddressChanged()
        {
            OnDistributorClientAddressBOAddressChanged();
        }
        
        partial void OnAddressChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("DistributorClientAddressBO.Address has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnDistributorClientAddressBOAddressChanging(value);
        }
        partial void OnAddressChanged();
        partial void OnAddressChanging(string value);
        partial void OnDistributorClientAddressBOAddressChanged();
        partial void OnDistributorClientAddressBOAddressChanging(string value);
        
        partial void OnSuburbChanged()
        {
            OnDistributorClientAddressBOSuburbChanged();
        }
        
        partial void OnSuburbChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("DistributorClientAddressBO.Suburb has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnDistributorClientAddressBOSuburbChanging(value);
        }
        partial void OnSuburbChanged();
        partial void OnSuburbChanging(string value);
        partial void OnDistributorClientAddressBOSuburbChanged();
        partial void OnDistributorClientAddressBOSuburbChanging(string value);
        
        partial void OnPostCodeChanged()
        {
            OnDistributorClientAddressBOPostCodeChanged();
        }
        
        partial void OnPostCodeChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("DistributorClientAddressBO.PostCode has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnDistributorClientAddressBOPostCodeChanging(value);
        }
        partial void OnPostCodeChanged();
        partial void OnPostCodeChanging(string value);
        partial void OnDistributorClientAddressBOPostCodeChanged();
        partial void OnDistributorClientAddressBOPostCodeChanging(string value);
        
        partial void OnCountryChanged()
        {
            OnDistributorClientAddressBOCountryChanged();
        }
        
        partial void OnCountryChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("DistributorClientAddressBO.Country must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnDistributorClientAddressBOCountryChanging(value);
        }
        partial void OnCountryChanged();
        partial void OnCountryChanging(int value);
        partial void OnDistributorClientAddressBOCountryChanged();
        partial void OnDistributorClientAddressBOCountryChanging(int value);
        
        partial void OnContactNameChanged()
        {
            OnDistributorClientAddressBOContactNameChanged();
        }
        
        partial void OnContactNameChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("DistributorClientAddressBO.ContactName has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnDistributorClientAddressBOContactNameChanging(value);
        }
        partial void OnContactNameChanged();
        partial void OnContactNameChanging(string value);
        partial void OnDistributorClientAddressBOContactNameChanged();
        partial void OnDistributorClientAddressBOContactNameChanging(string value);
        
        partial void OnContactPhoneChanged()
        {
            OnDistributorClientAddressBOContactPhoneChanged();
        }
        
        partial void OnContactPhoneChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("DistributorClientAddressBO.ContactPhone has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnDistributorClientAddressBOContactPhoneChanging(value);
        }
        partial void OnContactPhoneChanged();
        partial void OnContactPhoneChanging(string value);
        partial void OnDistributorClientAddressBOContactPhoneChanged();
        partial void OnDistributorClientAddressBOContactPhoneChanging(string value);
        
        partial void OnCompanyNameChanged()
        {
            OnDistributorClientAddressBOCompanyNameChanged();
        }
        
        partial void OnCompanyNameChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("DistributorClientAddressBO.CompanyName has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnDistributorClientAddressBOCompanyNameChanging(value);
        }
        partial void OnCompanyNameChanged();
        partial void OnCompanyNameChanging(string value);
        partial void OnDistributorClientAddressBOCompanyNameChanged();
        partial void OnDistributorClientAddressBOCompanyNameChanging(string value);
        
        partial void OnStateChanged()
        {
            OnDistributorClientAddressBOStateChanged();
        }
        
        partial void OnStateChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("DistributorClientAddressBO.State has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnDistributorClientAddressBOStateChanging(value);
        }
        partial void OnStateChanged();
        partial void OnStateChanging(string value);
        partial void OnDistributorClientAddressBOStateChanged();
        partial void OnDistributorClientAddressBOStateChanging(string value);
        
        partial void OnPortChanged()
        {
            OnDistributorClientAddressBOPortChanged();
        }
        
        partial void OnPortChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("DistributorClientAddressBO.Port must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnDistributorClientAddressBOPortChanging(value);
        }
        partial void OnPortChanged();
        partial void OnPortChanging(int? value);
        partial void OnDistributorClientAddressBOPortChanged();
        partial void OnDistributorClientAddressBOPortChanging(int? value);
        
        partial void OnEmailAddressChanged()
        {
            OnDistributorClientAddressBOEmailAddressChanged();
        }
        
        partial void OnEmailAddressChanging(string value)
        {
            if (value != null && value.Length > 128)
            {
                throw new Exception(String.Format("DistributorClientAddressBO.EmailAddress has a maximum length of 128. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnDistributorClientAddressBOEmailAddressChanging(value);
        }
        partial void OnEmailAddressChanged();
        partial void OnEmailAddressChanging(string value);
        partial void OnDistributorClientAddressBOEmailAddressChanged();
        partial void OnDistributorClientAddressBOEmailAddressChanging(string value);
        
        partial void OnAddressTypeChanged()
        {
            OnDistributorClientAddressBOAddressTypeChanged();
        }
        
        partial void OnAddressTypeChanging(int? value)
        {
            OnDistributorClientAddressBOAddressTypeChanging(value);
        }
        partial void OnAddressTypeChanged();
        partial void OnAddressTypeChanging(int? value);
        partial void OnDistributorClientAddressBOAddressTypeChanged();
        partial void OnDistributorClientAddressBOAddressTypeChanging(int? value);
        
        partial void OnClientChanged()
        {
            OnDistributorClientAddressBOClientChanged();
        }
        
        partial void OnClientChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("DistributorClientAddressBO.Client must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnDistributorClientAddressBOClientChanging(value);
        }
        partial void OnClientChanged();
        partial void OnClientChanging(int? value);
        partial void OnDistributorClientAddressBOClientChanged();
        partial void OnDistributorClientAddressBOClientChanging(int? value);
        
        partial void OnIsAdelaideWarehouseChanged()
        {
            OnDistributorClientAddressBOIsAdelaideWarehouseChanged();
        }
        
        partial void OnIsAdelaideWarehouseChanging(bool value)
        {
            OnDistributorClientAddressBOIsAdelaideWarehouseChanging(value);
        }
        partial void OnIsAdelaideWarehouseChanged();
        partial void OnIsAdelaideWarehouseChanging(bool value);
        partial void OnDistributorClientAddressBOIsAdelaideWarehouseChanged();
        partial void OnDistributorClientAddressBOIsAdelaideWarehouseChanging(bool value);
        
        partial void OnDistributorChanged()
        {
            OnDistributorClientAddressBODistributorChanged();
        }
        
        partial void OnDistributorChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("DistributorClientAddressBO.Distributor must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnDistributorClientAddressBODistributorChanging(value);
        }
        partial void OnDistributorChanged();
        partial void OnDistributorChanging(int? value);
        partial void OnDistributorClientAddressBODistributorChanged();
        partial void OnDistributorClientAddressBODistributorChanging(int? value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.DistributorClientAddressBO))
                return 1;
            Indico.BusinessObjects.DistributorClientAddressBOComparer c = new Indico.BusinessObjects.DistributorClientAddressBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.DistributorClientAddressBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.DistributorClientAddress)sender);
            }
        }
        
        void InvoicesWhereThisIsBillToList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Invoice obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.InvoicesWhereThisIsBillTo.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.InvoicesWhereThisIsBillTo.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void InvoicesWhereThisIsBillToList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Invoice obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.InvoicesWhereThisIsBillTo.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.InvoicesWhereThisIsBillTo.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void InvoicesWhereThisIsShipToList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Invoice obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.InvoicesWhereThisIsShipTo.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.InvoicesWhereThisIsShipTo.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void InvoicesWhereThisIsShipToList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Invoice obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.InvoicesWhereThisIsShipTo.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.InvoicesWhereThisIsShipTo.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrdersWhereThisIsBillingAddressList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Order obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrdersWhereThisIsBillingAddress.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrdersWhereThisIsBillingAddress.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrdersWhereThisIsBillingAddressList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Order obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrdersWhereThisIsBillingAddress.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrdersWhereThisIsBillingAddress.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrdersWhereThisIsDespatchToAddressList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Order obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrdersWhereThisIsDespatchToAddress.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrdersWhereThisIsDespatchToAddress.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrdersWhereThisIsDespatchToAddressList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Order obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrdersWhereThisIsDespatchToAddress.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrdersWhereThisIsDespatchToAddress.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrderDetailsWhereThisIsDespatchToList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.OrderDetail obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrderDetailsWhereThisIsDespatchTo.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrderDetailsWhereThisIsDespatchTo.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrderDetailsWhereThisIsDespatchToList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.OrderDetail obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrderDetailsWhereThisIsDespatchTo.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrderDetailsWhereThisIsDespatchTo.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void ReservationsWhereThisIsShipToList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Reservation obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.ReservationBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.ReservationBO>)sender)[((IndicoList<Indico.BusinessObjects.ReservationBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.ReservationsWhereThisIsShipTo.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.ReservationBO>)sender)[((IndicoList<Indico.BusinessObjects.ReservationBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.ReservationsWhereThisIsShipTo.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void ReservationsWhereThisIsShipToList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Reservation obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.ReservationBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.ReservationBO>)sender)[((IndicoList<Indico.BusinessObjects.ReservationBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.ReservationsWhereThisIsShipTo.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.ReservationBO>)sender)[((IndicoList<Indico.BusinessObjects.ReservationBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.ReservationsWhereThisIsShipTo.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
            this._invoicesWhereThisIsBillToLoaded = false;
            if (this.invoicesWhereThisIsBillToList != null)
            {
                this.invoicesWhereThisIsBillToList.OnBeforeRemove -= new EventHandler(InvoicesWhereThisIsBillToList_OnBeforeRemove);
                this.invoicesWhereThisIsBillToList.OnAfterAdd -= new EventHandler(InvoicesWhereThisIsBillToList_OnAfterAdd);
            }
            this._invoicesWhereThisIsShipToLoaded = false;
            if (this.invoicesWhereThisIsShipToList != null)
            {
                this.invoicesWhereThisIsShipToList.OnBeforeRemove -= new EventHandler(InvoicesWhereThisIsShipToList_OnBeforeRemove);
                this.invoicesWhereThisIsShipToList.OnAfterAdd -= new EventHandler(InvoicesWhereThisIsShipToList_OnAfterAdd);
            }
            this._ordersWhereThisIsBillingAddressLoaded = false;
            if (this.ordersWhereThisIsBillingAddressList != null)
            {
                this.ordersWhereThisIsBillingAddressList.OnBeforeRemove -= new EventHandler(OrdersWhereThisIsBillingAddressList_OnBeforeRemove);
                this.ordersWhereThisIsBillingAddressList.OnAfterAdd -= new EventHandler(OrdersWhereThisIsBillingAddressList_OnAfterAdd);
            }
            this._ordersWhereThisIsDespatchToAddressLoaded = false;
            if (this.ordersWhereThisIsDespatchToAddressList != null)
            {
                this.ordersWhereThisIsDespatchToAddressList.OnBeforeRemove -= new EventHandler(OrdersWhereThisIsDespatchToAddressList_OnBeforeRemove);
                this.ordersWhereThisIsDespatchToAddressList.OnAfterAdd -= new EventHandler(OrdersWhereThisIsDespatchToAddressList_OnAfterAdd);
            }
            this._orderDetailsWhereThisIsDespatchToLoaded = false;
            if (this.orderDetailsWhereThisIsDespatchToList != null)
            {
                this.orderDetailsWhereThisIsDespatchToList.OnBeforeRemove -= new EventHandler(OrderDetailsWhereThisIsDespatchToList_OnBeforeRemove);
                this.orderDetailsWhereThisIsDespatchToList.OnAfterAdd -= new EventHandler(OrderDetailsWhereThisIsDespatchToList_OnAfterAdd);
            }
            this._reservationsWhereThisIsShipToLoaded = false;
            if (this.reservationsWhereThisIsShipToList != null)
            {
                this.reservationsWhereThisIsShipToList.OnBeforeRemove -= new EventHandler(ReservationsWhereThisIsShipToList_OnBeforeRemove);
                this.reservationsWhereThisIsShipToList.OnAfterAdd -= new EventHandler(ReservationsWhereThisIsShipToList_OnAfterAdd);
            }
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region DistributorClientAddressBOComparer
    public class DistributorClientAddressBOComparer : IComparer<Indico.BusinessObjects.DistributorClientAddressBO>
    {
        private string propertyToCompareName;
        public DistributorClientAddressBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.DistributorClientAddressBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.DistributorClientAddressBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public DistributorClientAddressBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.DistributorClientAddressBO> Members
        public int Compare(Indico.BusinessObjects.DistributorClientAddressBO x, Indico.BusinessObjects.DistributorClientAddressBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.DistributorClientAddressBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.DistributorClientAddressBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.DistributorClientAddressBO x, Indico.BusinessObjects.DistributorClientAddressBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
