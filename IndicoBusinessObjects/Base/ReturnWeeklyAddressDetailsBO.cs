// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

//using Indico.BusinessObjects.Util;
//using Indico.BusinessObjects;
using Indico.DAL;


namespace Indico.BusinessObjects
{
    /// <summary>
    /// ReturnWeeklyAddressDetailsBO provides the business logic for maintaining Indico.DAL.ReturnWeeklyAddressDetails records in the data store.
    /// </summary>
    /// <remarks>
    /// ReturnWeeklyAddressDetailsBO provides the business logic for maintaining Indico.DAL.ReturnWeeklyAddressDetails records in the data store. 
    /// By default it provides basic Search methods for retrieving Indico.DAL.ReturnWeeklyAddressDetails
    /// records using the ReturnWeeklyAddressDetails DAL class. Other methods implement atomic chunks of Business Logic according to
    /// the business rules.
    /// </remarks>
    public partial class ReturnWeeklyAddressDetailsBO : BusinessObject, IComparable
    {
        #region fields
        private int? _orderDetail;
        private string _orderType;
        private string _visualLayout;
        private int? _visualLayoutID;
        private int? _patternID;
        private string _pattern;
        private int? _fabricID;
        private string _fabricCode;
        private string _fabricName;
        private string _fabricMaterial;
        private string _visualLayoutNotes;
        private int? _order;
        private int? _label;
        private string _orderDetailStatus;
        private int? _orderDetailStatusID;
        private DateTime? _shipmentDate;
        private DateTime? _sheduledDate;
        private DateTime? _requestedDate;
        private int? _quantity;
        private string _purONo;
        private string _distributor;
        private string _coordinator;
        private string _client;
        private string _orderStatus;
        private int? _orderStatusID;
        private int? _shimentModeID;
        private string _shipmentMode;
        private string _companyName;
        private string _address;
        private string _suberb;
        private string _state;
        private string _postCode;
        private string _country;
        private string _contactDetails;
        private bool? _isWeeklyShipment;
        private bool? _isAdelaideWareHouse;
        private int? _shipTo;
        private string _hSCode;
        #endregion
        
        #region Properties
        /// <summary></summary>
        public int? OrderDetail
        {   get {return _orderDetail;}
            set 
            {
                _orderDetail = value;
            }
        }
        /// <summary></summary>
        public string OrderType
        {   get {return _orderType;}
            set 
            {
                _orderType = value;
            }
        }
        /// <summary></summary>
        public string VisualLayout
        {   get {return _visualLayout;}
            set 
            {
                _visualLayout = value;
            }
        }
        /// <summary></summary>
        public int? VisualLayoutID
        {   get {return _visualLayoutID;}
            set 
            {
                _visualLayoutID = value;
            }
        }
        /// <summary></summary>
        public int? PatternID
        {   get {return _patternID;}
            set 
            {
                _patternID = value;
            }
        }
        /// <summary></summary>
        public string Pattern
        {   get {return _pattern;}
            set 
            {
                _pattern = value;
            }
        }
        /// <summary></summary>
        public int? FabricID
        {   get {return _fabricID;}
            set 
            {
                _fabricID = value;
            }
        }
        /// <summary></summary>
        public string FabricCode
        {   get {return _fabricCode;}
            set 
            {
                _fabricCode = value;
            }
        }
        /// <summary></summary>
        public string FabricName
        {   get {return _fabricName;}
            set 
            {
                _fabricName = value;
            }
        }
        /// <summary></summary>
        public string FabricMaterial
        {   get {return _fabricMaterial;}
            set 
            {
                _fabricMaterial = value;
            }
        }
        /// <summary></summary>
        public string VisualLayoutNotes
        {   get {return _visualLayoutNotes;}
            set 
            {
                _visualLayoutNotes = value;
            }
        }
        /// <summary></summary>
        public int? Order
        {   get {return _order;}
            set 
            {
                _order = value;
            }
        }
        /// <summary></summary>
        public int? Label
        {   get {return _label;}
            set 
            {
                _label = value;
            }
        }
        /// <summary></summary>
        public string OrderDetailStatus
        {   get {return _orderDetailStatus;}
            set 
            {
                _orderDetailStatus = value;
            }
        }
        /// <summary></summary>
        public int? OrderDetailStatusID
        {   get {return _orderDetailStatusID;}
            set 
            {
                _orderDetailStatusID = value;
            }
        }
        /// <summary></summary>
        public DateTime? ShipmentDate
        {   get {return _shipmentDate;}
            set 
            {
                _shipmentDate = value;
            }
        }
        /// <summary></summary>
        public DateTime? SheduledDate
        {   get {return _sheduledDate;}
            set 
            {
                _sheduledDate = value;
            }
        }
        /// <summary></summary>
        public DateTime? RequestedDate
        {   get {return _requestedDate;}
            set 
            {
                _requestedDate = value;
            }
        }
        /// <summary></summary>
        public int? Quantity
        {   get {return _quantity;}
            set 
            {
                _quantity = value;
            }
        }
        /// <summary></summary>
        public string PurONo
        {   get {return _purONo;}
            set 
            {
                _purONo = value;
            }
        }
        /// <summary></summary>
        public string Distributor
        {   get {return _distributor;}
            set 
            {
                _distributor = value;
            }
        }
        /// <summary></summary>
        public string Coordinator
        {   get {return _coordinator;}
            set 
            {
                _coordinator = value;
            }
        }
        /// <summary></summary>
        public string Client
        {   get {return _client;}
            set 
            {
                _client = value;
            }
        }
        /// <summary></summary>
        public string OrderStatus
        {   get {return _orderStatus;}
            set 
            {
                _orderStatus = value;
            }
        }
        /// <summary></summary>
        public int? OrderStatusID
        {   get {return _orderStatusID;}
            set 
            {
                _orderStatusID = value;
            }
        }
        /// <summary></summary>
        public int? ShimentModeID
        {   get {return _shimentModeID;}
            set 
            {
                _shimentModeID = value;
            }
        }
        /// <summary></summary>
        public string ShipmentMode
        {   get {return _shipmentMode;}
            set 
            {
                _shipmentMode = value;
            }
        }
        /// <summary></summary>
        public string CompanyName
        {   get {return _companyName;}
            set 
            {
                _companyName = value;
            }
        }
        /// <summary></summary>
        public string Address
        {   get {return _address;}
            set 
            {
                _address = value;
            }
        }
        /// <summary></summary>
        public string Suberb
        {   get {return _suberb;}
            set 
            {
                _suberb = value;
            }
        }
        /// <summary></summary>
        public string State
        {   get {return _state;}
            set 
            {
                _state = value;
            }
        }
        /// <summary></summary>
        public string PostCode
        {   get {return _postCode;}
            set 
            {
                _postCode = value;
            }
        }
        /// <summary></summary>
        public string Country
        {   get {return _country;}
            set 
            {
                _country = value;
            }
        }
        /// <summary></summary>
        public string ContactDetails
        {   get {return _contactDetails;}
            set 
            {
                _contactDetails = value;
            }
        }
        /// <summary></summary>
        public bool? IsWeeklyShipment
        {   get {return _isWeeklyShipment;}
            set 
            {
                _isWeeklyShipment = value;
            }
        }
        /// <summary></summary>
        public bool? IsAdelaideWareHouse
        {   get {return _isAdelaideWareHouse;}
            set 
            {
                _isAdelaideWareHouse = value;
            }
        }
        /// <summary></summary>
        public int? ShipTo
        {   get {return _shipTo;}
            set 
            {
                _shipTo = value;
            }
        }
        /// <summary></summary>
        public string HSCode
        {   get {return _hSCode;}
            set 
            {
                _hSCode = value;
            }
        }
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the ReturnWeeklyAddressDetailsBO class using the supplied Indico.DAL.ReturnWeeklyAddressDetails. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.ReturnWeeklyAddressDetails whose properties will be used to initialise the ReturnWeeklyAddressDetailsBO</param>
        internal ReturnWeeklyAddressDetailsBO(Indico.DAL.ReturnWeeklyAddressDetails obj)
        {
            // set the properties from the Indico.DAL.ReturnWeeklyAddressDetails 
            this.OrderDetail = obj.OrderDetail;
            this.OrderType = obj.OrderType;
            this.VisualLayout = obj.VisualLayout;
            this.VisualLayoutID = obj.VisualLayoutID;
            this.PatternID = obj.PatternID;
            this.Pattern = obj.Pattern;
            this.FabricID = obj.FabricID;
            this.FabricCode = obj.FabricCode;
            this.FabricName = obj.FabricName;
            this.FabricMaterial = obj.FabricMaterial;
            this.VisualLayoutNotes = obj.VisualLayoutNotes;
            this.Order = obj.Order;
            this.Label = obj.Label;
            this.OrderDetailStatus = obj.OrderDetailStatus;
            this.OrderDetailStatusID = obj.OrderDetailStatusID;
            this.ShipmentDate = obj.ShipmentDate;
            this.SheduledDate = obj.SheduledDate;
            this.RequestedDate = obj.RequestedDate;
            this.Quantity = obj.Quantity;
            this.PurONo = obj.PurONo;
            this.Distributor = obj.Distributor;
            this.Coordinator = obj.Coordinator;
            this.Client = obj.Client;
            this.OrderStatus = obj.OrderStatus;
            this.OrderStatusID = obj.OrderStatusID;
            this.ShimentModeID = obj.ShimentModeID;
            this.ShipmentMode = obj.ShipmentMode;
            this.CompanyName = obj.CompanyName;
            this.Address = obj.Address;
            this.Suberb = obj.Suberb;
            this.State = obj.State;
            this.PostCode = obj.PostCode;
            this.Country = obj.Country;
            this.ContactDetails = obj.ContactDetails;
            this.IsWeeklyShipment = obj.IsWeeklyShipment;
            this.IsAdelaideWareHouse = obj.IsAdelaideWareHouse;
            this.ShipTo = obj.ShipTo;
            this.HSCode = obj.HSCode;
        }
        #endregion
        
        #region Internal utility methods
        internal void SetDAL(Indico.DAL.ReturnWeeklyAddressDetails obj, IndicoEntities context)
        {
            // set the Indico.DAL.ReturnWeeklyAddressDetails properties
            obj.OrderDetail = Convert.ToInt32(OrderDetail);
            obj.OrderType = OrderType;
            obj.VisualLayout = VisualLayout;
            obj.VisualLayoutID = Convert.ToInt32(VisualLayoutID);
            obj.PatternID = Convert.ToInt32(PatternID);
            obj.Pattern = Pattern;
            obj.FabricID = Convert.ToInt32(FabricID);
            obj.FabricCode = FabricCode;
            obj.FabricName = FabricName;
            obj.FabricMaterial = FabricMaterial;
            obj.VisualLayoutNotes = VisualLayoutNotes;
            obj.Order = Convert.ToInt32(Order);
            obj.Label = Convert.ToInt32(Label);
            obj.OrderDetailStatus = OrderDetailStatus;
            obj.OrderDetailStatusID = Convert.ToInt32(OrderDetailStatusID);
            obj.ShipmentDate = Convert.ToDateTime(ShipmentDate);
            obj.SheduledDate = Convert.ToDateTime(SheduledDate);
            obj.RequestedDate = Convert.ToDateTime(RequestedDate);
            obj.Quantity = Convert.ToInt32(Quantity);
            obj.PurONo = PurONo;
            obj.Distributor = Distributor;
            obj.Coordinator = Coordinator;
            obj.Client = Client;
            obj.OrderStatus = OrderStatus;
            obj.OrderStatusID = Convert.ToInt32(OrderStatusID);
            obj.ShimentModeID = Convert.ToInt32(ShimentModeID);
            obj.ShipmentMode = ShipmentMode;
            obj.CompanyName = CompanyName;
            obj.Address = Address;
            obj.Suberb = Suberb;
            obj.State = State;
            obj.PostCode = PostCode;
            obj.Country = Country;
            obj.ContactDetails = ContactDetails;
            obj.IsWeeklyShipment = Convert.ToBoolean(IsWeeklyShipment);
            obj.IsAdelaideWareHouse = Convert.ToBoolean(IsAdelaideWareHouse);
            obj.ShipTo = Convert.ToInt32(ShipTo);
            obj.HSCode = HSCode;
        }
        
        internal void SetBO(Indico.DAL.ReturnWeeklyAddressDetails obj)
        {
            // set the Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO properties    
            this.OrderDetail = obj.OrderDetail;
            this.OrderType = obj.OrderType;
            this.VisualLayout = obj.VisualLayout;
            this.VisualLayoutID = obj.VisualLayoutID;
            this.PatternID = obj.PatternID;
            this.Pattern = obj.Pattern;
            this.FabricID = obj.FabricID;
            this.FabricCode = obj.FabricCode;
            this.FabricName = obj.FabricName;
            this.FabricMaterial = obj.FabricMaterial;
            this.VisualLayoutNotes = obj.VisualLayoutNotes;
            this.Order = obj.Order;
            this.Label = obj.Label;
            this.OrderDetailStatus = obj.OrderDetailStatus;
            this.OrderDetailStatusID = obj.OrderDetailStatusID;
            this.ShipmentDate = obj.ShipmentDate;
            this.SheduledDate = obj.SheduledDate;
            this.RequestedDate = obj.RequestedDate;
            this.Quantity = obj.Quantity;
            this.PurONo = obj.PurONo;
            this.Distributor = obj.Distributor;
            this.Coordinator = obj.Coordinator;
            this.Client = obj.Client;
            this.OrderStatus = obj.OrderStatus;
            this.OrderStatusID = obj.OrderStatusID;
            this.ShimentModeID = obj.ShimentModeID;
            this.ShipmentMode = obj.ShipmentMode;
            this.CompanyName = obj.CompanyName;
            this.Address = obj.Address;
            this.Suberb = obj.Suberb;
            this.State = obj.State;
            this.PostCode = obj.PostCode;
            this.Country = obj.Country;
            this.ContactDetails = obj.ContactDetails;
            this.IsWeeklyShipment = obj.IsWeeklyShipment;
            this.IsAdelaideWareHouse = obj.IsAdelaideWareHouse;
            this.ShipTo = obj.ShipTo;
            this.HSCode = obj.HSCode;
        }
        
        internal void SetBO(Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO obj)
        {
            // set this Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO properties
            this.OrderDetail = obj.OrderDetail;
            this.OrderType = obj.OrderType;
            this.VisualLayout = obj.VisualLayout;
            this.VisualLayoutID = obj.VisualLayoutID;
            this.PatternID = obj.PatternID;
            this.Pattern = obj.Pattern;
            this.FabricID = obj.FabricID;
            this.FabricCode = obj.FabricCode;
            this.FabricName = obj.FabricName;
            this.FabricMaterial = obj.FabricMaterial;
            this.VisualLayoutNotes = obj.VisualLayoutNotes;
            this.Order = obj.Order;
            this.Label = obj.Label;
            this.OrderDetailStatus = obj.OrderDetailStatus;
            this.OrderDetailStatusID = obj.OrderDetailStatusID;
            this.ShipmentDate = obj.ShipmentDate;
            this.SheduledDate = obj.SheduledDate;
            this.RequestedDate = obj.RequestedDate;
            this.Quantity = obj.Quantity;
            this.PurONo = obj.PurONo;
            this.Distributor = obj.Distributor;
            this.Coordinator = obj.Coordinator;
            this.Client = obj.Client;
            this.OrderStatus = obj.OrderStatus;
            this.OrderStatusID = obj.OrderStatusID;
            this.ShimentModeID = obj.ShimentModeID;
            this.ShipmentMode = obj.ShipmentMode;
            this.CompanyName = obj.CompanyName;
            this.Address = obj.Address;
            this.Suberb = obj.Suberb;
            this.State = obj.State;
            this.PostCode = obj.PostCode;
            this.Country = obj.Country;
            this.ContactDetails = obj.ContactDetails;
            this.IsWeeklyShipment = obj.IsWeeklyShipment;
            this.IsAdelaideWareHouse = obj.IsAdelaideWareHouse;
            this.ShipTo = obj.ShipTo;
            this.HSCode = obj.HSCode;
        }
        
        private static List<Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO> IQueryableToList(IQueryable<Indico.DAL.ReturnWeeklyAddressDetails> oQuery)
        {
            List<Indico.DAL.ReturnWeeklyAddressDetails> oList = oQuery.ToList();
            List<Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO> rList = new List<Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO>(oList.Count);
            foreach (Indico.DAL.ReturnWeeklyAddressDetails o in oList)
            {
                Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO obj = new Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO(o);
                rList.Add(obj);
            }
            return rList;
        }
        #endregion
        
        #region BusinessObject methods
        
        #region GetAllObject
        public static List<Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public static List<Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public static List<Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public static List<Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnWeeklyAddressDetails> oQuery =
                (from o in context.ReturnWeeklyAddressDetails
                 orderby o.OrderDetail
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.OrderDetail).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO> returnweeklyaddressdetailss = IQueryableToList(oQuery);
            context.Dispose();
            return returnweeklyaddressdetailss;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnWeeklyAddressDetails> oQuery =
                (from o in context.ReturnWeeklyAddressDetails
                 where
                    (this.OrderDetail == null || this.OrderDetail == o.OrderDetail) &&
                    (this.OrderType == null || this.OrderType == o.OrderType) &&
                    (this.VisualLayout == null || this.VisualLayout == o.VisualLayout) &&
                    (this.VisualLayoutID == null || this.VisualLayoutID == o.VisualLayoutID) &&
                    (this.PatternID == null || this.PatternID == o.PatternID) &&
                    (this.Pattern == null || this.Pattern == o.Pattern) &&
                    (this.FabricID == null || this.FabricID == o.FabricID) &&
                    (this.FabricCode == null || this.FabricCode == o.FabricCode) &&
                    (this.FabricName == null || this.FabricName == o.FabricName) &&
                    (this.FabricMaterial == null || this.FabricMaterial == o.FabricMaterial) &&
                    (this.VisualLayoutNotes == null || this.VisualLayoutNotes == o.VisualLayoutNotes) &&
                    (this.Order == null || this.Order == o.Order) &&
                    (this.Label == null || this.Label == o.Label) &&
                    (this.OrderDetailStatus == null || this.OrderDetailStatus == o.OrderDetailStatus) &&
                    (this.OrderDetailStatusID == null || this.OrderDetailStatusID == o.OrderDetailStatusID) &&
                    (this.ShipmentDate == null || this.ShipmentDate == o.ShipmentDate) &&
                    (this.SheduledDate == null || this.SheduledDate == o.SheduledDate) &&
                    (this.RequestedDate == null || this.RequestedDate == o.RequestedDate) &&
                    (this.Quantity == null || this.Quantity == o.Quantity) &&
                    (this.PurONo == null || this.PurONo == o.PurONo) &&
                    (this.Distributor == null || this.Distributor == o.Distributor) &&
                    (this.Coordinator == null || this.Coordinator == o.Coordinator) &&
                    (this.Client == null || this.Client == o.Client) &&
                    (this.OrderStatus == null || this.OrderStatus == o.OrderStatus) &&
                    (this.OrderStatusID == null || this.OrderStatusID == o.OrderStatusID) &&
                    (this.ShimentModeID == null || this.ShimentModeID == o.ShimentModeID) &&
                    (this.ShipmentMode == null || this.ShipmentMode == o.ShipmentMode) &&
                    (this.CompanyName == null || this.CompanyName == o.CompanyName) &&
                    (this.Address == null || this.Address == o.Address) &&
                    (this.Suberb == null || this.Suberb == o.Suberb) &&
                    (this.State == null || this.State == o.State) &&
                    (this.PostCode == null || this.PostCode == o.PostCode) &&
                    (this.Country == null || this.Country == o.Country) &&
                    (this.ContactDetails == null || this.ContactDetails == o.ContactDetails) &&
                    (this.IsWeeklyShipment == null || this.IsWeeklyShipment == o.IsWeeklyShipment) &&
                    (this.IsAdelaideWareHouse == null || this.IsAdelaideWareHouse == o.IsAdelaideWareHouse) &&
                    (this.ShipTo == null || this.ShipTo == o.ShipTo) &&
                    (this.HSCode == null || this.HSCode == o.HSCode) 
                 orderby o.OrderDetail
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.OrderDetail).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO> returnweeklyaddressdetailss = IQueryableToList(oQuery);
            context.Dispose();
            return returnweeklyaddressdetailss;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnWeeklyAddressDetails
                 where
                    (this.OrderDetail == null || this.OrderDetail == o.OrderDetail) &&
                    (this.OrderType == null || this.OrderType == o.OrderType) &&
                    (this.VisualLayout == null || this.VisualLayout == o.VisualLayout) &&
                    (this.VisualLayoutID == null || this.VisualLayoutID == o.VisualLayoutID) &&
                    (this.PatternID == null || this.PatternID == o.PatternID) &&
                    (this.Pattern == null || this.Pattern == o.Pattern) &&
                    (this.FabricID == null || this.FabricID == o.FabricID) &&
                    (this.FabricCode == null || this.FabricCode == o.FabricCode) &&
                    (this.FabricName == null || this.FabricName == o.FabricName) &&
                    (this.FabricMaterial == null || this.FabricMaterial == o.FabricMaterial) &&
                    (this.VisualLayoutNotes == null || this.VisualLayoutNotes == o.VisualLayoutNotes) &&
                    (this.Order == null || this.Order == o.Order) &&
                    (this.Label == null || this.Label == o.Label) &&
                    (this.OrderDetailStatus == null || this.OrderDetailStatus == o.OrderDetailStatus) &&
                    (this.OrderDetailStatusID == null || this.OrderDetailStatusID == o.OrderDetailStatusID) &&
                    (this.ShipmentDate == null || this.ShipmentDate == o.ShipmentDate) &&
                    (this.SheduledDate == null || this.SheduledDate == o.SheduledDate) &&
                    (this.RequestedDate == null || this.RequestedDate == o.RequestedDate) &&
                    (this.Quantity == null || this.Quantity == o.Quantity) &&
                    (this.PurONo == null || this.PurONo == o.PurONo) &&
                    (this.Distributor == null || this.Distributor == o.Distributor) &&
                    (this.Coordinator == null || this.Coordinator == o.Coordinator) &&
                    (this.Client == null || this.Client == o.Client) &&
                    (this.OrderStatus == null || this.OrderStatus == o.OrderStatus) &&
                    (this.OrderStatusID == null || this.OrderStatusID == o.OrderStatusID) &&
                    (this.ShimentModeID == null || this.ShimentModeID == o.ShimentModeID) &&
                    (this.ShipmentMode == null || this.ShipmentMode == o.ShipmentMode) &&
                    (this.CompanyName == null || this.CompanyName == o.CompanyName) &&
                    (this.Address == null || this.Address == o.Address) &&
                    (this.Suberb == null || this.Suberb == o.Suberb) &&
                    (this.State == null || this.State == o.State) &&
                    (this.PostCode == null || this.PostCode == o.PostCode) &&
                    (this.Country == null || this.Country == o.Country) &&
                    (this.ContactDetails == null || this.ContactDetails == o.ContactDetails) &&
                    (this.IsWeeklyShipment == null || this.IsWeeklyShipment == o.IsWeeklyShipment) &&
                    (this.IsAdelaideWareHouse == null || this.IsAdelaideWareHouse == o.IsAdelaideWareHouse) &&
                    (this.ShipTo == null || this.ShipTo == o.ShipTo) &&
                    (this.HSCode == null || this.HSCode == o.HSCode) 
                 orderby o.OrderDetail
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnWeeklyAddressDetails> oQuery =
                (from o in context.ReturnWeeklyAddressDetails
                 where
                    (this.OrderDetail == null || o.OrderDetail == this.OrderDetail) &&
                    (this.OrderType == null || o.OrderType.Contains(this.OrderType)) &&
                    (this.VisualLayout == null || o.VisualLayout.Contains(this.VisualLayout)) &&
                    (this.VisualLayoutID == null || o.VisualLayoutID == this.VisualLayoutID) &&
                    (this.PatternID == null || o.PatternID == this.PatternID) &&
                    (this.Pattern == null || o.Pattern.Contains(this.Pattern)) &&
                    (this.FabricID == null || o.FabricID == this.FabricID) &&
                    (this.FabricCode == null || o.FabricCode.Contains(this.FabricCode)) &&
                    (this.FabricName == null || o.FabricName.Contains(this.FabricName)) &&
                    (this.FabricMaterial == null || o.FabricMaterial.Contains(this.FabricMaterial)) &&
                    (this.VisualLayoutNotes == null || o.VisualLayoutNotes.Contains(this.VisualLayoutNotes)) &&
                    (this.Order == null || o.Order == this.Order) &&
                    (this.Label == null || o.Label == this.Label) &&
                    (this.OrderDetailStatus == null || o.OrderDetailStatus.Contains(this.OrderDetailStatus)) &&
                    (this.OrderDetailStatusID == null || o.OrderDetailStatusID == this.OrderDetailStatusID) &&
                    (this.ShipmentDate == null || o.ShipmentDate == this.ShipmentDate) &&
                    (this.SheduledDate == null || o.SheduledDate == this.SheduledDate) &&
                    (this.RequestedDate == null || o.RequestedDate == this.RequestedDate) &&
                    (this.Quantity == null || o.Quantity == this.Quantity) &&
                    (this.PurONo == null || o.PurONo.Contains(this.PurONo)) &&
                    (this.Distributor == null || o.Distributor.Contains(this.Distributor)) &&
                    (this.Coordinator == null || o.Coordinator.Contains(this.Coordinator)) &&
                    (this.Client == null || o.Client.Contains(this.Client)) &&
                    (this.OrderStatus == null || o.OrderStatus.Contains(this.OrderStatus)) &&
                    (this.OrderStatusID == null || o.OrderStatusID == this.OrderStatusID) &&
                    (this.ShimentModeID == null || o.ShimentModeID == this.ShimentModeID) &&
                    (this.ShipmentMode == null || o.ShipmentMode.Contains(this.ShipmentMode)) &&
                    (this.CompanyName == null || o.CompanyName.Contains(this.CompanyName)) &&
                    (this.Address == null || o.Address.Contains(this.Address)) &&
                    (this.Suberb == null || o.Suberb.Contains(this.Suberb)) &&
                    (this.State == null || o.State.Contains(this.State)) &&
                    (this.PostCode == null || o.PostCode.Contains(this.PostCode)) &&
                    (this.Country == null || o.Country.Contains(this.Country)) &&
                    (this.ContactDetails == null || o.ContactDetails.Contains(this.ContactDetails)) &&
                    (this.IsWeeklyShipment == null || o.IsWeeklyShipment == this.IsWeeklyShipment) &&
                    (this.IsAdelaideWareHouse == null || o.IsAdelaideWareHouse == this.IsAdelaideWareHouse) &&
                    (this.ShipTo == null || o.ShipTo == this.ShipTo) &&
                    (this.HSCode == null || o.HSCode.Contains(this.HSCode)) 
                 orderby o.OrderDetail
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.OrderDetail).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO> returnweeklyaddressdetailss = IQueryableToList(oQuery);
            context.Dispose();
            return returnweeklyaddressdetailss;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnWeeklyAddressDetails
                 where
                    (this.OrderDetail == null || o.OrderDetail == this.OrderDetail) &&
                    (this.OrderType == null || o.OrderType.Contains(this.OrderType)) &&
                    (this.VisualLayout == null || o.VisualLayout.Contains(this.VisualLayout)) &&
                    (this.VisualLayoutID == null || o.VisualLayoutID == this.VisualLayoutID) &&
                    (this.PatternID == null || o.PatternID == this.PatternID) &&
                    (this.Pattern == null || o.Pattern.Contains(this.Pattern)) &&
                    (this.FabricID == null || o.FabricID == this.FabricID) &&
                    (this.FabricCode == null || o.FabricCode.Contains(this.FabricCode)) &&
                    (this.FabricName == null || o.FabricName.Contains(this.FabricName)) &&
                    (this.FabricMaterial == null || o.FabricMaterial.Contains(this.FabricMaterial)) &&
                    (this.VisualLayoutNotes == null || o.VisualLayoutNotes.Contains(this.VisualLayoutNotes)) &&
                    (this.Order == null || o.Order == this.Order) &&
                    (this.Label == null || o.Label == this.Label) &&
                    (this.OrderDetailStatus == null || o.OrderDetailStatus.Contains(this.OrderDetailStatus)) &&
                    (this.OrderDetailStatusID == null || o.OrderDetailStatusID == this.OrderDetailStatusID) &&
                    (this.ShipmentDate == null || o.ShipmentDate == this.ShipmentDate) &&
                    (this.SheduledDate == null || o.SheduledDate == this.SheduledDate) &&
                    (this.RequestedDate == null || o.RequestedDate == this.RequestedDate) &&
                    (this.Quantity == null || o.Quantity == this.Quantity) &&
                    (this.PurONo == null || o.PurONo.Contains(this.PurONo)) &&
                    (this.Distributor == null || o.Distributor.Contains(this.Distributor)) &&
                    (this.Coordinator == null || o.Coordinator.Contains(this.Coordinator)) &&
                    (this.Client == null || o.Client.Contains(this.Client)) &&
                    (this.OrderStatus == null || o.OrderStatus.Contains(this.OrderStatus)) &&
                    (this.OrderStatusID == null || o.OrderStatusID == this.OrderStatusID) &&
                    (this.ShimentModeID == null || o.ShimentModeID == this.ShimentModeID) &&
                    (this.ShipmentMode == null || o.ShipmentMode.Contains(this.ShipmentMode)) &&
                    (this.CompanyName == null || o.CompanyName.Contains(this.CompanyName)) &&
                    (this.Address == null || o.Address.Contains(this.Address)) &&
                    (this.Suberb == null || o.Suberb.Contains(this.Suberb)) &&
                    (this.State == null || o.State.Contains(this.State)) &&
                    (this.PostCode == null || o.PostCode.Contains(this.PostCode)) &&
                    (this.Country == null || o.Country.Contains(this.Country)) &&
                    (this.ContactDetails == null || o.ContactDetails.Contains(this.ContactDetails)) &&
                    (this.IsWeeklyShipment == null || o.IsWeeklyShipment == this.IsWeeklyShipment) &&
                    (this.IsAdelaideWareHouse == null || o.IsAdelaideWareHouse == this.IsAdelaideWareHouse) &&
                    (this.ShipTo == null || o.ShipTo == this.ShipTo) &&
                    (this.HSCode == null || o.HSCode.Contains(this.HSCode)) 
                 orderby o.OrderDetail
                 select o).Count();
            
        }
        
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnWeeklyAddressDetails> oQuery =
                (from o in context.ReturnWeeklyAddressDetails
                 where
                    (this.OrderDetail == null || this.OrderDetail == o.OrderDetail) && 
                    (this.VisualLayoutID == null || this.VisualLayoutID == o.VisualLayoutID) && 
                    (this.PatternID == null || this.PatternID == o.PatternID) && 
                    (this.FabricID == null || this.FabricID == o.FabricID) && 
                    (this.Order == null || this.Order == o.Order) && 
                    (this.Label == null || this.Label == o.Label) && 
                    (this.OrderDetailStatusID == null || this.OrderDetailStatusID == o.OrderDetailStatusID) && 
                    (this.ShipmentDate == null || this.ShipmentDate == o.ShipmentDate) && 
                    (this.SheduledDate == null || this.SheduledDate == o.SheduledDate) && 
                    (this.RequestedDate == null || this.RequestedDate == o.RequestedDate) && 
                    (this.Quantity == null || this.Quantity == o.Quantity) && 
                    (this.OrderStatusID == null || this.OrderStatusID == o.OrderStatusID) && 
                    (this.ShimentModeID == null || this.ShimentModeID == o.ShimentModeID) && 
                    (this.IsWeeklyShipment == null || this.IsWeeklyShipment == o.IsWeeklyShipment) && 
                    (this.IsAdelaideWareHouse == null || this.IsAdelaideWareHouse == o.IsAdelaideWareHouse) && 
                    (this.ShipTo == null || this.ShipTo == o.ShipTo) && 
                    ((o.OrderType.Contains(this.OrderType)) ||
                    (o.VisualLayout.Contains(this.VisualLayout)) ||
                    (o.Pattern.Contains(this.Pattern)) ||
                    (o.FabricCode.Contains(this.FabricCode)) ||
                    (o.FabricName.Contains(this.FabricName)) ||
                    (o.FabricMaterial.Contains(this.FabricMaterial)) ||
                    (o.VisualLayoutNotes.Contains(this.VisualLayoutNotes)) ||
                    (o.OrderDetailStatus.Contains(this.OrderDetailStatus)) ||
                    (o.PurONo.Contains(this.PurONo)) ||
                    (o.Distributor.Contains(this.Distributor)) ||
                    (o.Coordinator.Contains(this.Coordinator)) ||
                    (o.Client.Contains(this.Client)) ||
                    (o.OrderStatus.Contains(this.OrderStatus)) ||
                    (o.ShipmentMode.Contains(this.ShipmentMode)) ||
                    (o.CompanyName.Contains(this.CompanyName)) ||
                    (o.Address.Contains(this.Address)) ||
                    (o.Suberb.Contains(this.Suberb)) ||
                    (o.State.Contains(this.State)) ||
                    (o.PostCode.Contains(this.PostCode)) ||
                    (o.Country.Contains(this.Country)) ||
                    (o.ContactDetails.Contains(this.ContactDetails)) ||
                    (o.HSCode.Contains(this.HSCode)) ||
                    (this.OrderType == null && this.VisualLayout == null && this.Pattern == null && this.FabricCode == null && this.FabricName == null && this.FabricMaterial == null && this.VisualLayoutNotes == null && this.OrderDetailStatus == null && this.PurONo == null && this.Distributor == null && this.Coordinator == null && this.Client == null && this.OrderStatus == null && this.ShipmentMode == null && this.CompanyName == null && this.Address == null && this.Suberb == null && this.State == null && this.PostCode == null && this.Country == null && this.ContactDetails == null && this.HSCode == null ))
                 orderby o.OrderDetail
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.OrderDetail).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO> returnweeklyaddressdetailss = IQueryableToList(oQuery);
            context.Dispose();
            return returnweeklyaddressdetailss;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnWeeklyAddressDetails
                 where
                    (this.OrderDetail == null || this.OrderDetail == o.OrderDetail) && 
                    (this.VisualLayoutID == null || this.VisualLayoutID == o.VisualLayoutID) && 
                    (this.PatternID == null || this.PatternID == o.PatternID) && 
                    (this.FabricID == null || this.FabricID == o.FabricID) && 
                    (this.Order == null || this.Order == o.Order) && 
                    (this.Label == null || this.Label == o.Label) && 
                    (this.OrderDetailStatusID == null || this.OrderDetailStatusID == o.OrderDetailStatusID) && 
                    (this.ShipmentDate == null || this.ShipmentDate == o.ShipmentDate) && 
                    (this.SheduledDate == null || this.SheduledDate == o.SheduledDate) && 
                    (this.RequestedDate == null || this.RequestedDate == o.RequestedDate) && 
                    (this.Quantity == null || this.Quantity == o.Quantity) && 
                    (this.OrderStatusID == null || this.OrderStatusID == o.OrderStatusID) && 
                    (this.ShimentModeID == null || this.ShimentModeID == o.ShimentModeID) && 
                    (this.IsWeeklyShipment == null || this.IsWeeklyShipment == o.IsWeeklyShipment) && 
                    (this.IsAdelaideWareHouse == null || this.IsAdelaideWareHouse == o.IsAdelaideWareHouse) && 
                    (this.ShipTo == null || this.ShipTo == o.ShipTo) && 
                    ((o.OrderType.Contains(this.OrderType)) ||
                    (o.VisualLayout.Contains(this.VisualLayout)) ||
                    (o.Pattern.Contains(this.Pattern)) ||
                    (o.FabricCode.Contains(this.FabricCode)) ||
                    (o.FabricName.Contains(this.FabricName)) ||
                    (o.FabricMaterial.Contains(this.FabricMaterial)) ||
                    (o.VisualLayoutNotes.Contains(this.VisualLayoutNotes)) ||
                    (o.OrderDetailStatus.Contains(this.OrderDetailStatus)) ||
                    (o.PurONo.Contains(this.PurONo)) ||
                    (o.Distributor.Contains(this.Distributor)) ||
                    (o.Coordinator.Contains(this.Coordinator)) ||
                    (o.Client.Contains(this.Client)) ||
                    (o.OrderStatus.Contains(this.OrderStatus)) ||
                    (o.ShipmentMode.Contains(this.ShipmentMode)) ||
                    (o.CompanyName.Contains(this.CompanyName)) ||
                    (o.Address.Contains(this.Address)) ||
                    (o.Suberb.Contains(this.Suberb)) ||
                    (o.State.Contains(this.State)) ||
                    (o.PostCode.Contains(this.PostCode)) ||
                    (o.Country.Contains(this.Country)) ||
                    (o.ContactDetails.Contains(this.ContactDetails)) ||
                    (o.HSCode.Contains(this.HSCode)) ||
                    (this.OrderType == null && this.VisualLayout == null && this.Pattern == null && this.FabricCode == null && this.FabricName == null && this.FabricMaterial == null && this.VisualLayoutNotes == null && this.OrderDetailStatus == null && this.PurONo == null && this.Distributor == null && this.Coordinator == null && this.Client == null && this.OrderStatus == null && this.ShipmentMode == null && this.CompanyName == null && this.Address == null && this.Suberb == null && this.State == null && this.PostCode == null && this.Country == null && this.ContactDetails == null && this.HSCode == null ))
                 orderby o.OrderDetail
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO))
                return 1;
            Indico.BusinessObjects.ReturnWeeklyAddressDetailsBOComparer c = new Indico.BusinessObjects.ReturnWeeklyAddressDetailsBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO);
        }

        #endregion
        #endregion
    }
    
    #region ReturnWeeklyAddressDetailsBOComparer
    public class ReturnWeeklyAddressDetailsBOComparer : IComparer<Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO>
    {
        private string propertyToCompareName;
        public ReturnWeeklyAddressDetailsBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public ReturnWeeklyAddressDetailsBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO> Members
        public int Compare(Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO x, Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO x, Indico.BusinessObjects.ReturnWeeklyAddressDetailsBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
