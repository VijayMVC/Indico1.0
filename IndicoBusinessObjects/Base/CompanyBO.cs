// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class CompanyBO : BusinessObject, IComparable
    {
        #region fields
        #region Scalar Fields
        private int id;
        private string _address1;
        private string _address2;
        private string _city;
        private int? _coordinator;
        private int _country;
        private DateTime _createdDate = DateTime.MinValue;
        private int _creator;
        private int? _distributorType;
        private string _fax;
        private bool? _isActive;
        private bool? _isBackOrder;
        private bool? _isDelete;
        private bool _isDistributor;
        private bool _isEnableBackOrderReporting;
        private DateTime _modifiedDate = DateTime.MinValue;
        private int _modifier;
        private string _name;
        private string _nickName;
        private string _number;
        private int? _owner;
        private string _phone1;
        private string _phone2;
        private string _postcode;
        private int? _secondaryCoordinator;
        private string _state;
        private int _type;
        #endregion
        
        #region Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objCoordinator;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.CountryBO _objCountry;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objCreator;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.DistributorTypeBO _objDistributorType;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objModifier;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objOwner;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objSecondaryCoordinator;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.CompanyTypeBO _objType;
        #endregion
        
        #region Foreign Table Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.ClientBO> clientsWhereThisIsDistributorList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _clientsWhereThisIsDistributorLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.DistributorClientAddressBO> distributorClientAddresssWhereThisIsDistributorList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _distributorClientAddresssWhereThisIsDistributorLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.DistributorEmailAddressBO> distributorEmailAddresssWhereThisIsDistributorList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _distributorEmailAddresssWhereThisIsDistributorLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.LabelBO> distributorLabelsWhereThisIsDistributorList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _distributorLabelsWhereThisIsDistributorLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO> distributorPriceLevelCostsWhereThisIsDistributorList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _distributorPriceLevelCostsWhereThisIsDistributorLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.DistributorPriceMarkupBO> distributorPriceMarkupsWhereThisIsDistributorList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _distributorPriceMarkupsWhereThisIsDistributorLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO> distributorSendMailCountsWhereThisIsDistributorList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _distributorSendMailCountsWhereThisIsDistributorLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.EmbroideryBO> embroiderysWhereThisIsDistributorList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _embroiderysWhereThisIsDistributorLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.OrderBO> ordersWhereThisIsDespatchToList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _ordersWhereThisIsDespatchToLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.OrderBO> ordersWhereThisIsDistributorList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _ordersWhereThisIsDistributorLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.OrderBO> ordersWhereThisIsShipToList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _ordersWhereThisIsShipToLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.OrderDetailStatusBO> orderDetailStatussWhereThisIsCompanyList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _orderDetailStatussWhereThisIsCompanyLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.PriceListDownloadsBO> priceListDownloadssWhereThisIsDistributorList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _priceListDownloadssWhereThisIsDistributorLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.QuoteBO> quotesWhereThisIsDistributorList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _quotesWhereThisIsDistributorLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.ReservationBO> reservationsWhereThisIsDistributorList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _reservationsWhereThisIsDistributorLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.UserBO> usersWhereThisIsCompanyList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _usersWhereThisIsCompanyLoaded;
        #endregion
        
        #region Other fields
        
        private Indico.DAL.Company _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>The address1 of the Company. The maximum length of this property is 128.</summary>
        public string Address1
        {   
            get {return _address1;}
            set 
            {
                OnAddress1Changing(value);
                _address1 = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Address1 = value;
                }
                OnAddress1Changed();
            }
        }
        /// <summary>The address2 of the Company. The maximum length of this property is 128.</summary>
        public string Address2
        {   
            get {return _address2;}
            set 
            {
                OnAddress2Changing(value);
                _address2 = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Address2 = value;
                }
                OnAddress2Changed();
            }
        }
        /// <summary>The city of the Company. The maximum length of this property is 68.</summary>
        public string City
        {   
            get {return _city;}
            set 
            {
                OnCityChanging(value);
                _city = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.City = value;
                }
                OnCityChanged();
            }
        }
        /// <summary>.</summary>
        public int? Coordinator
        {   
            get {return _coordinator;}
            set 
            {
                OnCoordinatorChanging(value);
                _coordinator = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.Coordinator = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Coordinator = null;
                OnCoordinatorChanged();
            }
        }
        /// <summary>The country of eh Company.</summary>
        public int Country
        {   
            get {return _country;}
            set 
            {
                OnCountryChanging(value);
                _country = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Country = (from o in this._context.Context.Country
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Country>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Country = null;
                OnCountryChanged();
            }
        }
        /// <summary>The Date the Account was created.</summary>
        public DateTime CreatedDate
        {   
            get {return _createdDate;}
            set 
            {
                OnCreatedDateChanging(value);
                _createdDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CreatedDate = value;
                }
                OnCreatedDateChanged();
            }
        }
        /// <summary>The User who created the account.</summary>
        public int Creator
        {   
            get {return _creator;}
            set 
            {
                OnCreatorChanging(value);
                _creator = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Creator = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Creator = null;
                OnCreatorChanged();
            }
        }
        /// <summary>.</summary>
        public int? DistributorType
        {   
            get {return _distributorType;}
            set 
            {
                OnDistributorTypeChanging(value);
                _distributorType = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.DistributorType = (from o in this._context.Context.DistributorType
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.DistributorType>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.DistributorType = null;
                OnDistributorTypeChanged();
            }
        }
        /// <summary>The fax address of the company. The maximum length of this property is 64.</summary>
        public string Fax
        {   
            get {return _fax;}
            set 
            {
                OnFaxChanging(value);
                _fax = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Fax = value;
                }
                OnFaxChanged();
            }
        }
        /// <summary>.</summary>
        public bool? IsActive
        {   
            get {return _isActive;}
            set 
            {
                OnIsActiveChanging(value);
                _isActive = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsActive = value;
                }
                OnIsActiveChanged();
            }
        }
        /// <summary>.</summary>
        public bool? IsBackOrder
        {   
            get {return _isBackOrder;}
            set 
            {
                OnIsBackOrderChanging(value);
                _isBackOrder = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsBackOrder = value;
                }
                OnIsBackOrderChanged();
            }
        }
        /// <summary>.</summary>
        public bool? IsDelete
        {   
            get {return _isDelete;}
            set 
            {
                OnIsDeleteChanging(value);
                _isDelete = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsDelete = value;
                }
                OnIsDeleteChanged();
            }
        }
        /// <summary>The company is distributor comany.</summary>
        public bool IsDistributor
        {   
            get {return _isDistributor;}
            set 
            {
                OnIsDistributorChanging(value);
                _isDistributor = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsDistributor = value;
                }
                OnIsDistributorChanged();
            }
        }
        /// <summary>.</summary>
        public bool IsEnableBackOrderReporting
        {   
            get {return _isEnableBackOrderReporting;}
            set 
            {
                OnIsEnableBackOrderReportingChanging(value);
                _isEnableBackOrderReporting = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsEnableBackOrderReporting = value;
                }
                OnIsEnableBackOrderReportingChanged();
            }
        }
        /// <summary>The date the Account was last modified.</summary>
        public DateTime ModifiedDate
        {   
            get {return _modifiedDate;}
            set 
            {
                OnModifiedDateChanging(value);
                _modifiedDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ModifiedDate = value;
                }
                OnModifiedDateChanged();
            }
        }
        /// <summary>The User who last modified this Account.</summary>
        public int Modifier
        {   
            get {return _modifier;}
            set 
            {
                OnModifierChanging(value);
                _modifier = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Modifier = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Modifier = null;
                OnModifierChanged();
            }
        }
        /// <summary>The Name of the Company. The maximum length of this property is 128.</summary>
        public string Name
        {   
            get {return _name;}
            set 
            {
                OnNameChanging(value);
                _name = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Name = value;
                }
                OnNameChanged();
            }
        }
        /// <summary>The nick name address of the company. The maximum length of this property is 128.</summary>
        public string NickName
        {   
            get {return _nickName;}
            set 
            {
                OnNickNameChanging(value);
                _nickName = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.NickName = value;
                }
                OnNickNameChanged();
            }
        }
        /// <summary>The ABN/ACN or similar of the Company. The maximum length of this property is 32.</summary>
        public string Number
        {   
            get {return _number;}
            set 
            {
                OnNumberChanging(value);
                _number = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Number = value;
                }
                OnNumberChanged();
            }
        }
        /// <summary>.</summary>
        public int? Owner
        {   
            get {return _owner;}
            set 
            {
                OnOwnerChanging(value);
                _owner = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.Owner = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Owner = null;
                OnOwnerChanged();
            }
        }
        /// <summary>The phone number of the company. The maximum length of this property is 20.</summary>
        public string Phone1
        {   
            get {return _phone1;}
            set 
            {
                OnPhone1Changing(value);
                _phone1 = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Phone1 = value;
                }
                OnPhone1Changed();
            }
        }
        /// <summary>The phone number of the company. The maximum length of this property is 20.</summary>
        public string Phone2
        {   
            get {return _phone2;}
            set 
            {
                OnPhone2Changing(value);
                _phone2 = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Phone2 = value;
                }
                OnPhone2Changed();
            }
        }
        /// <summary>The postcode of eh Company. The maximum length of this property is 20.</summary>
        public string Postcode
        {   
            get {return _postcode;}
            set 
            {
                OnPostcodeChanging(value);
                _postcode = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Postcode = value;
                }
                OnPostcodeChanged();
            }
        }
        /// <summary>.</summary>
        public int? SecondaryCoordinator
        {   
            get {return _secondaryCoordinator;}
            set 
            {
                OnSecondaryCoordinatorChanging(value);
                _secondaryCoordinator = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.SecondaryCoordinator = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.SecondaryCoordinator = null;
                OnSecondaryCoordinatorChanged();
            }
        }
        /// <summary>The state of the Company. The maximum length of this property is 20.</summary>
        public string State
        {   
            get {return _state;}
            set 
            {
                OnStateChanging(value);
                _state = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.State = value;
                }
                OnStateChanged();
            }
        }
        /// <summary>The type of the Company.</summary>
        public int Type
        {   
            get {return _type;}
            set 
            {
                OnTypeChanging(value);
                _type = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Type = (from o in this._context.Context.CompanyType
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.CompanyType>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Type = null;
                OnTypeChanged();
            }
        }
        
        internal Indico.DAL.Company ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        ///<summary>The UserBO object identified by the value of Coordinator</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objCoordinator
        {
            get
            {
                if (_coordinator != null && _coordinator > 0 && _objCoordinator == null)
                {
                        if (this._context == null)
                        {
                            _objCoordinator = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objCoordinator = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objCoordinator.ID = Convert.ToInt32(_coordinator);
                        _objCoordinator.GetObject(); 
                }
                return _objCoordinator;
            }
            set
            { 
                _objCoordinator = value;
                _coordinator = _objCoordinator.ID;
            }
        }
        ///<summary>The CountryBO object identified by the value of Country</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.CountryBO objCountry
        {
            get
            {
                if ( _country > 0 && _objCountry == null)
                {
                        if (this._context == null)
                        {
                            _objCountry = new Indico.BusinessObjects.CountryBO();
                        }
                        else
                        {
                            _objCountry = new Indico.BusinessObjects.CountryBO(ref this._context);
                        }
                        _objCountry.ID = _country;
                        _objCountry.GetObject(); 
                }
                return _objCountry;
            }
            set
            { 
                _objCountry = value;
                _country = _objCountry.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Creator</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objCreator
        {
            get
            {
                if ( _creator > 0 && _objCreator == null)
                {
                        if (this._context == null)
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objCreator.ID = _creator;
                        _objCreator.GetObject(); 
                }
                return _objCreator;
            }
            set
            { 
                _objCreator = value;
                _creator = _objCreator.ID;
            }
        }
        ///<summary>The DistributorTypeBO object identified by the value of DistributorType</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.DistributorTypeBO objDistributorType
        {
            get
            {
                if (_distributorType != null && _distributorType > 0 && _objDistributorType == null)
                {
                        if (this._context == null)
                        {
                            _objDistributorType = new Indico.BusinessObjects.DistributorTypeBO();
                        }
                        else
                        {
                            _objDistributorType = new Indico.BusinessObjects.DistributorTypeBO(ref this._context);
                        }
                        _objDistributorType.ID = Convert.ToInt32(_distributorType);
                        _objDistributorType.GetObject(); 
                }
                return _objDistributorType;
            }
            set
            { 
                _objDistributorType = value;
                _distributorType = _objDistributorType.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Modifier</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objModifier
        {
            get
            {
                if ( _modifier > 0 && _objModifier == null)
                {
                        if (this._context == null)
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objModifier.ID = _modifier;
                        _objModifier.GetObject(); 
                }
                return _objModifier;
            }
            set
            { 
                _objModifier = value;
                _modifier = _objModifier.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Owner</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objOwner
        {
            get
            {
                if (_owner != null && _owner > 0 && _objOwner == null)
                {
                        if (this._context == null)
                        {
                            _objOwner = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objOwner = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objOwner.ID = Convert.ToInt32(_owner);
                        _objOwner.GetObject(); 
                }
                return _objOwner;
            }
            set
            { 
                _objOwner = value;
                _owner = _objOwner.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of SecondaryCoordinator</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objSecondaryCoordinator
        {
            get
            {
                if (_secondaryCoordinator != null && _secondaryCoordinator > 0 && _objSecondaryCoordinator == null)
                {
                        if (this._context == null)
                        {
                            _objSecondaryCoordinator = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objSecondaryCoordinator = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objSecondaryCoordinator.ID = Convert.ToInt32(_secondaryCoordinator);
                        _objSecondaryCoordinator.GetObject(); 
                }
                return _objSecondaryCoordinator;
            }
            set
            { 
                _objSecondaryCoordinator = value;
                _secondaryCoordinator = _objSecondaryCoordinator.ID;
            }
        }
        ///<summary>The CompanyTypeBO object identified by the value of Type</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.CompanyTypeBO objType
        {
            get
            {
                if ( _type > 0 && _objType == null)
                {
                        if (this._context == null)
                        {
                            _objType = new Indico.BusinessObjects.CompanyTypeBO();
                        }
                        else
                        {
                            _objType = new Indico.BusinessObjects.CompanyTypeBO(ref this._context);
                        }
                        _objType.ID = _type;
                        _objType.GetObject(); 
                }
                return _objType;
            }
            set
            { 
                _objType = value;
                _type = _objType.ID;
            }
        }
        #endregion
        
        #region Foreign Object Foreign Key Collections
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.ClientBO> ClientsWhereThisIsDistributor // FK_Client_CompanyDistributor
        {
            get
            {
                if (!_clientsWhereThisIsDistributorLoaded)
                {
                    _clientsWhereThisIsDistributorLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Company obj = (from o in context.Company
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.ClientsWhereThisIsDistributor.Load();
                        clientsWhereThisIsDistributorList = new IndicoList<Indico.BusinessObjects.ClientBO>(obj.ClientsWhereThisIsDistributor.Count);
                        
                        foreach (Indico.DAL.Client o in obj.ClientsWhereThisIsDistributor)
                        {
                            Indico.BusinessObjects.ClientBO fkObj = new Indico.BusinessObjects.ClientBO(o, ref this._context);
                            clientsWhereThisIsDistributorList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        clientsWhereThisIsDistributorList = new IndicoList<Indico.BusinessObjects.ClientBO>();
                    }
                    
                    clientsWhereThisIsDistributorList.OnBeforeRemove += new EventHandler(ClientsWhereThisIsDistributorList_OnBeforeRemove);
                    clientsWhereThisIsDistributorList.OnAfterAdd += new EventHandler(ClientsWhereThisIsDistributorList_OnAfterAdd);
                }
                
                return clientsWhereThisIsDistributorList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.DistributorClientAddressBO> DistributorClientAddresssWhereThisIsDistributor // FK_DistributorClientAddress_Distributor
        {
            get
            {
                if (!_distributorClientAddresssWhereThisIsDistributorLoaded)
                {
                    _distributorClientAddresssWhereThisIsDistributorLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Company obj = (from o in context.Company
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.DistributorClientAddresssWhereThisIsDistributor.Load();
                        distributorClientAddresssWhereThisIsDistributorList = new IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>(obj.DistributorClientAddresssWhereThisIsDistributor.Count);
                        
                        foreach (Indico.DAL.DistributorClientAddress o in obj.DistributorClientAddresssWhereThisIsDistributor)
                        {
                            Indico.BusinessObjects.DistributorClientAddressBO fkObj = new Indico.BusinessObjects.DistributorClientAddressBO(o, ref this._context);
                            distributorClientAddresssWhereThisIsDistributorList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        distributorClientAddresssWhereThisIsDistributorList = new IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>();
                    }
                    
                    distributorClientAddresssWhereThisIsDistributorList.OnBeforeRemove += new EventHandler(DistributorClientAddresssWhereThisIsDistributorList_OnBeforeRemove);
                    distributorClientAddresssWhereThisIsDistributorList.OnAfterAdd += new EventHandler(DistributorClientAddresssWhereThisIsDistributorList_OnAfterAdd);
                }
                
                return distributorClientAddresssWhereThisIsDistributorList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.DistributorEmailAddressBO> DistributorEmailAddresssWhereThisIsDistributor // FK_DistributorEmailAddress_Distributor
        {
            get
            {
                if (!_distributorEmailAddresssWhereThisIsDistributorLoaded)
                {
                    _distributorEmailAddresssWhereThisIsDistributorLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Company obj = (from o in context.Company
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.DistributorEmailAddresssWhereThisIsDistributor.Load();
                        distributorEmailAddresssWhereThisIsDistributorList = new IndicoList<Indico.BusinessObjects.DistributorEmailAddressBO>(obj.DistributorEmailAddresssWhereThisIsDistributor.Count);
                        
                        foreach (Indico.DAL.DistributorEmailAddress o in obj.DistributorEmailAddresssWhereThisIsDistributor)
                        {
                            Indico.BusinessObjects.DistributorEmailAddressBO fkObj = new Indico.BusinessObjects.DistributorEmailAddressBO(o, ref this._context);
                            distributorEmailAddresssWhereThisIsDistributorList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        distributorEmailAddresssWhereThisIsDistributorList = new IndicoList<Indico.BusinessObjects.DistributorEmailAddressBO>();
                    }
                    
                    distributorEmailAddresssWhereThisIsDistributorList.OnBeforeRemove += new EventHandler(DistributorEmailAddresssWhereThisIsDistributorList_OnBeforeRemove);
                    distributorEmailAddresssWhereThisIsDistributorList.OnAfterAdd += new EventHandler(DistributorEmailAddresssWhereThisIsDistributorList_OnAfterAdd);
                }
                
                return distributorEmailAddresssWhereThisIsDistributorList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.LabelBO> DistributorLabelsWhereThisIsDistributor // FK_DistributorLabel_Distributor
        {
            get
            {
                if (!_distributorLabelsWhereThisIsDistributorLoaded)
                {
                    _distributorLabelsWhereThisIsDistributorLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Company obj = (from o in context.Company
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.DistributorLabelsWhereThisIsDistributor.Load();
                        distributorLabelsWhereThisIsDistributorList = new IndicoList<Indico.BusinessObjects.LabelBO>(obj.DistributorLabelsWhereThisIsDistributor.Count);
                        
                        foreach (Indico.DAL.Label o in obj.DistributorLabelsWhereThisIsDistributor)
                        {
                            Indico.BusinessObjects.LabelBO fkObj = new Indico.BusinessObjects.LabelBO(o, ref this._context);
                            distributorLabelsWhereThisIsDistributorList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        distributorLabelsWhereThisIsDistributorList = new IndicoList<Indico.BusinessObjects.LabelBO>();
                    }
                    
                    distributorLabelsWhereThisIsDistributorList.OnBeforeRemove += new EventHandler(DistributorLabelsWhereThisIsDistributorList_OnBeforeRemove);
                    distributorLabelsWhereThisIsDistributorList.OnAfterAdd += new EventHandler(DistributorLabelsWhereThisIsDistributorList_OnAfterAdd);
                }
                
                return distributorLabelsWhereThisIsDistributorList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO> DistributorPriceLevelCostsWhereThisIsDistributor // FK_DistributorPriceLevelCost_Distributor
        {
            get
            {
                if (!_distributorPriceLevelCostsWhereThisIsDistributorLoaded)
                {
                    _distributorPriceLevelCostsWhereThisIsDistributorLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Company obj = (from o in context.Company
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.DistributorPriceLevelCostsWhereThisIsDistributor.Load();
                        distributorPriceLevelCostsWhereThisIsDistributorList = new IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO>(obj.DistributorPriceLevelCostsWhereThisIsDistributor.Count);
                        
                        foreach (Indico.DAL.DistributorPriceLevelCost o in obj.DistributorPriceLevelCostsWhereThisIsDistributor)
                        {
                            Indico.BusinessObjects.DistributorPriceLevelCostBO fkObj = new Indico.BusinessObjects.DistributorPriceLevelCostBO(o, ref this._context);
                            distributorPriceLevelCostsWhereThisIsDistributorList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        distributorPriceLevelCostsWhereThisIsDistributorList = new IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO>();
                    }
                    
                    distributorPriceLevelCostsWhereThisIsDistributorList.OnBeforeRemove += new EventHandler(DistributorPriceLevelCostsWhereThisIsDistributorList_OnBeforeRemove);
                    distributorPriceLevelCostsWhereThisIsDistributorList.OnAfterAdd += new EventHandler(DistributorPriceLevelCostsWhereThisIsDistributorList_OnAfterAdd);
                }
                
                return distributorPriceLevelCostsWhereThisIsDistributorList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.DistributorPriceMarkupBO> DistributorPriceMarkupsWhereThisIsDistributor // FK_DistributorPriceMarkup_Company
        {
            get
            {
                if (!_distributorPriceMarkupsWhereThisIsDistributorLoaded)
                {
                    _distributorPriceMarkupsWhereThisIsDistributorLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Company obj = (from o in context.Company
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.DistributorPriceMarkupsWhereThisIsDistributor.Load();
                        distributorPriceMarkupsWhereThisIsDistributorList = new IndicoList<Indico.BusinessObjects.DistributorPriceMarkupBO>(obj.DistributorPriceMarkupsWhereThisIsDistributor.Count);
                        
                        foreach (Indico.DAL.DistributorPriceMarkup o in obj.DistributorPriceMarkupsWhereThisIsDistributor)
                        {
                            Indico.BusinessObjects.DistributorPriceMarkupBO fkObj = new Indico.BusinessObjects.DistributorPriceMarkupBO(o, ref this._context);
                            distributorPriceMarkupsWhereThisIsDistributorList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        distributorPriceMarkupsWhereThisIsDistributorList = new IndicoList<Indico.BusinessObjects.DistributorPriceMarkupBO>();
                    }
                    
                    distributorPriceMarkupsWhereThisIsDistributorList.OnBeforeRemove += new EventHandler(DistributorPriceMarkupsWhereThisIsDistributorList_OnBeforeRemove);
                    distributorPriceMarkupsWhereThisIsDistributorList.OnAfterAdd += new EventHandler(DistributorPriceMarkupsWhereThisIsDistributorList_OnAfterAdd);
                }
                
                return distributorPriceMarkupsWhereThisIsDistributorList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO> DistributorSendMailCountsWhereThisIsDistributor // FK_DistributorSendMailCount_Distributor
        {
            get
            {
                if (!_distributorSendMailCountsWhereThisIsDistributorLoaded)
                {
                    _distributorSendMailCountsWhereThisIsDistributorLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Company obj = (from o in context.Company
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.DistributorSendMailCountsWhereThisIsDistributor.Load();
                        distributorSendMailCountsWhereThisIsDistributorList = new IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO>(obj.DistributorSendMailCountsWhereThisIsDistributor.Count);
                        
                        foreach (Indico.DAL.DistributorSendMailCount o in obj.DistributorSendMailCountsWhereThisIsDistributor)
                        {
                            Indico.BusinessObjects.DistributorSendMailCountBO fkObj = new Indico.BusinessObjects.DistributorSendMailCountBO(o, ref this._context);
                            distributorSendMailCountsWhereThisIsDistributorList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        distributorSendMailCountsWhereThisIsDistributorList = new IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO>();
                    }
                    
                    distributorSendMailCountsWhereThisIsDistributorList.OnBeforeRemove += new EventHandler(DistributorSendMailCountsWhereThisIsDistributorList_OnBeforeRemove);
                    distributorSendMailCountsWhereThisIsDistributorList.OnAfterAdd += new EventHandler(DistributorSendMailCountsWhereThisIsDistributorList_OnAfterAdd);
                }
                
                return distributorSendMailCountsWhereThisIsDistributorList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.EmbroideryBO> EmbroiderysWhereThisIsDistributor // FK_Embroidery_Distributor
        {
            get
            {
                if (!_embroiderysWhereThisIsDistributorLoaded)
                {
                    _embroiderysWhereThisIsDistributorLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Company obj = (from o in context.Company
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.EmbroiderysWhereThisIsDistributor.Load();
                        embroiderysWhereThisIsDistributorList = new IndicoList<Indico.BusinessObjects.EmbroideryBO>(obj.EmbroiderysWhereThisIsDistributor.Count);
                        
                        foreach (Indico.DAL.Embroidery o in obj.EmbroiderysWhereThisIsDistributor)
                        {
                            Indico.BusinessObjects.EmbroideryBO fkObj = new Indico.BusinessObjects.EmbroideryBO(o, ref this._context);
                            embroiderysWhereThisIsDistributorList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        embroiderysWhereThisIsDistributorList = new IndicoList<Indico.BusinessObjects.EmbroideryBO>();
                    }
                    
                    embroiderysWhereThisIsDistributorList.OnBeforeRemove += new EventHandler(EmbroiderysWhereThisIsDistributorList_OnBeforeRemove);
                    embroiderysWhereThisIsDistributorList.OnAfterAdd += new EventHandler(EmbroiderysWhereThisIsDistributorList_OnAfterAdd);
                }
                
                return embroiderysWhereThisIsDistributorList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.OrderBO> OrdersWhereThisIsDespatchTo // FK_Order_DespatchTo
        {
            get
            {
                if (!_ordersWhereThisIsDespatchToLoaded)
                {
                    _ordersWhereThisIsDespatchToLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Company obj = (from o in context.Company
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.OrdersWhereThisIsDespatchTo.Load();
                        ordersWhereThisIsDespatchToList = new IndicoList<Indico.BusinessObjects.OrderBO>(obj.OrdersWhereThisIsDespatchTo.Count);
                        
                        foreach (Indico.DAL.Order o in obj.OrdersWhereThisIsDespatchTo)
                        {
                            Indico.BusinessObjects.OrderBO fkObj = new Indico.BusinessObjects.OrderBO(o, ref this._context);
                            ordersWhereThisIsDespatchToList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        ordersWhereThisIsDespatchToList = new IndicoList<Indico.BusinessObjects.OrderBO>();
                    }
                    
                    ordersWhereThisIsDespatchToList.OnBeforeRemove += new EventHandler(OrdersWhereThisIsDespatchToList_OnBeforeRemove);
                    ordersWhereThisIsDespatchToList.OnAfterAdd += new EventHandler(OrdersWhereThisIsDespatchToList_OnAfterAdd);
                }
                
                return ordersWhereThisIsDespatchToList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.OrderBO> OrdersWhereThisIsDistributor // FK_Order_Distributor
        {
            get
            {
                if (!_ordersWhereThisIsDistributorLoaded)
                {
                    _ordersWhereThisIsDistributorLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Company obj = (from o in context.Company
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.OrdersWhereThisIsDistributor.Load();
                        ordersWhereThisIsDistributorList = new IndicoList<Indico.BusinessObjects.OrderBO>(obj.OrdersWhereThisIsDistributor.Count);
                        
                        foreach (Indico.DAL.Order o in obj.OrdersWhereThisIsDistributor)
                        {
                            Indico.BusinessObjects.OrderBO fkObj = new Indico.BusinessObjects.OrderBO(o, ref this._context);
                            ordersWhereThisIsDistributorList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        ordersWhereThisIsDistributorList = new IndicoList<Indico.BusinessObjects.OrderBO>();
                    }
                    
                    ordersWhereThisIsDistributorList.OnBeforeRemove += new EventHandler(OrdersWhereThisIsDistributorList_OnBeforeRemove);
                    ordersWhereThisIsDistributorList.OnAfterAdd += new EventHandler(OrdersWhereThisIsDistributorList_OnAfterAdd);
                }
                
                return ordersWhereThisIsDistributorList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.OrderBO> OrdersWhereThisIsShipTo // FK_Order_ShipTo
        {
            get
            {
                if (!_ordersWhereThisIsShipToLoaded)
                {
                    _ordersWhereThisIsShipToLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Company obj = (from o in context.Company
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.OrdersWhereThisIsShipTo.Load();
                        ordersWhereThisIsShipToList = new IndicoList<Indico.BusinessObjects.OrderBO>(obj.OrdersWhereThisIsShipTo.Count);
                        
                        foreach (Indico.DAL.Order o in obj.OrdersWhereThisIsShipTo)
                        {
                            Indico.BusinessObjects.OrderBO fkObj = new Indico.BusinessObjects.OrderBO(o, ref this._context);
                            ordersWhereThisIsShipToList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        ordersWhereThisIsShipToList = new IndicoList<Indico.BusinessObjects.OrderBO>();
                    }
                    
                    ordersWhereThisIsShipToList.OnBeforeRemove += new EventHandler(OrdersWhereThisIsShipToList_OnBeforeRemove);
                    ordersWhereThisIsShipToList.OnAfterAdd += new EventHandler(OrdersWhereThisIsShipToList_OnAfterAdd);
                }
                
                return ordersWhereThisIsShipToList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.OrderDetailStatusBO> OrderDetailStatussWhereThisIsCompany // FK_OrderDetailStatus_Company
        {
            get
            {
                if (!_orderDetailStatussWhereThisIsCompanyLoaded)
                {
                    _orderDetailStatussWhereThisIsCompanyLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Company obj = (from o in context.Company
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.OrderDetailStatussWhereThisIsCompany.Load();
                        orderDetailStatussWhereThisIsCompanyList = new IndicoList<Indico.BusinessObjects.OrderDetailStatusBO>(obj.OrderDetailStatussWhereThisIsCompany.Count);
                        
                        foreach (Indico.DAL.OrderDetailStatus o in obj.OrderDetailStatussWhereThisIsCompany)
                        {
                            Indico.BusinessObjects.OrderDetailStatusBO fkObj = new Indico.BusinessObjects.OrderDetailStatusBO(o, ref this._context);
                            orderDetailStatussWhereThisIsCompanyList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        orderDetailStatussWhereThisIsCompanyList = new IndicoList<Indico.BusinessObjects.OrderDetailStatusBO>();
                    }
                    
                    orderDetailStatussWhereThisIsCompanyList.OnBeforeRemove += new EventHandler(OrderDetailStatussWhereThisIsCompanyList_OnBeforeRemove);
                    orderDetailStatussWhereThisIsCompanyList.OnAfterAdd += new EventHandler(OrderDetailStatussWhereThisIsCompanyList_OnAfterAdd);
                }
                
                return orderDetailStatussWhereThisIsCompanyList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.PriceListDownloadsBO> PriceListDownloadssWhereThisIsDistributor // FK_PriceListDownloads_Distributor
        {
            get
            {
                if (!_priceListDownloadssWhereThisIsDistributorLoaded)
                {
                    _priceListDownloadssWhereThisIsDistributorLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Company obj = (from o in context.Company
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.PriceListDownloadssWhereThisIsDistributor.Load();
                        priceListDownloadssWhereThisIsDistributorList = new IndicoList<Indico.BusinessObjects.PriceListDownloadsBO>(obj.PriceListDownloadssWhereThisIsDistributor.Count);
                        
                        foreach (Indico.DAL.PriceListDownloads o in obj.PriceListDownloadssWhereThisIsDistributor)
                        {
                            Indico.BusinessObjects.PriceListDownloadsBO fkObj = new Indico.BusinessObjects.PriceListDownloadsBO(o, ref this._context);
                            priceListDownloadssWhereThisIsDistributorList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        priceListDownloadssWhereThisIsDistributorList = new IndicoList<Indico.BusinessObjects.PriceListDownloadsBO>();
                    }
                    
                    priceListDownloadssWhereThisIsDistributorList.OnBeforeRemove += new EventHandler(PriceListDownloadssWhereThisIsDistributorList_OnBeforeRemove);
                    priceListDownloadssWhereThisIsDistributorList.OnAfterAdd += new EventHandler(PriceListDownloadssWhereThisIsDistributorList_OnAfterAdd);
                }
                
                return priceListDownloadssWhereThisIsDistributorList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.QuoteBO> QuotesWhereThisIsDistributor // FK_Quote_Distributor
        {
            get
            {
                if (!_quotesWhereThisIsDistributorLoaded)
                {
                    _quotesWhereThisIsDistributorLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Company obj = (from o in context.Company
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.QuotesWhereThisIsDistributor.Load();
                        quotesWhereThisIsDistributorList = new IndicoList<Indico.BusinessObjects.QuoteBO>(obj.QuotesWhereThisIsDistributor.Count);
                        
                        foreach (Indico.DAL.Quote o in obj.QuotesWhereThisIsDistributor)
                        {
                            Indico.BusinessObjects.QuoteBO fkObj = new Indico.BusinessObjects.QuoteBO(o, ref this._context);
                            quotesWhereThisIsDistributorList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        quotesWhereThisIsDistributorList = new IndicoList<Indico.BusinessObjects.QuoteBO>();
                    }
                    
                    quotesWhereThisIsDistributorList.OnBeforeRemove += new EventHandler(QuotesWhereThisIsDistributorList_OnBeforeRemove);
                    quotesWhereThisIsDistributorList.OnAfterAdd += new EventHandler(QuotesWhereThisIsDistributorList_OnAfterAdd);
                }
                
                return quotesWhereThisIsDistributorList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.ReservationBO> ReservationsWhereThisIsDistributor // FK_Reservation_Distributor
        {
            get
            {
                if (!_reservationsWhereThisIsDistributorLoaded)
                {
                    _reservationsWhereThisIsDistributorLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Company obj = (from o in context.Company
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.ReservationsWhereThisIsDistributor.Load();
                        reservationsWhereThisIsDistributorList = new IndicoList<Indico.BusinessObjects.ReservationBO>(obj.ReservationsWhereThisIsDistributor.Count);
                        
                        foreach (Indico.DAL.Reservation o in obj.ReservationsWhereThisIsDistributor)
                        {
                            Indico.BusinessObjects.ReservationBO fkObj = new Indico.BusinessObjects.ReservationBO(o, ref this._context);
                            reservationsWhereThisIsDistributorList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        reservationsWhereThisIsDistributorList = new IndicoList<Indico.BusinessObjects.ReservationBO>();
                    }
                    
                    reservationsWhereThisIsDistributorList.OnBeforeRemove += new EventHandler(ReservationsWhereThisIsDistributorList_OnBeforeRemove);
                    reservationsWhereThisIsDistributorList.OnAfterAdd += new EventHandler(ReservationsWhereThisIsDistributorList_OnAfterAdd);
                }
                
                return reservationsWhereThisIsDistributorList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.UserBO> UsersWhereThisIsCompany // FK_User_Company
        {
            get
            {
                if (!_usersWhereThisIsCompanyLoaded)
                {
                    _usersWhereThisIsCompanyLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Company obj = (from o in context.Company
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.UsersWhereThisIsCompany.Load();
                        usersWhereThisIsCompanyList = new IndicoList<Indico.BusinessObjects.UserBO>(obj.UsersWhereThisIsCompany.Count);
                        
                        foreach (Indico.DAL.User o in obj.UsersWhereThisIsCompany)
                        {
                            Indico.BusinessObjects.UserBO fkObj = new Indico.BusinessObjects.UserBO(o, ref this._context);
                            usersWhereThisIsCompanyList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        usersWhereThisIsCompanyList = new IndicoList<Indico.BusinessObjects.UserBO>();
                    }
                    
                    usersWhereThisIsCompanyList.OnBeforeRemove += new EventHandler(UsersWhereThisIsCompanyList_OnBeforeRemove);
                    usersWhereThisIsCompanyList.OnAfterAdd += new EventHandler(UsersWhereThisIsCompanyList_OnAfterAdd);
                }
                
                return usersWhereThisIsCompanyList;
            }
        }
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the CompanyBO class using the supplied Indico.DAL.Company. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.Company whose properties will be used to initialise the CompanyBO</param>
        internal CompanyBO(Indico.DAL.Company obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.Company 
            this.ID = obj.ID;
            
            this.Address1 = obj.Address1;
            this.Address2 = obj.Address2;
            this.City = obj.City;
            this.Coordinator = (obj.CoordinatorReference.EntityKey != null && obj.CoordinatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CoordinatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Country = (obj.CountryReference.EntityKey != null && obj.CountryReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CountryReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.CreatedDate = obj.CreatedDate;
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.DistributorType = (obj.DistributorTypeReference.EntityKey != null && obj.DistributorTypeReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.DistributorTypeReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Fax = obj.Fax;
            this.IsActive = obj.IsActive;
            this.IsBackOrder = obj.IsBackOrder;
            this.IsDelete = obj.IsDelete;
            this.IsDistributor = obj.IsDistributor;
            this.IsEnableBackOrderReporting = obj.IsEnableBackOrderReporting;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Name = obj.Name;
            this.NickName = obj.NickName;
            this.Number = obj.Number;
            this.Owner = (obj.OwnerReference.EntityKey != null && obj.OwnerReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.OwnerReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Phone1 = obj.Phone1;
            this.Phone2 = obj.Phone2;
            this.Postcode = obj.Postcode;
            this.SecondaryCoordinator = (obj.SecondaryCoordinatorReference.EntityKey != null && obj.SecondaryCoordinatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.SecondaryCoordinatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.State = obj.State;
            this.Type = (obj.TypeReference.EntityKey != null && obj.TypeReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.TypeReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.Company SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.Company properties
            Indico.DAL.Company obj = new Indico.DAL.Company();
            
            if (this.ID > 0)
            {
                obj = context.Company.FirstOrDefault<Company>(o => o.ID == this.ID);
            }
            
            obj.Address1 = this.Address1;
            obj.Address2 = this.Address2;
            obj.City = this.City;
            obj.CreatedDate = this.CreatedDate;
            obj.Fax = this.Fax;
            obj.IsActive = this.IsActive;
            obj.IsBackOrder = this.IsBackOrder;
            obj.IsDelete = this.IsDelete;
            obj.IsDistributor = this.IsDistributor;
            obj.IsEnableBackOrderReporting = this.IsEnableBackOrderReporting;
            obj.ModifiedDate = this.ModifiedDate;
            obj.Name = this.Name;
            obj.NickName = this.NickName;
            obj.Number = this.Number;
            obj.Phone1 = this.Phone1;
            obj.Phone2 = this.Phone2;
            obj.Postcode = this.Postcode;
            obj.State = this.State;
            
            if (this.Coordinator != null && this.Coordinator > 0) obj.Coordinator = context.User.FirstOrDefault(o => o.ID == this.Coordinator);
            if (this.Country > 0) obj.Country = context.Country.FirstOrDefault(o => o.ID == this.Country);
            if (this.Creator > 0) obj.Creator = context.User.FirstOrDefault(o => o.ID == this.Creator);
            if (this.DistributorType != null && this.DistributorType > 0) obj.DistributorType = context.DistributorType.FirstOrDefault(o => o.ID == this.DistributorType);
            if (this.Modifier > 0) obj.Modifier = context.User.FirstOrDefault(o => o.ID == this.Modifier);
            if (this.Owner != null && this.Owner > 0) obj.Owner = context.User.FirstOrDefault(o => o.ID == this.Owner);
            if (this.SecondaryCoordinator != null && this.SecondaryCoordinator > 0) obj.SecondaryCoordinator = context.User.FirstOrDefault(o => o.ID == this.SecondaryCoordinator);
            if (this.Type > 0) obj.Type = context.CompanyType.FirstOrDefault(o => o.ID == this.Type);
            
            if (_clientsWhereThisIsDistributorLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.ClientBO.ToEntityList(this.ClientsWhereThisIsDistributor, context), 
                    obj.ClientsWhereThisIsDistributor);
            if (_distributorClientAddresssWhereThisIsDistributorLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.DistributorClientAddressBO.ToEntityList(this.DistributorClientAddresssWhereThisIsDistributor, context), 
                    obj.DistributorClientAddresssWhereThisIsDistributor);
            if (_distributorEmailAddresssWhereThisIsDistributorLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.DistributorEmailAddressBO.ToEntityList(this.DistributorEmailAddresssWhereThisIsDistributor, context), 
                    obj.DistributorEmailAddresssWhereThisIsDistributor);
            if (_distributorLabelsWhereThisIsDistributorLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.LabelBO.ToEntityList(this.DistributorLabelsWhereThisIsDistributor, context), 
                    obj.DistributorLabelsWhereThisIsDistributor);
            if (_distributorPriceLevelCostsWhereThisIsDistributorLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.DistributorPriceLevelCostBO.ToEntityList(this.DistributorPriceLevelCostsWhereThisIsDistributor, context), 
                    obj.DistributorPriceLevelCostsWhereThisIsDistributor);
            if (_distributorPriceMarkupsWhereThisIsDistributorLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.DistributorPriceMarkupBO.ToEntityList(this.DistributorPriceMarkupsWhereThisIsDistributor, context), 
                    obj.DistributorPriceMarkupsWhereThisIsDistributor);
            if (_distributorSendMailCountsWhereThisIsDistributorLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.DistributorSendMailCountBO.ToEntityList(this.DistributorSendMailCountsWhereThisIsDistributor, context), 
                    obj.DistributorSendMailCountsWhereThisIsDistributor);
            if (_embroiderysWhereThisIsDistributorLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.EmbroideryBO.ToEntityList(this.EmbroiderysWhereThisIsDistributor, context), 
                    obj.EmbroiderysWhereThisIsDistributor);
            if (_ordersWhereThisIsDespatchToLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.OrderBO.ToEntityList(this.OrdersWhereThisIsDespatchTo, context), 
                    obj.OrdersWhereThisIsDespatchTo);
            if (_ordersWhereThisIsDistributorLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.OrderBO.ToEntityList(this.OrdersWhereThisIsDistributor, context), 
                    obj.OrdersWhereThisIsDistributor);
            if (_ordersWhereThisIsShipToLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.OrderBO.ToEntityList(this.OrdersWhereThisIsShipTo, context), 
                    obj.OrdersWhereThisIsShipTo);
            if (_orderDetailStatussWhereThisIsCompanyLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.OrderDetailStatusBO.ToEntityList(this.OrderDetailStatussWhereThisIsCompany, context), 
                    obj.OrderDetailStatussWhereThisIsCompany);
            if (_priceListDownloadssWhereThisIsDistributorLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.PriceListDownloadsBO.ToEntityList(this.PriceListDownloadssWhereThisIsDistributor, context), 
                    obj.PriceListDownloadssWhereThisIsDistributor);
            if (_quotesWhereThisIsDistributorLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.QuoteBO.ToEntityList(this.QuotesWhereThisIsDistributor, context), 
                    obj.QuotesWhereThisIsDistributor);
            if (_reservationsWhereThisIsDistributorLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.ReservationBO.ToEntityList(this.ReservationsWhereThisIsDistributor, context), 
                    obj.ReservationsWhereThisIsDistributor);
            if (_usersWhereThisIsCompanyLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.UserBO.ToEntityList(this.UsersWhereThisIsCompany, context), 
                    obj.UsersWhereThisIsCompany);
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.Company))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.Company obj = (Indico.DAL.Company)eObj;
            
            // set the Indico.BusinessObjects.CompanyBO properties
            this.ID = obj.ID;
            
            this.Address1 = obj.Address1;
            this.Address2 = obj.Address2;
            this.City = obj.City;
            this.CreatedDate = obj.CreatedDate;
            this.Fax = obj.Fax;
            this.IsActive = obj.IsActive;
            this.IsBackOrder = obj.IsBackOrder;
            this.IsDelete = obj.IsDelete;
            this.IsDistributor = obj.IsDistributor;
            this.IsEnableBackOrderReporting = obj.IsEnableBackOrderReporting;
            this.ModifiedDate = obj.ModifiedDate;
            this.Name = obj.Name;
            this.NickName = obj.NickName;
            this.Number = obj.Number;
            this.Phone1 = obj.Phone1;
            this.Phone2 = obj.Phone2;
            this.Postcode = obj.Postcode;
            this.State = obj.State;
            
            this.Coordinator = (obj.CoordinatorReference.EntityKey != null && obj.CoordinatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CoordinatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Country = (obj.CountryReference.EntityKey != null && obj.CountryReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CountryReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.DistributorType = (obj.DistributorTypeReference.EntityKey != null && obj.DistributorTypeReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.DistributorTypeReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Owner = (obj.OwnerReference.EntityKey != null && obj.OwnerReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.OwnerReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.SecondaryCoordinator = (obj.SecondaryCoordinatorReference.EntityKey != null && obj.SecondaryCoordinatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.SecondaryCoordinatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Type = (obj.TypeReference.EntityKey != null && obj.TypeReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.TypeReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.CompanyBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.CompanyBO properties
            this.ID = obj.ID;
            
            this.Address1 = obj.Address1;
            this.Address2 = obj.Address2;
            this.City = obj.City;
            this.Coordinator = obj.Coordinator;
            this.Country = obj.Country;
            this.CreatedDate = obj.CreatedDate;
            this.Creator = obj.Creator;
            this.DistributorType = obj.DistributorType;
            this.Fax = obj.Fax;
            this.IsActive = obj.IsActive;
            this.IsBackOrder = obj.IsBackOrder;
            this.IsDelete = obj.IsDelete;
            this.IsDistributor = obj.IsDistributor;
            this.IsEnableBackOrderReporting = obj.IsEnableBackOrderReporting;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = obj.Modifier;
            this.Name = obj.Name;
            this.NickName = obj.NickName;
            this.Number = obj.Number;
            this.Owner = obj.Owner;
            this.Phone1 = obj.Phone1;
            this.Phone2 = obj.Phone2;
            this.Postcode = obj.Postcode;
            this.SecondaryCoordinator = obj.SecondaryCoordinator;
            this.State = obj.State;
            this.Type = obj.Type;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.CompanyBO> IQueryableToList(IQueryable<Indico.DAL.Company> oQuery)
        {
            List<Indico.DAL.Company> oList = oQuery.ToList();
            List<Indico.BusinessObjects.CompanyBO> rList = new List<Indico.BusinessObjects.CompanyBO>(oList.Count);
            foreach (Indico.DAL.Company o in oList)
            {
                Indico.BusinessObjects.CompanyBO obj = new Indico.BusinessObjects.CompanyBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.CompanyBO> ToList(IEnumerable<Indico.DAL.Company> oQuery)
        {
            List<Indico.DAL.Company> oList = oQuery.ToList();
            List<Indico.BusinessObjects.CompanyBO> rList = new List<Indico.BusinessObjects.CompanyBO>(oList.Count);
            foreach (Indico.DAL.Company o in oList)
            {
                Indico.BusinessObjects.CompanyBO obj = new Indico.BusinessObjects.CompanyBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.Company> ToEntityList(List<CompanyBO> bos, IndicoEntities context)
        {
            // build a List of Company entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.Company.Count() == 0) ? new List<Indico.DAL.Company>() : (context.Company.Where(BuildContainsExpression<Company, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.Company>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Company> ToEntityCollection(List<CompanyBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of Company entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.Company> el = (context.Company.Count() == 0) ? new List<Indico.DAL.Company>() : 
                context.Company.Where(BuildContainsExpression<Company, int>(e => e.ID, ids))
                .ToList<Indico.DAL.Company>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Company> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Company>();
                
            foreach (Indico.DAL.Company r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.Company ToEntity(IndicoEntities context)
        {
            return (from o in context.Company
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToCompany(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Company obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToCompany(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.Company obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Company obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.CompanyBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.CompanyBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.Company> oQuery =
                        from o in context.Company
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.Company> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.CompanyBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.CompanyBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.CompanyBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.CompanyBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.Company> oQuery =
                (from o in context.Company
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.CompanyBO> companys = IQueryableToList(oQuery);
            context.Dispose();
            return companys;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.CompanyBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.CompanyBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.CompanyBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.CompanyBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Company> oQuery =
                (from o in context.Company
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Type == 0 || this.Type == o.Type.ID) &&
                    (this.IsDistributor == false || this.IsDistributor == o.IsDistributor) &&
                    (this.Name == null || this.Name == o.Name) &&
                    (this.Number == null || this.Number == o.Number) &&
                    (this.Address1 == null || this.Address1 == o.Address1) &&
                    (this.Address2 == null || this.Address2 == o.Address2) &&
                    (this.City == null || this.City == o.City) &&
                    (this.State == null || this.State == o.State) &&
                    (this.Postcode == null || this.Postcode == o.Postcode) &&
                    (this.Country == 0 || this.Country == o.Country.ID) &&
                    (this.Phone1 == null || this.Phone1 == o.Phone1) &&
                    (this.Phone2 == null || this.Phone2 == o.Phone2) &&
                    (this.Fax == null || this.Fax == o.Fax) &&
                    (this.NickName == null || this.NickName == o.NickName) &&
                    (this.Coordinator == null || this.Coordinator == o.Coordinator.ID) &&
                    (this.Owner == null || this.Owner == o.Owner.ID) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) &&
                    (this.SecondaryCoordinator == null || this.SecondaryCoordinator == o.SecondaryCoordinator.ID) &&
                    (this.IsActive == null || this.IsActive == o.IsActive) &&
                    (this.IsDelete == null || this.IsDelete == o.IsDelete) &&
                    (this.IsBackOrder == null || this.IsBackOrder == o.IsBackOrder) &&
                    (this.IsEnableBackOrderReporting == false || this.IsEnableBackOrderReporting == o.IsEnableBackOrderReporting) &&
                    (this.DistributorType == null || this.DistributorType == o.DistributorType.ID) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.CompanyBO> companys = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return companys;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Company
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Type == 0 || this.Type == o.Type.ID) &&
                    (this.IsDistributor == false || this.IsDistributor == o.IsDistributor) &&
                    (this.Name == null || this.Name == o.Name) &&
                    (this.Number == null || this.Number == o.Number) &&
                    (this.Address1 == null || this.Address1 == o.Address1) &&
                    (this.Address2 == null || this.Address2 == o.Address2) &&
                    (this.City == null || this.City == o.City) &&
                    (this.State == null || this.State == o.State) &&
                    (this.Postcode == null || this.Postcode == o.Postcode) &&
                    (this.Country == 0 || this.Country == o.Country.ID) &&
                    (this.Phone1 == null || this.Phone1 == o.Phone1) &&
                    (this.Phone2 == null || this.Phone2 == o.Phone2) &&
                    (this.Fax == null || this.Fax == o.Fax) &&
                    (this.NickName == null || this.NickName == o.NickName) &&
                    (this.Coordinator == null || this.Coordinator == o.Coordinator.ID) &&
                    (this.Owner == null || this.Owner == o.Owner.ID) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) &&
                    (this.SecondaryCoordinator == null || this.SecondaryCoordinator == o.SecondaryCoordinator.ID) &&
                    (this.IsActive == null || this.IsActive == o.IsActive) &&
                    (this.IsDelete == null || this.IsDelete == o.IsDelete) &&
                    (this.IsBackOrder == null || this.IsBackOrder == o.IsBackOrder) &&
                    (this.IsEnableBackOrderReporting == false || this.IsEnableBackOrderReporting == o.IsEnableBackOrderReporting) &&
                    (this.DistributorType == null || this.DistributorType == o.DistributorType.ID) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.CompanyBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.CompanyBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.CompanyBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.CompanyBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Company> oQuery =
                (from o in context.Company
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Type == 0 || o.Type.ID == this.Type) &&
                    (this.IsDistributor == false || o.IsDistributor == this.IsDistributor) &&
                    (this.Name == null || o.Name.Contains(this.Name)) &&
                    (this.Number == null || o.Number.Contains(this.Number)) &&
                    (this.Address1 == null || o.Address1.Contains(this.Address1)) &&
                    (this.Address2 == null || o.Address2.Contains(this.Address2)) &&
                    (this.City == null || o.City.Contains(this.City)) &&
                    (this.State == null || o.State.Contains(this.State)) &&
                    (this.Postcode == null || o.Postcode.Contains(this.Postcode)) &&
                    (this.Country == 0 || o.Country.ID == this.Country) &&
                    (this.Phone1 == null || o.Phone1.Contains(this.Phone1)) &&
                    (this.Phone2 == null || o.Phone2.Contains(this.Phone2)) &&
                    (this.Fax == null || o.Fax.Contains(this.Fax)) &&
                    (this.NickName == null || o.NickName.Contains(this.NickName)) &&
                    (this.Coordinator == null || o.Coordinator.ID == this.Coordinator) &&
                    (this.Owner == null || o.Owner.ID == this.Owner) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.ModifiedDate == DateTime.MinValue || o.ModifiedDate == this.ModifiedDate) &&
                    (this.SecondaryCoordinator == null || o.SecondaryCoordinator.ID == this.SecondaryCoordinator) &&
                    (this.IsActive == null || o.IsActive == this.IsActive) &&
                    (this.IsDelete == null || o.IsDelete == this.IsDelete) &&
                    (this.IsBackOrder == null || o.IsBackOrder == this.IsBackOrder) &&
                    (this.IsEnableBackOrderReporting == false || o.IsEnableBackOrderReporting == this.IsEnableBackOrderReporting) &&
                    (this.DistributorType == null || o.DistributorType.ID == this.DistributorType) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.CompanyBO> companys = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return companys;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Company
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Type == 0 || o.Type.ID == this.Type) &&
                    (this.IsDistributor == false || o.IsDistributor == this.IsDistributor) &&
                    (this.Name == null || o.Name.Contains(this.Name)) &&
                    (this.Number == null || o.Number.Contains(this.Number)) &&
                    (this.Address1 == null || o.Address1.Contains(this.Address1)) &&
                    (this.Address2 == null || o.Address2.Contains(this.Address2)) &&
                    (this.City == null || o.City.Contains(this.City)) &&
                    (this.State == null || o.State.Contains(this.State)) &&
                    (this.Postcode == null || o.Postcode.Contains(this.Postcode)) &&
                    (this.Country == 0 || o.Country.ID == this.Country) &&
                    (this.Phone1 == null || o.Phone1.Contains(this.Phone1)) &&
                    (this.Phone2 == null || o.Phone2.Contains(this.Phone2)) &&
                    (this.Fax == null || o.Fax.Contains(this.Fax)) &&
                    (this.NickName == null || o.NickName.Contains(this.NickName)) &&
                    (this.Coordinator == null || o.Coordinator.ID == this.Coordinator) &&
                    (this.Owner == null || o.Owner.ID == this.Owner) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.ModifiedDate == DateTime.MinValue || o.ModifiedDate == this.ModifiedDate) &&
                    (this.SecondaryCoordinator == null || o.SecondaryCoordinator.ID == this.SecondaryCoordinator) &&
                    (this.IsActive == null || o.IsActive == this.IsActive) &&
                    (this.IsDelete == null || o.IsDelete == this.IsDelete) &&
                    (this.IsBackOrder == null || o.IsBackOrder == this.IsBackOrder) &&
                    (this.IsEnableBackOrderReporting == false || o.IsEnableBackOrderReporting == this.IsEnableBackOrderReporting) &&
                    (this.DistributorType == null || o.DistributorType.ID == this.DistributorType) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.CompanyBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.CompanyBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.CompanyBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.CompanyBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Company> oQuery =
                (from o in context.Company
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Type == 0 || this.Type == o.Type.ID) && 
                    (this.IsDistributor == false || this.IsDistributor == o.IsDistributor) && 
                    (this.Country == 0 || this.Country == o.Country.ID) && 
                    (this.Coordinator == null || this.Coordinator == o.Coordinator.ID) && 
                    (this.Owner == null || this.Owner == o.Owner.ID) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) && 
                    (this.SecondaryCoordinator == null || this.SecondaryCoordinator == o.SecondaryCoordinator.ID) && 
                    (this.IsActive == null || this.IsActive == o.IsActive) && 
                    (this.IsDelete == null || this.IsDelete == o.IsDelete) && 
                    (this.IsBackOrder == null || this.IsBackOrder == o.IsBackOrder) && 
                    (this.IsEnableBackOrderReporting == false || this.IsEnableBackOrderReporting == o.IsEnableBackOrderReporting) && 
                    (this.DistributorType == null || this.DistributorType == o.DistributorType.ID) && 
                    ((o.Name.Contains(this.Name)) ||
                    (o.Number.Contains(this.Number)) ||
                    (o.Address1.Contains(this.Address1)) ||
                    (o.Address2.Contains(this.Address2)) ||
                    (o.City.Contains(this.City)) ||
                    (o.State.Contains(this.State)) ||
                    (o.Postcode.Contains(this.Postcode)) ||
                    (o.Phone1.Contains(this.Phone1)) ||
                    (o.Phone2.Contains(this.Phone2)) ||
                    (o.Fax.Contains(this.Fax)) ||
                    (o.NickName.Contains(this.NickName)) ||
                    (this.Name == null && this.Number == null && this.Address1 == null && this.Address2 == null && this.City == null && this.State == null && this.Postcode == null && this.Phone1 == null && this.Phone2 == null && this.Fax == null && this.NickName == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.CompanyBO> companys = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return companys;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Company
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Type == 0 || this.Type == o.Type.ID) && 
                    (this.IsDistributor == false || this.IsDistributor == o.IsDistributor) && 
                    (this.Country == 0 || this.Country == o.Country.ID) && 
                    (this.Coordinator == null || this.Coordinator == o.Coordinator.ID) && 
                    (this.Owner == null || this.Owner == o.Owner.ID) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) && 
                    (this.SecondaryCoordinator == null || this.SecondaryCoordinator == o.SecondaryCoordinator.ID) && 
                    (this.IsActive == null || this.IsActive == o.IsActive) && 
                    (this.IsDelete == null || this.IsDelete == o.IsDelete) && 
                    (this.IsBackOrder == null || this.IsBackOrder == o.IsBackOrder) && 
                    (this.IsEnableBackOrderReporting == false || this.IsEnableBackOrderReporting == o.IsEnableBackOrderReporting) && 
                    (this.DistributorType == null || this.DistributorType == o.DistributorType.ID) && 
                    ((o.Name.Contains(this.Name)) ||
                    (o.Number.Contains(this.Number)) ||
                    (o.Address1.Contains(this.Address1)) ||
                    (o.Address2.Contains(this.Address2)) ||
                    (o.City.Contains(this.City)) ||
                    (o.State.Contains(this.State)) ||
                    (o.Postcode.Contains(this.Postcode)) ||
                    (o.Phone1.Contains(this.Phone1)) ||
                    (o.Phone2.Contains(this.Phone2)) ||
                    (o.Fax.Contains(this.Fax)) ||
                    (o.NickName.Contains(this.NickName)) ||
                    (this.Name == null && this.Number == null && this.Address1 == null && this.Address2 == null && this.City == null && this.State == null && this.Postcode == null && this.Phone1 == null && this.Phone2 == null && this.Fax == null && this.NickName == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.CompanyBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.CompanyBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.CompanyBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.CompanyBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.CompanyBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.CompanyBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnCompanyBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("CompanyBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnCompanyBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnCompanyBOIDChanged();
        partial void OnCompanyBOIDChanging(int value);
        
        partial void OnTypeChanged()
        {
            OnCompanyBOTypeChanged();
        }
        
        partial void OnTypeChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("CompanyBO.Type must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnCompanyBOTypeChanging(value);
        }
        partial void OnTypeChanged();
        partial void OnTypeChanging(int value);
        partial void OnCompanyBOTypeChanged();
        partial void OnCompanyBOTypeChanging(int value);
        
        partial void OnIsDistributorChanged()
        {
            OnCompanyBOIsDistributorChanged();
        }
        
        partial void OnIsDistributorChanging(bool value)
        {
            OnCompanyBOIsDistributorChanging(value);
        }
        partial void OnIsDistributorChanged();
        partial void OnIsDistributorChanging(bool value);
        partial void OnCompanyBOIsDistributorChanged();
        partial void OnCompanyBOIsDistributorChanging(bool value);
        
        partial void OnNameChanged()
        {
            OnCompanyBONameChanged();
        }
        
        partial void OnNameChanging(string value)
        {
            if (value != null && value.Length > 128)
            {
                throw new Exception(String.Format("CompanyBO.Name has a maximum length of 128. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnCompanyBONameChanging(value);
        }
        partial void OnNameChanged();
        partial void OnNameChanging(string value);
        partial void OnCompanyBONameChanged();
        partial void OnCompanyBONameChanging(string value);
        
        partial void OnNumberChanged()
        {
            OnCompanyBONumberChanged();
        }
        
        partial void OnNumberChanging(string value)
        {
            if (value != null && value.Length > 32)
            {
                throw new Exception(String.Format("CompanyBO.Number has a maximum length of 32. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnCompanyBONumberChanging(value);
        }
        partial void OnNumberChanged();
        partial void OnNumberChanging(string value);
        partial void OnCompanyBONumberChanged();
        partial void OnCompanyBONumberChanging(string value);
        
        partial void OnAddress1Changed()
        {
            OnCompanyBOAddress1Changed();
        }
        
        partial void OnAddress1Changing(string value)
        {
            if (value != null && value.Length > 128)
            {
                throw new Exception(String.Format("CompanyBO.Address1 has a maximum length of 128. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnCompanyBOAddress1Changing(value);
        }
        partial void OnAddress1Changed();
        partial void OnAddress1Changing(string value);
        partial void OnCompanyBOAddress1Changed();
        partial void OnCompanyBOAddress1Changing(string value);
        
        partial void OnAddress2Changed()
        {
            OnCompanyBOAddress2Changed();
        }
        
        partial void OnAddress2Changing(string value)
        {
            if (value != null && value.Length > 128)
            {
                throw new Exception(String.Format("CompanyBO.Address2 has a maximum length of 128. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnCompanyBOAddress2Changing(value);
        }
        partial void OnAddress2Changed();
        partial void OnAddress2Changing(string value);
        partial void OnCompanyBOAddress2Changed();
        partial void OnCompanyBOAddress2Changing(string value);
        
        partial void OnCityChanged()
        {
            OnCompanyBOCityChanged();
        }
        
        partial void OnCityChanging(string value)
        {
            if (value != null && value.Length > 68)
            {
                throw new Exception(String.Format("CompanyBO.City has a maximum length of 68. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnCompanyBOCityChanging(value);
        }
        partial void OnCityChanged();
        partial void OnCityChanging(string value);
        partial void OnCompanyBOCityChanged();
        partial void OnCompanyBOCityChanging(string value);
        
        partial void OnStateChanged()
        {
            OnCompanyBOStateChanged();
        }
        
        partial void OnStateChanging(string value)
        {
            if (value != null && value.Length > 20)
            {
                throw new Exception(String.Format("CompanyBO.State has a maximum length of 20. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnCompanyBOStateChanging(value);
        }
        partial void OnStateChanged();
        partial void OnStateChanging(string value);
        partial void OnCompanyBOStateChanged();
        partial void OnCompanyBOStateChanging(string value);
        
        partial void OnPostcodeChanged()
        {
            OnCompanyBOPostcodeChanged();
        }
        
        partial void OnPostcodeChanging(string value)
        {
            if (value != null && value.Length > 20)
            {
                throw new Exception(String.Format("CompanyBO.Postcode has a maximum length of 20. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnCompanyBOPostcodeChanging(value);
        }
        partial void OnPostcodeChanged();
        partial void OnPostcodeChanging(string value);
        partial void OnCompanyBOPostcodeChanged();
        partial void OnCompanyBOPostcodeChanging(string value);
        
        partial void OnCountryChanged()
        {
            OnCompanyBOCountryChanged();
        }
        
        partial void OnCountryChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("CompanyBO.Country must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnCompanyBOCountryChanging(value);
        }
        partial void OnCountryChanged();
        partial void OnCountryChanging(int value);
        partial void OnCompanyBOCountryChanged();
        partial void OnCompanyBOCountryChanging(int value);
        
        partial void OnPhone1Changed()
        {
            OnCompanyBOPhone1Changed();
        }
        
        partial void OnPhone1Changing(string value)
        {
            if (value != null && value.Length > 20)
            {
                throw new Exception(String.Format("CompanyBO.Phone1 has a maximum length of 20. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnCompanyBOPhone1Changing(value);
        }
        partial void OnPhone1Changed();
        partial void OnPhone1Changing(string value);
        partial void OnCompanyBOPhone1Changed();
        partial void OnCompanyBOPhone1Changing(string value);
        
        partial void OnPhone2Changed()
        {
            OnCompanyBOPhone2Changed();
        }
        
        partial void OnPhone2Changing(string value)
        {
            if (value != null && value.Length > 20)
            {
                throw new Exception(String.Format("CompanyBO.Phone2 has a maximum length of 20. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnCompanyBOPhone2Changing(value);
        }
        partial void OnPhone2Changed();
        partial void OnPhone2Changing(string value);
        partial void OnCompanyBOPhone2Changed();
        partial void OnCompanyBOPhone2Changing(string value);
        
        partial void OnFaxChanged()
        {
            OnCompanyBOFaxChanged();
        }
        
        partial void OnFaxChanging(string value)
        {
            if (value != null && value.Length > 64)
            {
                throw new Exception(String.Format("CompanyBO.Fax has a maximum length of 64. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnCompanyBOFaxChanging(value);
        }
        partial void OnFaxChanged();
        partial void OnFaxChanging(string value);
        partial void OnCompanyBOFaxChanged();
        partial void OnCompanyBOFaxChanging(string value);
        
        partial void OnNickNameChanged()
        {
            OnCompanyBONickNameChanged();
        }
        
        partial void OnNickNameChanging(string value)
        {
            if (value != null && value.Length > 128)
            {
                throw new Exception(String.Format("CompanyBO.NickName has a maximum length of 128. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnCompanyBONickNameChanging(value);
        }
        partial void OnNickNameChanged();
        partial void OnNickNameChanging(string value);
        partial void OnCompanyBONickNameChanged();
        partial void OnCompanyBONickNameChanging(string value);
        
        partial void OnCoordinatorChanged()
        {
            OnCompanyBOCoordinatorChanged();
        }
        
        partial void OnCoordinatorChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("CompanyBO.Coordinator must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnCompanyBOCoordinatorChanging(value);
        }
        partial void OnCoordinatorChanged();
        partial void OnCoordinatorChanging(int? value);
        partial void OnCompanyBOCoordinatorChanged();
        partial void OnCompanyBOCoordinatorChanging(int? value);
        
        partial void OnOwnerChanged()
        {
            OnCompanyBOOwnerChanged();
        }
        
        partial void OnOwnerChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("CompanyBO.Owner must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnCompanyBOOwnerChanging(value);
        }
        partial void OnOwnerChanged();
        partial void OnOwnerChanging(int? value);
        partial void OnCompanyBOOwnerChanged();
        partial void OnCompanyBOOwnerChanging(int? value);
        
        partial void OnCreatorChanged()
        {
            OnCompanyBOCreatorChanged();
        }
        
        partial void OnCreatorChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("CompanyBO.Creator must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnCompanyBOCreatorChanging(value);
        }
        partial void OnCreatorChanged();
        partial void OnCreatorChanging(int value);
        partial void OnCompanyBOCreatorChanged();
        partial void OnCompanyBOCreatorChanging(int value);
        
        partial void OnCreatedDateChanged()
        {
            OnCompanyBOCreatedDateChanged();
        }
        
        partial void OnCreatedDateChanging(DateTime value)
        {
            OnCompanyBOCreatedDateChanging(value);
        }
        partial void OnCreatedDateChanged();
        partial void OnCreatedDateChanging(DateTime value);
        partial void OnCompanyBOCreatedDateChanged();
        partial void OnCompanyBOCreatedDateChanging(DateTime value);
        
        partial void OnModifierChanged()
        {
            OnCompanyBOModifierChanged();
        }
        
        partial void OnModifierChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("CompanyBO.Modifier must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnCompanyBOModifierChanging(value);
        }
        partial void OnModifierChanged();
        partial void OnModifierChanging(int value);
        partial void OnCompanyBOModifierChanged();
        partial void OnCompanyBOModifierChanging(int value);
        
        partial void OnModifiedDateChanged()
        {
            OnCompanyBOModifiedDateChanged();
        }
        
        partial void OnModifiedDateChanging(DateTime value)
        {
            OnCompanyBOModifiedDateChanging(value);
        }
        partial void OnModifiedDateChanged();
        partial void OnModifiedDateChanging(DateTime value);
        partial void OnCompanyBOModifiedDateChanged();
        partial void OnCompanyBOModifiedDateChanging(DateTime value);
        
        partial void OnSecondaryCoordinatorChanged()
        {
            OnCompanyBOSecondaryCoordinatorChanged();
        }
        
        partial void OnSecondaryCoordinatorChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("CompanyBO.SecondaryCoordinator must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnCompanyBOSecondaryCoordinatorChanging(value);
        }
        partial void OnSecondaryCoordinatorChanged();
        partial void OnSecondaryCoordinatorChanging(int? value);
        partial void OnCompanyBOSecondaryCoordinatorChanged();
        partial void OnCompanyBOSecondaryCoordinatorChanging(int? value);
        
        partial void OnIsActiveChanged()
        {
            OnCompanyBOIsActiveChanged();
        }
        
        partial void OnIsActiveChanging(bool? value)
        {
            OnCompanyBOIsActiveChanging(value);
        }
        partial void OnIsActiveChanged();
        partial void OnIsActiveChanging(bool? value);
        partial void OnCompanyBOIsActiveChanged();
        partial void OnCompanyBOIsActiveChanging(bool? value);
        
        partial void OnIsDeleteChanged()
        {
            OnCompanyBOIsDeleteChanged();
        }
        
        partial void OnIsDeleteChanging(bool? value)
        {
            OnCompanyBOIsDeleteChanging(value);
        }
        partial void OnIsDeleteChanged();
        partial void OnIsDeleteChanging(bool? value);
        partial void OnCompanyBOIsDeleteChanged();
        partial void OnCompanyBOIsDeleteChanging(bool? value);
        
        partial void OnIsBackOrderChanged()
        {
            OnCompanyBOIsBackOrderChanged();
        }
        
        partial void OnIsBackOrderChanging(bool? value)
        {
            OnCompanyBOIsBackOrderChanging(value);
        }
        partial void OnIsBackOrderChanged();
        partial void OnIsBackOrderChanging(bool? value);
        partial void OnCompanyBOIsBackOrderChanged();
        partial void OnCompanyBOIsBackOrderChanging(bool? value);
        
        partial void OnIsEnableBackOrderReportingChanged()
        {
            OnCompanyBOIsEnableBackOrderReportingChanged();
        }
        
        partial void OnIsEnableBackOrderReportingChanging(bool value)
        {
            OnCompanyBOIsEnableBackOrderReportingChanging(value);
        }
        partial void OnIsEnableBackOrderReportingChanged();
        partial void OnIsEnableBackOrderReportingChanging(bool value);
        partial void OnCompanyBOIsEnableBackOrderReportingChanged();
        partial void OnCompanyBOIsEnableBackOrderReportingChanging(bool value);
        
        partial void OnDistributorTypeChanged()
        {
            OnCompanyBODistributorTypeChanged();
        }
        
        partial void OnDistributorTypeChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("CompanyBO.DistributorType must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnCompanyBODistributorTypeChanging(value);
        }
        partial void OnDistributorTypeChanged();
        partial void OnDistributorTypeChanging(int? value);
        partial void OnCompanyBODistributorTypeChanged();
        partial void OnCompanyBODistributorTypeChanging(int? value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.CompanyBO))
                return 1;
            Indico.BusinessObjects.CompanyBOComparer c = new Indico.BusinessObjects.CompanyBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.CompanyBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.Company)sender);
            }
        }
        
        void ClientsWhereThisIsDistributorList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Client obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.ClientBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.ClientBO>)sender)[((IndicoList<Indico.BusinessObjects.ClientBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.ClientsWhereThisIsDistributor.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.ClientBO>)sender)[((IndicoList<Indico.BusinessObjects.ClientBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.ClientsWhereThisIsDistributor.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void ClientsWhereThisIsDistributorList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Client obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.ClientBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.ClientBO>)sender)[((IndicoList<Indico.BusinessObjects.ClientBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.ClientsWhereThisIsDistributor.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.ClientBO>)sender)[((IndicoList<Indico.BusinessObjects.ClientBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.ClientsWhereThisIsDistributor.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void DistributorClientAddresssWhereThisIsDistributorList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.DistributorClientAddress obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.DistributorClientAddresssWhereThisIsDistributor.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.DistributorClientAddresssWhereThisIsDistributor.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void DistributorClientAddresssWhereThisIsDistributorList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.DistributorClientAddress obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.DistributorClientAddresssWhereThisIsDistributor.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.DistributorClientAddresssWhereThisIsDistributor.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void DistributorEmailAddresssWhereThisIsDistributorList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.DistributorEmailAddress obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.DistributorEmailAddressBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.DistributorEmailAddressBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorEmailAddressBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.DistributorEmailAddresssWhereThisIsDistributor.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.DistributorEmailAddressBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorEmailAddressBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.DistributorEmailAddresssWhereThisIsDistributor.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void DistributorEmailAddresssWhereThisIsDistributorList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.DistributorEmailAddress obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.DistributorEmailAddressBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.DistributorEmailAddressBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorEmailAddressBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.DistributorEmailAddresssWhereThisIsDistributor.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.DistributorEmailAddressBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorEmailAddressBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.DistributorEmailAddresssWhereThisIsDistributor.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void DistributorLabelsWhereThisIsDistributorList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Label obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.LabelBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.LabelBO>)sender)[((IndicoList<Indico.BusinessObjects.LabelBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.DistributorLabelsWhereThisIsDistributor.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.LabelBO>)sender)[((IndicoList<Indico.BusinessObjects.LabelBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.DistributorLabelsWhereThisIsDistributor.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void DistributorLabelsWhereThisIsDistributorList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Label obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.LabelBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.LabelBO>)sender)[((IndicoList<Indico.BusinessObjects.LabelBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.DistributorLabelsWhereThisIsDistributor.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.LabelBO>)sender)[((IndicoList<Indico.BusinessObjects.LabelBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.DistributorLabelsWhereThisIsDistributor.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void DistributorPriceLevelCostsWhereThisIsDistributorList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.DistributorPriceLevelCost obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.DistributorPriceLevelCostsWhereThisIsDistributor.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.DistributorPriceLevelCostsWhereThisIsDistributor.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void DistributorPriceLevelCostsWhereThisIsDistributorList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.DistributorPriceLevelCost obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.DistributorPriceLevelCostsWhereThisIsDistributor.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.DistributorPriceLevelCostsWhereThisIsDistributor.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void DistributorPriceMarkupsWhereThisIsDistributorList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.DistributorPriceMarkup obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.DistributorPriceMarkupBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.DistributorPriceMarkupBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorPriceMarkupBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.DistributorPriceMarkupsWhereThisIsDistributor.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.DistributorPriceMarkupBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorPriceMarkupBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.DistributorPriceMarkupsWhereThisIsDistributor.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void DistributorPriceMarkupsWhereThisIsDistributorList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.DistributorPriceMarkup obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.DistributorPriceMarkupBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.DistributorPriceMarkupBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorPriceMarkupBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.DistributorPriceMarkupsWhereThisIsDistributor.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.DistributorPriceMarkupBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorPriceMarkupBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.DistributorPriceMarkupsWhereThisIsDistributor.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void DistributorSendMailCountsWhereThisIsDistributorList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.DistributorSendMailCount obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.DistributorSendMailCountsWhereThisIsDistributor.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.DistributorSendMailCountsWhereThisIsDistributor.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void DistributorSendMailCountsWhereThisIsDistributorList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.DistributorSendMailCount obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.DistributorSendMailCountsWhereThisIsDistributor.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.DistributorSendMailCountsWhereThisIsDistributor.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void EmbroiderysWhereThisIsDistributorList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Embroidery obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.EmbroideryBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.EmbroideryBO>)sender)[((IndicoList<Indico.BusinessObjects.EmbroideryBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.EmbroiderysWhereThisIsDistributor.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.EmbroideryBO>)sender)[((IndicoList<Indico.BusinessObjects.EmbroideryBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.EmbroiderysWhereThisIsDistributor.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void EmbroiderysWhereThisIsDistributorList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Embroidery obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.EmbroideryBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.EmbroideryBO>)sender)[((IndicoList<Indico.BusinessObjects.EmbroideryBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.EmbroiderysWhereThisIsDistributor.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.EmbroideryBO>)sender)[((IndicoList<Indico.BusinessObjects.EmbroideryBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.EmbroiderysWhereThisIsDistributor.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrdersWhereThisIsDespatchToList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Order obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrdersWhereThisIsDespatchTo.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrdersWhereThisIsDespatchTo.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrdersWhereThisIsDespatchToList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Order obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrdersWhereThisIsDespatchTo.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrdersWhereThisIsDespatchTo.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrdersWhereThisIsDistributorList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Order obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrdersWhereThisIsDistributor.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrdersWhereThisIsDistributor.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrdersWhereThisIsDistributorList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Order obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrdersWhereThisIsDistributor.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrdersWhereThisIsDistributor.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrdersWhereThisIsShipToList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Order obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrdersWhereThisIsShipTo.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrdersWhereThisIsShipTo.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrdersWhereThisIsShipToList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Order obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrdersWhereThisIsShipTo.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrdersWhereThisIsShipTo.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrderDetailStatussWhereThisIsCompanyList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.OrderDetailStatus obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderDetailStatusBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderDetailStatusBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailStatusBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrderDetailStatussWhereThisIsCompany.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderDetailStatusBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailStatusBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrderDetailStatussWhereThisIsCompany.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrderDetailStatussWhereThisIsCompanyList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.OrderDetailStatus obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderDetailStatusBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderDetailStatusBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailStatusBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrderDetailStatussWhereThisIsCompany.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderDetailStatusBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailStatusBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrderDetailStatussWhereThisIsCompany.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PriceListDownloadssWhereThisIsDistributorList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.PriceListDownloads obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PriceListDownloadsBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PriceListDownloadsBO>)sender)[((IndicoList<Indico.BusinessObjects.PriceListDownloadsBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PriceListDownloadssWhereThisIsDistributor.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PriceListDownloadsBO>)sender)[((IndicoList<Indico.BusinessObjects.PriceListDownloadsBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PriceListDownloadssWhereThisIsDistributor.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PriceListDownloadssWhereThisIsDistributorList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.PriceListDownloads obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PriceListDownloadsBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PriceListDownloadsBO>)sender)[((IndicoList<Indico.BusinessObjects.PriceListDownloadsBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PriceListDownloadssWhereThisIsDistributor.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PriceListDownloadsBO>)sender)[((IndicoList<Indico.BusinessObjects.PriceListDownloadsBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PriceListDownloadssWhereThisIsDistributor.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void QuotesWhereThisIsDistributorList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Quote obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.QuoteBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.QuoteBO>)sender)[((IndicoList<Indico.BusinessObjects.QuoteBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.QuotesWhereThisIsDistributor.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.QuoteBO>)sender)[((IndicoList<Indico.BusinessObjects.QuoteBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.QuotesWhereThisIsDistributor.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void QuotesWhereThisIsDistributorList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Quote obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.QuoteBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.QuoteBO>)sender)[((IndicoList<Indico.BusinessObjects.QuoteBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.QuotesWhereThisIsDistributor.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.QuoteBO>)sender)[((IndicoList<Indico.BusinessObjects.QuoteBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.QuotesWhereThisIsDistributor.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void ReservationsWhereThisIsDistributorList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Reservation obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.ReservationBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.ReservationBO>)sender)[((IndicoList<Indico.BusinessObjects.ReservationBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.ReservationsWhereThisIsDistributor.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.ReservationBO>)sender)[((IndicoList<Indico.BusinessObjects.ReservationBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.ReservationsWhereThisIsDistributor.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void ReservationsWhereThisIsDistributorList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Reservation obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.ReservationBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.ReservationBO>)sender)[((IndicoList<Indico.BusinessObjects.ReservationBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.ReservationsWhereThisIsDistributor.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.ReservationBO>)sender)[((IndicoList<Indico.BusinessObjects.ReservationBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.ReservationsWhereThisIsDistributor.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void UsersWhereThisIsCompanyList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.User obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.UserBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.UserBO>)sender)[((IndicoList<Indico.BusinessObjects.UserBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.UsersWhereThisIsCompany.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.UserBO>)sender)[((IndicoList<Indico.BusinessObjects.UserBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.UsersWhereThisIsCompany.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void UsersWhereThisIsCompanyList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.User obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.UserBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.UserBO>)sender)[((IndicoList<Indico.BusinessObjects.UserBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.UsersWhereThisIsCompany.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.UserBO>)sender)[((IndicoList<Indico.BusinessObjects.UserBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.UsersWhereThisIsCompany.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
            this._clientsWhereThisIsDistributorLoaded = false;
            if (this.clientsWhereThisIsDistributorList != null)
            {
                this.clientsWhereThisIsDistributorList.OnBeforeRemove -= new EventHandler(ClientsWhereThisIsDistributorList_OnBeforeRemove);
                this.clientsWhereThisIsDistributorList.OnAfterAdd -= new EventHandler(ClientsWhereThisIsDistributorList_OnAfterAdd);
            }
            this._distributorClientAddresssWhereThisIsDistributorLoaded = false;
            if (this.distributorClientAddresssWhereThisIsDistributorList != null)
            {
                this.distributorClientAddresssWhereThisIsDistributorList.OnBeforeRemove -= new EventHandler(DistributorClientAddresssWhereThisIsDistributorList_OnBeforeRemove);
                this.distributorClientAddresssWhereThisIsDistributorList.OnAfterAdd -= new EventHandler(DistributorClientAddresssWhereThisIsDistributorList_OnAfterAdd);
            }
            this._distributorEmailAddresssWhereThisIsDistributorLoaded = false;
            if (this.distributorEmailAddresssWhereThisIsDistributorList != null)
            {
                this.distributorEmailAddresssWhereThisIsDistributorList.OnBeforeRemove -= new EventHandler(DistributorEmailAddresssWhereThisIsDistributorList_OnBeforeRemove);
                this.distributorEmailAddresssWhereThisIsDistributorList.OnAfterAdd -= new EventHandler(DistributorEmailAddresssWhereThisIsDistributorList_OnAfterAdd);
            }
            this._distributorLabelsWhereThisIsDistributorLoaded = false;
            if (this.distributorLabelsWhereThisIsDistributorList != null)
            {
                this.distributorLabelsWhereThisIsDistributorList.OnBeforeRemove -= new EventHandler(DistributorLabelsWhereThisIsDistributorList_OnBeforeRemove);
                this.distributorLabelsWhereThisIsDistributorList.OnAfterAdd -= new EventHandler(DistributorLabelsWhereThisIsDistributorList_OnAfterAdd);
            }
            this._distributorPriceLevelCostsWhereThisIsDistributorLoaded = false;
            if (this.distributorPriceLevelCostsWhereThisIsDistributorList != null)
            {
                this.distributorPriceLevelCostsWhereThisIsDistributorList.OnBeforeRemove -= new EventHandler(DistributorPriceLevelCostsWhereThisIsDistributorList_OnBeforeRemove);
                this.distributorPriceLevelCostsWhereThisIsDistributorList.OnAfterAdd -= new EventHandler(DistributorPriceLevelCostsWhereThisIsDistributorList_OnAfterAdd);
            }
            this._distributorPriceMarkupsWhereThisIsDistributorLoaded = false;
            if (this.distributorPriceMarkupsWhereThisIsDistributorList != null)
            {
                this.distributorPriceMarkupsWhereThisIsDistributorList.OnBeforeRemove -= new EventHandler(DistributorPriceMarkupsWhereThisIsDistributorList_OnBeforeRemove);
                this.distributorPriceMarkupsWhereThisIsDistributorList.OnAfterAdd -= new EventHandler(DistributorPriceMarkupsWhereThisIsDistributorList_OnAfterAdd);
            }
            this._distributorSendMailCountsWhereThisIsDistributorLoaded = false;
            if (this.distributorSendMailCountsWhereThisIsDistributorList != null)
            {
                this.distributorSendMailCountsWhereThisIsDistributorList.OnBeforeRemove -= new EventHandler(DistributorSendMailCountsWhereThisIsDistributorList_OnBeforeRemove);
                this.distributorSendMailCountsWhereThisIsDistributorList.OnAfterAdd -= new EventHandler(DistributorSendMailCountsWhereThisIsDistributorList_OnAfterAdd);
            }
            this._embroiderysWhereThisIsDistributorLoaded = false;
            if (this.embroiderysWhereThisIsDistributorList != null)
            {
                this.embroiderysWhereThisIsDistributorList.OnBeforeRemove -= new EventHandler(EmbroiderysWhereThisIsDistributorList_OnBeforeRemove);
                this.embroiderysWhereThisIsDistributorList.OnAfterAdd -= new EventHandler(EmbroiderysWhereThisIsDistributorList_OnAfterAdd);
            }
            this._ordersWhereThisIsDespatchToLoaded = false;
            if (this.ordersWhereThisIsDespatchToList != null)
            {
                this.ordersWhereThisIsDespatchToList.OnBeforeRemove -= new EventHandler(OrdersWhereThisIsDespatchToList_OnBeforeRemove);
                this.ordersWhereThisIsDespatchToList.OnAfterAdd -= new EventHandler(OrdersWhereThisIsDespatchToList_OnAfterAdd);
            }
            this._ordersWhereThisIsDistributorLoaded = false;
            if (this.ordersWhereThisIsDistributorList != null)
            {
                this.ordersWhereThisIsDistributorList.OnBeforeRemove -= new EventHandler(OrdersWhereThisIsDistributorList_OnBeforeRemove);
                this.ordersWhereThisIsDistributorList.OnAfterAdd -= new EventHandler(OrdersWhereThisIsDistributorList_OnAfterAdd);
            }
            this._ordersWhereThisIsShipToLoaded = false;
            if (this.ordersWhereThisIsShipToList != null)
            {
                this.ordersWhereThisIsShipToList.OnBeforeRemove -= new EventHandler(OrdersWhereThisIsShipToList_OnBeforeRemove);
                this.ordersWhereThisIsShipToList.OnAfterAdd -= new EventHandler(OrdersWhereThisIsShipToList_OnAfterAdd);
            }
            this._orderDetailStatussWhereThisIsCompanyLoaded = false;
            if (this.orderDetailStatussWhereThisIsCompanyList != null)
            {
                this.orderDetailStatussWhereThisIsCompanyList.OnBeforeRemove -= new EventHandler(OrderDetailStatussWhereThisIsCompanyList_OnBeforeRemove);
                this.orderDetailStatussWhereThisIsCompanyList.OnAfterAdd -= new EventHandler(OrderDetailStatussWhereThisIsCompanyList_OnAfterAdd);
            }
            this._priceListDownloadssWhereThisIsDistributorLoaded = false;
            if (this.priceListDownloadssWhereThisIsDistributorList != null)
            {
                this.priceListDownloadssWhereThisIsDistributorList.OnBeforeRemove -= new EventHandler(PriceListDownloadssWhereThisIsDistributorList_OnBeforeRemove);
                this.priceListDownloadssWhereThisIsDistributorList.OnAfterAdd -= new EventHandler(PriceListDownloadssWhereThisIsDistributorList_OnAfterAdd);
            }
            this._quotesWhereThisIsDistributorLoaded = false;
            if (this.quotesWhereThisIsDistributorList != null)
            {
                this.quotesWhereThisIsDistributorList.OnBeforeRemove -= new EventHandler(QuotesWhereThisIsDistributorList_OnBeforeRemove);
                this.quotesWhereThisIsDistributorList.OnAfterAdd -= new EventHandler(QuotesWhereThisIsDistributorList_OnAfterAdd);
            }
            this._reservationsWhereThisIsDistributorLoaded = false;
            if (this.reservationsWhereThisIsDistributorList != null)
            {
                this.reservationsWhereThisIsDistributorList.OnBeforeRemove -= new EventHandler(ReservationsWhereThisIsDistributorList_OnBeforeRemove);
                this.reservationsWhereThisIsDistributorList.OnAfterAdd -= new EventHandler(ReservationsWhereThisIsDistributorList_OnAfterAdd);
            }
            this._usersWhereThisIsCompanyLoaded = false;
            if (this.usersWhereThisIsCompanyList != null)
            {
                this.usersWhereThisIsCompanyList.OnBeforeRemove -= new EventHandler(UsersWhereThisIsCompanyList_OnBeforeRemove);
                this.usersWhereThisIsCompanyList.OnAfterAdd -= new EventHandler(UsersWhereThisIsCompanyList_OnAfterAdd);
            }
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region CompanyBOComparer
    public class CompanyBOComparer : IComparer<Indico.BusinessObjects.CompanyBO>
    {
        private string propertyToCompareName;
        public CompanyBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.CompanyBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.CompanyBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public CompanyBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.CompanyBO> Members
        public int Compare(Indico.BusinessObjects.CompanyBO x, Indico.BusinessObjects.CompanyBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.CompanyBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.CompanyBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.CompanyBO x, Indico.BusinessObjects.CompanyBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
