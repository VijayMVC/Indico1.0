// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class PatternBO : BusinessObject, IComparable
    {
        #region fields
        #region Scalar Fields
        private int id;
        private int? _ageGroup;
        private string _consumption;
        private decimal _convertionFactor;
        private int _coreCategory;
        private string _corePattern;
        private DateTime _createdDate = DateTime.MinValue;
        private int _creator;
        private string _description;
        private string _factoryDescription;
        private string _garmentSpecStatus = string.Empty;
        private int _gender;
        private string _gUID = string.Empty;
        private string _hTSCode;
        private bool _isActive;
        private bool _isActiveWS;
        private bool _isCoreRange;
        private bool _isTemplate;
        private int _item;
        private string _keywords;
        private DateTime _modifiedDate = DateTime.MinValue;
        private int _modifier;
        private string _nickName = string.Empty;
        private string _number = string.Empty;
        private string _originRef;
        private int? _parent;
        private int? _patternCompressionImage;
        private string _patternNotes;
        private int _patternSupplier;
        private string _priceRemarks;
        private int _printerType;
        private int? _productionLine;
        private string _remarks;
        private int _sizeSet;
        private decimal? _sMV;
        private string _specialAttributes;
        private int? _subItem;
        private int? _unit;
        #endregion
        
        #region Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.AgeGroupBO _objAgeGroup;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.CategoryBO _objCoreCategory;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objCreator;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.GenderBO _objGender;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.ItemBO _objItem;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objModifier;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.PatternBO _objParent;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.PatternCompressionImageBO _objPatternCompressionImage;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.PatternSupplierBO _objPatternSupplier;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.PrinterTypeBO _objPrinterType;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.ProductionLineBO _objProductionLine;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.SizeSetBO _objSizeSet;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.ItemBO _objSubItem;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UnitBO _objUnit;
        #endregion
        
        #region Foreign Table Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.ArtWorkBO> artWorksWhereThisIsPatternList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _artWorksWhereThisIsPatternLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.CostSheetBO> costSheetsWhereThisIsPatternList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _costSheetsWhereThisIsPatternLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.OrderDetailBO> orderDetailsWhereThisIsPatternList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _orderDetailsWhereThisIsPatternLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.PatternBO> patternsWhereThisIsParentList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _patternsWhereThisIsParentLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.PatternAccessoryBO> patternAccessorysWhereThisIsPatternList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _patternAccessorysWhereThisIsPatternLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.PatternHistoryBO> patternHistorysWhereThisIsPatternList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _patternHistorysWhereThisIsPatternLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.PatternItemAttributeSubBO> patternItemAttributeSubsWhereThisIsPatternList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _patternItemAttributeSubsWhereThisIsPatternLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.CategoryBO> patternOtherCategorysWhereThisIsPatternList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _patternOtherCategorysWhereThisIsPatternLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO> patternSupportAccessorysWhereThisIsPatternList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _patternSupportAccessorysWhereThisIsPatternLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.PatternTemplateImageBO> patternTemplateImagesWhereThisIsPatternList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _patternTemplateImagesWhereThisIsPatternLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.PriceBO> pricesWhereThisIsPatternList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _pricesWhereThisIsPatternLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.ProductBO> productsWhereThisIsPatternList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _productsWhereThisIsPatternLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.QuoteDetailBO> quoteDetailsWhereThisIsPatternList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _quoteDetailsWhereThisIsPatternLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.ReservationBO> reservationsWhereThisIsPatternList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _reservationsWhereThisIsPatternLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.SizeChartBO> sizeChartsWhereThisIsPatternList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _sizeChartsWhereThisIsPatternLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.VisualLayoutBO> visualLayoutsWhereThisIsPatternList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _visualLayoutsWhereThisIsPatternLoaded;
        #endregion
        
        #region Other fields
        
        private Indico.DAL.Pattern _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>Age group this pattern for.</summary>
        public int? AgeGroup
        {   
            get {return _ageGroup;}
            set 
            {
                OnAgeGroupChanging(value);
                _ageGroup = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.AgeGroup = (from o in this._context.Context.AgeGroup
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.AgeGroup>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.AgeGroup = null;
                OnAgeGroupChanged();
            }
        }
        /// <summary>Consumption. The maximum length of this property is 255.</summary>
        public string Consumption
        {   
            get {return _consumption;}
            set 
            {
                OnConsumptionChanging(value);
                _consumption = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Consumption = value;
                }
                OnConsumptionChanged();
            }
        }
        /// <summary>Convertion factor of this pattern.</summary>
        public decimal ConvertionFactor
        {   
            get {return _convertionFactor;}
            set 
            {
                OnConvertionFactorChanging(value);
                _convertionFactor = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ConvertionFactor = value;
                }
                OnConvertionFactorChanged();
            }
        }
        /// <summary>Other category.</summary>
        public int CoreCategory
        {   
            get {return _coreCategory;}
            set 
            {
                OnCoreCategoryChanging(value);
                _coreCategory = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.CoreCategory = (from o in this._context.Context.Category
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Category>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.CoreCategory = null;
                OnCoreCategoryChanged();
            }
        }
        /// <summary>Cor pattern. The maximum length of this property is 255.</summary>
        public string CorePattern
        {   
            get {return _corePattern;}
            set 
            {
                OnCorePatternChanging(value);
                _corePattern = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CorePattern = value;
                }
                OnCorePatternChanged();
            }
        }
        /// <summary>The created date.</summary>
        public DateTime CreatedDate
        {   
            get {return _createdDate;}
            set 
            {
                OnCreatedDateChanging(value);
                _createdDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CreatedDate = value;
                }
                OnCreatedDateChanged();
            }
        }
        /// <summary>The creator of this pattern.</summary>
        public int Creator
        {   
            get {return _creator;}
            set 
            {
                OnCreatorChanging(value);
                _creator = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Creator = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Creator = null;
                OnCreatorChanged();
            }
        }
        /// <summary>. The maximum length of this property is 1024.</summary>
        public string Description
        {   
            get {return _description;}
            set 
            {
                OnDescriptionChanging(value);
                _description = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Description = value;
                }
                OnDescriptionChanged();
            }
        }
        /// <summary>Factory description for thsi pattern. The maximum length of this property is 255.</summary>
        public string FactoryDescription
        {   
            get {return _factoryDescription;}
            set 
            {
                OnFactoryDescriptionChanging(value);
                _factoryDescription = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.FactoryDescription = value;
                }
                OnFactoryDescriptionChanged();
            }
        }
        /// <summary>Garment specification status. The maximum length of this property is 64.</summary>
        public string GarmentSpecStatus
        {   
            get {return _garmentSpecStatus;}
            set 
            {
                OnGarmentSpecStatusChanging(value);
                _garmentSpecStatus = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.GarmentSpecStatus = value;
                }
                OnGarmentSpecStatusChanged();
            }
        }
        /// <summary>Gender pattern available for.</summary>
        public int Gender
        {   
            get {return _gender;}
            set 
            {
                OnGenderChanging(value);
                _gender = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Gender = (from o in this._context.Context.Gender
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Gender>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Gender = null;
                OnGenderChanged();
            }
        }
        /// <summary>. The maximum length of this property is 36.</summary>
        public string GUID
        {   
            get {return _gUID;}
            set 
            {
                OnGUIDChanging(value);
                _gUID = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.GUID = value;
                }
                OnGUIDChanged();
            }
        }
        /// <summary>. The maximum length of this property is 64.</summary>
        public string HTSCode
        {   
            get {return _hTSCode;}
            set 
            {
                OnHTSCodeChanging(value);
                _hTSCode = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.HTSCode = value;
                }
                OnHTSCodeChanged();
            }
        }
        /// <summary>Is interactive pattern.</summary>
        public bool IsActive
        {   
            get {return _isActive;}
            set 
            {
                OnIsActiveChanging(value);
                _isActive = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsActive = value;
                }
                OnIsActiveChanged();
            }
        }
        /// <summary>.</summary>
        public bool IsActiveWS
        {   
            get {return _isActiveWS;}
            set 
            {
                OnIsActiveWSChanging(value);
                _isActiveWS = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsActiveWS = value;
                }
                OnIsActiveWSChanged();
            }
        }
        /// <summary>.</summary>
        public bool IsCoreRange
        {   
            get {return _isCoreRange;}
            set 
            {
                OnIsCoreRangeChanging(value);
                _isCoreRange = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsCoreRange = value;
                }
                OnIsCoreRangeChanged();
            }
        }
        /// <summary>Is this template pattern.</summary>
        public bool IsTemplate
        {   
            get {return _isTemplate;}
            set 
            {
                OnIsTemplateChanging(value);
                _isTemplate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsTemplate = value;
                }
                OnIsTemplateChanged();
            }
        }
        /// <summary>The item.</summary>
        public int Item
        {   
            get {return _item;}
            set 
            {
                OnItemChanging(value);
                _item = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Item = (from o in this._context.Context.Item
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Item>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Item = null;
                OnItemChanged();
            }
        }
        /// <summary>Keywords for this pattern. The maximum length of this property is 255.</summary>
        public string Keywords
        {   
            get {return _keywords;}
            set 
            {
                OnKeywordsChanging(value);
                _keywords = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Keywords = value;
                }
                OnKeywordsChanged();
            }
        }
        /// <summary>The modified date.</summary>
        public DateTime ModifiedDate
        {   
            get {return _modifiedDate;}
            set 
            {
                OnModifiedDateChanging(value);
                _modifiedDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ModifiedDate = value;
                }
                OnModifiedDateChanged();
            }
        }
        /// <summary>The modifier of this pattern.</summary>
        public int Modifier
        {   
            get {return _modifier;}
            set 
            {
                OnModifierChanging(value);
                _modifier = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Modifier = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Modifier = null;
                OnModifierChanged();
            }
        }
        /// <summary>Nick name of this pattern. The maximum length of this property is 255.</summary>
        public string NickName
        {   
            get {return _nickName;}
            set 
            {
                OnNickNameChanging(value);
                _nickName = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.NickName = value;
                }
                OnNickNameChanged();
            }
        }
        /// <summary>The pattern number. The maximum length of this property is 64.</summary>
        public string Number
        {   
            get {return _number;}
            set 
            {
                OnNumberChanging(value);
                _number = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Number = value;
                }
                OnNumberChanged();
            }
        }
        /// <summary>The original reference. The maximum length of this property is 64.</summary>
        public string OriginRef
        {   
            get {return _originRef;}
            set 
            {
                OnOriginRefChanging(value);
                _originRef = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.OriginRef = value;
                }
                OnOriginRefChanged();
            }
        }
        /// <summary>If this created from a template.</summary>
        public int? Parent
        {   
            get {return _parent;}
            set 
            {
                OnParentChanging(value);
                _parent = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.Parent = (from o in this._context.Context.Pattern
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Pattern>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Parent = null;
                OnParentChanged();
            }
        }
        /// <summary>.</summary>
        public int? PatternCompressionImage
        {   
            get {return _patternCompressionImage;}
            set 
            {
                OnPatternCompressionImageChanging(value);
                _patternCompressionImage = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.PatternCompressionImage = (from o in this._context.Context.PatternCompressionImage
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.PatternCompressionImage>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.PatternCompressionImage = null;
                OnPatternCompressionImageChanged();
            }
        }
        /// <summary>Pattern related notes. The maximum length of this property is 255.</summary>
        public string PatternNotes
        {   
            get {return _patternNotes;}
            set 
            {
                OnPatternNotesChanging(value);
                _patternNotes = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.PatternNotes = value;
                }
                OnPatternNotesChanged();
            }
        }
        /// <summary>.</summary>
        public int PatternSupplier
        {   
            get {return _patternSupplier;}
            set 
            {
                OnPatternSupplierChanging(value);
                _patternSupplier = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.PatternSupplier = (from o in this._context.Context.PatternSupplier
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.PatternSupplier>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.PatternSupplier = null;
                OnPatternSupplierChanged();
            }
        }
        /// <summary>Pattern price remarks. The maximum length of this property is 255.</summary>
        public string PriceRemarks
        {   
            get {return _priceRemarks;}
            set 
            {
                OnPriceRemarksChanging(value);
                _priceRemarks = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.PriceRemarks = value;
                }
                OnPriceRemarksChanged();
            }
        }
        /// <summary>Printer type for this pattern.</summary>
        public int PrinterType
        {   
            get {return _printerType;}
            set 
            {
                OnPrinterTypeChanging(value);
                _printerType = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.PrinterType = (from o in this._context.Context.PrinterType
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.PrinterType>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.PrinterType = null;
                OnPrinterTypeChanged();
            }
        }
        /// <summary>.</summary>
        public int? ProductionLine
        {   
            get {return _productionLine;}
            set 
            {
                OnProductionLineChanging(value);
                _productionLine = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.ProductionLine = (from o in this._context.Context.ProductionLine
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.ProductionLine>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.ProductionLine = null;
                OnProductionLineChanged();
            }
        }
        /// <summary>Remarks for the price. The maximum length of this property is 255.</summary>
        public string Remarks
        {   
            get {return _remarks;}
            set 
            {
                OnRemarksChanging(value);
                _remarks = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Remarks = value;
                }
                OnRemarksChanged();
            }
        }
        /// <summary>The size set.</summary>
        public int SizeSet
        {   
            get {return _sizeSet;}
            set 
            {
                OnSizeSetChanging(value);
                _sizeSet = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.SizeSet = (from o in this._context.Context.SizeSet
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.SizeSet>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.SizeSet = null;
                OnSizeSetChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? SMV
        {   
            get {return _sMV;}
            set 
            {
                OnSMVChanging(value);
                _sMV = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.SMV = value;
                }
                OnSMVChanged();
            }
        }
        /// <summary>Special attributes of this pattern. The maximum length of this property is 255.</summary>
        public string SpecialAttributes
        {   
            get {return _specialAttributes;}
            set 
            {
                OnSpecialAttributesChanging(value);
                _specialAttributes = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.SpecialAttributes = value;
                }
                OnSpecialAttributesChanged();
            }
        }
        /// <summary>The sub item.</summary>
        public int? SubItem
        {   
            get {return _subItem;}
            set 
            {
                OnSubItemChanging(value);
                _subItem = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.SubItem = (from o in this._context.Context.Item
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Item>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.SubItem = null;
                OnSubItemChanged();
            }
        }
        /// <summary>.</summary>
        public int? Unit
        {   
            get {return _unit;}
            set 
            {
                OnUnitChanging(value);
                _unit = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.Unit = (from o in this._context.Context.Unit
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Unit>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Unit = null;
                OnUnitChanged();
            }
        }
        
        internal Indico.DAL.Pattern ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        ///<summary>The AgeGroupBO object identified by the value of AgeGroup</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.AgeGroupBO objAgeGroup
        {
            get
            {
                if (_ageGroup != null && _ageGroup > 0 && _objAgeGroup == null)
                {
                        if (this._context == null)
                        {
                            _objAgeGroup = new Indico.BusinessObjects.AgeGroupBO();
                        }
                        else
                        {
                            _objAgeGroup = new Indico.BusinessObjects.AgeGroupBO(ref this._context);
                        }
                        _objAgeGroup.ID = Convert.ToInt32(_ageGroup);
                        _objAgeGroup.GetObject(); 
                }
                return _objAgeGroup;
            }
            set
            { 
                _objAgeGroup = value;
                _ageGroup = _objAgeGroup.ID;
            }
        }
        ///<summary>The CategoryBO object identified by the value of CoreCategory</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.CategoryBO objCoreCategory
        {
            get
            {
                if ( _coreCategory > 0 && _objCoreCategory == null)
                {
                        if (this._context == null)
                        {
                            _objCoreCategory = new Indico.BusinessObjects.CategoryBO();
                        }
                        else
                        {
                            _objCoreCategory = new Indico.BusinessObjects.CategoryBO(ref this._context);
                        }
                        _objCoreCategory.ID = _coreCategory;
                        _objCoreCategory.GetObject(); 
                }
                return _objCoreCategory;
            }
            set
            { 
                _objCoreCategory = value;
                _coreCategory = _objCoreCategory.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Creator</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objCreator
        {
            get
            {
                if ( _creator > 0 && _objCreator == null)
                {
                        if (this._context == null)
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objCreator.ID = _creator;
                        _objCreator.GetObject(); 
                }
                return _objCreator;
            }
            set
            { 
                _objCreator = value;
                _creator = _objCreator.ID;
            }
        }
        ///<summary>The GenderBO object identified by the value of Gender</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.GenderBO objGender
        {
            get
            {
                if ( _gender > 0 && _objGender == null)
                {
                        if (this._context == null)
                        {
                            _objGender = new Indico.BusinessObjects.GenderBO();
                        }
                        else
                        {
                            _objGender = new Indico.BusinessObjects.GenderBO(ref this._context);
                        }
                        _objGender.ID = _gender;
                        _objGender.GetObject(); 
                }
                return _objGender;
            }
            set
            { 
                _objGender = value;
                _gender = _objGender.ID;
            }
        }
        ///<summary>The ItemBO object identified by the value of Item</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.ItemBO objItem
        {
            get
            {
                if ( _item > 0 && _objItem == null)
                {
                        if (this._context == null)
                        {
                            _objItem = new Indico.BusinessObjects.ItemBO();
                        }
                        else
                        {
                            _objItem = new Indico.BusinessObjects.ItemBO(ref this._context);
                        }
                        _objItem.ID = _item;
                        _objItem.GetObject(); 
                }
                return _objItem;
            }
            set
            { 
                _objItem = value;
                _item = _objItem.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Modifier</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objModifier
        {
            get
            {
                if ( _modifier > 0 && _objModifier == null)
                {
                        if (this._context == null)
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objModifier.ID = _modifier;
                        _objModifier.GetObject(); 
                }
                return _objModifier;
            }
            set
            { 
                _objModifier = value;
                _modifier = _objModifier.ID;
            }
        }
        ///<summary>The PatternBO object identified by the value of Parent</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.PatternBO objParent
        {
            get
            {
                if (_parent != null && _parent > 0 && _objParent == null)
                {
                        if (this._context == null)
                        {
                            _objParent = new Indico.BusinessObjects.PatternBO();
                        }
                        else
                        {
                            _objParent = new Indico.BusinessObjects.PatternBO(ref this._context);
                        }
                        _objParent.ID = Convert.ToInt32(_parent);
                        _objParent.GetObject(); 
                }
                return _objParent;
            }
            set
            { 
                _objParent = value;
                _parent = _objParent.ID;
            }
        }
        ///<summary>The PatternCompressionImageBO object identified by the value of PatternCompressionImage</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.PatternCompressionImageBO objPatternCompressionImage
        {
            get
            {
                if (_patternCompressionImage != null && _patternCompressionImage > 0 && _objPatternCompressionImage == null)
                {
                        if (this._context == null)
                        {
                            _objPatternCompressionImage = new Indico.BusinessObjects.PatternCompressionImageBO();
                        }
                        else
                        {
                            _objPatternCompressionImage = new Indico.BusinessObjects.PatternCompressionImageBO(ref this._context);
                        }
                        _objPatternCompressionImage.ID = Convert.ToInt32(_patternCompressionImage);
                        _objPatternCompressionImage.GetObject(); 
                }
                return _objPatternCompressionImage;
            }
            set
            { 
                _objPatternCompressionImage = value;
                _patternCompressionImage = _objPatternCompressionImage.ID;
            }
        }
        ///<summary>The PatternSupplierBO object identified by the value of PatternSupplier</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.PatternSupplierBO objPatternSupplier
        {
            get
            {
                if ( _patternSupplier > 0 && _objPatternSupplier == null)
                {
                        if (this._context == null)
                        {
                            _objPatternSupplier = new Indico.BusinessObjects.PatternSupplierBO();
                        }
                        else
                        {
                            _objPatternSupplier = new Indico.BusinessObjects.PatternSupplierBO(ref this._context);
                        }
                        _objPatternSupplier.ID = _patternSupplier;
                        _objPatternSupplier.GetObject(); 
                }
                return _objPatternSupplier;
            }
            set
            { 
                _objPatternSupplier = value;
                _patternSupplier = _objPatternSupplier.ID;
            }
        }
        ///<summary>The PrinterTypeBO object identified by the value of PrinterType</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.PrinterTypeBO objPrinterType
        {
            get
            {
                if ( _printerType > 0 && _objPrinterType == null)
                {
                        if (this._context == null)
                        {
                            _objPrinterType = new Indico.BusinessObjects.PrinterTypeBO();
                        }
                        else
                        {
                            _objPrinterType = new Indico.BusinessObjects.PrinterTypeBO(ref this._context);
                        }
                        _objPrinterType.ID = _printerType;
                        _objPrinterType.GetObject(); 
                }
                return _objPrinterType;
            }
            set
            { 
                _objPrinterType = value;
                _printerType = _objPrinterType.ID;
            }
        }
        ///<summary>The ProductionLineBO object identified by the value of ProductionLine</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.ProductionLineBO objProductionLine
        {
            get
            {
                if (_productionLine != null && _productionLine > 0 && _objProductionLine == null)
                {
                        if (this._context == null)
                        {
                            _objProductionLine = new Indico.BusinessObjects.ProductionLineBO();
                        }
                        else
                        {
                            _objProductionLine = new Indico.BusinessObjects.ProductionLineBO(ref this._context);
                        }
                        _objProductionLine.ID = Convert.ToInt32(_productionLine);
                        _objProductionLine.GetObject(); 
                }
                return _objProductionLine;
            }
            set
            { 
                _objProductionLine = value;
                _productionLine = _objProductionLine.ID;
            }
        }
        ///<summary>The SizeSetBO object identified by the value of SizeSet</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.SizeSetBO objSizeSet
        {
            get
            {
                if ( _sizeSet > 0 && _objSizeSet == null)
                {
                        if (this._context == null)
                        {
                            _objSizeSet = new Indico.BusinessObjects.SizeSetBO();
                        }
                        else
                        {
                            _objSizeSet = new Indico.BusinessObjects.SizeSetBO(ref this._context);
                        }
                        _objSizeSet.ID = _sizeSet;
                        _objSizeSet.GetObject(); 
                }
                return _objSizeSet;
            }
            set
            { 
                _objSizeSet = value;
                _sizeSet = _objSizeSet.ID;
            }
        }
        ///<summary>The ItemBO object identified by the value of SubItem</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.ItemBO objSubItem
        {
            get
            {
                if (_subItem != null && _subItem > 0 && _objSubItem == null)
                {
                        if (this._context == null)
                        {
                            _objSubItem = new Indico.BusinessObjects.ItemBO();
                        }
                        else
                        {
                            _objSubItem = new Indico.BusinessObjects.ItemBO(ref this._context);
                        }
                        _objSubItem.ID = Convert.ToInt32(_subItem);
                        _objSubItem.GetObject(); 
                }
                return _objSubItem;
            }
            set
            { 
                _objSubItem = value;
                _subItem = _objSubItem.ID;
            }
        }
        ///<summary>The UnitBO object identified by the value of Unit</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UnitBO objUnit
        {
            get
            {
                if (_unit != null && _unit > 0 && _objUnit == null)
                {
                        if (this._context == null)
                        {
                            _objUnit = new Indico.BusinessObjects.UnitBO();
                        }
                        else
                        {
                            _objUnit = new Indico.BusinessObjects.UnitBO(ref this._context);
                        }
                        _objUnit.ID = Convert.ToInt32(_unit);
                        _objUnit.GetObject(); 
                }
                return _objUnit;
            }
            set
            { 
                _objUnit = value;
                _unit = _objUnit.ID;
            }
        }
        #endregion
        
        #region Foreign Object Foreign Key Collections
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.ArtWorkBO> ArtWorksWhereThisIsPattern // FK_ArtWork_Pattern
        {
            get
            {
                if (!_artWorksWhereThisIsPatternLoaded)
                {
                    _artWorksWhereThisIsPatternLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Pattern obj = (from o in context.Pattern
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.ArtWorksWhereThisIsPattern.Load();
                        artWorksWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.ArtWorkBO>(obj.ArtWorksWhereThisIsPattern.Count);
                        
                        foreach (Indico.DAL.ArtWork o in obj.ArtWorksWhereThisIsPattern)
                        {
                            Indico.BusinessObjects.ArtWorkBO fkObj = new Indico.BusinessObjects.ArtWorkBO(o, ref this._context);
                            artWorksWhereThisIsPatternList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        artWorksWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.ArtWorkBO>();
                    }
                    
                    artWorksWhereThisIsPatternList.OnBeforeRemove += new EventHandler(ArtWorksWhereThisIsPatternList_OnBeforeRemove);
                    artWorksWhereThisIsPatternList.OnAfterAdd += new EventHandler(ArtWorksWhereThisIsPatternList_OnAfterAdd);
                }
                
                return artWorksWhereThisIsPatternList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.CostSheetBO> CostSheetsWhereThisIsPattern // FK_CostSheet_Pattern
        {
            get
            {
                if (!_costSheetsWhereThisIsPatternLoaded)
                {
                    _costSheetsWhereThisIsPatternLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Pattern obj = (from o in context.Pattern
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.CostSheetsWhereThisIsPattern.Load();
                        costSheetsWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.CostSheetBO>(obj.CostSheetsWhereThisIsPattern.Count);
                        
                        foreach (Indico.DAL.CostSheet o in obj.CostSheetsWhereThisIsPattern)
                        {
                            Indico.BusinessObjects.CostSheetBO fkObj = new Indico.BusinessObjects.CostSheetBO(o, ref this._context);
                            costSheetsWhereThisIsPatternList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        costSheetsWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.CostSheetBO>();
                    }
                    
                    costSheetsWhereThisIsPatternList.OnBeforeRemove += new EventHandler(CostSheetsWhereThisIsPatternList_OnBeforeRemove);
                    costSheetsWhereThisIsPatternList.OnAfterAdd += new EventHandler(CostSheetsWhereThisIsPatternList_OnAfterAdd);
                }
                
                return costSheetsWhereThisIsPatternList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.OrderDetailBO> OrderDetailsWhereThisIsPattern // FK_OrderDetail_Pattern
        {
            get
            {
                if (!_orderDetailsWhereThisIsPatternLoaded)
                {
                    _orderDetailsWhereThisIsPatternLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Pattern obj = (from o in context.Pattern
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.OrderDetailsWhereThisIsPattern.Load();
                        orderDetailsWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.OrderDetailBO>(obj.OrderDetailsWhereThisIsPattern.Count);
                        
                        foreach (Indico.DAL.OrderDetail o in obj.OrderDetailsWhereThisIsPattern)
                        {
                            Indico.BusinessObjects.OrderDetailBO fkObj = new Indico.BusinessObjects.OrderDetailBO(o, ref this._context);
                            orderDetailsWhereThisIsPatternList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        orderDetailsWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.OrderDetailBO>();
                    }
                    
                    orderDetailsWhereThisIsPatternList.OnBeforeRemove += new EventHandler(OrderDetailsWhereThisIsPatternList_OnBeforeRemove);
                    orderDetailsWhereThisIsPatternList.OnAfterAdd += new EventHandler(OrderDetailsWhereThisIsPatternList_OnAfterAdd);
                }
                
                return orderDetailsWhereThisIsPatternList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.PatternBO> PatternsWhereThisIsParent // FK_Pattern_Parent
        {
            get
            {
                if (!_patternsWhereThisIsParentLoaded)
                {
                    _patternsWhereThisIsParentLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Pattern obj = (from o in context.Pattern
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.PatternsWhereThisIsParent.Load();
                        patternsWhereThisIsParentList = new IndicoList<Indico.BusinessObjects.PatternBO>(obj.PatternsWhereThisIsParent.Count);
                        
                        foreach (Indico.DAL.Pattern o in obj.PatternsWhereThisIsParent)
                        {
                            Indico.BusinessObjects.PatternBO fkObj = new Indico.BusinessObjects.PatternBO(o, ref this._context);
                            patternsWhereThisIsParentList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        patternsWhereThisIsParentList = new IndicoList<Indico.BusinessObjects.PatternBO>();
                    }
                    
                    patternsWhereThisIsParentList.OnBeforeRemove += new EventHandler(PatternsWhereThisIsParentList_OnBeforeRemove);
                    patternsWhereThisIsParentList.OnAfterAdd += new EventHandler(PatternsWhereThisIsParentList_OnAfterAdd);
                }
                
                return patternsWhereThisIsParentList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.PatternAccessoryBO> PatternAccessorysWhereThisIsPattern // FK_PatternAccessory_Pattern
        {
            get
            {
                if (!_patternAccessorysWhereThisIsPatternLoaded)
                {
                    _patternAccessorysWhereThisIsPatternLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Pattern obj = (from o in context.Pattern
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.PatternAccessorysWhereThisIsPattern.Load();
                        patternAccessorysWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.PatternAccessoryBO>(obj.PatternAccessorysWhereThisIsPattern.Count);
                        
                        foreach (Indico.DAL.PatternAccessory o in obj.PatternAccessorysWhereThisIsPattern)
                        {
                            Indico.BusinessObjects.PatternAccessoryBO fkObj = new Indico.BusinessObjects.PatternAccessoryBO(o, ref this._context);
                            patternAccessorysWhereThisIsPatternList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        patternAccessorysWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.PatternAccessoryBO>();
                    }
                    
                    patternAccessorysWhereThisIsPatternList.OnBeforeRemove += new EventHandler(PatternAccessorysWhereThisIsPatternList_OnBeforeRemove);
                    patternAccessorysWhereThisIsPatternList.OnAfterAdd += new EventHandler(PatternAccessorysWhereThisIsPatternList_OnAfterAdd);
                }
                
                return patternAccessorysWhereThisIsPatternList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.PatternHistoryBO> PatternHistorysWhereThisIsPattern // FK_PatternHistory_Pattern
        {
            get
            {
                if (!_patternHistorysWhereThisIsPatternLoaded)
                {
                    _patternHistorysWhereThisIsPatternLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Pattern obj = (from o in context.Pattern
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.PatternHistorysWhereThisIsPattern.Load();
                        patternHistorysWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.PatternHistoryBO>(obj.PatternHistorysWhereThisIsPattern.Count);
                        
                        foreach (Indico.DAL.PatternHistory o in obj.PatternHistorysWhereThisIsPattern)
                        {
                            Indico.BusinessObjects.PatternHistoryBO fkObj = new Indico.BusinessObjects.PatternHistoryBO(o, ref this._context);
                            patternHistorysWhereThisIsPatternList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        patternHistorysWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.PatternHistoryBO>();
                    }
                    
                    patternHistorysWhereThisIsPatternList.OnBeforeRemove += new EventHandler(PatternHistorysWhereThisIsPatternList_OnBeforeRemove);
                    patternHistorysWhereThisIsPatternList.OnAfterAdd += new EventHandler(PatternHistorysWhereThisIsPatternList_OnAfterAdd);
                }
                
                return patternHistorysWhereThisIsPatternList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.PatternItemAttributeSubBO> PatternItemAttributeSubsWhereThisIsPattern // FK_PatternItemAttributeSub_Pattern
        {
            get
            {
                if (!_patternItemAttributeSubsWhereThisIsPatternLoaded)
                {
                    _patternItemAttributeSubsWhereThisIsPatternLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Pattern obj = (from o in context.Pattern
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.PatternItemAttributeSubsWhereThisIsPattern.Load();
                        patternItemAttributeSubsWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.PatternItemAttributeSubBO>(obj.PatternItemAttributeSubsWhereThisIsPattern.Count);
                        
                        foreach (Indico.DAL.PatternItemAttributeSub o in obj.PatternItemAttributeSubsWhereThisIsPattern)
                        {
                            Indico.BusinessObjects.PatternItemAttributeSubBO fkObj = new Indico.BusinessObjects.PatternItemAttributeSubBO(o, ref this._context);
                            patternItemAttributeSubsWhereThisIsPatternList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        patternItemAttributeSubsWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.PatternItemAttributeSubBO>();
                    }
                    
                    patternItemAttributeSubsWhereThisIsPatternList.OnBeforeRemove += new EventHandler(PatternItemAttributeSubsWhereThisIsPatternList_OnBeforeRemove);
                    patternItemAttributeSubsWhereThisIsPatternList.OnAfterAdd += new EventHandler(PatternItemAttributeSubsWhereThisIsPatternList_OnAfterAdd);
                }
                
                return patternItemAttributeSubsWhereThisIsPatternList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.CategoryBO> PatternOtherCategorysWhereThisIsPattern // FK_PatternOtherCategory_Pattern
        {
            get
            {
                if (!_patternOtherCategorysWhereThisIsPatternLoaded)
                {
                    _patternOtherCategorysWhereThisIsPatternLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Pattern obj = (from o in context.Pattern
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.PatternOtherCategorysWhereThisIsPattern.Load();
                        patternOtherCategorysWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.CategoryBO>(obj.PatternOtherCategorysWhereThisIsPattern.Count);
                        
                        foreach (Indico.DAL.Category o in obj.PatternOtherCategorysWhereThisIsPattern)
                        {
                            Indico.BusinessObjects.CategoryBO fkObj = new Indico.BusinessObjects.CategoryBO(o, ref this._context);
                            patternOtherCategorysWhereThisIsPatternList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        patternOtherCategorysWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.CategoryBO>();
                    }
                    
                    patternOtherCategorysWhereThisIsPatternList.OnBeforeRemove += new EventHandler(PatternOtherCategorysWhereThisIsPatternList_OnBeforeRemove);
                    patternOtherCategorysWhereThisIsPatternList.OnAfterAdd += new EventHandler(PatternOtherCategorysWhereThisIsPatternList_OnAfterAdd);
                }
                
                return patternOtherCategorysWhereThisIsPatternList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO> PatternSupportAccessorysWhereThisIsPattern // FK_PatternSupportAccessory_Pattern
        {
            get
            {
                if (!_patternSupportAccessorysWhereThisIsPatternLoaded)
                {
                    _patternSupportAccessorysWhereThisIsPatternLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Pattern obj = (from o in context.Pattern
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.PatternSupportAccessorysWhereThisIsPattern.Load();
                        patternSupportAccessorysWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>(obj.PatternSupportAccessorysWhereThisIsPattern.Count);
                        
                        foreach (Indico.DAL.PatternSupportAccessory o in obj.PatternSupportAccessorysWhereThisIsPattern)
                        {
                            Indico.BusinessObjects.PatternSupportAccessoryBO fkObj = new Indico.BusinessObjects.PatternSupportAccessoryBO(o, ref this._context);
                            patternSupportAccessorysWhereThisIsPatternList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        patternSupportAccessorysWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>();
                    }
                    
                    patternSupportAccessorysWhereThisIsPatternList.OnBeforeRemove += new EventHandler(PatternSupportAccessorysWhereThisIsPatternList_OnBeforeRemove);
                    patternSupportAccessorysWhereThisIsPatternList.OnAfterAdd += new EventHandler(PatternSupportAccessorysWhereThisIsPatternList_OnAfterAdd);
                }
                
                return patternSupportAccessorysWhereThisIsPatternList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.PatternTemplateImageBO> PatternTemplateImagesWhereThisIsPattern // FK_Image_Pattern
        {
            get
            {
                if (!_patternTemplateImagesWhereThisIsPatternLoaded)
                {
                    _patternTemplateImagesWhereThisIsPatternLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Pattern obj = (from o in context.Pattern
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.PatternTemplateImagesWhereThisIsPattern.Load();
                        patternTemplateImagesWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.PatternTemplateImageBO>(obj.PatternTemplateImagesWhereThisIsPattern.Count);
                        
                        foreach (Indico.DAL.PatternTemplateImage o in obj.PatternTemplateImagesWhereThisIsPattern)
                        {
                            Indico.BusinessObjects.PatternTemplateImageBO fkObj = new Indico.BusinessObjects.PatternTemplateImageBO(o, ref this._context);
                            patternTemplateImagesWhereThisIsPatternList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        patternTemplateImagesWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.PatternTemplateImageBO>();
                    }
                    
                    patternTemplateImagesWhereThisIsPatternList.OnBeforeRemove += new EventHandler(PatternTemplateImagesWhereThisIsPatternList_OnBeforeRemove);
                    patternTemplateImagesWhereThisIsPatternList.OnAfterAdd += new EventHandler(PatternTemplateImagesWhereThisIsPatternList_OnAfterAdd);
                }
                
                return patternTemplateImagesWhereThisIsPatternList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.PriceBO> PricesWhereThisIsPattern // FK_Price_Pattern
        {
            get
            {
                if (!_pricesWhereThisIsPatternLoaded)
                {
                    _pricesWhereThisIsPatternLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Pattern obj = (from o in context.Pattern
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.PricesWhereThisIsPattern.Load();
                        pricesWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.PriceBO>(obj.PricesWhereThisIsPattern.Count);
                        
                        foreach (Indico.DAL.Price o in obj.PricesWhereThisIsPattern)
                        {
                            Indico.BusinessObjects.PriceBO fkObj = new Indico.BusinessObjects.PriceBO(o, ref this._context);
                            pricesWhereThisIsPatternList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        pricesWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.PriceBO>();
                    }
                    
                    pricesWhereThisIsPatternList.OnBeforeRemove += new EventHandler(PricesWhereThisIsPatternList_OnBeforeRemove);
                    pricesWhereThisIsPatternList.OnAfterAdd += new EventHandler(PricesWhereThisIsPatternList_OnAfterAdd);
                }
                
                return pricesWhereThisIsPatternList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.ProductBO> ProductsWhereThisIsPattern // FK_Product_Pattern
        {
            get
            {
                if (!_productsWhereThisIsPatternLoaded)
                {
                    _productsWhereThisIsPatternLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Pattern obj = (from o in context.Pattern
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.ProductsWhereThisIsPattern.Load();
                        productsWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.ProductBO>(obj.ProductsWhereThisIsPattern.Count);
                        
                        foreach (Indico.DAL.Product o in obj.ProductsWhereThisIsPattern)
                        {
                            Indico.BusinessObjects.ProductBO fkObj = new Indico.BusinessObjects.ProductBO(o, ref this._context);
                            productsWhereThisIsPatternList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        productsWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.ProductBO>();
                    }
                    
                    productsWhereThisIsPatternList.OnBeforeRemove += new EventHandler(ProductsWhereThisIsPatternList_OnBeforeRemove);
                    productsWhereThisIsPatternList.OnAfterAdd += new EventHandler(ProductsWhereThisIsPatternList_OnAfterAdd);
                }
                
                return productsWhereThisIsPatternList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.QuoteDetailBO> QuoteDetailsWhereThisIsPattern // FK_QuoteDetail_Pattern
        {
            get
            {
                if (!_quoteDetailsWhereThisIsPatternLoaded)
                {
                    _quoteDetailsWhereThisIsPatternLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Pattern obj = (from o in context.Pattern
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.QuoteDetailsWhereThisIsPattern.Load();
                        quoteDetailsWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.QuoteDetailBO>(obj.QuoteDetailsWhereThisIsPattern.Count);
                        
                        foreach (Indico.DAL.QuoteDetail o in obj.QuoteDetailsWhereThisIsPattern)
                        {
                            Indico.BusinessObjects.QuoteDetailBO fkObj = new Indico.BusinessObjects.QuoteDetailBO(o, ref this._context);
                            quoteDetailsWhereThisIsPatternList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        quoteDetailsWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.QuoteDetailBO>();
                    }
                    
                    quoteDetailsWhereThisIsPatternList.OnBeforeRemove += new EventHandler(QuoteDetailsWhereThisIsPatternList_OnBeforeRemove);
                    quoteDetailsWhereThisIsPatternList.OnAfterAdd += new EventHandler(QuoteDetailsWhereThisIsPatternList_OnAfterAdd);
                }
                
                return quoteDetailsWhereThisIsPatternList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.ReservationBO> ReservationsWhereThisIsPattern // FK_Reservation_Pattern
        {
            get
            {
                if (!_reservationsWhereThisIsPatternLoaded)
                {
                    _reservationsWhereThisIsPatternLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Pattern obj = (from o in context.Pattern
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.ReservationsWhereThisIsPattern.Load();
                        reservationsWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.ReservationBO>(obj.ReservationsWhereThisIsPattern.Count);
                        
                        foreach (Indico.DAL.Reservation o in obj.ReservationsWhereThisIsPattern)
                        {
                            Indico.BusinessObjects.ReservationBO fkObj = new Indico.BusinessObjects.ReservationBO(o, ref this._context);
                            reservationsWhereThisIsPatternList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        reservationsWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.ReservationBO>();
                    }
                    
                    reservationsWhereThisIsPatternList.OnBeforeRemove += new EventHandler(ReservationsWhereThisIsPatternList_OnBeforeRemove);
                    reservationsWhereThisIsPatternList.OnAfterAdd += new EventHandler(ReservationsWhereThisIsPatternList_OnAfterAdd);
                }
                
                return reservationsWhereThisIsPatternList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.SizeChartBO> SizeChartsWhereThisIsPattern // FK_SizeChart_Pattern
        {
            get
            {
                if (!_sizeChartsWhereThisIsPatternLoaded)
                {
                    _sizeChartsWhereThisIsPatternLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Pattern obj = (from o in context.Pattern
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.SizeChartsWhereThisIsPattern.Load();
                        sizeChartsWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.SizeChartBO>(obj.SizeChartsWhereThisIsPattern.Count);
                        
                        foreach (Indico.DAL.SizeChart o in obj.SizeChartsWhereThisIsPattern)
                        {
                            Indico.BusinessObjects.SizeChartBO fkObj = new Indico.BusinessObjects.SizeChartBO(o, ref this._context);
                            sizeChartsWhereThisIsPatternList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        sizeChartsWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.SizeChartBO>();
                    }
                    
                    sizeChartsWhereThisIsPatternList.OnBeforeRemove += new EventHandler(SizeChartsWhereThisIsPatternList_OnBeforeRemove);
                    sizeChartsWhereThisIsPatternList.OnAfterAdd += new EventHandler(SizeChartsWhereThisIsPatternList_OnAfterAdd);
                }
                
                return sizeChartsWhereThisIsPatternList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.VisualLayoutBO> VisualLayoutsWhereThisIsPattern // FK_VisualLayout_Pattern
        {
            get
            {
                if (!_visualLayoutsWhereThisIsPatternLoaded)
                {
                    _visualLayoutsWhereThisIsPatternLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Pattern obj = (from o in context.Pattern
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.VisualLayoutsWhereThisIsPattern.Load();
                        visualLayoutsWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.VisualLayoutBO>(obj.VisualLayoutsWhereThisIsPattern.Count);
                        
                        foreach (Indico.DAL.VisualLayout o in obj.VisualLayoutsWhereThisIsPattern)
                        {
                            Indico.BusinessObjects.VisualLayoutBO fkObj = new Indico.BusinessObjects.VisualLayoutBO(o, ref this._context);
                            visualLayoutsWhereThisIsPatternList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        visualLayoutsWhereThisIsPatternList = new IndicoList<Indico.BusinessObjects.VisualLayoutBO>();
                    }
                    
                    visualLayoutsWhereThisIsPatternList.OnBeforeRemove += new EventHandler(VisualLayoutsWhereThisIsPatternList_OnBeforeRemove);
                    visualLayoutsWhereThisIsPatternList.OnAfterAdd += new EventHandler(VisualLayoutsWhereThisIsPatternList_OnAfterAdd);
                }
                
                return visualLayoutsWhereThisIsPatternList;
            }
        }
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the PatternBO class using the supplied Indico.DAL.Pattern. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.Pattern whose properties will be used to initialise the PatternBO</param>
        internal PatternBO(Indico.DAL.Pattern obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.Pattern 
            this.ID = obj.ID;
            
            this.AgeGroup = (obj.AgeGroupReference.EntityKey != null && obj.AgeGroupReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.AgeGroupReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Consumption = obj.Consumption;
            this.ConvertionFactor = obj.ConvertionFactor;
            this.CoreCategory = (obj.CoreCategoryReference.EntityKey != null && obj.CoreCategoryReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CoreCategoryReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.CorePattern = obj.CorePattern;
            this.CreatedDate = obj.CreatedDate;
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Description = obj.Description;
            this.FactoryDescription = obj.FactoryDescription;
            this.GarmentSpecStatus = obj.GarmentSpecStatus;
            this.Gender = (obj.GenderReference.EntityKey != null && obj.GenderReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.GenderReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.GUID = obj.GUID;
            this.HTSCode = obj.HTSCode;
            this.IsActive = obj.IsActive;
            this.IsActiveWS = obj.IsActiveWS;
            this.IsCoreRange = obj.IsCoreRange;
            this.IsTemplate = obj.IsTemplate;
            this.Item = (obj.ItemReference.EntityKey != null && obj.ItemReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ItemReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Keywords = obj.Keywords;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.NickName = obj.NickName;
            this.Number = obj.Number;
            this.OriginRef = obj.OriginRef;
            this.Parent = (obj.ParentReference.EntityKey != null && obj.ParentReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ParentReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.PatternCompressionImage = (obj.PatternCompressionImageReference.EntityKey != null && obj.PatternCompressionImageReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PatternCompressionImageReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.PatternNotes = obj.PatternNotes;
            this.PatternSupplier = (obj.PatternSupplierReference.EntityKey != null && obj.PatternSupplierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PatternSupplierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.PriceRemarks = obj.PriceRemarks;
            this.PrinterType = (obj.PrinterTypeReference.EntityKey != null && obj.PrinterTypeReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PrinterTypeReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.ProductionLine = (obj.ProductionLineReference.EntityKey != null && obj.ProductionLineReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ProductionLineReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Remarks = obj.Remarks;
            this.SizeSet = (obj.SizeSetReference.EntityKey != null && obj.SizeSetReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.SizeSetReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.SMV = obj.SMV;
            this.SpecialAttributes = obj.SpecialAttributes;
            this.SubItem = (obj.SubItemReference.EntityKey != null && obj.SubItemReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.SubItemReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Unit = (obj.UnitReference.EntityKey != null && obj.UnitReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.UnitReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.Pattern SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.Pattern properties
            Indico.DAL.Pattern obj = new Indico.DAL.Pattern();
            
            if (this.ID > 0)
            {
                obj = context.Pattern.FirstOrDefault<Pattern>(o => o.ID == this.ID);
            }
            
            obj.Consumption = this.Consumption;
            obj.ConvertionFactor = this.ConvertionFactor;
            obj.CorePattern = this.CorePattern;
            obj.CreatedDate = this.CreatedDate;
            obj.Description = this.Description;
            obj.FactoryDescription = this.FactoryDescription;
            obj.GarmentSpecStatus = this.GarmentSpecStatus;
            obj.GUID = this.GUID;
            obj.HTSCode = this.HTSCode;
            obj.IsActive = this.IsActive;
            obj.IsActiveWS = this.IsActiveWS;
            obj.IsCoreRange = this.IsCoreRange;
            obj.IsTemplate = this.IsTemplate;
            obj.Keywords = this.Keywords;
            obj.ModifiedDate = this.ModifiedDate;
            obj.NickName = this.NickName;
            obj.Number = this.Number;
            obj.OriginRef = this.OriginRef;
            obj.PatternNotes = this.PatternNotes;
            obj.PriceRemarks = this.PriceRemarks;
            obj.Remarks = this.Remarks;
            obj.SMV = this.SMV;
            obj.SpecialAttributes = this.SpecialAttributes;
            
            if (this.AgeGroup != null && this.AgeGroup > 0) obj.AgeGroup = context.AgeGroup.FirstOrDefault(o => o.ID == this.AgeGroup);
            if (this.CoreCategory > 0) obj.CoreCategory = context.Category.FirstOrDefault(o => o.ID == this.CoreCategory);
            if (this.Creator > 0) obj.Creator = context.User.FirstOrDefault(o => o.ID == this.Creator);
            if (this.Gender > 0) obj.Gender = context.Gender.FirstOrDefault(o => o.ID == this.Gender);
            if (this.Item > 0) obj.Item = context.Item.FirstOrDefault(o => o.ID == this.Item);
            if (this.Modifier > 0) obj.Modifier = context.User.FirstOrDefault(o => o.ID == this.Modifier);
            if (this.Parent != null && this.Parent > 0) obj.Parent = context.Pattern.FirstOrDefault(o => o.ID == this.Parent);
            if (this.PatternCompressionImage != null && this.PatternCompressionImage > 0) obj.PatternCompressionImage = context.PatternCompressionImage.FirstOrDefault(o => o.ID == this.PatternCompressionImage);
            if (this.PatternSupplier > 0) obj.PatternSupplier = context.PatternSupplier.FirstOrDefault(o => o.ID == this.PatternSupplier);
            if (this.PrinterType > 0) obj.PrinterType = context.PrinterType.FirstOrDefault(o => o.ID == this.PrinterType);
            if (this.ProductionLine != null && this.ProductionLine > 0) obj.ProductionLine = context.ProductionLine.FirstOrDefault(o => o.ID == this.ProductionLine);
            if (this.SizeSet > 0) obj.SizeSet = context.SizeSet.FirstOrDefault(o => o.ID == this.SizeSet);
            if (this.SubItem != null && this.SubItem > 0) obj.SubItem = context.Item.FirstOrDefault(o => o.ID == this.SubItem);
            if (this.Unit != null && this.Unit > 0) obj.Unit = context.Unit.FirstOrDefault(o => o.ID == this.Unit);
            
            if (_artWorksWhereThisIsPatternLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.ArtWorkBO.ToEntityList(this.ArtWorksWhereThisIsPattern, context), 
                    obj.ArtWorksWhereThisIsPattern);
            if (_costSheetsWhereThisIsPatternLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.CostSheetBO.ToEntityList(this.CostSheetsWhereThisIsPattern, context), 
                    obj.CostSheetsWhereThisIsPattern);
            if (_orderDetailsWhereThisIsPatternLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.OrderDetailBO.ToEntityList(this.OrderDetailsWhereThisIsPattern, context), 
                    obj.OrderDetailsWhereThisIsPattern);
            if (_patternsWhereThisIsParentLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.PatternBO.ToEntityList(this.PatternsWhereThisIsParent, context), 
                    obj.PatternsWhereThisIsParent);
            if (_patternAccessorysWhereThisIsPatternLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.PatternAccessoryBO.ToEntityList(this.PatternAccessorysWhereThisIsPattern, context), 
                    obj.PatternAccessorysWhereThisIsPattern);
            if (_patternHistorysWhereThisIsPatternLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.PatternHistoryBO.ToEntityList(this.PatternHistorysWhereThisIsPattern, context), 
                    obj.PatternHistorysWhereThisIsPattern);
            if (_patternItemAttributeSubsWhereThisIsPatternLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.PatternItemAttributeSubBO.ToEntityList(this.PatternItemAttributeSubsWhereThisIsPattern, context), 
                    obj.PatternItemAttributeSubsWhereThisIsPattern);
            if (_patternOtherCategorysWhereThisIsPatternLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.CategoryBO.ToEntityList(this.PatternOtherCategorysWhereThisIsPattern, context), 
                    obj.PatternOtherCategorysWhereThisIsPattern);
            if (_patternSupportAccessorysWhereThisIsPatternLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.PatternSupportAccessoryBO.ToEntityList(this.PatternSupportAccessorysWhereThisIsPattern, context), 
                    obj.PatternSupportAccessorysWhereThisIsPattern);
            if (_patternTemplateImagesWhereThisIsPatternLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.PatternTemplateImageBO.ToEntityList(this.PatternTemplateImagesWhereThisIsPattern, context), 
                    obj.PatternTemplateImagesWhereThisIsPattern);
            if (_pricesWhereThisIsPatternLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.PriceBO.ToEntityList(this.PricesWhereThisIsPattern, context), 
                    obj.PricesWhereThisIsPattern);
            if (_productsWhereThisIsPatternLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.ProductBO.ToEntityList(this.ProductsWhereThisIsPattern, context), 
                    obj.ProductsWhereThisIsPattern);
            if (_quoteDetailsWhereThisIsPatternLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.QuoteDetailBO.ToEntityList(this.QuoteDetailsWhereThisIsPattern, context), 
                    obj.QuoteDetailsWhereThisIsPattern);
            if (_reservationsWhereThisIsPatternLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.ReservationBO.ToEntityList(this.ReservationsWhereThisIsPattern, context), 
                    obj.ReservationsWhereThisIsPattern);
            if (_sizeChartsWhereThisIsPatternLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.SizeChartBO.ToEntityList(this.SizeChartsWhereThisIsPattern, context), 
                    obj.SizeChartsWhereThisIsPattern);
            if (_visualLayoutsWhereThisIsPatternLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.VisualLayoutBO.ToEntityList(this.VisualLayoutsWhereThisIsPattern, context), 
                    obj.VisualLayoutsWhereThisIsPattern);
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.Pattern))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.Pattern obj = (Indico.DAL.Pattern)eObj;
            
            // set the Indico.BusinessObjects.PatternBO properties
            this.ID = obj.ID;
            
            this.Consumption = obj.Consumption;
            this.ConvertionFactor = obj.ConvertionFactor;
            this.CorePattern = obj.CorePattern;
            this.CreatedDate = obj.CreatedDate;
            this.Description = obj.Description;
            this.FactoryDescription = obj.FactoryDescription;
            this.GarmentSpecStatus = obj.GarmentSpecStatus;
            this.GUID = obj.GUID;
            this.HTSCode = obj.HTSCode;
            this.IsActive = obj.IsActive;
            this.IsActiveWS = obj.IsActiveWS;
            this.IsCoreRange = obj.IsCoreRange;
            this.IsTemplate = obj.IsTemplate;
            this.Keywords = obj.Keywords;
            this.ModifiedDate = obj.ModifiedDate;
            this.NickName = obj.NickName;
            this.Number = obj.Number;
            this.OriginRef = obj.OriginRef;
            this.PatternNotes = obj.PatternNotes;
            this.PriceRemarks = obj.PriceRemarks;
            this.Remarks = obj.Remarks;
            this.SMV = obj.SMV;
            this.SpecialAttributes = obj.SpecialAttributes;
            
            this.AgeGroup = (obj.AgeGroupReference.EntityKey != null && obj.AgeGroupReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.AgeGroupReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.CoreCategory = (obj.CoreCategoryReference.EntityKey != null && obj.CoreCategoryReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CoreCategoryReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Gender = (obj.GenderReference.EntityKey != null && obj.GenderReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.GenderReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Item = (obj.ItemReference.EntityKey != null && obj.ItemReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ItemReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Parent = (obj.ParentReference.EntityKey != null && obj.ParentReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ParentReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.PatternCompressionImage = (obj.PatternCompressionImageReference.EntityKey != null && obj.PatternCompressionImageReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PatternCompressionImageReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.PatternSupplier = (obj.PatternSupplierReference.EntityKey != null && obj.PatternSupplierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PatternSupplierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.PrinterType = (obj.PrinterTypeReference.EntityKey != null && obj.PrinterTypeReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PrinterTypeReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.ProductionLine = (obj.ProductionLineReference.EntityKey != null && obj.ProductionLineReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ProductionLineReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.SizeSet = (obj.SizeSetReference.EntityKey != null && obj.SizeSetReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.SizeSetReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.SubItem = (obj.SubItemReference.EntityKey != null && obj.SubItemReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.SubItemReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Unit = (obj.UnitReference.EntityKey != null && obj.UnitReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.UnitReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.PatternBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.PatternBO properties
            this.ID = obj.ID;
            
            this.AgeGroup = obj.AgeGroup;
            this.Consumption = obj.Consumption;
            this.ConvertionFactor = obj.ConvertionFactor;
            this.CoreCategory = obj.CoreCategory;
            this.CorePattern = obj.CorePattern;
            this.CreatedDate = obj.CreatedDate;
            this.Creator = obj.Creator;
            this.Description = obj.Description;
            this.FactoryDescription = obj.FactoryDescription;
            this.GarmentSpecStatus = obj.GarmentSpecStatus;
            this.Gender = obj.Gender;
            this.GUID = obj.GUID;
            this.HTSCode = obj.HTSCode;
            this.IsActive = obj.IsActive;
            this.IsActiveWS = obj.IsActiveWS;
            this.IsCoreRange = obj.IsCoreRange;
            this.IsTemplate = obj.IsTemplate;
            this.Item = obj.Item;
            this.Keywords = obj.Keywords;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = obj.Modifier;
            this.NickName = obj.NickName;
            this.Number = obj.Number;
            this.OriginRef = obj.OriginRef;
            this.Parent = obj.Parent;
            this.PatternCompressionImage = obj.PatternCompressionImage;
            this.PatternNotes = obj.PatternNotes;
            this.PatternSupplier = obj.PatternSupplier;
            this.PriceRemarks = obj.PriceRemarks;
            this.PrinterType = obj.PrinterType;
            this.ProductionLine = obj.ProductionLine;
            this.Remarks = obj.Remarks;
            this.SizeSet = obj.SizeSet;
            this.SMV = obj.SMV;
            this.SpecialAttributes = obj.SpecialAttributes;
            this.SubItem = obj.SubItem;
            this.Unit = obj.Unit;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.PatternBO> IQueryableToList(IQueryable<Indico.DAL.Pattern> oQuery)
        {
            List<Indico.DAL.Pattern> oList = oQuery.ToList();
            List<Indico.BusinessObjects.PatternBO> rList = new List<Indico.BusinessObjects.PatternBO>(oList.Count);
            foreach (Indico.DAL.Pattern o in oList)
            {
                Indico.BusinessObjects.PatternBO obj = new Indico.BusinessObjects.PatternBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.PatternBO> ToList(IEnumerable<Indico.DAL.Pattern> oQuery)
        {
            List<Indico.DAL.Pattern> oList = oQuery.ToList();
            List<Indico.BusinessObjects.PatternBO> rList = new List<Indico.BusinessObjects.PatternBO>(oList.Count);
            foreach (Indico.DAL.Pattern o in oList)
            {
                Indico.BusinessObjects.PatternBO obj = new Indico.BusinessObjects.PatternBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.Pattern> ToEntityList(List<PatternBO> bos, IndicoEntities context)
        {
            // build a List of Pattern entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.Pattern.Count() == 0) ? new List<Indico.DAL.Pattern>() : (context.Pattern.Where(BuildContainsExpression<Pattern, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.Pattern>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Pattern> ToEntityCollection(List<PatternBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of Pattern entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.Pattern> el = (context.Pattern.Count() == 0) ? new List<Indico.DAL.Pattern>() : 
                context.Pattern.Where(BuildContainsExpression<Pattern, int>(e => e.ID, ids))
                .ToList<Indico.DAL.Pattern>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Pattern> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Pattern>();
                
            foreach (Indico.DAL.Pattern r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.Pattern ToEntity(IndicoEntities context)
        {
            return (from o in context.Pattern
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToPattern(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Pattern obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToPattern(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.Pattern obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Pattern obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.PatternBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.PatternBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.Pattern> oQuery =
                        from o in context.Pattern
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.Pattern> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.PatternBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.PatternBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PatternBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PatternBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.Pattern> oQuery =
                (from o in context.Pattern
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PatternBO> patterns = IQueryableToList(oQuery);
            context.Dispose();
            return patterns;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.PatternBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.PatternBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PatternBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PatternBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Pattern> oQuery =
                (from o in context.Pattern
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Item == 0 || this.Item == o.Item.ID) &&
                    (this.SubItem == null || this.SubItem == o.SubItem.ID) &&
                    (this.Gender == 0 || this.Gender == o.Gender.ID) &&
                    (this.AgeGroup == null || this.AgeGroup == o.AgeGroup.ID) &&
                    (this.SizeSet == 0 || this.SizeSet == o.SizeSet.ID) &&
                    (this.CoreCategory == 0 || this.CoreCategory == o.CoreCategory.ID) &&
                    (this.PrinterType == 0 || this.PrinterType == o.PrinterType.ID) &&
                    (this.Number == string.Empty || this.Number == o.Number) &&
                    (this.OriginRef == null || this.OriginRef == o.OriginRef) &&
                    (this.NickName == string.Empty || this.NickName == o.NickName) &&
                    (this.Keywords == null || this.Keywords == o.Keywords) &&
                    (this.CorePattern == null || this.CorePattern == o.CorePattern) &&
                    (this.FactoryDescription == null || this.FactoryDescription == o.FactoryDescription) &&
                    (this.Consumption == null || this.Consumption == o.Consumption) &&
                    (this.ConvertionFactor == 0 || this.ConvertionFactor == o.ConvertionFactor) &&
                    (this.SpecialAttributes == null || this.SpecialAttributes == o.SpecialAttributes) &&
                    (this.PatternNotes == null || this.PatternNotes == o.PatternNotes) &&
                    (this.PriceRemarks == null || this.PriceRemarks == o.PriceRemarks) &&
                    (this.IsActive == false || this.IsActive == o.IsActive) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) &&
                    (this.Remarks == null || this.Remarks == o.Remarks) &&
                    (this.IsTemplate == false || this.IsTemplate == o.IsTemplate) &&
                    (this.Parent == null || this.Parent == o.Parent.ID) &&
                    (this.GarmentSpecStatus == string.Empty || this.GarmentSpecStatus == o.GarmentSpecStatus) &&
                    (this.IsActiveWS == false || this.IsActiveWS == o.IsActiveWS) &&
                    (this.HTSCode == null || this.HTSCode == o.HTSCode) &&
                    (this.GUID == string.Empty || this.GUID == o.GUID) &&
                    (this.Unit == null || this.Unit == o.Unit.ID) &&
                    (this.SMV == null || this.SMV == o.SMV) &&
                    (this.Description == null || this.Description == o.Description) &&
                    (this.IsCoreRange == false || this.IsCoreRange == o.IsCoreRange) &&
                    (this.PatternCompressionImage == null || this.PatternCompressionImage == o.PatternCompressionImage.ID) &&
                    (this.PatternSupplier == 0 || this.PatternSupplier == o.PatternSupplier.ID) &&
                    (this.ProductionLine == null || this.ProductionLine == o.ProductionLine.ID) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PatternBO> patterns = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return patterns;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Pattern
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Item == 0 || this.Item == o.Item.ID) &&
                    (this.SubItem == null || this.SubItem == o.SubItem.ID) &&
                    (this.Gender == 0 || this.Gender == o.Gender.ID) &&
                    (this.AgeGroup == null || this.AgeGroup == o.AgeGroup.ID) &&
                    (this.SizeSet == 0 || this.SizeSet == o.SizeSet.ID) &&
                    (this.CoreCategory == 0 || this.CoreCategory == o.CoreCategory.ID) &&
                    (this.PrinterType == 0 || this.PrinterType == o.PrinterType.ID) &&
                    (this.Number == string.Empty || this.Number == o.Number) &&
                    (this.OriginRef == null || this.OriginRef == o.OriginRef) &&
                    (this.NickName == string.Empty || this.NickName == o.NickName) &&
                    (this.Keywords == null || this.Keywords == o.Keywords) &&
                    (this.CorePattern == null || this.CorePattern == o.CorePattern) &&
                    (this.FactoryDescription == null || this.FactoryDescription == o.FactoryDescription) &&
                    (this.Consumption == null || this.Consumption == o.Consumption) &&
                    (this.ConvertionFactor == 0 || this.ConvertionFactor == o.ConvertionFactor) &&
                    (this.SpecialAttributes == null || this.SpecialAttributes == o.SpecialAttributes) &&
                    (this.PatternNotes == null || this.PatternNotes == o.PatternNotes) &&
                    (this.PriceRemarks == null || this.PriceRemarks == o.PriceRemarks) &&
                    (this.IsActive == false || this.IsActive == o.IsActive) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) &&
                    (this.Remarks == null || this.Remarks == o.Remarks) &&
                    (this.IsTemplate == false || this.IsTemplate == o.IsTemplate) &&
                    (this.Parent == null || this.Parent == o.Parent.ID) &&
                    (this.GarmentSpecStatus == string.Empty || this.GarmentSpecStatus == o.GarmentSpecStatus) &&
                    (this.IsActiveWS == false || this.IsActiveWS == o.IsActiveWS) &&
                    (this.HTSCode == null || this.HTSCode == o.HTSCode) &&
                    (this.GUID == string.Empty || this.GUID == o.GUID) &&
                    (this.Unit == null || this.Unit == o.Unit.ID) &&
                    (this.SMV == null || this.SMV == o.SMV) &&
                    (this.Description == null || this.Description == o.Description) &&
                    (this.IsCoreRange == false || this.IsCoreRange == o.IsCoreRange) &&
                    (this.PatternCompressionImage == null || this.PatternCompressionImage == o.PatternCompressionImage.ID) &&
                    (this.PatternSupplier == 0 || this.PatternSupplier == o.PatternSupplier.ID) &&
                    (this.ProductionLine == null || this.ProductionLine == o.ProductionLine.ID) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.PatternBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.PatternBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PatternBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PatternBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Pattern> oQuery =
                (from o in context.Pattern
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Item == 0 || o.Item.ID == this.Item) &&
                    (this.SubItem == null || o.SubItem.ID == this.SubItem) &&
                    (this.Gender == 0 || o.Gender.ID == this.Gender) &&
                    (this.AgeGroup == null || o.AgeGroup.ID == this.AgeGroup) &&
                    (this.SizeSet == 0 || o.SizeSet.ID == this.SizeSet) &&
                    (this.CoreCategory == 0 || o.CoreCategory.ID == this.CoreCategory) &&
                    (this.PrinterType == 0 || o.PrinterType.ID == this.PrinterType) &&
                    (this.Number == string.Empty || o.Number.Contains(this.Number)) &&
                    (this.OriginRef == null || o.OriginRef.Contains(this.OriginRef)) &&
                    (this.NickName == string.Empty || o.NickName.Contains(this.NickName)) &&
                    (this.Keywords == null || o.Keywords.Contains(this.Keywords)) &&
                    (this.CorePattern == null || o.CorePattern.Contains(this.CorePattern)) &&
                    (this.FactoryDescription == null || o.FactoryDescription.Contains(this.FactoryDescription)) &&
                    (this.Consumption == null || o.Consumption.Contains(this.Consumption)) &&
                    (this.ConvertionFactor == 0 || o.ConvertionFactor == this.ConvertionFactor) &&
                    (this.SpecialAttributes == null || o.SpecialAttributes.Contains(this.SpecialAttributes)) &&
                    (this.PatternNotes == null || o.PatternNotes.Contains(this.PatternNotes)) &&
                    (this.PriceRemarks == null || o.PriceRemarks.Contains(this.PriceRemarks)) &&
                    (this.IsActive == false || o.IsActive == this.IsActive) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.ModifiedDate == DateTime.MinValue || o.ModifiedDate == this.ModifiedDate) &&
                    (this.Remarks == null || o.Remarks.Contains(this.Remarks)) &&
                    (this.IsTemplate == false || o.IsTemplate == this.IsTemplate) &&
                    (this.Parent == null || o.Parent.ID == this.Parent) &&
                    (this.GarmentSpecStatus == string.Empty || o.GarmentSpecStatus.Contains(this.GarmentSpecStatus)) &&
                    (this.IsActiveWS == false || o.IsActiveWS == this.IsActiveWS) &&
                    (this.HTSCode == null || o.HTSCode.Contains(this.HTSCode)) &&
                    (this.GUID == string.Empty || o.GUID.Contains(this.GUID)) &&
                    (this.Unit == null || o.Unit.ID == this.Unit) &&
                    (this.SMV == null || o.SMV == this.SMV) &&
                    (this.Description == null || o.Description.Contains(this.Description)) &&
                    (this.IsCoreRange == false || o.IsCoreRange == this.IsCoreRange) &&
                    (this.PatternCompressionImage == null || o.PatternCompressionImage.ID == this.PatternCompressionImage) &&
                    (this.PatternSupplier == 0 || o.PatternSupplier.ID == this.PatternSupplier) &&
                    (this.ProductionLine == null || o.ProductionLine.ID == this.ProductionLine) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PatternBO> patterns = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return patterns;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Pattern
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Item == 0 || o.Item.ID == this.Item) &&
                    (this.SubItem == null || o.SubItem.ID == this.SubItem) &&
                    (this.Gender == 0 || o.Gender.ID == this.Gender) &&
                    (this.AgeGroup == null || o.AgeGroup.ID == this.AgeGroup) &&
                    (this.SizeSet == 0 || o.SizeSet.ID == this.SizeSet) &&
                    (this.CoreCategory == 0 || o.CoreCategory.ID == this.CoreCategory) &&
                    (this.PrinterType == 0 || o.PrinterType.ID == this.PrinterType) &&
                    (this.Number == string.Empty || o.Number.Contains(this.Number)) &&
                    (this.OriginRef == null || o.OriginRef.Contains(this.OriginRef)) &&
                    (this.NickName == string.Empty || o.NickName.Contains(this.NickName)) &&
                    (this.Keywords == null || o.Keywords.Contains(this.Keywords)) &&
                    (this.CorePattern == null || o.CorePattern.Contains(this.CorePattern)) &&
                    (this.FactoryDescription == null || o.FactoryDescription.Contains(this.FactoryDescription)) &&
                    (this.Consumption == null || o.Consumption.Contains(this.Consumption)) &&
                    (this.ConvertionFactor == 0 || o.ConvertionFactor == this.ConvertionFactor) &&
                    (this.SpecialAttributes == null || o.SpecialAttributes.Contains(this.SpecialAttributes)) &&
                    (this.PatternNotes == null || o.PatternNotes.Contains(this.PatternNotes)) &&
                    (this.PriceRemarks == null || o.PriceRemarks.Contains(this.PriceRemarks)) &&
                    (this.IsActive == false || o.IsActive == this.IsActive) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.ModifiedDate == DateTime.MinValue || o.ModifiedDate == this.ModifiedDate) &&
                    (this.Remarks == null || o.Remarks.Contains(this.Remarks)) &&
                    (this.IsTemplate == false || o.IsTemplate == this.IsTemplate) &&
                    (this.Parent == null || o.Parent.ID == this.Parent) &&
                    (this.GarmentSpecStatus == string.Empty || o.GarmentSpecStatus.Contains(this.GarmentSpecStatus)) &&
                    (this.IsActiveWS == false || o.IsActiveWS == this.IsActiveWS) &&
                    (this.HTSCode == null || o.HTSCode.Contains(this.HTSCode)) &&
                    (this.GUID == string.Empty || o.GUID.Contains(this.GUID)) &&
                    (this.Unit == null || o.Unit.ID == this.Unit) &&
                    (this.SMV == null || o.SMV == this.SMV) &&
                    (this.Description == null || o.Description.Contains(this.Description)) &&
                    (this.IsCoreRange == false || o.IsCoreRange == this.IsCoreRange) &&
                    (this.PatternCompressionImage == null || o.PatternCompressionImage.ID == this.PatternCompressionImage) &&
                    (this.PatternSupplier == 0 || o.PatternSupplier.ID == this.PatternSupplier) &&
                    (this.ProductionLine == null || o.ProductionLine.ID == this.ProductionLine) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.PatternBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.PatternBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PatternBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PatternBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Pattern> oQuery =
                (from o in context.Pattern
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Item == 0 || this.Item == o.Item.ID) && 
                    (this.SubItem == null || this.SubItem == o.SubItem.ID) && 
                    (this.Gender == 0 || this.Gender == o.Gender.ID) && 
                    (this.AgeGroup == null || this.AgeGroup == o.AgeGroup.ID) && 
                    (this.SizeSet == 0 || this.SizeSet == o.SizeSet.ID) && 
                    (this.CoreCategory == 0 || this.CoreCategory == o.CoreCategory.ID) && 
                    (this.PrinterType == 0 || this.PrinterType == o.PrinterType.ID) && 
                    (this.ConvertionFactor == 0 || this.ConvertionFactor == o.ConvertionFactor) && 
                    (this.IsActive == false || this.IsActive == o.IsActive) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) && 
                    (this.IsTemplate == false || this.IsTemplate == o.IsTemplate) && 
                    (this.Parent == null || this.Parent == o.Parent.ID) && 
                    (this.IsActiveWS == false || this.IsActiveWS == o.IsActiveWS) && 
                    (this.Unit == null || this.Unit == o.Unit.ID) && 
                    (this.SMV == null || this.SMV == o.SMV) && 
                    (this.IsCoreRange == false || this.IsCoreRange == o.IsCoreRange) && 
                    (this.PatternCompressionImage == null || this.PatternCompressionImage == o.PatternCompressionImage.ID) && 
                    (this.PatternSupplier == 0 || this.PatternSupplier == o.PatternSupplier.ID) && 
                    (this.ProductionLine == null || this.ProductionLine == o.ProductionLine.ID) && 
                    ((o.Number.Contains(this.Number)) ||
                    (o.OriginRef.Contains(this.OriginRef)) ||
                    (o.NickName.Contains(this.NickName)) ||
                    (o.Keywords.Contains(this.Keywords)) ||
                    (o.CorePattern.Contains(this.CorePattern)) ||
                    (o.FactoryDescription.Contains(this.FactoryDescription)) ||
                    (o.Consumption.Contains(this.Consumption)) ||
                    (o.SpecialAttributes.Contains(this.SpecialAttributes)) ||
                    (o.PatternNotes.Contains(this.PatternNotes)) ||
                    (o.PriceRemarks.Contains(this.PriceRemarks)) ||
                    (o.Remarks.Contains(this.Remarks)) ||
                    (o.GarmentSpecStatus.Contains(this.GarmentSpecStatus)) ||
                    (o.HTSCode.Contains(this.HTSCode)) ||
                    (o.GUID.Contains(this.GUID)) ||
                    (o.Description.Contains(this.Description)) ||
                    (this.Number == null && this.OriginRef == null && this.NickName == null && this.Keywords == null && this.CorePattern == null && this.FactoryDescription == null && this.Consumption == null && this.SpecialAttributes == null && this.PatternNotes == null && this.PriceRemarks == null && this.Remarks == null && this.GarmentSpecStatus == null && this.HTSCode == null && this.GUID == null && this.Description == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PatternBO> patterns = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return patterns;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Pattern
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Item == 0 || this.Item == o.Item.ID) && 
                    (this.SubItem == null || this.SubItem == o.SubItem.ID) && 
                    (this.Gender == 0 || this.Gender == o.Gender.ID) && 
                    (this.AgeGroup == null || this.AgeGroup == o.AgeGroup.ID) && 
                    (this.SizeSet == 0 || this.SizeSet == o.SizeSet.ID) && 
                    (this.CoreCategory == 0 || this.CoreCategory == o.CoreCategory.ID) && 
                    (this.PrinterType == 0 || this.PrinterType == o.PrinterType.ID) && 
                    (this.ConvertionFactor == 0 || this.ConvertionFactor == o.ConvertionFactor) && 
                    (this.IsActive == false || this.IsActive == o.IsActive) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) && 
                    (this.IsTemplate == false || this.IsTemplate == o.IsTemplate) && 
                    (this.Parent == null || this.Parent == o.Parent.ID) && 
                    (this.IsActiveWS == false || this.IsActiveWS == o.IsActiveWS) && 
                    (this.Unit == null || this.Unit == o.Unit.ID) && 
                    (this.SMV == null || this.SMV == o.SMV) && 
                    (this.IsCoreRange == false || this.IsCoreRange == o.IsCoreRange) && 
                    (this.PatternCompressionImage == null || this.PatternCompressionImage == o.PatternCompressionImage.ID) && 
                    (this.PatternSupplier == 0 || this.PatternSupplier == o.PatternSupplier.ID) && 
                    (this.ProductionLine == null || this.ProductionLine == o.ProductionLine.ID) && 
                    ((o.Number.Contains(this.Number)) ||
                    (o.OriginRef.Contains(this.OriginRef)) ||
                    (o.NickName.Contains(this.NickName)) ||
                    (o.Keywords.Contains(this.Keywords)) ||
                    (o.CorePattern.Contains(this.CorePattern)) ||
                    (o.FactoryDescription.Contains(this.FactoryDescription)) ||
                    (o.Consumption.Contains(this.Consumption)) ||
                    (o.SpecialAttributes.Contains(this.SpecialAttributes)) ||
                    (o.PatternNotes.Contains(this.PatternNotes)) ||
                    (o.PriceRemarks.Contains(this.PriceRemarks)) ||
                    (o.Remarks.Contains(this.Remarks)) ||
                    (o.GarmentSpecStatus.Contains(this.GarmentSpecStatus)) ||
                    (o.HTSCode.Contains(this.HTSCode)) ||
                    (o.GUID.Contains(this.GUID)) ||
                    (o.Description.Contains(this.Description)) ||
                    (this.Number == null && this.OriginRef == null && this.NickName == null && this.Keywords == null && this.CorePattern == null && this.FactoryDescription == null && this.Consumption == null && this.SpecialAttributes == null && this.PatternNotes == null && this.PriceRemarks == null && this.Remarks == null && this.GarmentSpecStatus == null && this.HTSCode == null && this.GUID == null && this.Description == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.PatternBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.PatternBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.PatternBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.PatternBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.PatternBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.PatternBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnPatternBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PatternBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPatternBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnPatternBOIDChanged();
        partial void OnPatternBOIDChanging(int value);
        
        partial void OnItemChanged()
        {
            OnPatternBOItemChanged();
        }
        
        partial void OnItemChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PatternBO.Item must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPatternBOItemChanging(value);
        }
        partial void OnItemChanged();
        partial void OnItemChanging(int value);
        partial void OnPatternBOItemChanged();
        partial void OnPatternBOItemChanging(int value);
        
        partial void OnSubItemChanged()
        {
            OnPatternBOSubItemChanged();
        }
        
        partial void OnSubItemChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("PatternBO.SubItem must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPatternBOSubItemChanging(value);
        }
        partial void OnSubItemChanged();
        partial void OnSubItemChanging(int? value);
        partial void OnPatternBOSubItemChanged();
        partial void OnPatternBOSubItemChanging(int? value);
        
        partial void OnGenderChanged()
        {
            OnPatternBOGenderChanged();
        }
        
        partial void OnGenderChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PatternBO.Gender must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPatternBOGenderChanging(value);
        }
        partial void OnGenderChanged();
        partial void OnGenderChanging(int value);
        partial void OnPatternBOGenderChanged();
        partial void OnPatternBOGenderChanging(int value);
        
        partial void OnAgeGroupChanged()
        {
            OnPatternBOAgeGroupChanged();
        }
        
        partial void OnAgeGroupChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("PatternBO.AgeGroup must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPatternBOAgeGroupChanging(value);
        }
        partial void OnAgeGroupChanged();
        partial void OnAgeGroupChanging(int? value);
        partial void OnPatternBOAgeGroupChanged();
        partial void OnPatternBOAgeGroupChanging(int? value);
        
        partial void OnSizeSetChanged()
        {
            OnPatternBOSizeSetChanged();
        }
        
        partial void OnSizeSetChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PatternBO.SizeSet must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPatternBOSizeSetChanging(value);
        }
        partial void OnSizeSetChanged();
        partial void OnSizeSetChanging(int value);
        partial void OnPatternBOSizeSetChanged();
        partial void OnPatternBOSizeSetChanging(int value);
        
        partial void OnCoreCategoryChanged()
        {
            OnPatternBOCoreCategoryChanged();
        }
        
        partial void OnCoreCategoryChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PatternBO.CoreCategory must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPatternBOCoreCategoryChanging(value);
        }
        partial void OnCoreCategoryChanged();
        partial void OnCoreCategoryChanging(int value);
        partial void OnPatternBOCoreCategoryChanged();
        partial void OnPatternBOCoreCategoryChanging(int value);
        
        partial void OnPrinterTypeChanged()
        {
            OnPatternBOPrinterTypeChanged();
        }
        
        partial void OnPrinterTypeChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PatternBO.PrinterType must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPatternBOPrinterTypeChanging(value);
        }
        partial void OnPrinterTypeChanged();
        partial void OnPrinterTypeChanging(int value);
        partial void OnPatternBOPrinterTypeChanged();
        partial void OnPatternBOPrinterTypeChanging(int value);
        
        partial void OnNumberChanged()
        {
            OnPatternBONumberChanged();
        }
        
        partial void OnNumberChanging(string value)
        {
            if (value != null && value.Length > 64)
            {
                throw new Exception(String.Format("PatternBO.Number has a maximum length of 64. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPatternBONumberChanging(value);
        }
        partial void OnNumberChanged();
        partial void OnNumberChanging(string value);
        partial void OnPatternBONumberChanged();
        partial void OnPatternBONumberChanging(string value);
        
        partial void OnOriginRefChanged()
        {
            OnPatternBOOriginRefChanged();
        }
        
        partial void OnOriginRefChanging(string value)
        {
            if (value != null && value.Length > 64)
            {
                throw new Exception(String.Format("PatternBO.OriginRef has a maximum length of 64. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPatternBOOriginRefChanging(value);
        }
        partial void OnOriginRefChanged();
        partial void OnOriginRefChanging(string value);
        partial void OnPatternBOOriginRefChanged();
        partial void OnPatternBOOriginRefChanging(string value);
        
        partial void OnNickNameChanged()
        {
            OnPatternBONickNameChanged();
        }
        
        partial void OnNickNameChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("PatternBO.NickName has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPatternBONickNameChanging(value);
        }
        partial void OnNickNameChanged();
        partial void OnNickNameChanging(string value);
        partial void OnPatternBONickNameChanged();
        partial void OnPatternBONickNameChanging(string value);
        
        partial void OnKeywordsChanged()
        {
            OnPatternBOKeywordsChanged();
        }
        
        partial void OnKeywordsChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("PatternBO.Keywords has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPatternBOKeywordsChanging(value);
        }
        partial void OnKeywordsChanged();
        partial void OnKeywordsChanging(string value);
        partial void OnPatternBOKeywordsChanged();
        partial void OnPatternBOKeywordsChanging(string value);
        
        partial void OnCorePatternChanged()
        {
            OnPatternBOCorePatternChanged();
        }
        
        partial void OnCorePatternChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("PatternBO.CorePattern has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPatternBOCorePatternChanging(value);
        }
        partial void OnCorePatternChanged();
        partial void OnCorePatternChanging(string value);
        partial void OnPatternBOCorePatternChanged();
        partial void OnPatternBOCorePatternChanging(string value);
        
        partial void OnFactoryDescriptionChanged()
        {
            OnPatternBOFactoryDescriptionChanged();
        }
        
        partial void OnFactoryDescriptionChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("PatternBO.FactoryDescription has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPatternBOFactoryDescriptionChanging(value);
        }
        partial void OnFactoryDescriptionChanged();
        partial void OnFactoryDescriptionChanging(string value);
        partial void OnPatternBOFactoryDescriptionChanged();
        partial void OnPatternBOFactoryDescriptionChanging(string value);
        
        partial void OnConsumptionChanged()
        {
            OnPatternBOConsumptionChanged();
        }
        
        partial void OnConsumptionChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("PatternBO.Consumption has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPatternBOConsumptionChanging(value);
        }
        partial void OnConsumptionChanged();
        partial void OnConsumptionChanging(string value);
        partial void OnPatternBOConsumptionChanged();
        partial void OnPatternBOConsumptionChanging(string value);
        
        partial void OnConvertionFactorChanged()
        {
            OnPatternBOConvertionFactorChanged();
        }
        
        partial void OnConvertionFactorChanging(decimal value)
        {
            OnPatternBOConvertionFactorChanging(value);
        }
        partial void OnConvertionFactorChanged();
        partial void OnConvertionFactorChanging(decimal value);
        partial void OnPatternBOConvertionFactorChanged();
        partial void OnPatternBOConvertionFactorChanging(decimal value);
        
        partial void OnSpecialAttributesChanged()
        {
            OnPatternBOSpecialAttributesChanged();
        }
        
        partial void OnSpecialAttributesChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("PatternBO.SpecialAttributes has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPatternBOSpecialAttributesChanging(value);
        }
        partial void OnSpecialAttributesChanged();
        partial void OnSpecialAttributesChanging(string value);
        partial void OnPatternBOSpecialAttributesChanged();
        partial void OnPatternBOSpecialAttributesChanging(string value);
        
        partial void OnPatternNotesChanged()
        {
            OnPatternBOPatternNotesChanged();
        }
        
        partial void OnPatternNotesChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("PatternBO.PatternNotes has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPatternBOPatternNotesChanging(value);
        }
        partial void OnPatternNotesChanged();
        partial void OnPatternNotesChanging(string value);
        partial void OnPatternBOPatternNotesChanged();
        partial void OnPatternBOPatternNotesChanging(string value);
        
        partial void OnPriceRemarksChanged()
        {
            OnPatternBOPriceRemarksChanged();
        }
        
        partial void OnPriceRemarksChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("PatternBO.PriceRemarks has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPatternBOPriceRemarksChanging(value);
        }
        partial void OnPriceRemarksChanged();
        partial void OnPriceRemarksChanging(string value);
        partial void OnPatternBOPriceRemarksChanged();
        partial void OnPatternBOPriceRemarksChanging(string value);
        
        partial void OnIsActiveChanged()
        {
            OnPatternBOIsActiveChanged();
        }
        
        partial void OnIsActiveChanging(bool value)
        {
            OnPatternBOIsActiveChanging(value);
        }
        partial void OnIsActiveChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnPatternBOIsActiveChanged();
        partial void OnPatternBOIsActiveChanging(bool value);
        
        partial void OnCreatorChanged()
        {
            OnPatternBOCreatorChanged();
        }
        
        partial void OnCreatorChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PatternBO.Creator must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPatternBOCreatorChanging(value);
        }
        partial void OnCreatorChanged();
        partial void OnCreatorChanging(int value);
        partial void OnPatternBOCreatorChanged();
        partial void OnPatternBOCreatorChanging(int value);
        
        partial void OnCreatedDateChanged()
        {
            OnPatternBOCreatedDateChanged();
        }
        
        partial void OnCreatedDateChanging(DateTime value)
        {
            OnPatternBOCreatedDateChanging(value);
        }
        partial void OnCreatedDateChanged();
        partial void OnCreatedDateChanging(DateTime value);
        partial void OnPatternBOCreatedDateChanged();
        partial void OnPatternBOCreatedDateChanging(DateTime value);
        
        partial void OnModifierChanged()
        {
            OnPatternBOModifierChanged();
        }
        
        partial void OnModifierChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PatternBO.Modifier must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPatternBOModifierChanging(value);
        }
        partial void OnModifierChanged();
        partial void OnModifierChanging(int value);
        partial void OnPatternBOModifierChanged();
        partial void OnPatternBOModifierChanging(int value);
        
        partial void OnModifiedDateChanged()
        {
            OnPatternBOModifiedDateChanged();
        }
        
        partial void OnModifiedDateChanging(DateTime value)
        {
            OnPatternBOModifiedDateChanging(value);
        }
        partial void OnModifiedDateChanged();
        partial void OnModifiedDateChanging(DateTime value);
        partial void OnPatternBOModifiedDateChanged();
        partial void OnPatternBOModifiedDateChanging(DateTime value);
        
        partial void OnRemarksChanged()
        {
            OnPatternBORemarksChanged();
        }
        
        partial void OnRemarksChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("PatternBO.Remarks has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPatternBORemarksChanging(value);
        }
        partial void OnRemarksChanged();
        partial void OnRemarksChanging(string value);
        partial void OnPatternBORemarksChanged();
        partial void OnPatternBORemarksChanging(string value);
        
        partial void OnIsTemplateChanged()
        {
            OnPatternBOIsTemplateChanged();
        }
        
        partial void OnIsTemplateChanging(bool value)
        {
            OnPatternBOIsTemplateChanging(value);
        }
        partial void OnIsTemplateChanged();
        partial void OnIsTemplateChanging(bool value);
        partial void OnPatternBOIsTemplateChanged();
        partial void OnPatternBOIsTemplateChanging(bool value);
        
        partial void OnParentChanged()
        {
            OnPatternBOParentChanged();
        }
        
        partial void OnParentChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("PatternBO.Parent must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPatternBOParentChanging(value);
        }
        partial void OnParentChanged();
        partial void OnParentChanging(int? value);
        partial void OnPatternBOParentChanged();
        partial void OnPatternBOParentChanging(int? value);
        
        partial void OnGarmentSpecStatusChanged()
        {
            OnPatternBOGarmentSpecStatusChanged();
        }
        
        partial void OnGarmentSpecStatusChanging(string value)
        {
            if (value != null && value.Length > 64)
            {
                throw new Exception(String.Format("PatternBO.GarmentSpecStatus has a maximum length of 64. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPatternBOGarmentSpecStatusChanging(value);
        }
        partial void OnGarmentSpecStatusChanged();
        partial void OnGarmentSpecStatusChanging(string value);
        partial void OnPatternBOGarmentSpecStatusChanged();
        partial void OnPatternBOGarmentSpecStatusChanging(string value);
        
        partial void OnIsActiveWSChanged()
        {
            OnPatternBOIsActiveWSChanged();
        }
        
        partial void OnIsActiveWSChanging(bool value)
        {
            OnPatternBOIsActiveWSChanging(value);
        }
        partial void OnIsActiveWSChanged();
        partial void OnIsActiveWSChanging(bool value);
        partial void OnPatternBOIsActiveWSChanged();
        partial void OnPatternBOIsActiveWSChanging(bool value);
        
        partial void OnHTSCodeChanged()
        {
            OnPatternBOHTSCodeChanged();
        }
        
        partial void OnHTSCodeChanging(string value)
        {
            if (value != null && value.Length > 64)
            {
                throw new Exception(String.Format("PatternBO.HTSCode has a maximum length of 64. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPatternBOHTSCodeChanging(value);
        }
        partial void OnHTSCodeChanged();
        partial void OnHTSCodeChanging(string value);
        partial void OnPatternBOHTSCodeChanged();
        partial void OnPatternBOHTSCodeChanging(string value);
        
        partial void OnGUIDChanged()
        {
            OnPatternBOGUIDChanged();
        }
        
        partial void OnGUIDChanging(string value)
        {
            if (value != null && value.Length > 36)
            {
                throw new Exception(String.Format("PatternBO.GUID has a maximum length of 36. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPatternBOGUIDChanging(value);
        }
        partial void OnGUIDChanged();
        partial void OnGUIDChanging(string value);
        partial void OnPatternBOGUIDChanged();
        partial void OnPatternBOGUIDChanging(string value);
        
        partial void OnUnitChanged()
        {
            OnPatternBOUnitChanged();
        }
        
        partial void OnUnitChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("PatternBO.Unit must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPatternBOUnitChanging(value);
        }
        partial void OnUnitChanged();
        partial void OnUnitChanging(int? value);
        partial void OnPatternBOUnitChanged();
        partial void OnPatternBOUnitChanging(int? value);
        
        partial void OnSMVChanged()
        {
            OnPatternBOSMVChanged();
        }
        
        partial void OnSMVChanging(decimal? value)
        {
            OnPatternBOSMVChanging(value);
        }
        partial void OnSMVChanged();
        partial void OnSMVChanging(decimal? value);
        partial void OnPatternBOSMVChanged();
        partial void OnPatternBOSMVChanging(decimal? value);
        
        partial void OnDescriptionChanged()
        {
            OnPatternBODescriptionChanged();
        }
        
        partial void OnDescriptionChanging(string value)
        {
            if (value != null && value.Length > 1024)
            {
                throw new Exception(String.Format("PatternBO.Description has a maximum length of 1024. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPatternBODescriptionChanging(value);
        }
        partial void OnDescriptionChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnPatternBODescriptionChanged();
        partial void OnPatternBODescriptionChanging(string value);
        
        partial void OnIsCoreRangeChanged()
        {
            OnPatternBOIsCoreRangeChanged();
        }
        
        partial void OnIsCoreRangeChanging(bool value)
        {
            OnPatternBOIsCoreRangeChanging(value);
        }
        partial void OnIsCoreRangeChanged();
        partial void OnIsCoreRangeChanging(bool value);
        partial void OnPatternBOIsCoreRangeChanged();
        partial void OnPatternBOIsCoreRangeChanging(bool value);
        
        partial void OnPatternCompressionImageChanged()
        {
            OnPatternBOPatternCompressionImageChanged();
        }
        
        partial void OnPatternCompressionImageChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("PatternBO.PatternCompressionImage must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPatternBOPatternCompressionImageChanging(value);
        }
        partial void OnPatternCompressionImageChanged();
        partial void OnPatternCompressionImageChanging(int? value);
        partial void OnPatternBOPatternCompressionImageChanged();
        partial void OnPatternBOPatternCompressionImageChanging(int? value);
        
        partial void OnPatternSupplierChanged()
        {
            OnPatternBOPatternSupplierChanged();
        }
        
        partial void OnPatternSupplierChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PatternBO.PatternSupplier must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPatternBOPatternSupplierChanging(value);
        }
        partial void OnPatternSupplierChanged();
        partial void OnPatternSupplierChanging(int value);
        partial void OnPatternBOPatternSupplierChanged();
        partial void OnPatternBOPatternSupplierChanging(int value);
        
        partial void OnProductionLineChanged()
        {
            OnPatternBOProductionLineChanged();
        }
        
        partial void OnProductionLineChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("PatternBO.ProductionLine must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPatternBOProductionLineChanging(value);
        }
        partial void OnProductionLineChanged();
        partial void OnProductionLineChanging(int? value);
        partial void OnPatternBOProductionLineChanged();
        partial void OnPatternBOProductionLineChanging(int? value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.PatternBO))
                return 1;
            Indico.BusinessObjects.PatternBOComparer c = new Indico.BusinessObjects.PatternBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.PatternBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.Pattern)sender);
            }
        }
        
        void ArtWorksWhereThisIsPatternList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.ArtWork obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.ArtWorkBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.ArtWorkBO>)sender)[((IndicoList<Indico.BusinessObjects.ArtWorkBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.ArtWorksWhereThisIsPattern.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.ArtWorkBO>)sender)[((IndicoList<Indico.BusinessObjects.ArtWorkBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.ArtWorksWhereThisIsPattern.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void ArtWorksWhereThisIsPatternList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.ArtWork obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.ArtWorkBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.ArtWorkBO>)sender)[((IndicoList<Indico.BusinessObjects.ArtWorkBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.ArtWorksWhereThisIsPattern.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.ArtWorkBO>)sender)[((IndicoList<Indico.BusinessObjects.ArtWorkBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.ArtWorksWhereThisIsPattern.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void CostSheetsWhereThisIsPatternList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.CostSheet obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.CostSheetBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.CostSheetBO>)sender)[((IndicoList<Indico.BusinessObjects.CostSheetBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.CostSheetsWhereThisIsPattern.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.CostSheetBO>)sender)[((IndicoList<Indico.BusinessObjects.CostSheetBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.CostSheetsWhereThisIsPattern.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void CostSheetsWhereThisIsPatternList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.CostSheet obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.CostSheetBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.CostSheetBO>)sender)[((IndicoList<Indico.BusinessObjects.CostSheetBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.CostSheetsWhereThisIsPattern.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.CostSheetBO>)sender)[((IndicoList<Indico.BusinessObjects.CostSheetBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.CostSheetsWhereThisIsPattern.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrderDetailsWhereThisIsPatternList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.OrderDetail obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrderDetailsWhereThisIsPattern.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrderDetailsWhereThisIsPattern.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrderDetailsWhereThisIsPatternList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.OrderDetail obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrderDetailsWhereThisIsPattern.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrderDetailsWhereThisIsPattern.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PatternsWhereThisIsParentList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Pattern obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PatternBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PatternBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternsWhereThisIsParent.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PatternBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternsWhereThisIsParent.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PatternsWhereThisIsParentList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Pattern obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PatternBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PatternBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternsWhereThisIsParent.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PatternBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternsWhereThisIsParent.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PatternAccessorysWhereThisIsPatternList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.PatternAccessory obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PatternAccessoryBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PatternAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternAccessoryBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternAccessorysWhereThisIsPattern.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PatternAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternAccessoryBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternAccessorysWhereThisIsPattern.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PatternAccessorysWhereThisIsPatternList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.PatternAccessory obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PatternAccessoryBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PatternAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternAccessoryBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternAccessorysWhereThisIsPattern.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PatternAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternAccessoryBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternAccessorysWhereThisIsPattern.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PatternHistorysWhereThisIsPatternList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.PatternHistory obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PatternHistoryBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PatternHistoryBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternHistoryBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternHistorysWhereThisIsPattern.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PatternHistoryBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternHistoryBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternHistorysWhereThisIsPattern.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PatternHistorysWhereThisIsPatternList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.PatternHistory obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PatternHistoryBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PatternHistoryBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternHistoryBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternHistorysWhereThisIsPattern.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PatternHistoryBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternHistoryBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternHistorysWhereThisIsPattern.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PatternItemAttributeSubsWhereThisIsPatternList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.PatternItemAttributeSub obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PatternItemAttributeSubBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PatternItemAttributeSubBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternItemAttributeSubBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternItemAttributeSubsWhereThisIsPattern.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PatternItemAttributeSubBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternItemAttributeSubBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternItemAttributeSubsWhereThisIsPattern.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PatternItemAttributeSubsWhereThisIsPatternList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.PatternItemAttributeSub obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PatternItemAttributeSubBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PatternItemAttributeSubBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternItemAttributeSubBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternItemAttributeSubsWhereThisIsPattern.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PatternItemAttributeSubBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternItemAttributeSubBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternItemAttributeSubsWhereThisIsPattern.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PatternOtherCategorysWhereThisIsPatternList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Category obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.CategoryBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.CategoryBO>)sender)[((IndicoList<Indico.BusinessObjects.CategoryBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternOtherCategorysWhereThisIsPattern.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.CategoryBO>)sender)[((IndicoList<Indico.BusinessObjects.CategoryBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternOtherCategorysWhereThisIsPattern.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PatternOtherCategorysWhereThisIsPatternList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Category obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.CategoryBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.CategoryBO>)sender)[((IndicoList<Indico.BusinessObjects.CategoryBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternOtherCategorysWhereThisIsPattern.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.CategoryBO>)sender)[((IndicoList<Indico.BusinessObjects.CategoryBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternOtherCategorysWhereThisIsPattern.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PatternSupportAccessorysWhereThisIsPatternList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.PatternSupportAccessory obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternSupportAccessorysWhereThisIsPattern.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternSupportAccessorysWhereThisIsPattern.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PatternSupportAccessorysWhereThisIsPatternList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.PatternSupportAccessory obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternSupportAccessorysWhereThisIsPattern.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternSupportAccessorysWhereThisIsPattern.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PatternTemplateImagesWhereThisIsPatternList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.PatternTemplateImage obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PatternTemplateImageBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PatternTemplateImageBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternTemplateImageBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternTemplateImagesWhereThisIsPattern.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PatternTemplateImageBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternTemplateImageBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternTemplateImagesWhereThisIsPattern.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PatternTemplateImagesWhereThisIsPatternList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.PatternTemplateImage obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PatternTemplateImageBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PatternTemplateImageBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternTemplateImageBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternTemplateImagesWhereThisIsPattern.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PatternTemplateImageBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternTemplateImageBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternTemplateImagesWhereThisIsPattern.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PricesWhereThisIsPatternList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Price obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PriceBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PriceBO>)sender)[((IndicoList<Indico.BusinessObjects.PriceBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PricesWhereThisIsPattern.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PriceBO>)sender)[((IndicoList<Indico.BusinessObjects.PriceBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PricesWhereThisIsPattern.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PricesWhereThisIsPatternList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Price obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PriceBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PriceBO>)sender)[((IndicoList<Indico.BusinessObjects.PriceBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PricesWhereThisIsPattern.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PriceBO>)sender)[((IndicoList<Indico.BusinessObjects.PriceBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PricesWhereThisIsPattern.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void ProductsWhereThisIsPatternList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Product obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.ProductBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.ProductBO>)sender)[((IndicoList<Indico.BusinessObjects.ProductBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.ProductsWhereThisIsPattern.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.ProductBO>)sender)[((IndicoList<Indico.BusinessObjects.ProductBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.ProductsWhereThisIsPattern.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void ProductsWhereThisIsPatternList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Product obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.ProductBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.ProductBO>)sender)[((IndicoList<Indico.BusinessObjects.ProductBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.ProductsWhereThisIsPattern.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.ProductBO>)sender)[((IndicoList<Indico.BusinessObjects.ProductBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.ProductsWhereThisIsPattern.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void QuoteDetailsWhereThisIsPatternList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.QuoteDetail obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.QuoteDetailBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.QuoteDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.QuoteDetailBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.QuoteDetailsWhereThisIsPattern.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.QuoteDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.QuoteDetailBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.QuoteDetailsWhereThisIsPattern.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void QuoteDetailsWhereThisIsPatternList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.QuoteDetail obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.QuoteDetailBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.QuoteDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.QuoteDetailBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.QuoteDetailsWhereThisIsPattern.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.QuoteDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.QuoteDetailBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.QuoteDetailsWhereThisIsPattern.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void ReservationsWhereThisIsPatternList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Reservation obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.ReservationBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.ReservationBO>)sender)[((IndicoList<Indico.BusinessObjects.ReservationBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.ReservationsWhereThisIsPattern.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.ReservationBO>)sender)[((IndicoList<Indico.BusinessObjects.ReservationBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.ReservationsWhereThisIsPattern.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void ReservationsWhereThisIsPatternList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Reservation obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.ReservationBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.ReservationBO>)sender)[((IndicoList<Indico.BusinessObjects.ReservationBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.ReservationsWhereThisIsPattern.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.ReservationBO>)sender)[((IndicoList<Indico.BusinessObjects.ReservationBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.ReservationsWhereThisIsPattern.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void SizeChartsWhereThisIsPatternList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.SizeChart obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.SizeChartBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.SizeChartBO>)sender)[((IndicoList<Indico.BusinessObjects.SizeChartBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.SizeChartsWhereThisIsPattern.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.SizeChartBO>)sender)[((IndicoList<Indico.BusinessObjects.SizeChartBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.SizeChartsWhereThisIsPattern.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void SizeChartsWhereThisIsPatternList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.SizeChart obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.SizeChartBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.SizeChartBO>)sender)[((IndicoList<Indico.BusinessObjects.SizeChartBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.SizeChartsWhereThisIsPattern.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.SizeChartBO>)sender)[((IndicoList<Indico.BusinessObjects.SizeChartBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.SizeChartsWhereThisIsPattern.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void VisualLayoutsWhereThisIsPatternList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.VisualLayout obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.VisualLayoutBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.VisualLayoutBO>)sender)[((IndicoList<Indico.BusinessObjects.VisualLayoutBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.VisualLayoutsWhereThisIsPattern.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.VisualLayoutBO>)sender)[((IndicoList<Indico.BusinessObjects.VisualLayoutBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.VisualLayoutsWhereThisIsPattern.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void VisualLayoutsWhereThisIsPatternList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.VisualLayout obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.VisualLayoutBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.VisualLayoutBO>)sender)[((IndicoList<Indico.BusinessObjects.VisualLayoutBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.VisualLayoutsWhereThisIsPattern.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.VisualLayoutBO>)sender)[((IndicoList<Indico.BusinessObjects.VisualLayoutBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.VisualLayoutsWhereThisIsPattern.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
            this._artWorksWhereThisIsPatternLoaded = false;
            if (this.artWorksWhereThisIsPatternList != null)
            {
                this.artWorksWhereThisIsPatternList.OnBeforeRemove -= new EventHandler(ArtWorksWhereThisIsPatternList_OnBeforeRemove);
                this.artWorksWhereThisIsPatternList.OnAfterAdd -= new EventHandler(ArtWorksWhereThisIsPatternList_OnAfterAdd);
            }
            this._costSheetsWhereThisIsPatternLoaded = false;
            if (this.costSheetsWhereThisIsPatternList != null)
            {
                this.costSheetsWhereThisIsPatternList.OnBeforeRemove -= new EventHandler(CostSheetsWhereThisIsPatternList_OnBeforeRemove);
                this.costSheetsWhereThisIsPatternList.OnAfterAdd -= new EventHandler(CostSheetsWhereThisIsPatternList_OnAfterAdd);
            }
            this._orderDetailsWhereThisIsPatternLoaded = false;
            if (this.orderDetailsWhereThisIsPatternList != null)
            {
                this.orderDetailsWhereThisIsPatternList.OnBeforeRemove -= new EventHandler(OrderDetailsWhereThisIsPatternList_OnBeforeRemove);
                this.orderDetailsWhereThisIsPatternList.OnAfterAdd -= new EventHandler(OrderDetailsWhereThisIsPatternList_OnAfterAdd);
            }
            this._patternsWhereThisIsParentLoaded = false;
            if (this.patternsWhereThisIsParentList != null)
            {
                this.patternsWhereThisIsParentList.OnBeforeRemove -= new EventHandler(PatternsWhereThisIsParentList_OnBeforeRemove);
                this.patternsWhereThisIsParentList.OnAfterAdd -= new EventHandler(PatternsWhereThisIsParentList_OnAfterAdd);
            }
            this._patternAccessorysWhereThisIsPatternLoaded = false;
            if (this.patternAccessorysWhereThisIsPatternList != null)
            {
                this.patternAccessorysWhereThisIsPatternList.OnBeforeRemove -= new EventHandler(PatternAccessorysWhereThisIsPatternList_OnBeforeRemove);
                this.patternAccessorysWhereThisIsPatternList.OnAfterAdd -= new EventHandler(PatternAccessorysWhereThisIsPatternList_OnAfterAdd);
            }
            this._patternHistorysWhereThisIsPatternLoaded = false;
            if (this.patternHistorysWhereThisIsPatternList != null)
            {
                this.patternHistorysWhereThisIsPatternList.OnBeforeRemove -= new EventHandler(PatternHistorysWhereThisIsPatternList_OnBeforeRemove);
                this.patternHistorysWhereThisIsPatternList.OnAfterAdd -= new EventHandler(PatternHistorysWhereThisIsPatternList_OnAfterAdd);
            }
            this._patternItemAttributeSubsWhereThisIsPatternLoaded = false;
            if (this.patternItemAttributeSubsWhereThisIsPatternList != null)
            {
                this.patternItemAttributeSubsWhereThisIsPatternList.OnBeforeRemove -= new EventHandler(PatternItemAttributeSubsWhereThisIsPatternList_OnBeforeRemove);
                this.patternItemAttributeSubsWhereThisIsPatternList.OnAfterAdd -= new EventHandler(PatternItemAttributeSubsWhereThisIsPatternList_OnAfterAdd);
            }
            this._patternOtherCategorysWhereThisIsPatternLoaded = false;
            if (this.patternOtherCategorysWhereThisIsPatternList != null)
            {
                this.patternOtherCategorysWhereThisIsPatternList.OnBeforeRemove -= new EventHandler(PatternOtherCategorysWhereThisIsPatternList_OnBeforeRemove);
                this.patternOtherCategorysWhereThisIsPatternList.OnAfterAdd -= new EventHandler(PatternOtherCategorysWhereThisIsPatternList_OnAfterAdd);
            }
            this._patternSupportAccessorysWhereThisIsPatternLoaded = false;
            if (this.patternSupportAccessorysWhereThisIsPatternList != null)
            {
                this.patternSupportAccessorysWhereThisIsPatternList.OnBeforeRemove -= new EventHandler(PatternSupportAccessorysWhereThisIsPatternList_OnBeforeRemove);
                this.patternSupportAccessorysWhereThisIsPatternList.OnAfterAdd -= new EventHandler(PatternSupportAccessorysWhereThisIsPatternList_OnAfterAdd);
            }
            this._patternTemplateImagesWhereThisIsPatternLoaded = false;
            if (this.patternTemplateImagesWhereThisIsPatternList != null)
            {
                this.patternTemplateImagesWhereThisIsPatternList.OnBeforeRemove -= new EventHandler(PatternTemplateImagesWhereThisIsPatternList_OnBeforeRemove);
                this.patternTemplateImagesWhereThisIsPatternList.OnAfterAdd -= new EventHandler(PatternTemplateImagesWhereThisIsPatternList_OnAfterAdd);
            }
            this._pricesWhereThisIsPatternLoaded = false;
            if (this.pricesWhereThisIsPatternList != null)
            {
                this.pricesWhereThisIsPatternList.OnBeforeRemove -= new EventHandler(PricesWhereThisIsPatternList_OnBeforeRemove);
                this.pricesWhereThisIsPatternList.OnAfterAdd -= new EventHandler(PricesWhereThisIsPatternList_OnAfterAdd);
            }
            this._productsWhereThisIsPatternLoaded = false;
            if (this.productsWhereThisIsPatternList != null)
            {
                this.productsWhereThisIsPatternList.OnBeforeRemove -= new EventHandler(ProductsWhereThisIsPatternList_OnBeforeRemove);
                this.productsWhereThisIsPatternList.OnAfterAdd -= new EventHandler(ProductsWhereThisIsPatternList_OnAfterAdd);
            }
            this._quoteDetailsWhereThisIsPatternLoaded = false;
            if (this.quoteDetailsWhereThisIsPatternList != null)
            {
                this.quoteDetailsWhereThisIsPatternList.OnBeforeRemove -= new EventHandler(QuoteDetailsWhereThisIsPatternList_OnBeforeRemove);
                this.quoteDetailsWhereThisIsPatternList.OnAfterAdd -= new EventHandler(QuoteDetailsWhereThisIsPatternList_OnAfterAdd);
            }
            this._reservationsWhereThisIsPatternLoaded = false;
            if (this.reservationsWhereThisIsPatternList != null)
            {
                this.reservationsWhereThisIsPatternList.OnBeforeRemove -= new EventHandler(ReservationsWhereThisIsPatternList_OnBeforeRemove);
                this.reservationsWhereThisIsPatternList.OnAfterAdd -= new EventHandler(ReservationsWhereThisIsPatternList_OnAfterAdd);
            }
            this._sizeChartsWhereThisIsPatternLoaded = false;
            if (this.sizeChartsWhereThisIsPatternList != null)
            {
                this.sizeChartsWhereThisIsPatternList.OnBeforeRemove -= new EventHandler(SizeChartsWhereThisIsPatternList_OnBeforeRemove);
                this.sizeChartsWhereThisIsPatternList.OnAfterAdd -= new EventHandler(SizeChartsWhereThisIsPatternList_OnAfterAdd);
            }
            this._visualLayoutsWhereThisIsPatternLoaded = false;
            if (this.visualLayoutsWhereThisIsPatternList != null)
            {
                this.visualLayoutsWhereThisIsPatternList.OnBeforeRemove -= new EventHandler(VisualLayoutsWhereThisIsPatternList_OnBeforeRemove);
                this.visualLayoutsWhereThisIsPatternList.OnAfterAdd -= new EventHandler(VisualLayoutsWhereThisIsPatternList_OnAfterAdd);
            }
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region PatternBOComparer
    public class PatternBOComparer : IComparer<Indico.BusinessObjects.PatternBO>
    {
        private string propertyToCompareName;
        public PatternBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.PatternBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.PatternBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public PatternBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.PatternBO> Members
        public int Compare(Indico.BusinessObjects.PatternBO x, Indico.BusinessObjects.PatternBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.PatternBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.PatternBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.PatternBO x, Indico.BusinessObjects.PatternBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
