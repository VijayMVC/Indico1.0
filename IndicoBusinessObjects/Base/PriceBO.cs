// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class PriceBO : BusinessObject, IComparable
    {
        #region fields
        #region Scalar Fields
        private int id;
        private DateTime _createdDate = DateTime.MinValue;
        private int _creator;
        private bool _enableForPriceList;
        private int _fabricCode;
        private DateTime _modifiedDate = DateTime.MinValue;
        private int _modifier;
        private int _pattern;
        private string _remarks;
        #endregion
        
        #region Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objCreator;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.FabricCodeBO _objFabricCode;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objModifier;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.PatternBO _objPattern;
        #endregion
        
        #region Foreign Table Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.FactoryPriceRemarksBO> factoryPriceRemarkssWhereThisIsPriceList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _factoryPriceRemarkssWhereThisIsPriceLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.IndimanPriceRemarksBO> indimanPriceRemarkssWhereThisIsPriceList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _indimanPriceRemarkssWhereThisIsPriceLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.PriceHistroyBO> priceHistroysWhereThisIsPriceList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _priceHistroysWhereThisIsPriceLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.PriceLevelCostBO> priceLevelCostsWhereThisIsPriceList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _priceLevelCostsWhereThisIsPriceLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.PriceRemarksBO> priceRemarkssWhereThisIsPriceList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _priceRemarkssWhereThisIsPriceLoaded;
        #endregion
        
        #region Other fields
        
        private Indico.DAL.Price _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>.</summary>
        public DateTime CreatedDate
        {   
            get {return _createdDate;}
            set 
            {
                OnCreatedDateChanging(value);
                _createdDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CreatedDate = value;
                }
                OnCreatedDateChanged();
            }
        }
        /// <summary>.</summary>
        public int Creator
        {   
            get {return _creator;}
            set 
            {
                OnCreatorChanging(value);
                _creator = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Creator = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Creator = null;
                OnCreatorChanged();
            }
        }
        /// <summary>.</summary>
        public bool EnableForPriceList
        {   
            get {return _enableForPriceList;}
            set 
            {
                OnEnableForPriceListChanging(value);
                _enableForPriceList = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.EnableForPriceList = value;
                }
                OnEnableForPriceListChanged();
            }
        }
        /// <summary>.</summary>
        public int FabricCode
        {   
            get {return _fabricCode;}
            set 
            {
                OnFabricCodeChanging(value);
                _fabricCode = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.FabricCode = (from o in this._context.Context.FabricCode
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.FabricCode>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.FabricCode = null;
                OnFabricCodeChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime ModifiedDate
        {   
            get {return _modifiedDate;}
            set 
            {
                OnModifiedDateChanging(value);
                _modifiedDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ModifiedDate = value;
                }
                OnModifiedDateChanged();
            }
        }
        /// <summary>.</summary>
        public int Modifier
        {   
            get {return _modifier;}
            set 
            {
                OnModifierChanging(value);
                _modifier = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Modifier = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Modifier = null;
                OnModifierChanged();
            }
        }
        /// <summary>.</summary>
        public int Pattern
        {   
            get {return _pattern;}
            set 
            {
                OnPatternChanging(value);
                _pattern = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Pattern = (from o in this._context.Context.Pattern
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Pattern>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Pattern = null;
                OnPatternChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string Remarks
        {   
            get {return _remarks;}
            set 
            {
                OnRemarksChanging(value);
                _remarks = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Remarks = value;
                }
                OnRemarksChanged();
            }
        }
        
        internal Indico.DAL.Price ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        ///<summary>The UserBO object identified by the value of Creator</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objCreator
        {
            get
            {
                if ( _creator > 0 && _objCreator == null)
                {
                        if (this._context == null)
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objCreator.ID = _creator;
                        _objCreator.GetObject(); 
                }
                return _objCreator;
            }
            set
            { 
                _objCreator = value;
                _creator = _objCreator.ID;
            }
        }
        ///<summary>The FabricCodeBO object identified by the value of FabricCode</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.FabricCodeBO objFabricCode
        {
            get
            {
                if ( _fabricCode > 0 && _objFabricCode == null)
                {
                        if (this._context == null)
                        {
                            _objFabricCode = new Indico.BusinessObjects.FabricCodeBO();
                        }
                        else
                        {
                            _objFabricCode = new Indico.BusinessObjects.FabricCodeBO(ref this._context);
                        }
                        _objFabricCode.ID = _fabricCode;
                        _objFabricCode.GetObject(); 
                }
                return _objFabricCode;
            }
            set
            { 
                _objFabricCode = value;
                _fabricCode = _objFabricCode.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Modifier</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objModifier
        {
            get
            {
                if ( _modifier > 0 && _objModifier == null)
                {
                        if (this._context == null)
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objModifier.ID = _modifier;
                        _objModifier.GetObject(); 
                }
                return _objModifier;
            }
            set
            { 
                _objModifier = value;
                _modifier = _objModifier.ID;
            }
        }
        ///<summary>The PatternBO object identified by the value of Pattern</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.PatternBO objPattern
        {
            get
            {
                if ( _pattern > 0 && _objPattern == null)
                {
                        if (this._context == null)
                        {
                            _objPattern = new Indico.BusinessObjects.PatternBO();
                        }
                        else
                        {
                            _objPattern = new Indico.BusinessObjects.PatternBO(ref this._context);
                        }
                        _objPattern.ID = _pattern;
                        _objPattern.GetObject(); 
                }
                return _objPattern;
            }
            set
            { 
                _objPattern = value;
                _pattern = _objPattern.ID;
            }
        }
        #endregion
        
        #region Foreign Object Foreign Key Collections
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.FactoryPriceRemarksBO> FactoryPriceRemarkssWhereThisIsPrice // FK_FactoryPriceRemarks_Price
        {
            get
            {
                if (!_factoryPriceRemarkssWhereThisIsPriceLoaded)
                {
                    _factoryPriceRemarkssWhereThisIsPriceLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Price obj = (from o in context.Price
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.FactoryPriceRemarkssWhereThisIsPrice.Load();
                        factoryPriceRemarkssWhereThisIsPriceList = new IndicoList<Indico.BusinessObjects.FactoryPriceRemarksBO>(obj.FactoryPriceRemarkssWhereThisIsPrice.Count);
                        
                        foreach (Indico.DAL.FactoryPriceRemarks o in obj.FactoryPriceRemarkssWhereThisIsPrice)
                        {
                            Indico.BusinessObjects.FactoryPriceRemarksBO fkObj = new Indico.BusinessObjects.FactoryPriceRemarksBO(o, ref this._context);
                            factoryPriceRemarkssWhereThisIsPriceList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        factoryPriceRemarkssWhereThisIsPriceList = new IndicoList<Indico.BusinessObjects.FactoryPriceRemarksBO>();
                    }
                    
                    factoryPriceRemarkssWhereThisIsPriceList.OnBeforeRemove += new EventHandler(FactoryPriceRemarkssWhereThisIsPriceList_OnBeforeRemove);
                    factoryPriceRemarkssWhereThisIsPriceList.OnAfterAdd += new EventHandler(FactoryPriceRemarkssWhereThisIsPriceList_OnAfterAdd);
                }
                
                return factoryPriceRemarkssWhereThisIsPriceList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.IndimanPriceRemarksBO> IndimanPriceRemarkssWhereThisIsPrice // FK_IndimanPriceRemarks_Price
        {
            get
            {
                if (!_indimanPriceRemarkssWhereThisIsPriceLoaded)
                {
                    _indimanPriceRemarkssWhereThisIsPriceLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Price obj = (from o in context.Price
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.IndimanPriceRemarkssWhereThisIsPrice.Load();
                        indimanPriceRemarkssWhereThisIsPriceList = new IndicoList<Indico.BusinessObjects.IndimanPriceRemarksBO>(obj.IndimanPriceRemarkssWhereThisIsPrice.Count);
                        
                        foreach (Indico.DAL.IndimanPriceRemarks o in obj.IndimanPriceRemarkssWhereThisIsPrice)
                        {
                            Indico.BusinessObjects.IndimanPriceRemarksBO fkObj = new Indico.BusinessObjects.IndimanPriceRemarksBO(o, ref this._context);
                            indimanPriceRemarkssWhereThisIsPriceList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        indimanPriceRemarkssWhereThisIsPriceList = new IndicoList<Indico.BusinessObjects.IndimanPriceRemarksBO>();
                    }
                    
                    indimanPriceRemarkssWhereThisIsPriceList.OnBeforeRemove += new EventHandler(IndimanPriceRemarkssWhereThisIsPriceList_OnBeforeRemove);
                    indimanPriceRemarkssWhereThisIsPriceList.OnAfterAdd += new EventHandler(IndimanPriceRemarkssWhereThisIsPriceList_OnAfterAdd);
                }
                
                return indimanPriceRemarkssWhereThisIsPriceList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.PriceHistroyBO> PriceHistroysWhereThisIsPrice // FK_PriceHistroy_Price
        {
            get
            {
                if (!_priceHistroysWhereThisIsPriceLoaded)
                {
                    _priceHistroysWhereThisIsPriceLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Price obj = (from o in context.Price
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.PriceHistroysWhereThisIsPrice.Load();
                        priceHistroysWhereThisIsPriceList = new IndicoList<Indico.BusinessObjects.PriceHistroyBO>(obj.PriceHistroysWhereThisIsPrice.Count);
                        
                        foreach (Indico.DAL.PriceHistroy o in obj.PriceHistroysWhereThisIsPrice)
                        {
                            Indico.BusinessObjects.PriceHistroyBO fkObj = new Indico.BusinessObjects.PriceHistroyBO(o, ref this._context);
                            priceHistroysWhereThisIsPriceList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        priceHistroysWhereThisIsPriceList = new IndicoList<Indico.BusinessObjects.PriceHistroyBO>();
                    }
                    
                    priceHistroysWhereThisIsPriceList.OnBeforeRemove += new EventHandler(PriceHistroysWhereThisIsPriceList_OnBeforeRemove);
                    priceHistroysWhereThisIsPriceList.OnAfterAdd += new EventHandler(PriceHistroysWhereThisIsPriceList_OnAfterAdd);
                }
                
                return priceHistroysWhereThisIsPriceList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.PriceLevelCostBO> PriceLevelCostsWhereThisIsPrice // FK_PriceLevelCost_Price
        {
            get
            {
                if (!_priceLevelCostsWhereThisIsPriceLoaded)
                {
                    _priceLevelCostsWhereThisIsPriceLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Price obj = (from o in context.Price
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.PriceLevelCostsWhereThisIsPrice.Load();
                        priceLevelCostsWhereThisIsPriceList = new IndicoList<Indico.BusinessObjects.PriceLevelCostBO>(obj.PriceLevelCostsWhereThisIsPrice.Count);
                        
                        foreach (Indico.DAL.PriceLevelCost o in obj.PriceLevelCostsWhereThisIsPrice)
                        {
                            Indico.BusinessObjects.PriceLevelCostBO fkObj = new Indico.BusinessObjects.PriceLevelCostBO(o, ref this._context);
                            priceLevelCostsWhereThisIsPriceList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        priceLevelCostsWhereThisIsPriceList = new IndicoList<Indico.BusinessObjects.PriceLevelCostBO>();
                    }
                    
                    priceLevelCostsWhereThisIsPriceList.OnBeforeRemove += new EventHandler(PriceLevelCostsWhereThisIsPriceList_OnBeforeRemove);
                    priceLevelCostsWhereThisIsPriceList.OnAfterAdd += new EventHandler(PriceLevelCostsWhereThisIsPriceList_OnAfterAdd);
                }
                
                return priceLevelCostsWhereThisIsPriceList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.PriceRemarksBO> PriceRemarkssWhereThisIsPrice // FK_PriceRemarks_Price
        {
            get
            {
                if (!_priceRemarkssWhereThisIsPriceLoaded)
                {
                    _priceRemarkssWhereThisIsPriceLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Price obj = (from o in context.Price
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.PriceRemarkssWhereThisIsPrice.Load();
                        priceRemarkssWhereThisIsPriceList = new IndicoList<Indico.BusinessObjects.PriceRemarksBO>(obj.PriceRemarkssWhereThisIsPrice.Count);
                        
                        foreach (Indico.DAL.PriceRemarks o in obj.PriceRemarkssWhereThisIsPrice)
                        {
                            Indico.BusinessObjects.PriceRemarksBO fkObj = new Indico.BusinessObjects.PriceRemarksBO(o, ref this._context);
                            priceRemarkssWhereThisIsPriceList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        priceRemarkssWhereThisIsPriceList = new IndicoList<Indico.BusinessObjects.PriceRemarksBO>();
                    }
                    
                    priceRemarkssWhereThisIsPriceList.OnBeforeRemove += new EventHandler(PriceRemarkssWhereThisIsPriceList_OnBeforeRemove);
                    priceRemarkssWhereThisIsPriceList.OnAfterAdd += new EventHandler(PriceRemarkssWhereThisIsPriceList_OnAfterAdd);
                }
                
                return priceRemarkssWhereThisIsPriceList;
            }
        }
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the PriceBO class using the supplied Indico.DAL.Price. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.Price whose properties will be used to initialise the PriceBO</param>
        internal PriceBO(Indico.DAL.Price obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.Price 
            this.ID = obj.ID;
            
            this.CreatedDate = obj.CreatedDate;
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.EnableForPriceList = obj.EnableForPriceList;
            this.FabricCode = (obj.FabricCodeReference.EntityKey != null && obj.FabricCodeReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.FabricCodeReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Pattern = (obj.PatternReference.EntityKey != null && obj.PatternReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PatternReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Remarks = obj.Remarks;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.Price SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.Price properties
            Indico.DAL.Price obj = new Indico.DAL.Price();
            
            if (this.ID > 0)
            {
                obj = context.Price.FirstOrDefault<Price>(o => o.ID == this.ID);
            }
            
            obj.CreatedDate = this.CreatedDate;
            obj.EnableForPriceList = this.EnableForPriceList;
            obj.ModifiedDate = this.ModifiedDate;
            obj.Remarks = this.Remarks;
            
            if (this.Creator > 0) obj.Creator = context.User.FirstOrDefault(o => o.ID == this.Creator);
            if (this.FabricCode > 0) obj.FabricCode = context.FabricCode.FirstOrDefault(o => o.ID == this.FabricCode);
            if (this.Modifier > 0) obj.Modifier = context.User.FirstOrDefault(o => o.ID == this.Modifier);
            if (this.Pattern > 0) obj.Pattern = context.Pattern.FirstOrDefault(o => o.ID == this.Pattern);
            
            if (_factoryPriceRemarkssWhereThisIsPriceLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.FactoryPriceRemarksBO.ToEntityList(this.FactoryPriceRemarkssWhereThisIsPrice, context), 
                    obj.FactoryPriceRemarkssWhereThisIsPrice);
            if (_indimanPriceRemarkssWhereThisIsPriceLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.IndimanPriceRemarksBO.ToEntityList(this.IndimanPriceRemarkssWhereThisIsPrice, context), 
                    obj.IndimanPriceRemarkssWhereThisIsPrice);
            if (_priceHistroysWhereThisIsPriceLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.PriceHistroyBO.ToEntityList(this.PriceHistroysWhereThisIsPrice, context), 
                    obj.PriceHistroysWhereThisIsPrice);
            if (_priceLevelCostsWhereThisIsPriceLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.PriceLevelCostBO.ToEntityList(this.PriceLevelCostsWhereThisIsPrice, context), 
                    obj.PriceLevelCostsWhereThisIsPrice);
            if (_priceRemarkssWhereThisIsPriceLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.PriceRemarksBO.ToEntityList(this.PriceRemarkssWhereThisIsPrice, context), 
                    obj.PriceRemarkssWhereThisIsPrice);
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.Price))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.Price obj = (Indico.DAL.Price)eObj;
            
            // set the Indico.BusinessObjects.PriceBO properties
            this.ID = obj.ID;
            
            this.CreatedDate = obj.CreatedDate;
            this.EnableForPriceList = obj.EnableForPriceList;
            this.ModifiedDate = obj.ModifiedDate;
            this.Remarks = obj.Remarks;
            
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.FabricCode = (obj.FabricCodeReference.EntityKey != null && obj.FabricCodeReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.FabricCodeReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Pattern = (obj.PatternReference.EntityKey != null && obj.PatternReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PatternReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.PriceBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.PriceBO properties
            this.ID = obj.ID;
            
            this.CreatedDate = obj.CreatedDate;
            this.Creator = obj.Creator;
            this.EnableForPriceList = obj.EnableForPriceList;
            this.FabricCode = obj.FabricCode;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = obj.Modifier;
            this.Pattern = obj.Pattern;
            this.Remarks = obj.Remarks;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.PriceBO> IQueryableToList(IQueryable<Indico.DAL.Price> oQuery)
        {
            List<Indico.DAL.Price> oList = oQuery.ToList();
            List<Indico.BusinessObjects.PriceBO> rList = new List<Indico.BusinessObjects.PriceBO>(oList.Count);
            foreach (Indico.DAL.Price o in oList)
            {
                Indico.BusinessObjects.PriceBO obj = new Indico.BusinessObjects.PriceBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.PriceBO> ToList(IEnumerable<Indico.DAL.Price> oQuery)
        {
            List<Indico.DAL.Price> oList = oQuery.ToList();
            List<Indico.BusinessObjects.PriceBO> rList = new List<Indico.BusinessObjects.PriceBO>(oList.Count);
            foreach (Indico.DAL.Price o in oList)
            {
                Indico.BusinessObjects.PriceBO obj = new Indico.BusinessObjects.PriceBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.Price> ToEntityList(List<PriceBO> bos, IndicoEntities context)
        {
            // build a List of Price entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.Price.Count() == 0) ? new List<Indico.DAL.Price>() : (context.Price.Where(BuildContainsExpression<Price, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.Price>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Price> ToEntityCollection(List<PriceBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of Price entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.Price> el = (context.Price.Count() == 0) ? new List<Indico.DAL.Price>() : 
                context.Price.Where(BuildContainsExpression<Price, int>(e => e.ID, ids))
                .ToList<Indico.DAL.Price>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Price> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Price>();
                
            foreach (Indico.DAL.Price r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.Price ToEntity(IndicoEntities context)
        {
            return (from o in context.Price
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToPrice(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Price obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToPrice(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.Price obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Price obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.PriceBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.PriceBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.Price> oQuery =
                        from o in context.Price
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.Price> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.PriceBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.PriceBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PriceBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PriceBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.Price> oQuery =
                (from o in context.Price
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PriceBO> prices = IQueryableToList(oQuery);
            context.Dispose();
            return prices;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.PriceBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.PriceBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PriceBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PriceBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Price> oQuery =
                (from o in context.Price
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Pattern == 0 || this.Pattern == o.Pattern.ID) &&
                    (this.FabricCode == 0 || this.FabricCode == o.FabricCode.ID) &&
                    (this.Remarks == null || this.Remarks == o.Remarks) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) &&
                    (this.EnableForPriceList == false || this.EnableForPriceList == o.EnableForPriceList) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PriceBO> prices = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return prices;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Price
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Pattern == 0 || this.Pattern == o.Pattern.ID) &&
                    (this.FabricCode == 0 || this.FabricCode == o.FabricCode.ID) &&
                    (this.Remarks == null || this.Remarks == o.Remarks) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) &&
                    (this.EnableForPriceList == false || this.EnableForPriceList == o.EnableForPriceList) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.PriceBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.PriceBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PriceBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PriceBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Price> oQuery =
                (from o in context.Price
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Pattern == 0 || o.Pattern.ID == this.Pattern) &&
                    (this.FabricCode == 0 || o.FabricCode.ID == this.FabricCode) &&
                    (this.Remarks == null || o.Remarks.Contains(this.Remarks)) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.ModifiedDate == DateTime.MinValue || o.ModifiedDate == this.ModifiedDate) &&
                    (this.EnableForPriceList == false || o.EnableForPriceList == this.EnableForPriceList) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PriceBO> prices = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return prices;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Price
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Pattern == 0 || o.Pattern.ID == this.Pattern) &&
                    (this.FabricCode == 0 || o.FabricCode.ID == this.FabricCode) &&
                    (this.Remarks == null || o.Remarks.Contains(this.Remarks)) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.ModifiedDate == DateTime.MinValue || o.ModifiedDate == this.ModifiedDate) &&
                    (this.EnableForPriceList == false || o.EnableForPriceList == this.EnableForPriceList) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.PriceBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.PriceBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PriceBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PriceBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Price> oQuery =
                (from o in context.Price
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Pattern == 0 || this.Pattern == o.Pattern.ID) && 
                    (this.FabricCode == 0 || this.FabricCode == o.FabricCode.ID) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) && 
                    (this.EnableForPriceList == false || this.EnableForPriceList == o.EnableForPriceList) && 
                    ((o.Remarks.Contains(this.Remarks)) ||
                    (this.Remarks == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PriceBO> prices = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return prices;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Price
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Pattern == 0 || this.Pattern == o.Pattern.ID) && 
                    (this.FabricCode == 0 || this.FabricCode == o.FabricCode.ID) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) && 
                    (this.EnableForPriceList == false || this.EnableForPriceList == o.EnableForPriceList) && 
                    ((o.Remarks.Contains(this.Remarks)) ||
                    (this.Remarks == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.PriceBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.PriceBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.PriceBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.PriceBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.PriceBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.PriceBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnPriceBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PriceBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPriceBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnPriceBOIDChanged();
        partial void OnPriceBOIDChanging(int value);
        
        partial void OnPatternChanged()
        {
            OnPriceBOPatternChanged();
        }
        
        partial void OnPatternChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PriceBO.Pattern must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPriceBOPatternChanging(value);
        }
        partial void OnPatternChanged();
        partial void OnPatternChanging(int value);
        partial void OnPriceBOPatternChanged();
        partial void OnPriceBOPatternChanging(int value);
        
        partial void OnFabricCodeChanged()
        {
            OnPriceBOFabricCodeChanged();
        }
        
        partial void OnFabricCodeChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PriceBO.FabricCode must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPriceBOFabricCodeChanging(value);
        }
        partial void OnFabricCodeChanged();
        partial void OnFabricCodeChanging(int value);
        partial void OnPriceBOFabricCodeChanged();
        partial void OnPriceBOFabricCodeChanging(int value);
        
        partial void OnRemarksChanged()
        {
            OnPriceBORemarksChanged();
        }
        
        partial void OnRemarksChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("PriceBO.Remarks has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPriceBORemarksChanging(value);
        }
        partial void OnRemarksChanged();
        partial void OnRemarksChanging(string value);
        partial void OnPriceBORemarksChanged();
        partial void OnPriceBORemarksChanging(string value);
        
        partial void OnCreatorChanged()
        {
            OnPriceBOCreatorChanged();
        }
        
        partial void OnCreatorChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PriceBO.Creator must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPriceBOCreatorChanging(value);
        }
        partial void OnCreatorChanged();
        partial void OnCreatorChanging(int value);
        partial void OnPriceBOCreatorChanged();
        partial void OnPriceBOCreatorChanging(int value);
        
        partial void OnCreatedDateChanged()
        {
            OnPriceBOCreatedDateChanged();
        }
        
        partial void OnCreatedDateChanging(DateTime value)
        {
            OnPriceBOCreatedDateChanging(value);
        }
        partial void OnCreatedDateChanged();
        partial void OnCreatedDateChanging(DateTime value);
        partial void OnPriceBOCreatedDateChanged();
        partial void OnPriceBOCreatedDateChanging(DateTime value);
        
        partial void OnModifierChanged()
        {
            OnPriceBOModifierChanged();
        }
        
        partial void OnModifierChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PriceBO.Modifier must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPriceBOModifierChanging(value);
        }
        partial void OnModifierChanged();
        partial void OnModifierChanging(int value);
        partial void OnPriceBOModifierChanged();
        partial void OnPriceBOModifierChanging(int value);
        
        partial void OnModifiedDateChanged()
        {
            OnPriceBOModifiedDateChanged();
        }
        
        partial void OnModifiedDateChanging(DateTime value)
        {
            OnPriceBOModifiedDateChanging(value);
        }
        partial void OnModifiedDateChanged();
        partial void OnModifiedDateChanging(DateTime value);
        partial void OnPriceBOModifiedDateChanged();
        partial void OnPriceBOModifiedDateChanging(DateTime value);
        
        partial void OnEnableForPriceListChanged()
        {
            OnPriceBOEnableForPriceListChanged();
        }
        
        partial void OnEnableForPriceListChanging(bool value)
        {
            OnPriceBOEnableForPriceListChanging(value);
        }
        partial void OnEnableForPriceListChanged();
        partial void OnEnableForPriceListChanging(bool value);
        partial void OnPriceBOEnableForPriceListChanged();
        partial void OnPriceBOEnableForPriceListChanging(bool value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.PriceBO))
                return 1;
            Indico.BusinessObjects.PriceBOComparer c = new Indico.BusinessObjects.PriceBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.PriceBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.Price)sender);
            }
        }
        
        void FactoryPriceRemarkssWhereThisIsPriceList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.FactoryPriceRemarks obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.FactoryPriceRemarksBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.FactoryPriceRemarksBO>)sender)[((IndicoList<Indico.BusinessObjects.FactoryPriceRemarksBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.FactoryPriceRemarkssWhereThisIsPrice.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.FactoryPriceRemarksBO>)sender)[((IndicoList<Indico.BusinessObjects.FactoryPriceRemarksBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.FactoryPriceRemarkssWhereThisIsPrice.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void FactoryPriceRemarkssWhereThisIsPriceList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.FactoryPriceRemarks obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.FactoryPriceRemarksBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.FactoryPriceRemarksBO>)sender)[((IndicoList<Indico.BusinessObjects.FactoryPriceRemarksBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.FactoryPriceRemarkssWhereThisIsPrice.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.FactoryPriceRemarksBO>)sender)[((IndicoList<Indico.BusinessObjects.FactoryPriceRemarksBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.FactoryPriceRemarkssWhereThisIsPrice.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void IndimanPriceRemarkssWhereThisIsPriceList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.IndimanPriceRemarks obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.IndimanPriceRemarksBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.IndimanPriceRemarksBO>)sender)[((IndicoList<Indico.BusinessObjects.IndimanPriceRemarksBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.IndimanPriceRemarkssWhereThisIsPrice.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.IndimanPriceRemarksBO>)sender)[((IndicoList<Indico.BusinessObjects.IndimanPriceRemarksBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.IndimanPriceRemarkssWhereThisIsPrice.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void IndimanPriceRemarkssWhereThisIsPriceList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.IndimanPriceRemarks obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.IndimanPriceRemarksBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.IndimanPriceRemarksBO>)sender)[((IndicoList<Indico.BusinessObjects.IndimanPriceRemarksBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.IndimanPriceRemarkssWhereThisIsPrice.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.IndimanPriceRemarksBO>)sender)[((IndicoList<Indico.BusinessObjects.IndimanPriceRemarksBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.IndimanPriceRemarkssWhereThisIsPrice.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PriceHistroysWhereThisIsPriceList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.PriceHistroy obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PriceHistroyBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PriceHistroyBO>)sender)[((IndicoList<Indico.BusinessObjects.PriceHistroyBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PriceHistroysWhereThisIsPrice.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PriceHistroyBO>)sender)[((IndicoList<Indico.BusinessObjects.PriceHistroyBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PriceHistroysWhereThisIsPrice.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PriceHistroysWhereThisIsPriceList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.PriceHistroy obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PriceHistroyBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PriceHistroyBO>)sender)[((IndicoList<Indico.BusinessObjects.PriceHistroyBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PriceHistroysWhereThisIsPrice.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PriceHistroyBO>)sender)[((IndicoList<Indico.BusinessObjects.PriceHistroyBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PriceHistroysWhereThisIsPrice.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PriceLevelCostsWhereThisIsPriceList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.PriceLevelCost obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PriceLevelCostBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PriceLevelCostBO>)sender)[((IndicoList<Indico.BusinessObjects.PriceLevelCostBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PriceLevelCostsWhereThisIsPrice.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PriceLevelCostBO>)sender)[((IndicoList<Indico.BusinessObjects.PriceLevelCostBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PriceLevelCostsWhereThisIsPrice.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PriceLevelCostsWhereThisIsPriceList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.PriceLevelCost obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PriceLevelCostBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PriceLevelCostBO>)sender)[((IndicoList<Indico.BusinessObjects.PriceLevelCostBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PriceLevelCostsWhereThisIsPrice.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PriceLevelCostBO>)sender)[((IndicoList<Indico.BusinessObjects.PriceLevelCostBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PriceLevelCostsWhereThisIsPrice.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PriceRemarkssWhereThisIsPriceList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.PriceRemarks obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PriceRemarksBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PriceRemarksBO>)sender)[((IndicoList<Indico.BusinessObjects.PriceRemarksBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PriceRemarkssWhereThisIsPrice.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PriceRemarksBO>)sender)[((IndicoList<Indico.BusinessObjects.PriceRemarksBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PriceRemarkssWhereThisIsPrice.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PriceRemarkssWhereThisIsPriceList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.PriceRemarks obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PriceRemarksBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PriceRemarksBO>)sender)[((IndicoList<Indico.BusinessObjects.PriceRemarksBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PriceRemarkssWhereThisIsPrice.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PriceRemarksBO>)sender)[((IndicoList<Indico.BusinessObjects.PriceRemarksBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PriceRemarkssWhereThisIsPrice.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
            this._factoryPriceRemarkssWhereThisIsPriceLoaded = false;
            if (this.factoryPriceRemarkssWhereThisIsPriceList != null)
            {
                this.factoryPriceRemarkssWhereThisIsPriceList.OnBeforeRemove -= new EventHandler(FactoryPriceRemarkssWhereThisIsPriceList_OnBeforeRemove);
                this.factoryPriceRemarkssWhereThisIsPriceList.OnAfterAdd -= new EventHandler(FactoryPriceRemarkssWhereThisIsPriceList_OnAfterAdd);
            }
            this._indimanPriceRemarkssWhereThisIsPriceLoaded = false;
            if (this.indimanPriceRemarkssWhereThisIsPriceList != null)
            {
                this.indimanPriceRemarkssWhereThisIsPriceList.OnBeforeRemove -= new EventHandler(IndimanPriceRemarkssWhereThisIsPriceList_OnBeforeRemove);
                this.indimanPriceRemarkssWhereThisIsPriceList.OnAfterAdd -= new EventHandler(IndimanPriceRemarkssWhereThisIsPriceList_OnAfterAdd);
            }
            this._priceHistroysWhereThisIsPriceLoaded = false;
            if (this.priceHistroysWhereThisIsPriceList != null)
            {
                this.priceHistroysWhereThisIsPriceList.OnBeforeRemove -= new EventHandler(PriceHistroysWhereThisIsPriceList_OnBeforeRemove);
                this.priceHistroysWhereThisIsPriceList.OnAfterAdd -= new EventHandler(PriceHistroysWhereThisIsPriceList_OnAfterAdd);
            }
            this._priceLevelCostsWhereThisIsPriceLoaded = false;
            if (this.priceLevelCostsWhereThisIsPriceList != null)
            {
                this.priceLevelCostsWhereThisIsPriceList.OnBeforeRemove -= new EventHandler(PriceLevelCostsWhereThisIsPriceList_OnBeforeRemove);
                this.priceLevelCostsWhereThisIsPriceList.OnAfterAdd -= new EventHandler(PriceLevelCostsWhereThisIsPriceList_OnAfterAdd);
            }
            this._priceRemarkssWhereThisIsPriceLoaded = false;
            if (this.priceRemarkssWhereThisIsPriceList != null)
            {
                this.priceRemarkssWhereThisIsPriceList.OnBeforeRemove -= new EventHandler(PriceRemarkssWhereThisIsPriceList_OnBeforeRemove);
                this.priceRemarkssWhereThisIsPriceList.OnAfterAdd -= new EventHandler(PriceRemarkssWhereThisIsPriceList_OnAfterAdd);
            }
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region PriceBOComparer
    public class PriceBOComparer : IComparer<Indico.BusinessObjects.PriceBO>
    {
        private string propertyToCompareName;
        public PriceBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.PriceBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.PriceBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public PriceBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.PriceBO> Members
        public int Compare(Indico.BusinessObjects.PriceBO x, Indico.BusinessObjects.PriceBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.PriceBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.PriceBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.PriceBO x, Indico.BusinessObjects.PriceBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
