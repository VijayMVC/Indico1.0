// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

//using Indico.BusinessObjects.Util;
//using Indico.BusinessObjects;
using Indico.DAL;


namespace Indico.BusinessObjects
{
    /// <summary>
    /// FabricCodeDetailsViewBO provides the business logic for maintaining Indico.DAL.FabricCodeDetailsView records in the data store.
    /// </summary>
    /// <remarks>
    /// FabricCodeDetailsViewBO provides the business logic for maintaining Indico.DAL.FabricCodeDetailsView records in the data store. 
    /// By default it provides basic Search methods for retrieving Indico.DAL.FabricCodeDetailsView
    /// records using the FabricCodeDetailsView DAL class. Other methods implement atomic chunks of Business Logic according to
    /// the business rules.
    /// </remarks>
    public partial class FabricCodeDetailsViewBO : BusinessObject, IComparable
    {
        #region fields
        private int? _fabric;
        private string _code;
        private string _name;
        private string _material;
        private string _gSM;
        private int? _supplierID;
        private string _supplier;
        private int? _countryID;
        private string _country;
        private string _denierCount;
        private string _filaments;
        private string _nickName;
        private string _serialOrder;
        private decimal? _fabricPrice;
        private int? _landedCurrency;
        private string _fabricWidth;
        private int? _unitID;
        private string _unit;
        private int? _fabricColorID;
        private string _fabricColor;
        private string _colorCode;
        private bool? _isActive;
        private bool? _isPure;
        private bool? _isLiningFabric;
        private bool? _isCostSheetWherethisFabricCode;
        private bool? _isPriceWherethisFabricCode;
        private bool? _isQuoteWherethisFabricCode;
        private bool? _isVisualLayoutWherethisFabricCode;
        private bool? _isPatternSupportFabricWherethisFabricCode;
        #endregion
        
        #region Properties
        /// <summary></summary>
        public int? Fabric
        {   get {return _fabric;}
            set 
            {
                _fabric = value;
            }
        }
        /// <summary></summary>
        public string Code
        {   get {return _code;}
            set 
            {
                _code = value;
            }
        }
        /// <summary></summary>
        public string Name
        {   get {return _name;}
            set 
            {
                _name = value;
            }
        }
        /// <summary></summary>
        public string Material
        {   get {return _material;}
            set 
            {
                _material = value;
            }
        }
        /// <summary></summary>
        public string GSM
        {   get {return _gSM;}
            set 
            {
                _gSM = value;
            }
        }
        /// <summary></summary>
        public int? SupplierID
        {   get {return _supplierID;}
            set 
            {
                _supplierID = value;
            }
        }
        /// <summary></summary>
        public string Supplier
        {   get {return _supplier;}
            set 
            {
                _supplier = value;
            }
        }
        /// <summary></summary>
        public int? CountryID
        {   get {return _countryID;}
            set 
            {
                _countryID = value;
            }
        }
        /// <summary></summary>
        public string Country
        {   get {return _country;}
            set 
            {
                _country = value;
            }
        }
        /// <summary></summary>
        public string DenierCount
        {   get {return _denierCount;}
            set 
            {
                _denierCount = value;
            }
        }
        /// <summary></summary>
        public string Filaments
        {   get {return _filaments;}
            set 
            {
                _filaments = value;
            }
        }
        /// <summary></summary>
        public string NickName
        {   get {return _nickName;}
            set 
            {
                _nickName = value;
            }
        }
        /// <summary></summary>
        public string SerialOrder
        {   get {return _serialOrder;}
            set 
            {
                _serialOrder = value;
            }
        }
        /// <summary></summary>
        public decimal? FabricPrice
        {   get {return _fabricPrice;}
            set 
            {
                _fabricPrice = value;
            }
        }
        /// <summary></summary>
        public int? LandedCurrency
        {   get {return _landedCurrency;}
            set 
            {
                _landedCurrency = value;
            }
        }
        /// <summary></summary>
        public string FabricWidth
        {   get {return _fabricWidth;}
            set 
            {
                _fabricWidth = value;
            }
        }
        /// <summary></summary>
        public int? UnitID
        {   get {return _unitID;}
            set 
            {
                _unitID = value;
            }
        }
        /// <summary></summary>
        public string Unit
        {   get {return _unit;}
            set 
            {
                _unit = value;
            }
        }
        /// <summary></summary>
        public int? FabricColorID
        {   get {return _fabricColorID;}
            set 
            {
                _fabricColorID = value;
            }
        }
        /// <summary></summary>
        public string FabricColor
        {   get {return _fabricColor;}
            set 
            {
                _fabricColor = value;
            }
        }
        /// <summary></summary>
        public string ColorCode
        {   get {return _colorCode;}
            set 
            {
                _colorCode = value;
            }
        }
        /// <summary></summary>
        public bool? IsActive
        {   get {return _isActive;}
            set 
            {
                _isActive = value;
            }
        }
        /// <summary></summary>
        public bool? IsPure
        {   get {return _isPure;}
            set 
            {
                _isPure = value;
            }
        }
        /// <summary></summary>
        public bool? IsLiningFabric
        {   get {return _isLiningFabric;}
            set 
            {
                _isLiningFabric = value;
            }
        }
        /// <summary></summary>
        public bool? IsCostSheetWherethisFabricCode
        {   get {return _isCostSheetWherethisFabricCode;}
            set 
            {
                _isCostSheetWherethisFabricCode = value;
            }
        }
        /// <summary></summary>
        public bool? IsPriceWherethisFabricCode
        {   get {return _isPriceWherethisFabricCode;}
            set 
            {
                _isPriceWherethisFabricCode = value;
            }
        }
        /// <summary></summary>
        public bool? IsQuoteWherethisFabricCode
        {   get {return _isQuoteWherethisFabricCode;}
            set 
            {
                _isQuoteWherethisFabricCode = value;
            }
        }
        /// <summary></summary>
        public bool? IsVisualLayoutWherethisFabricCode
        {   get {return _isVisualLayoutWherethisFabricCode;}
            set 
            {
                _isVisualLayoutWherethisFabricCode = value;
            }
        }
        /// <summary></summary>
        public bool? IsPatternSupportFabricWherethisFabricCode
        {   get {return _isPatternSupportFabricWherethisFabricCode;}
            set 
            {
                _isPatternSupportFabricWherethisFabricCode = value;
            }
        }
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the FabricCodeDetailsViewBO class using the supplied Indico.DAL.FabricCodeDetailsView. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.FabricCodeDetailsView whose properties will be used to initialise the FabricCodeDetailsViewBO</param>
        internal FabricCodeDetailsViewBO(Indico.DAL.FabricCodeDetailsView obj)
        {
            // set the properties from the Indico.DAL.FabricCodeDetailsView 
            this.Fabric = obj.Fabric;
            this.Code = obj.Code;
            this.Name = obj.Name;
            this.Material = obj.Material;
            this.GSM = obj.GSM;
            this.SupplierID = obj.SupplierID;
            this.Supplier = obj.Supplier;
            this.CountryID = obj.CountryID;
            this.Country = obj.Country;
            this.DenierCount = obj.DenierCount;
            this.Filaments = obj.Filaments;
            this.NickName = obj.NickName;
            this.SerialOrder = obj.SerialOrder;
            this.FabricPrice = obj.FabricPrice;
            this.LandedCurrency = obj.LandedCurrency;
            this.FabricWidth = obj.FabricWidth;
            this.UnitID = obj.UnitID;
            this.Unit = obj.Unit;
            this.FabricColorID = obj.FabricColorID;
            this.FabricColor = obj.FabricColor;
            this.ColorCode = obj.ColorCode;
            this.IsActive = obj.IsActive;
            this.IsPure = obj.IsPure;
            this.IsLiningFabric = obj.IsLiningFabric;
            this.IsCostSheetWherethisFabricCode = obj.IsCostSheetWherethisFabricCode;
            this.IsPriceWherethisFabricCode = obj.IsPriceWherethisFabricCode;
            this.IsQuoteWherethisFabricCode = obj.IsQuoteWherethisFabricCode;
            this.IsVisualLayoutWherethisFabricCode = obj.IsVisualLayoutWherethisFabricCode;
            this.IsPatternSupportFabricWherethisFabricCode = obj.IsPatternSupportFabricWherethisFabricCode;
        }
        #endregion
        
        #region Internal utility methods
        internal void SetDAL(Indico.DAL.FabricCodeDetailsView obj, IndicoEntities context)
        {
            // set the Indico.DAL.FabricCodeDetailsView properties
            obj.Fabric = Convert.ToInt32(Fabric);
            obj.Code = Code;
            obj.Name = Name;
            obj.Material = Material;
            obj.GSM = GSM;
            obj.SupplierID = Convert.ToInt32(SupplierID);
            obj.Supplier = Supplier;
            obj.CountryID = Convert.ToInt32(CountryID);
            obj.Country = Country;
            obj.DenierCount = DenierCount;
            obj.Filaments = Filaments;
            obj.NickName = NickName;
            obj.SerialOrder = SerialOrder;
            obj.FabricPrice = Convert.ToDecimal(FabricPrice);
            obj.LandedCurrency = Convert.ToInt32(LandedCurrency);
            obj.FabricWidth = FabricWidth;
            obj.UnitID = Convert.ToInt32(UnitID);
            obj.Unit = Unit;
            obj.FabricColorID = Convert.ToInt32(FabricColorID);
            obj.FabricColor = FabricColor;
            obj.ColorCode = ColorCode;
            obj.IsActive = Convert.ToBoolean(IsActive);
            obj.IsPure = Convert.ToBoolean(IsPure);
            obj.IsLiningFabric = Convert.ToBoolean(IsLiningFabric);
            obj.IsCostSheetWherethisFabricCode = Convert.ToBoolean(IsCostSheetWherethisFabricCode);
            obj.IsPriceWherethisFabricCode = Convert.ToBoolean(IsPriceWherethisFabricCode);
            obj.IsQuoteWherethisFabricCode = Convert.ToBoolean(IsQuoteWherethisFabricCode);
            obj.IsVisualLayoutWherethisFabricCode = Convert.ToBoolean(IsVisualLayoutWherethisFabricCode);
            obj.IsPatternSupportFabricWherethisFabricCode = Convert.ToBoolean(IsPatternSupportFabricWherethisFabricCode);
        }
        
        internal void SetBO(Indico.DAL.FabricCodeDetailsView obj)
        {
            // set the Indico.BusinessObjects.FabricCodeDetailsViewBO properties    
            this.Fabric = obj.Fabric;
            this.Code = obj.Code;
            this.Name = obj.Name;
            this.Material = obj.Material;
            this.GSM = obj.GSM;
            this.SupplierID = obj.SupplierID;
            this.Supplier = obj.Supplier;
            this.CountryID = obj.CountryID;
            this.Country = obj.Country;
            this.DenierCount = obj.DenierCount;
            this.Filaments = obj.Filaments;
            this.NickName = obj.NickName;
            this.SerialOrder = obj.SerialOrder;
            this.FabricPrice = obj.FabricPrice;
            this.LandedCurrency = obj.LandedCurrency;
            this.FabricWidth = obj.FabricWidth;
            this.UnitID = obj.UnitID;
            this.Unit = obj.Unit;
            this.FabricColorID = obj.FabricColorID;
            this.FabricColor = obj.FabricColor;
            this.ColorCode = obj.ColorCode;
            this.IsActive = obj.IsActive;
            this.IsPure = obj.IsPure;
            this.IsLiningFabric = obj.IsLiningFabric;
            this.IsCostSheetWherethisFabricCode = obj.IsCostSheetWherethisFabricCode;
            this.IsPriceWherethisFabricCode = obj.IsPriceWherethisFabricCode;
            this.IsQuoteWherethisFabricCode = obj.IsQuoteWherethisFabricCode;
            this.IsVisualLayoutWherethisFabricCode = obj.IsVisualLayoutWherethisFabricCode;
            this.IsPatternSupportFabricWherethisFabricCode = obj.IsPatternSupportFabricWherethisFabricCode;
        }
        
        internal void SetBO(Indico.BusinessObjects.FabricCodeDetailsViewBO obj)
        {
            // set this Indico.BusinessObjects.FabricCodeDetailsViewBO properties
            this.Fabric = obj.Fabric;
            this.Code = obj.Code;
            this.Name = obj.Name;
            this.Material = obj.Material;
            this.GSM = obj.GSM;
            this.SupplierID = obj.SupplierID;
            this.Supplier = obj.Supplier;
            this.CountryID = obj.CountryID;
            this.Country = obj.Country;
            this.DenierCount = obj.DenierCount;
            this.Filaments = obj.Filaments;
            this.NickName = obj.NickName;
            this.SerialOrder = obj.SerialOrder;
            this.FabricPrice = obj.FabricPrice;
            this.LandedCurrency = obj.LandedCurrency;
            this.FabricWidth = obj.FabricWidth;
            this.UnitID = obj.UnitID;
            this.Unit = obj.Unit;
            this.FabricColorID = obj.FabricColorID;
            this.FabricColor = obj.FabricColor;
            this.ColorCode = obj.ColorCode;
            this.IsActive = obj.IsActive;
            this.IsPure = obj.IsPure;
            this.IsLiningFabric = obj.IsLiningFabric;
            this.IsCostSheetWherethisFabricCode = obj.IsCostSheetWherethisFabricCode;
            this.IsPriceWherethisFabricCode = obj.IsPriceWherethisFabricCode;
            this.IsQuoteWherethisFabricCode = obj.IsQuoteWherethisFabricCode;
            this.IsVisualLayoutWherethisFabricCode = obj.IsVisualLayoutWherethisFabricCode;
            this.IsPatternSupportFabricWherethisFabricCode = obj.IsPatternSupportFabricWherethisFabricCode;
        }
        
        private static List<Indico.BusinessObjects.FabricCodeDetailsViewBO> IQueryableToList(IQueryable<Indico.DAL.FabricCodeDetailsView> oQuery)
        {
            List<Indico.DAL.FabricCodeDetailsView> oList = oQuery.ToList();
            List<Indico.BusinessObjects.FabricCodeDetailsViewBO> rList = new List<Indico.BusinessObjects.FabricCodeDetailsViewBO>(oList.Count);
            foreach (Indico.DAL.FabricCodeDetailsView o in oList)
            {
                Indico.BusinessObjects.FabricCodeDetailsViewBO obj = new Indico.BusinessObjects.FabricCodeDetailsViewBO(o);
                rList.Add(obj);
            }
            return rList;
        }
        #endregion
        
        #region BusinessObject methods
        
        #region GetAllObject
        public static List<Indico.BusinessObjects.FabricCodeDetailsViewBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public static List<Indico.BusinessObjects.FabricCodeDetailsViewBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public static List<Indico.BusinessObjects.FabricCodeDetailsViewBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public static List<Indico.BusinessObjects.FabricCodeDetailsViewBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.FabricCodeDetailsView> oQuery =
                (from o in context.FabricCodeDetailsView
                 orderby o.Fabric
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.Fabric).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.FabricCodeDetailsViewBO> fabriccodedetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return fabriccodedetailsviews;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.FabricCodeDetailsViewBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.FabricCodeDetailsViewBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.FabricCodeDetailsViewBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.FabricCodeDetailsViewBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.FabricCodeDetailsView> oQuery =
                (from o in context.FabricCodeDetailsView
                 where
                    (this.Fabric == null || this.Fabric == o.Fabric) &&
                    (this.Code == null || this.Code == o.Code) &&
                    (this.Name == null || this.Name == o.Name) &&
                    (this.Material == null || this.Material == o.Material) &&
                    (this.GSM == null || this.GSM == o.GSM) &&
                    (this.SupplierID == null || this.SupplierID == o.SupplierID) &&
                    (this.Supplier == null || this.Supplier == o.Supplier) &&
                    (this.CountryID == null || this.CountryID == o.CountryID) &&
                    (this.Country == null || this.Country == o.Country) &&
                    (this.DenierCount == null || this.DenierCount == o.DenierCount) &&
                    (this.Filaments == null || this.Filaments == o.Filaments) &&
                    (this.NickName == null || this.NickName == o.NickName) &&
                    (this.SerialOrder == null || this.SerialOrder == o.SerialOrder) &&
                    (this.FabricPrice == null || this.FabricPrice == o.FabricPrice) &&
                    (this.LandedCurrency == null || this.LandedCurrency == o.LandedCurrency) &&
                    (this.FabricWidth == null || this.FabricWidth == o.FabricWidth) &&
                    (this.UnitID == null || this.UnitID == o.UnitID) &&
                    (this.Unit == null || this.Unit == o.Unit) &&
                    (this.FabricColorID == null || this.FabricColorID == o.FabricColorID) &&
                    (this.FabricColor == null || this.FabricColor == o.FabricColor) &&
                    (this.ColorCode == null || this.ColorCode == o.ColorCode) &&
                    (this.IsActive == null || this.IsActive == o.IsActive) &&
                    (this.IsPure == null || this.IsPure == o.IsPure) &&
                    (this.IsLiningFabric == null || this.IsLiningFabric == o.IsLiningFabric) &&
                    (this.IsCostSheetWherethisFabricCode == null || this.IsCostSheetWherethisFabricCode == o.IsCostSheetWherethisFabricCode) &&
                    (this.IsPriceWherethisFabricCode == null || this.IsPriceWherethisFabricCode == o.IsPriceWherethisFabricCode) &&
                    (this.IsQuoteWherethisFabricCode == null || this.IsQuoteWherethisFabricCode == o.IsQuoteWherethisFabricCode) &&
                    (this.IsVisualLayoutWherethisFabricCode == null || this.IsVisualLayoutWherethisFabricCode == o.IsVisualLayoutWherethisFabricCode) &&
                    (this.IsPatternSupportFabricWherethisFabricCode == null || this.IsPatternSupportFabricWherethisFabricCode == o.IsPatternSupportFabricWherethisFabricCode) 
                 orderby o.Fabric
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.Fabric).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.FabricCodeDetailsViewBO> fabriccodedetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return fabriccodedetailsviews;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.FabricCodeDetailsView
                 where
                    (this.Fabric == null || this.Fabric == o.Fabric) &&
                    (this.Code == null || this.Code == o.Code) &&
                    (this.Name == null || this.Name == o.Name) &&
                    (this.Material == null || this.Material == o.Material) &&
                    (this.GSM == null || this.GSM == o.GSM) &&
                    (this.SupplierID == null || this.SupplierID == o.SupplierID) &&
                    (this.Supplier == null || this.Supplier == o.Supplier) &&
                    (this.CountryID == null || this.CountryID == o.CountryID) &&
                    (this.Country == null || this.Country == o.Country) &&
                    (this.DenierCount == null || this.DenierCount == o.DenierCount) &&
                    (this.Filaments == null || this.Filaments == o.Filaments) &&
                    (this.NickName == null || this.NickName == o.NickName) &&
                    (this.SerialOrder == null || this.SerialOrder == o.SerialOrder) &&
                    (this.FabricPrice == null || this.FabricPrice == o.FabricPrice) &&
                    (this.LandedCurrency == null || this.LandedCurrency == o.LandedCurrency) &&
                    (this.FabricWidth == null || this.FabricWidth == o.FabricWidth) &&
                    (this.UnitID == null || this.UnitID == o.UnitID) &&
                    (this.Unit == null || this.Unit == o.Unit) &&
                    (this.FabricColorID == null || this.FabricColorID == o.FabricColorID) &&
                    (this.FabricColor == null || this.FabricColor == o.FabricColor) &&
                    (this.ColorCode == null || this.ColorCode == o.ColorCode) &&
                    (this.IsActive == null || this.IsActive == o.IsActive) &&
                    (this.IsPure == null || this.IsPure == o.IsPure) &&
                    (this.IsLiningFabric == null || this.IsLiningFabric == o.IsLiningFabric) &&
                    (this.IsCostSheetWherethisFabricCode == null || this.IsCostSheetWherethisFabricCode == o.IsCostSheetWherethisFabricCode) &&
                    (this.IsPriceWherethisFabricCode == null || this.IsPriceWherethisFabricCode == o.IsPriceWherethisFabricCode) &&
                    (this.IsQuoteWherethisFabricCode == null || this.IsQuoteWherethisFabricCode == o.IsQuoteWherethisFabricCode) &&
                    (this.IsVisualLayoutWherethisFabricCode == null || this.IsVisualLayoutWherethisFabricCode == o.IsVisualLayoutWherethisFabricCode) &&
                    (this.IsPatternSupportFabricWherethisFabricCode == null || this.IsPatternSupportFabricWherethisFabricCode == o.IsPatternSupportFabricWherethisFabricCode) 
                 orderby o.Fabric
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.FabricCodeDetailsViewBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.FabricCodeDetailsViewBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.FabricCodeDetailsViewBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.FabricCodeDetailsViewBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.FabricCodeDetailsView> oQuery =
                (from o in context.FabricCodeDetailsView
                 where
                    (this.Fabric == null || o.Fabric == this.Fabric) &&
                    (this.Code == null || o.Code.Contains(this.Code)) &&
                    (this.Name == null || o.Name.Contains(this.Name)) &&
                    (this.Material == null || o.Material.Contains(this.Material)) &&
                    (this.GSM == null || o.GSM.Contains(this.GSM)) &&
                    (this.SupplierID == null || o.SupplierID == this.SupplierID) &&
                    (this.Supplier == null || o.Supplier.Contains(this.Supplier)) &&
                    (this.CountryID == null || o.CountryID == this.CountryID) &&
                    (this.Country == null || o.Country.Contains(this.Country)) &&
                    (this.DenierCount == null || o.DenierCount.Contains(this.DenierCount)) &&
                    (this.Filaments == null || o.Filaments.Contains(this.Filaments)) &&
                    (this.NickName == null || o.NickName.Contains(this.NickName)) &&
                    (this.SerialOrder == null || o.SerialOrder.Contains(this.SerialOrder)) &&
                    (this.FabricPrice == null || o.FabricPrice == this.FabricPrice) &&
                    (this.LandedCurrency == null || o.LandedCurrency == this.LandedCurrency) &&
                    (this.FabricWidth == null || o.FabricWidth.Contains(this.FabricWidth)) &&
                    (this.UnitID == null || o.UnitID == this.UnitID) &&
                    (this.Unit == null || o.Unit.Contains(this.Unit)) &&
                    (this.FabricColorID == null || o.FabricColorID == this.FabricColorID) &&
                    (this.FabricColor == null || o.FabricColor.Contains(this.FabricColor)) &&
                    (this.ColorCode == null || o.ColorCode.Contains(this.ColorCode)) &&
                    (this.IsActive == null || o.IsActive == this.IsActive) &&
                    (this.IsPure == null || o.IsPure == this.IsPure) &&
                    (this.IsLiningFabric == null || o.IsLiningFabric == this.IsLiningFabric) &&
                    (this.IsCostSheetWherethisFabricCode == null || o.IsCostSheetWherethisFabricCode == this.IsCostSheetWherethisFabricCode) &&
                    (this.IsPriceWherethisFabricCode == null || o.IsPriceWherethisFabricCode == this.IsPriceWherethisFabricCode) &&
                    (this.IsQuoteWherethisFabricCode == null || o.IsQuoteWherethisFabricCode == this.IsQuoteWherethisFabricCode) &&
                    (this.IsVisualLayoutWherethisFabricCode == null || o.IsVisualLayoutWherethisFabricCode == this.IsVisualLayoutWherethisFabricCode) &&
                    (this.IsPatternSupportFabricWherethisFabricCode == null || o.IsPatternSupportFabricWherethisFabricCode == this.IsPatternSupportFabricWherethisFabricCode) 
                 orderby o.Fabric
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.Fabric).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.FabricCodeDetailsViewBO> fabriccodedetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return fabriccodedetailsviews;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.FabricCodeDetailsView
                 where
                    (this.Fabric == null || o.Fabric == this.Fabric) &&
                    (this.Code == null || o.Code.Contains(this.Code)) &&
                    (this.Name == null || o.Name.Contains(this.Name)) &&
                    (this.Material == null || o.Material.Contains(this.Material)) &&
                    (this.GSM == null || o.GSM.Contains(this.GSM)) &&
                    (this.SupplierID == null || o.SupplierID == this.SupplierID) &&
                    (this.Supplier == null || o.Supplier.Contains(this.Supplier)) &&
                    (this.CountryID == null || o.CountryID == this.CountryID) &&
                    (this.Country == null || o.Country.Contains(this.Country)) &&
                    (this.DenierCount == null || o.DenierCount.Contains(this.DenierCount)) &&
                    (this.Filaments == null || o.Filaments.Contains(this.Filaments)) &&
                    (this.NickName == null || o.NickName.Contains(this.NickName)) &&
                    (this.SerialOrder == null || o.SerialOrder.Contains(this.SerialOrder)) &&
                    (this.FabricPrice == null || o.FabricPrice == this.FabricPrice) &&
                    (this.LandedCurrency == null || o.LandedCurrency == this.LandedCurrency) &&
                    (this.FabricWidth == null || o.FabricWidth.Contains(this.FabricWidth)) &&
                    (this.UnitID == null || o.UnitID == this.UnitID) &&
                    (this.Unit == null || o.Unit.Contains(this.Unit)) &&
                    (this.FabricColorID == null || o.FabricColorID == this.FabricColorID) &&
                    (this.FabricColor == null || o.FabricColor.Contains(this.FabricColor)) &&
                    (this.ColorCode == null || o.ColorCode.Contains(this.ColorCode)) &&
                    (this.IsActive == null || o.IsActive == this.IsActive) &&
                    (this.IsPure == null || o.IsPure == this.IsPure) &&
                    (this.IsLiningFabric == null || o.IsLiningFabric == this.IsLiningFabric) &&
                    (this.IsCostSheetWherethisFabricCode == null || o.IsCostSheetWherethisFabricCode == this.IsCostSheetWherethisFabricCode) &&
                    (this.IsPriceWherethisFabricCode == null || o.IsPriceWherethisFabricCode == this.IsPriceWherethisFabricCode) &&
                    (this.IsQuoteWherethisFabricCode == null || o.IsQuoteWherethisFabricCode == this.IsQuoteWherethisFabricCode) &&
                    (this.IsVisualLayoutWherethisFabricCode == null || o.IsVisualLayoutWherethisFabricCode == this.IsVisualLayoutWherethisFabricCode) &&
                    (this.IsPatternSupportFabricWherethisFabricCode == null || o.IsPatternSupportFabricWherethisFabricCode == this.IsPatternSupportFabricWherethisFabricCode) 
                 orderby o.Fabric
                 select o).Count();
            
        }
        
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.FabricCodeDetailsViewBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.FabricCodeDetailsViewBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.FabricCodeDetailsViewBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.FabricCodeDetailsViewBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.FabricCodeDetailsView> oQuery =
                (from o in context.FabricCodeDetailsView
                 where
                    (this.Fabric == null || this.Fabric == o.Fabric) && 
                    (this.SupplierID == null || this.SupplierID == o.SupplierID) && 
                    (this.CountryID == null || this.CountryID == o.CountryID) && 
                    (this.FabricPrice == null || this.FabricPrice == o.FabricPrice) && 
                    (this.LandedCurrency == null || this.LandedCurrency == o.LandedCurrency) && 
                    (this.UnitID == null || this.UnitID == o.UnitID) && 
                    (this.FabricColorID == null || this.FabricColorID == o.FabricColorID) && 
                    (this.IsActive == null || this.IsActive == o.IsActive) && 
                    (this.IsPure == null || this.IsPure == o.IsPure) && 
                    (this.IsLiningFabric == null || this.IsLiningFabric == o.IsLiningFabric) && 
                    (this.IsCostSheetWherethisFabricCode == null || this.IsCostSheetWherethisFabricCode == o.IsCostSheetWherethisFabricCode) && 
                    (this.IsPriceWherethisFabricCode == null || this.IsPriceWherethisFabricCode == o.IsPriceWherethisFabricCode) && 
                    (this.IsQuoteWherethisFabricCode == null || this.IsQuoteWherethisFabricCode == o.IsQuoteWherethisFabricCode) && 
                    (this.IsVisualLayoutWherethisFabricCode == null || this.IsVisualLayoutWherethisFabricCode == o.IsVisualLayoutWherethisFabricCode) && 
                    (this.IsPatternSupportFabricWherethisFabricCode == null || this.IsPatternSupportFabricWherethisFabricCode == o.IsPatternSupportFabricWherethisFabricCode) && 
                    ((o.Code.Contains(this.Code)) ||
                    (o.Name.Contains(this.Name)) ||
                    (o.Material.Contains(this.Material)) ||
                    (o.GSM.Contains(this.GSM)) ||
                    (o.Supplier.Contains(this.Supplier)) ||
                    (o.Country.Contains(this.Country)) ||
                    (o.DenierCount.Contains(this.DenierCount)) ||
                    (o.Filaments.Contains(this.Filaments)) ||
                    (o.NickName.Contains(this.NickName)) ||
                    (o.SerialOrder.Contains(this.SerialOrder)) ||
                    (o.FabricWidth.Contains(this.FabricWidth)) ||
                    (o.Unit.Contains(this.Unit)) ||
                    (o.FabricColor.Contains(this.FabricColor)) ||
                    (o.ColorCode.Contains(this.ColorCode)) ||
                    (this.Code == null && this.Name == null && this.Material == null && this.GSM == null && this.Supplier == null && this.Country == null && this.DenierCount == null && this.Filaments == null && this.NickName == null && this.SerialOrder == null && this.FabricWidth == null && this.Unit == null && this.FabricColor == null && this.ColorCode == null ))
                 orderby o.Fabric
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.Fabric).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.FabricCodeDetailsViewBO> fabriccodedetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return fabriccodedetailsviews;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.FabricCodeDetailsView
                 where
                    (this.Fabric == null || this.Fabric == o.Fabric) && 
                    (this.SupplierID == null || this.SupplierID == o.SupplierID) && 
                    (this.CountryID == null || this.CountryID == o.CountryID) && 
                    (this.FabricPrice == null || this.FabricPrice == o.FabricPrice) && 
                    (this.LandedCurrency == null || this.LandedCurrency == o.LandedCurrency) && 
                    (this.UnitID == null || this.UnitID == o.UnitID) && 
                    (this.FabricColorID == null || this.FabricColorID == o.FabricColorID) && 
                    (this.IsActive == null || this.IsActive == o.IsActive) && 
                    (this.IsPure == null || this.IsPure == o.IsPure) && 
                    (this.IsLiningFabric == null || this.IsLiningFabric == o.IsLiningFabric) && 
                    (this.IsCostSheetWherethisFabricCode == null || this.IsCostSheetWherethisFabricCode == o.IsCostSheetWherethisFabricCode) && 
                    (this.IsPriceWherethisFabricCode == null || this.IsPriceWherethisFabricCode == o.IsPriceWherethisFabricCode) && 
                    (this.IsQuoteWherethisFabricCode == null || this.IsQuoteWherethisFabricCode == o.IsQuoteWherethisFabricCode) && 
                    (this.IsVisualLayoutWherethisFabricCode == null || this.IsVisualLayoutWherethisFabricCode == o.IsVisualLayoutWherethisFabricCode) && 
                    (this.IsPatternSupportFabricWherethisFabricCode == null || this.IsPatternSupportFabricWherethisFabricCode == o.IsPatternSupportFabricWherethisFabricCode) && 
                    ((o.Code.Contains(this.Code)) ||
                    (o.Name.Contains(this.Name)) ||
                    (o.Material.Contains(this.Material)) ||
                    (o.GSM.Contains(this.GSM)) ||
                    (o.Supplier.Contains(this.Supplier)) ||
                    (o.Country.Contains(this.Country)) ||
                    (o.DenierCount.Contains(this.DenierCount)) ||
                    (o.Filaments.Contains(this.Filaments)) ||
                    (o.NickName.Contains(this.NickName)) ||
                    (o.SerialOrder.Contains(this.SerialOrder)) ||
                    (o.FabricWidth.Contains(this.FabricWidth)) ||
                    (o.Unit.Contains(this.Unit)) ||
                    (o.FabricColor.Contains(this.FabricColor)) ||
                    (o.ColorCode.Contains(this.ColorCode)) ||
                    (this.Code == null && this.Name == null && this.Material == null && this.GSM == null && this.Supplier == null && this.Country == null && this.DenierCount == null && this.Filaments == null && this.NickName == null && this.SerialOrder == null && this.FabricWidth == null && this.Unit == null && this.FabricColor == null && this.ColorCode == null ))
                 orderby o.Fabric
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.FabricCodeDetailsViewBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.FabricCodeDetailsViewBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.FabricCodeDetailsViewBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.FabricCodeDetailsViewBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.FabricCodeDetailsViewBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.FabricCodeDetailsViewBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.FabricCodeDetailsViewBO))
                return 1;
            Indico.BusinessObjects.FabricCodeDetailsViewBOComparer c = new Indico.BusinessObjects.FabricCodeDetailsViewBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.FabricCodeDetailsViewBO);
        }

        #endregion
        #endregion
    }
    
    #region FabricCodeDetailsViewBOComparer
    public class FabricCodeDetailsViewBOComparer : IComparer<Indico.BusinessObjects.FabricCodeDetailsViewBO>
    {
        private string propertyToCompareName;
        public FabricCodeDetailsViewBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.FabricCodeDetailsViewBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.FabricCodeDetailsViewBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public FabricCodeDetailsViewBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.FabricCodeDetailsViewBO> Members
        public int Compare(Indico.BusinessObjects.FabricCodeDetailsViewBO x, Indico.BusinessObjects.FabricCodeDetailsViewBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.FabricCodeDetailsViewBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.FabricCodeDetailsViewBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.FabricCodeDetailsViewBO x, Indico.BusinessObjects.FabricCodeDetailsViewBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
