// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

//using Indico.BusinessObjects.Util;
//using Indico.BusinessObjects;
using Indico.DAL;


namespace Indico.BusinessObjects
{
    /// <summary>
    /// ReturnInvoiceDetailsBO provides the business logic for maintaining Indico.DAL.ReturnInvoiceDetails records in the data store.
    /// </summary>
    /// <remarks>
    /// ReturnInvoiceDetailsBO provides the business logic for maintaining Indico.DAL.ReturnInvoiceDetails records in the data store. 
    /// By default it provides basic Search methods for retrieving Indico.DAL.ReturnInvoiceDetails
    /// records using the ReturnInvoiceDetails DAL class. Other methods implement atomic chunks of Business Logic according to
    /// the business rules.
    /// </remarks>
    public partial class ReturnInvoiceDetailsBO : BusinessObject, IComparable
    {
        #region fields
        private int? _invoice;
        private string _invoiceNo;
        private string _invoiceDate;
        private string _shipTo;
        private string _aWBNo;
        private string _eTD;
        private string _indimanInvoiceNo;
        private string _shipmentMode;
        private string _indimanInvoiceDate;
        private decimal? _factoryRate;
        private decimal? _indimanRate;
        private int? _qty;
        private decimal? _factoryTotal;
        private decimal? _indimanTotal;
        private int? _weeklyProductionCapacity;
        private string _status;
        private string _billTo;
        #endregion
        
        #region Properties
        /// <summary></summary>
        public int? Invoice
        {   get {return _invoice;}
            set 
            {
                _invoice = value;
            }
        }
        /// <summary></summary>
        public string InvoiceNo
        {   get {return _invoiceNo;}
            set 
            {
                _invoiceNo = value;
            }
        }
        /// <summary></summary>
        public string InvoiceDate
        {   get {return _invoiceDate;}
            set 
            {
                _invoiceDate = value;
            }
        }
        /// <summary></summary>
        public string ShipTo
        {   get {return _shipTo;}
            set 
            {
                _shipTo = value;
            }
        }
        /// <summary></summary>
        public string AWBNo
        {   get {return _aWBNo;}
            set 
            {
                _aWBNo = value;
            }
        }
        /// <summary></summary>
        public string ETD
        {   get {return _eTD;}
            set 
            {
                _eTD = value;
            }
        }
        /// <summary></summary>
        public string IndimanInvoiceNo
        {   get {return _indimanInvoiceNo;}
            set 
            {
                _indimanInvoiceNo = value;
            }
        }
        /// <summary></summary>
        public string ShipmentMode
        {   get {return _shipmentMode;}
            set 
            {
                _shipmentMode = value;
            }
        }
        /// <summary></summary>
        public string IndimanInvoiceDate
        {   get {return _indimanInvoiceDate;}
            set 
            {
                _indimanInvoiceDate = value;
            }
        }
        /// <summary></summary>
        public decimal? FactoryRate
        {   get {return _factoryRate;}
            set 
            {
                _factoryRate = value;
            }
        }
        /// <summary></summary>
        public decimal? IndimanRate
        {   get {return _indimanRate;}
            set 
            {
                _indimanRate = value;
            }
        }
        /// <summary></summary>
        public int? Qty
        {   get {return _qty;}
            set 
            {
                _qty = value;
            }
        }
        /// <summary></summary>
        public decimal? FactoryTotal
        {   get {return _factoryTotal;}
            set 
            {
                _factoryTotal = value;
            }
        }
        /// <summary></summary>
        public decimal? IndimanTotal
        {   get {return _indimanTotal;}
            set 
            {
                _indimanTotal = value;
            }
        }
        /// <summary></summary>
        public int? WeeklyProductionCapacity
        {   get {return _weeklyProductionCapacity;}
            set 
            {
                _weeklyProductionCapacity = value;
            }
        }
        /// <summary></summary>
        public string Status
        {   get {return _status;}
            set 
            {
                _status = value;
            }
        }
        /// <summary></summary>
        public string BillTo
        {   get {return _billTo;}
            set 
            {
                _billTo = value;
            }
        }
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the ReturnInvoiceDetailsBO class using the supplied Indico.DAL.ReturnInvoiceDetails. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.ReturnInvoiceDetails whose properties will be used to initialise the ReturnInvoiceDetailsBO</param>
        internal ReturnInvoiceDetailsBO(Indico.DAL.ReturnInvoiceDetails obj)
        {
            // set the properties from the Indico.DAL.ReturnInvoiceDetails 
            this.Invoice = obj.Invoice;
            this.InvoiceNo = obj.InvoiceNo;
            this.InvoiceDate = obj.InvoiceDate;
            this.ShipTo = obj.ShipTo;
            this.AWBNo = obj.AWBNo;
            this.ETD = obj.ETD;
            this.IndimanInvoiceNo = obj.IndimanInvoiceNo;
            this.ShipmentMode = obj.ShipmentMode;
            this.IndimanInvoiceDate = obj.IndimanInvoiceDate;
            this.FactoryRate = obj.FactoryRate;
            this.IndimanRate = obj.IndimanRate;
            this.Qty = obj.Qty;
            this.FactoryTotal = obj.FactoryTotal;
            this.IndimanTotal = obj.IndimanTotal;
            this.WeeklyProductionCapacity = obj.WeeklyProductionCapacity;
            this.Status = obj.Status;
            this.BillTo = obj.BillTo;
        }
        #endregion
        
        #region Internal utility methods
        internal void SetDAL(Indico.DAL.ReturnInvoiceDetails obj, IndicoEntities context)
        {
            // set the Indico.DAL.ReturnInvoiceDetails properties
            obj.Invoice = Convert.ToInt32(Invoice);
            obj.InvoiceNo = InvoiceNo;
            obj.InvoiceDate = InvoiceDate;
            obj.ShipTo = ShipTo;
            obj.AWBNo = AWBNo;
            obj.ETD = ETD;
            obj.IndimanInvoiceNo = IndimanInvoiceNo;
            obj.ShipmentMode = ShipmentMode;
            obj.IndimanInvoiceDate = IndimanInvoiceDate;
            obj.FactoryRate = Convert.ToDecimal(FactoryRate);
            obj.IndimanRate = Convert.ToDecimal(IndimanRate);
            obj.Qty = Convert.ToInt32(Qty);
            obj.FactoryTotal = Convert.ToDecimal(FactoryTotal);
            obj.IndimanTotal = Convert.ToDecimal(IndimanTotal);
            obj.WeeklyProductionCapacity = Convert.ToInt32(WeeklyProductionCapacity);
            obj.Status = Status;
            obj.BillTo = BillTo;
        }
        
        internal void SetBO(Indico.DAL.ReturnInvoiceDetails obj)
        {
            // set the Indico.BusinessObjects.ReturnInvoiceDetailsBO properties    
            this.Invoice = obj.Invoice;
            this.InvoiceNo = obj.InvoiceNo;
            this.InvoiceDate = obj.InvoiceDate;
            this.ShipTo = obj.ShipTo;
            this.AWBNo = obj.AWBNo;
            this.ETD = obj.ETD;
            this.IndimanInvoiceNo = obj.IndimanInvoiceNo;
            this.ShipmentMode = obj.ShipmentMode;
            this.IndimanInvoiceDate = obj.IndimanInvoiceDate;
            this.FactoryRate = obj.FactoryRate;
            this.IndimanRate = obj.IndimanRate;
            this.Qty = obj.Qty;
            this.FactoryTotal = obj.FactoryTotal;
            this.IndimanTotal = obj.IndimanTotal;
            this.WeeklyProductionCapacity = obj.WeeklyProductionCapacity;
            this.Status = obj.Status;
            this.BillTo = obj.BillTo;
        }
        
        internal void SetBO(Indico.BusinessObjects.ReturnInvoiceDetailsBO obj)
        {
            // set this Indico.BusinessObjects.ReturnInvoiceDetailsBO properties
            this.Invoice = obj.Invoice;
            this.InvoiceNo = obj.InvoiceNo;
            this.InvoiceDate = obj.InvoiceDate;
            this.ShipTo = obj.ShipTo;
            this.AWBNo = obj.AWBNo;
            this.ETD = obj.ETD;
            this.IndimanInvoiceNo = obj.IndimanInvoiceNo;
            this.ShipmentMode = obj.ShipmentMode;
            this.IndimanInvoiceDate = obj.IndimanInvoiceDate;
            this.FactoryRate = obj.FactoryRate;
            this.IndimanRate = obj.IndimanRate;
            this.Qty = obj.Qty;
            this.FactoryTotal = obj.FactoryTotal;
            this.IndimanTotal = obj.IndimanTotal;
            this.WeeklyProductionCapacity = obj.WeeklyProductionCapacity;
            this.Status = obj.Status;
            this.BillTo = obj.BillTo;
        }
        
        private static List<Indico.BusinessObjects.ReturnInvoiceDetailsBO> IQueryableToList(IQueryable<Indico.DAL.ReturnInvoiceDetails> oQuery)
        {
            
            List<Indico.DAL.ReturnInvoiceDetails> oList = oQuery.ToList();
            List<Indico.BusinessObjects.ReturnInvoiceDetailsBO> rList = new List<Indico.BusinessObjects.ReturnInvoiceDetailsBO>(oList.Count);
            foreach (Indico.DAL.ReturnInvoiceDetails o in oList)
            {
                Indico.BusinessObjects.ReturnInvoiceDetailsBO obj = new Indico.BusinessObjects.ReturnInvoiceDetailsBO(o);
                rList.Add(obj);
            }
            return rList;
            
        }
        #endregion
        
        #region BusinessObject methods
        
        #region GetAllObject
        public static List<Indico.BusinessObjects.ReturnInvoiceDetailsBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public static List<Indico.BusinessObjects.ReturnInvoiceDetailsBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public static List<Indico.BusinessObjects.ReturnInvoiceDetailsBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public static List<Indico.BusinessObjects.ReturnInvoiceDetailsBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnInvoiceDetails> oQuery =
                (from o in context.ReturnInvoiceDetails
                 orderby o.Invoice
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.Invoice).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnInvoiceDetailsBO> returninvoicedetailss = IQueryableToList(oQuery);
            context.Dispose();
            return returninvoicedetailss;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.ReturnInvoiceDetailsBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.ReturnInvoiceDetailsBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnInvoiceDetailsBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnInvoiceDetailsBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnInvoiceDetails> oQuery =
                (from o in context.ReturnInvoiceDetails
                 where
                    (this.Invoice == null || this.Invoice == o.Invoice) &&
                    (this.InvoiceNo == null || this.InvoiceNo == o.InvoiceNo) &&
                    (this.InvoiceDate == null || this.InvoiceDate == o.InvoiceDate) &&
                    (this.ShipTo == null || this.ShipTo == o.ShipTo) &&
                    (this.AWBNo == null || this.AWBNo == o.AWBNo) &&
                    (this.ETD == null || this.ETD == o.ETD) &&
                    (this.IndimanInvoiceNo == null || this.IndimanInvoiceNo == o.IndimanInvoiceNo) &&
                    (this.ShipmentMode == null || this.ShipmentMode == o.ShipmentMode) &&
                    (this.IndimanInvoiceDate == null || this.IndimanInvoiceDate == o.IndimanInvoiceDate) &&
                    (this.FactoryRate == null || this.FactoryRate == o.FactoryRate) &&
                    (this.IndimanRate == null || this.IndimanRate == o.IndimanRate) &&
                    (this.Qty == null || this.Qty == o.Qty) &&
                    (this.FactoryTotal == null || this.FactoryTotal == o.FactoryTotal) &&
                    (this.IndimanTotal == null || this.IndimanTotal == o.IndimanTotal) &&
                    (this.WeeklyProductionCapacity == null || this.WeeklyProductionCapacity == o.WeeklyProductionCapacity) &&
                    (this.Status == null || this.Status == o.Status) &&
                    (this.BillTo == null || this.BillTo == o.BillTo) 
                 orderby o.Invoice
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.Invoice).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnInvoiceDetailsBO> returninvoicedetailss = IQueryableToList(oQuery);
            context.Dispose();
            return returninvoicedetailss;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnInvoiceDetails
                 where
                    (this.Invoice == null || this.Invoice == o.Invoice) &&
                    (this.InvoiceNo == null || this.InvoiceNo == o.InvoiceNo) &&
                    (this.InvoiceDate == null || this.InvoiceDate == o.InvoiceDate) &&
                    (this.ShipTo == null || this.ShipTo == o.ShipTo) &&
                    (this.AWBNo == null || this.AWBNo == o.AWBNo) &&
                    (this.ETD == null || this.ETD == o.ETD) &&
                    (this.IndimanInvoiceNo == null || this.IndimanInvoiceNo == o.IndimanInvoiceNo) &&
                    (this.ShipmentMode == null || this.ShipmentMode == o.ShipmentMode) &&
                    (this.IndimanInvoiceDate == null || this.IndimanInvoiceDate == o.IndimanInvoiceDate) &&
                    (this.FactoryRate == null || this.FactoryRate == o.FactoryRate) &&
                    (this.IndimanRate == null || this.IndimanRate == o.IndimanRate) &&
                    (this.Qty == null || this.Qty == o.Qty) &&
                    (this.FactoryTotal == null || this.FactoryTotal == o.FactoryTotal) &&
                    (this.IndimanTotal == null || this.IndimanTotal == o.IndimanTotal) &&
                    (this.WeeklyProductionCapacity == null || this.WeeklyProductionCapacity == o.WeeklyProductionCapacity) &&
                    (this.Status == null || this.Status == o.Status) &&
                    (this.BillTo == null || this.BillTo == o.BillTo) 
                 orderby o.Invoice
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.ReturnInvoiceDetailsBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.ReturnInvoiceDetailsBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnInvoiceDetailsBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnInvoiceDetailsBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnInvoiceDetails> oQuery =
                (from o in context.ReturnInvoiceDetails
                 where
                    (this.Invoice == null || o.Invoice == this.Invoice) &&
                    (this.InvoiceNo == null || o.InvoiceNo.Contains(this.InvoiceNo)) &&
                    (this.InvoiceDate == null || o.InvoiceDate.Contains(this.InvoiceDate)) &&
                    (this.ShipTo == null || o.ShipTo.Contains(this.ShipTo)) &&
                    (this.AWBNo == null || o.AWBNo.Contains(this.AWBNo)) &&
                    (this.ETD == null || o.ETD.Contains(this.ETD)) &&
                    (this.IndimanInvoiceNo == null || o.IndimanInvoiceNo.Contains(this.IndimanInvoiceNo)) &&
                    (this.ShipmentMode == null || o.ShipmentMode.Contains(this.ShipmentMode)) &&
                    (this.IndimanInvoiceDate == null || o.IndimanInvoiceDate.Contains(this.IndimanInvoiceDate)) &&
                    (this.FactoryRate == null || o.FactoryRate == this.FactoryRate) &&
                    (this.IndimanRate == null || o.IndimanRate == this.IndimanRate) &&
                    (this.Qty == null || o.Qty == this.Qty) &&
                    (this.FactoryTotal == null || o.FactoryTotal == this.FactoryTotal) &&
                    (this.IndimanTotal == null || o.IndimanTotal == this.IndimanTotal) &&
                    (this.WeeklyProductionCapacity == null || o.WeeklyProductionCapacity == this.WeeklyProductionCapacity) &&
                    (this.Status == null || o.Status.Contains(this.Status)) &&
                    (this.BillTo == null || o.BillTo.Contains(this.BillTo)) 
                 orderby o.Invoice
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.Invoice).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnInvoiceDetailsBO> returninvoicedetailss = IQueryableToList(oQuery);
            context.Dispose();
            return returninvoicedetailss;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnInvoiceDetails
                 where
                    (this.Invoice == null || o.Invoice == this.Invoice) &&
                    (this.InvoiceNo == null || o.InvoiceNo.Contains(this.InvoiceNo)) &&
                    (this.InvoiceDate == null || o.InvoiceDate.Contains(this.InvoiceDate)) &&
                    (this.ShipTo == null || o.ShipTo.Contains(this.ShipTo)) &&
                    (this.AWBNo == null || o.AWBNo.Contains(this.AWBNo)) &&
                    (this.ETD == null || o.ETD.Contains(this.ETD)) &&
                    (this.IndimanInvoiceNo == null || o.IndimanInvoiceNo.Contains(this.IndimanInvoiceNo)) &&
                    (this.ShipmentMode == null || o.ShipmentMode.Contains(this.ShipmentMode)) &&
                    (this.IndimanInvoiceDate == null || o.IndimanInvoiceDate.Contains(this.IndimanInvoiceDate)) &&
                    (this.FactoryRate == null || o.FactoryRate == this.FactoryRate) &&
                    (this.IndimanRate == null || o.IndimanRate == this.IndimanRate) &&
                    (this.Qty == null || o.Qty == this.Qty) &&
                    (this.FactoryTotal == null || o.FactoryTotal == this.FactoryTotal) &&
                    (this.IndimanTotal == null || o.IndimanTotal == this.IndimanTotal) &&
                    (this.WeeklyProductionCapacity == null || o.WeeklyProductionCapacity == this.WeeklyProductionCapacity) &&
                    (this.Status == null || o.Status.Contains(this.Status)) &&
                    (this.BillTo == null || o.BillTo.Contains(this.BillTo)) 
                 orderby o.Invoice
                 select o).Count();
            
        }
        
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.ReturnInvoiceDetailsBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.ReturnInvoiceDetailsBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnInvoiceDetailsBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnInvoiceDetailsBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnInvoiceDetails> oQuery =
                (from o in context.ReturnInvoiceDetails
                 where
                    (this.Invoice == null || this.Invoice == o.Invoice) && 
                    (this.FactoryRate == null || this.FactoryRate == o.FactoryRate) && 
                    (this.IndimanRate == null || this.IndimanRate == o.IndimanRate) && 
                    (this.Qty == null || this.Qty == o.Qty) && 
                    (this.FactoryTotal == null || this.FactoryTotal == o.FactoryTotal) && 
                    (this.IndimanTotal == null || this.IndimanTotal == o.IndimanTotal) && 
                    (this.WeeklyProductionCapacity == null || this.WeeklyProductionCapacity == o.WeeklyProductionCapacity) && 
                    ((o.InvoiceNo.Contains(this.InvoiceNo)) ||
                    (o.InvoiceDate.Contains(this.InvoiceDate)) ||
                    (o.ShipTo.Contains(this.ShipTo)) ||
                    (o.AWBNo.Contains(this.AWBNo)) ||
                    (o.ETD.Contains(this.ETD)) ||
                    (o.IndimanInvoiceNo.Contains(this.IndimanInvoiceNo)) ||
                    (o.ShipmentMode.Contains(this.ShipmentMode)) ||
                    (o.IndimanInvoiceDate.Contains(this.IndimanInvoiceDate)) ||
                    (o.Status.Contains(this.Status)) ||
                    (o.BillTo.Contains(this.BillTo)) ||
                    (this.InvoiceNo == null && this.InvoiceDate == null && this.ShipTo == null && this.AWBNo == null && this.ETD == null && this.IndimanInvoiceNo == null && this.ShipmentMode == null && this.IndimanInvoiceDate == null && this.Status == null && this.BillTo == null ))
                 orderby o.Invoice
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.Invoice).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnInvoiceDetailsBO> returninvoicedetailss = IQueryableToList(oQuery);
            context.Dispose();
            return returninvoicedetailss;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnInvoiceDetails
                 where
                    (this.Invoice == null || this.Invoice == o.Invoice) && 
                    (this.FactoryRate == null || this.FactoryRate == o.FactoryRate) && 
                    (this.IndimanRate == null || this.IndimanRate == o.IndimanRate) && 
                    (this.Qty == null || this.Qty == o.Qty) && 
                    (this.FactoryTotal == null || this.FactoryTotal == o.FactoryTotal) && 
                    (this.IndimanTotal == null || this.IndimanTotal == o.IndimanTotal) && 
                    (this.WeeklyProductionCapacity == null || this.WeeklyProductionCapacity == o.WeeklyProductionCapacity) && 
                    ((o.InvoiceNo.Contains(this.InvoiceNo)) ||
                    (o.InvoiceDate.Contains(this.InvoiceDate)) ||
                    (o.ShipTo.Contains(this.ShipTo)) ||
                    (o.AWBNo.Contains(this.AWBNo)) ||
                    (o.ETD.Contains(this.ETD)) ||
                    (o.IndimanInvoiceNo.Contains(this.IndimanInvoiceNo)) ||
                    (o.ShipmentMode.Contains(this.ShipmentMode)) ||
                    (o.IndimanInvoiceDate.Contains(this.IndimanInvoiceDate)) ||
                    (o.Status.Contains(this.Status)) ||
                    (o.BillTo.Contains(this.BillTo)) ||
                    (this.InvoiceNo == null && this.InvoiceDate == null && this.ShipTo == null && this.AWBNo == null && this.ETD == null && this.IndimanInvoiceNo == null && this.ShipmentMode == null && this.IndimanInvoiceDate == null && this.Status == null && this.BillTo == null ))
                 orderby o.Invoice
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.ReturnInvoiceDetailsBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.ReturnInvoiceDetailsBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.ReturnInvoiceDetailsBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.ReturnInvoiceDetailsBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.ReturnInvoiceDetailsBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.ReturnInvoiceDetailsBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.ReturnInvoiceDetailsBO))
                return 1;
            Indico.BusinessObjects.ReturnInvoiceDetailsBOComparer c = new Indico.BusinessObjects.ReturnInvoiceDetailsBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.ReturnInvoiceDetailsBO);
        }

        #endregion
        #endregion
    }
    
    #region ReturnInvoiceDetailsBOComparer
    public class ReturnInvoiceDetailsBOComparer : IComparer<Indico.BusinessObjects.ReturnInvoiceDetailsBO>
    {
        private string propertyToCompareName;
        public ReturnInvoiceDetailsBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.ReturnInvoiceDetailsBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.ReturnInvoiceDetailsBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public ReturnInvoiceDetailsBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.ReturnInvoiceDetailsBO> Members
        public int Compare(Indico.BusinessObjects.ReturnInvoiceDetailsBO x, Indico.BusinessObjects.ReturnInvoiceDetailsBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.ReturnInvoiceDetailsBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.ReturnInvoiceDetailsBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.ReturnInvoiceDetailsBO x, Indico.BusinessObjects.ReturnInvoiceDetailsBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
