// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

//using Indico.BusinessObjects.Util;
//using Indico.BusinessObjects;
using Indico.DAL;


namespace Indico.BusinessObjects
{
    /// <summary>
    /// IndicoCIFPriceViewBO provides the business logic for maintaining Indico.DAL.IndicoCIFPriceView records in the data store.
    /// </summary>
    /// <remarks>
    /// IndicoCIFPriceViewBO provides the business logic for maintaining Indico.DAL.IndicoCIFPriceView records in the data store. 
    /// By default it provides basic Search methods for retrieving Indico.DAL.IndicoCIFPriceView
    /// records using the IndicoCIFPriceView DAL class. Other methods implement atomic chunks of Business Logic according to
    /// the business rules.
    /// </remarks>
    public partial class IndicoCIFPriceViewBO : BusinessObject, IComparable
    {
        #region fields
        private int? _costSheetId;
        private string _coreCategory;
        private string _itemCategory;
        private int? _patternId;
        private string _patternCode;
        private string _patternNickName;
        private int? _fabricId;
        private string _fabricCode;
        private string _fabricName;
        private decimal? _fabricPrice;
        private decimal? _conversionFactor;
        private decimal? _indimanPrice;
        private decimal? _quotedFOBPrice;
        private decimal? _fOBCost;
        private string _lastModifier;
        private DateTime? _modifiedDate;
        private string _remarks;
        private decimal? _actMgn;
        private decimal? _quotedMp;
        #endregion
        
        #region Properties
        /// <summary></summary>
        public int? CostSheetId
        {   get {return _costSheetId;}
            set 
            {
                _costSheetId = value;
            }
        }
        /// <summary></summary>
        public string CoreCategory
        {   get {return _coreCategory;}
            set 
            {
                _coreCategory = value;
            }
        }
        /// <summary></summary>
        public string ItemCategory
        {   get {return _itemCategory;}
            set 
            {
                _itemCategory = value;
            }
        }
        /// <summary></summary>
        public int? PatternId
        {   get {return _patternId;}
            set 
            {
                _patternId = value;
            }
        }
        /// <summary></summary>
        public string PatternCode
        {   get {return _patternCode;}
            set 
            {
                _patternCode = value;
            }
        }
        /// <summary></summary>
        public string PatternNickName
        {   get {return _patternNickName;}
            set 
            {
                _patternNickName = value;
            }
        }
        /// <summary></summary>
        public int? FabricId
        {   get {return _fabricId;}
            set 
            {
                _fabricId = value;
            }
        }
        /// <summary></summary>
        public string FabricCode
        {   get {return _fabricCode;}
            set 
            {
                _fabricCode = value;
            }
        }
        /// <summary></summary>
        public string FabricName
        {   get {return _fabricName;}
            set 
            {
                _fabricName = value;
            }
        }
        /// <summary></summary>
        public decimal? FabricPrice
        {   get {return _fabricPrice;}
            set 
            {
                _fabricPrice = value;
            }
        }
        /// <summary></summary>
        public decimal? ConversionFactor
        {   get {return _conversionFactor;}
            set 
            {
                _conversionFactor = value;
            }
        }
        /// <summary></summary>
        public decimal? IndimanPrice
        {   get {return _indimanPrice;}
            set 
            {
                _indimanPrice = value;
            }
        }
        /// <summary></summary>
        public decimal? QuotedFOBPrice
        {   get {return _quotedFOBPrice;}
            set 
            {
                _quotedFOBPrice = value;
            }
        }
        /// <summary></summary>
        public decimal? FOBCost
        {   get {return _fOBCost;}
            set 
            {
                _fOBCost = value;
            }
        }
        /// <summary></summary>
        public string LastModifier
        {   get {return _lastModifier;}
            set 
            {
                _lastModifier = value;
            }
        }
        /// <summary></summary>
        public DateTime? ModifiedDate
        {   get {return _modifiedDate;}
            set 
            {
                _modifiedDate = value;
            }
        }
        /// <summary></summary>
        public string Remarks
        {   get {return _remarks;}
            set 
            {
                _remarks = value;
            }
        }
        /// <summary></summary>
        public decimal? ActMgn
        {   get {return _actMgn;}
            set 
            {
                _actMgn = value;
            }
        }
        /// <summary></summary>
        public decimal? QuotedMp
        {   get {return _quotedMp;}
            set 
            {
                _quotedMp = value;
            }
        }
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the IndicoCIFPriceViewBO class using the supplied Indico.DAL.IndicoCIFPriceView. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.IndicoCIFPriceView whose properties will be used to initialise the IndicoCIFPriceViewBO</param>
        internal IndicoCIFPriceViewBO(Indico.DAL.IndicoCIFPriceView obj)
        {
            // set the properties from the Indico.DAL.IndicoCIFPriceView 
            this.CostSheetId = obj.CostSheetId;
            this.CoreCategory = obj.CoreCategory;
            this.ItemCategory = obj.ItemCategory;
            this.PatternId = obj.PatternId;
            this.PatternCode = obj.PatternCode;
            this.PatternNickName = obj.PatternNickName;
            this.FabricId = obj.FabricId;
            this.FabricCode = obj.FabricCode;
            this.FabricName = obj.FabricName;
            this.FabricPrice = obj.FabricPrice;
            this.ConversionFactor = obj.ConversionFactor;
            this.IndimanPrice = obj.IndimanPrice;
            this.QuotedFOBPrice = obj.QuotedFOBPrice;
            this.FOBCost = obj.FOBCost;
            this.LastModifier = obj.LastModifier;
            this.ModifiedDate = obj.ModifiedDate;
            this.Remarks = obj.Remarks;
            this.ActMgn = obj.ActMgn;
            this.QuotedMp = obj.QuotedMp;
        }
        #endregion
        
        #region Internal utility methods
        internal void SetDAL(Indico.DAL.IndicoCIFPriceView obj, IndicoEntities context)
        {
            // set the Indico.DAL.IndicoCIFPriceView properties
            obj.CostSheetId = Convert.ToInt32(CostSheetId);
            obj.CoreCategory = CoreCategory;
            obj.ItemCategory = ItemCategory;
            obj.PatternId = Convert.ToInt32(PatternId);
            obj.PatternCode = PatternCode;
            obj.PatternNickName = PatternNickName;
            obj.FabricId = Convert.ToInt32(FabricId);
            obj.FabricCode = FabricCode;
            obj.FabricName = FabricName;
            obj.FabricPrice = Convert.ToDecimal(FabricPrice);
            obj.ConversionFactor = Convert.ToDecimal(ConversionFactor);
            obj.IndimanPrice = Convert.ToDecimal(IndimanPrice);
            obj.QuotedFOBPrice = Convert.ToDecimal(QuotedFOBPrice);
            obj.FOBCost = Convert.ToDecimal(FOBCost);
            obj.LastModifier = LastModifier;
            obj.ModifiedDate = Convert.ToDateTime(ModifiedDate);
            obj.Remarks = Remarks;
            obj.ActMgn = Convert.ToDecimal(ActMgn);
            obj.QuotedMp = Convert.ToDecimal(QuotedMp);
        }
        
        internal void SetBO(Indico.DAL.IndicoCIFPriceView obj)
        {
            // set the Indico.BusinessObjects.IndicoCIFPriceViewBO properties    
            this.CostSheetId = obj.CostSheetId;
            this.CoreCategory = obj.CoreCategory;
            this.ItemCategory = obj.ItemCategory;
            this.PatternId = obj.PatternId;
            this.PatternCode = obj.PatternCode;
            this.PatternNickName = obj.PatternNickName;
            this.FabricId = obj.FabricId;
            this.FabricCode = obj.FabricCode;
            this.FabricName = obj.FabricName;
            this.FabricPrice = obj.FabricPrice;
            this.ConversionFactor = obj.ConversionFactor;
            this.IndimanPrice = obj.IndimanPrice;
            this.QuotedFOBPrice = obj.QuotedFOBPrice;
            this.FOBCost = obj.FOBCost;
            this.LastModifier = obj.LastModifier;
            this.ModifiedDate = obj.ModifiedDate;
            this.Remarks = obj.Remarks;
            this.ActMgn = obj.ActMgn;
            this.QuotedMp = obj.QuotedMp;
        }
        
        internal void SetBO(Indico.BusinessObjects.IndicoCIFPriceViewBO obj)
        {
            // set this Indico.BusinessObjects.IndicoCIFPriceViewBO properties
            this.CostSheetId = obj.CostSheetId;
            this.CoreCategory = obj.CoreCategory;
            this.ItemCategory = obj.ItemCategory;
            this.PatternId = obj.PatternId;
            this.PatternCode = obj.PatternCode;
            this.PatternNickName = obj.PatternNickName;
            this.FabricId = obj.FabricId;
            this.FabricCode = obj.FabricCode;
            this.FabricName = obj.FabricName;
            this.FabricPrice = obj.FabricPrice;
            this.ConversionFactor = obj.ConversionFactor;
            this.IndimanPrice = obj.IndimanPrice;
            this.QuotedFOBPrice = obj.QuotedFOBPrice;
            this.FOBCost = obj.FOBCost;
            this.LastModifier = obj.LastModifier;
            this.ModifiedDate = obj.ModifiedDate;
            this.Remarks = obj.Remarks;
            this.ActMgn = obj.ActMgn;
            this.QuotedMp = obj.QuotedMp;
        }
        
        private static List<Indico.BusinessObjects.IndicoCIFPriceViewBO> IQueryableToList(IQueryable<Indico.DAL.IndicoCIFPriceView> oQuery)
        {
            List<Indico.DAL.IndicoCIFPriceView> oList = oQuery.ToList();
            List<Indico.BusinessObjects.IndicoCIFPriceViewBO> rList = new List<Indico.BusinessObjects.IndicoCIFPriceViewBO>(oList.Count);
            foreach (Indico.DAL.IndicoCIFPriceView o in oList)
            {
                Indico.BusinessObjects.IndicoCIFPriceViewBO obj = new Indico.BusinessObjects.IndicoCIFPriceViewBO(o);
                rList.Add(obj);
            }
            return rList;
        }
        #endregion
        
        #region BusinessObject methods
        
        #region GetAllObject
        public static List<Indico.BusinessObjects.IndicoCIFPriceViewBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public static List<Indico.BusinessObjects.IndicoCIFPriceViewBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public static List<Indico.BusinessObjects.IndicoCIFPriceViewBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public static List<Indico.BusinessObjects.IndicoCIFPriceViewBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.IndicoCIFPriceView> oQuery =
                (from o in context.IndicoCIFPriceView
                 orderby o.CostSheetId
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.CostSheetId).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.IndicoCIFPriceViewBO> indicocifpriceviews = IQueryableToList(oQuery);
            context.Dispose();
            return indicocifpriceviews;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.IndicoCIFPriceViewBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.IndicoCIFPriceViewBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.IndicoCIFPriceViewBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.IndicoCIFPriceViewBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.IndicoCIFPriceView> oQuery =
                (from o in context.IndicoCIFPriceView
                 where
                    (this.CostSheetId == null || this.CostSheetId == o.CostSheetId) &&
                    (this.CoreCategory == null || this.CoreCategory == o.CoreCategory) &&
                    (this.ItemCategory == null || this.ItemCategory == o.ItemCategory) &&
                    (this.PatternId == null || this.PatternId == o.PatternId) &&
                    (this.PatternCode == null || this.PatternCode == o.PatternCode) &&
                    (this.PatternNickName == null || this.PatternNickName == o.PatternNickName) &&
                    (this.FabricId == null || this.FabricId == o.FabricId) &&
                    (this.FabricCode == null || this.FabricCode == o.FabricCode) &&
                    (this.FabricName == null || this.FabricName == o.FabricName) &&
                    (this.FabricPrice == null || this.FabricPrice == o.FabricPrice) &&
                    (this.ConversionFactor == null || this.ConversionFactor == o.ConversionFactor) &&
                    (this.IndimanPrice == null || this.IndimanPrice == o.IndimanPrice) &&
                    (this.QuotedFOBPrice == null || this.QuotedFOBPrice == o.QuotedFOBPrice) &&
                    (this.FOBCost == null || this.FOBCost == o.FOBCost) &&
                    (this.LastModifier == null || this.LastModifier == o.LastModifier) &&
                    (this.ModifiedDate == null || this.ModifiedDate == o.ModifiedDate) &&
                    (this.Remarks == null || this.Remarks == o.Remarks) &&
                    (this.ActMgn == null || this.ActMgn == o.ActMgn) &&
                    (this.QuotedMp == null || this.QuotedMp == o.QuotedMp) 
                 orderby o.CostSheetId
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.CostSheetId).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.IndicoCIFPriceViewBO> indicocifpriceviews = IQueryableToList(oQuery);
            context.Dispose();
            return indicocifpriceviews;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.IndicoCIFPriceView
                 where
                    (this.CostSheetId == null || this.CostSheetId == o.CostSheetId) &&
                    (this.CoreCategory == null || this.CoreCategory == o.CoreCategory) &&
                    (this.ItemCategory == null || this.ItemCategory == o.ItemCategory) &&
                    (this.PatternId == null || this.PatternId == o.PatternId) &&
                    (this.PatternCode == null || this.PatternCode == o.PatternCode) &&
                    (this.PatternNickName == null || this.PatternNickName == o.PatternNickName) &&
                    (this.FabricId == null || this.FabricId == o.FabricId) &&
                    (this.FabricCode == null || this.FabricCode == o.FabricCode) &&
                    (this.FabricName == null || this.FabricName == o.FabricName) &&
                    (this.FabricPrice == null || this.FabricPrice == o.FabricPrice) &&
                    (this.ConversionFactor == null || this.ConversionFactor == o.ConversionFactor) &&
                    (this.IndimanPrice == null || this.IndimanPrice == o.IndimanPrice) &&
                    (this.QuotedFOBPrice == null || this.QuotedFOBPrice == o.QuotedFOBPrice) &&
                    (this.FOBCost == null || this.FOBCost == o.FOBCost) &&
                    (this.LastModifier == null || this.LastModifier == o.LastModifier) &&
                    (this.ModifiedDate == null || this.ModifiedDate == o.ModifiedDate) &&
                    (this.Remarks == null || this.Remarks == o.Remarks) &&
                    (this.ActMgn == null || this.ActMgn == o.ActMgn) &&
                    (this.QuotedMp == null || this.QuotedMp == o.QuotedMp) 
                 orderby o.CostSheetId
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.IndicoCIFPriceViewBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.IndicoCIFPriceViewBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.IndicoCIFPriceViewBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.IndicoCIFPriceViewBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.IndicoCIFPriceView> oQuery =
                (from o in context.IndicoCIFPriceView
                 where
                    (this.CostSheetId == null || o.CostSheetId == this.CostSheetId) &&
                    (this.CoreCategory == null || o.CoreCategory.Contains(this.CoreCategory)) &&
                    (this.ItemCategory == null || o.ItemCategory.Contains(this.ItemCategory)) &&
                    (this.PatternId == null || o.PatternId == this.PatternId) &&
                    (this.PatternCode == null || o.PatternCode.Contains(this.PatternCode)) &&
                    (this.PatternNickName == null || o.PatternNickName.Contains(this.PatternNickName)) &&
                    (this.FabricId == null || o.FabricId == this.FabricId) &&
                    (this.FabricCode == null || o.FabricCode.Contains(this.FabricCode)) &&
                    (this.FabricName == null || o.FabricName.Contains(this.FabricName)) &&
                    (this.FabricPrice == null || o.FabricPrice == this.FabricPrice) &&
                    (this.ConversionFactor == null || o.ConversionFactor == this.ConversionFactor) &&
                    (this.IndimanPrice == null || o.IndimanPrice == this.IndimanPrice) &&
                    (this.QuotedFOBPrice == null || o.QuotedFOBPrice == this.QuotedFOBPrice) &&
                    (this.FOBCost == null || o.FOBCost == this.FOBCost) &&
                    (this.LastModifier == null || o.LastModifier.Contains(this.LastModifier)) &&
                    (this.ModifiedDate == null || o.ModifiedDate == this.ModifiedDate) &&
                    (this.Remarks == null || o.Remarks.Contains(this.Remarks)) &&
                    (this.ActMgn == null || o.ActMgn == this.ActMgn) &&
                    (this.QuotedMp == null || o.QuotedMp == this.QuotedMp) 
                 orderby o.CostSheetId
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.CostSheetId).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.IndicoCIFPriceViewBO> indicocifpriceviews = IQueryableToList(oQuery);
            context.Dispose();
            return indicocifpriceviews;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.IndicoCIFPriceView
                 where
                    (this.CostSheetId == null || o.CostSheetId == this.CostSheetId) &&
                    (this.CoreCategory == null || o.CoreCategory.Contains(this.CoreCategory)) &&
                    (this.ItemCategory == null || o.ItemCategory.Contains(this.ItemCategory)) &&
                    (this.PatternId == null || o.PatternId == this.PatternId) &&
                    (this.PatternCode == null || o.PatternCode.Contains(this.PatternCode)) &&
                    (this.PatternNickName == null || o.PatternNickName.Contains(this.PatternNickName)) &&
                    (this.FabricId == null || o.FabricId == this.FabricId) &&
                    (this.FabricCode == null || o.FabricCode.Contains(this.FabricCode)) &&
                    (this.FabricName == null || o.FabricName.Contains(this.FabricName)) &&
                    (this.FabricPrice == null || o.FabricPrice == this.FabricPrice) &&
                    (this.ConversionFactor == null || o.ConversionFactor == this.ConversionFactor) &&
                    (this.IndimanPrice == null || o.IndimanPrice == this.IndimanPrice) &&
                    (this.QuotedFOBPrice == null || o.QuotedFOBPrice == this.QuotedFOBPrice) &&
                    (this.FOBCost == null || o.FOBCost == this.FOBCost) &&
                    (this.LastModifier == null || o.LastModifier.Contains(this.LastModifier)) &&
                    (this.ModifiedDate == null || o.ModifiedDate == this.ModifiedDate) &&
                    (this.Remarks == null || o.Remarks.Contains(this.Remarks)) &&
                    (this.ActMgn == null || o.ActMgn == this.ActMgn) &&
                    (this.QuotedMp == null || o.QuotedMp == this.QuotedMp) 
                 orderby o.CostSheetId
                 select o).Count();
            
        }
        
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.IndicoCIFPriceViewBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.IndicoCIFPriceViewBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.IndicoCIFPriceViewBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.IndicoCIFPriceViewBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.IndicoCIFPriceView> oQuery =
                (from o in context.IndicoCIFPriceView
                 where
                    (this.CostSheetId == null || this.CostSheetId == o.CostSheetId) && 
                    (this.PatternId == null || this.PatternId == o.PatternId) && 
                    (this.FabricId == null || this.FabricId == o.FabricId) && 
                    (this.FabricPrice == null || this.FabricPrice == o.FabricPrice) && 
                    (this.ConversionFactor == null || this.ConversionFactor == o.ConversionFactor) && 
                    (this.IndimanPrice == null || this.IndimanPrice == o.IndimanPrice) && 
                    (this.QuotedFOBPrice == null || this.QuotedFOBPrice == o.QuotedFOBPrice) && 
                    (this.FOBCost == null || this.FOBCost == o.FOBCost) && 
                    (this.ModifiedDate == null || this.ModifiedDate == o.ModifiedDate) && 
                    (this.ActMgn == null || this.ActMgn == o.ActMgn) && 
                    (this.QuotedMp == null || this.QuotedMp == o.QuotedMp) && 
                    ((o.CoreCategory.Contains(this.CoreCategory)) ||
                    (o.ItemCategory.Contains(this.ItemCategory)) ||
                    (o.PatternCode.Contains(this.PatternCode)) ||
                    (o.PatternNickName.Contains(this.PatternNickName)) ||
                    (o.FabricCode.Contains(this.FabricCode)) ||
                    (o.FabricName.Contains(this.FabricName)) ||
                    (o.LastModifier.Contains(this.LastModifier)) ||
                    (o.Remarks.Contains(this.Remarks)) ||
                    (this.CoreCategory == null && this.ItemCategory == null && this.PatternCode == null && this.PatternNickName == null && this.FabricCode == null && this.FabricName == null && this.LastModifier == null && this.Remarks == null ))
                 orderby o.CostSheetId
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.CostSheetId).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.IndicoCIFPriceViewBO> indicocifpriceviews = IQueryableToList(oQuery);
            context.Dispose();
            return indicocifpriceviews;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.IndicoCIFPriceView
                 where
                    (this.CostSheetId == null || this.CostSheetId == o.CostSheetId) && 
                    (this.PatternId == null || this.PatternId == o.PatternId) && 
                    (this.FabricId == null || this.FabricId == o.FabricId) && 
                    (this.FabricPrice == null || this.FabricPrice == o.FabricPrice) && 
                    (this.ConversionFactor == null || this.ConversionFactor == o.ConversionFactor) && 
                    (this.IndimanPrice == null || this.IndimanPrice == o.IndimanPrice) && 
                    (this.QuotedFOBPrice == null || this.QuotedFOBPrice == o.QuotedFOBPrice) && 
                    (this.FOBCost == null || this.FOBCost == o.FOBCost) && 
                    (this.ModifiedDate == null || this.ModifiedDate == o.ModifiedDate) && 
                    (this.ActMgn == null || this.ActMgn == o.ActMgn) && 
                    (this.QuotedMp == null || this.QuotedMp == o.QuotedMp) && 
                    ((o.CoreCategory.Contains(this.CoreCategory)) ||
                    (o.ItemCategory.Contains(this.ItemCategory)) ||
                    (o.PatternCode.Contains(this.PatternCode)) ||
                    (o.PatternNickName.Contains(this.PatternNickName)) ||
                    (o.FabricCode.Contains(this.FabricCode)) ||
                    (o.FabricName.Contains(this.FabricName)) ||
                    (o.LastModifier.Contains(this.LastModifier)) ||
                    (o.Remarks.Contains(this.Remarks)) ||
                    (this.CoreCategory == null && this.ItemCategory == null && this.PatternCode == null && this.PatternNickName == null && this.FabricCode == null && this.FabricName == null && this.LastModifier == null && this.Remarks == null ))
                 orderby o.CostSheetId
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.IndicoCIFPriceViewBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.IndicoCIFPriceViewBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.IndicoCIFPriceViewBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.IndicoCIFPriceViewBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.IndicoCIFPriceViewBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.IndicoCIFPriceViewBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.IndicoCIFPriceViewBO))
                return 1;
            Indico.BusinessObjects.IndicoCIFPriceViewBOComparer c = new Indico.BusinessObjects.IndicoCIFPriceViewBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.IndicoCIFPriceViewBO);
        }

        #endregion
        #endregion
    }
    
    #region IndicoCIFPriceViewBOComparer
    public class IndicoCIFPriceViewBOComparer : IComparer<Indico.BusinessObjects.IndicoCIFPriceViewBO>
    {
        private string propertyToCompareName;
        public IndicoCIFPriceViewBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.IndicoCIFPriceViewBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.IndicoCIFPriceViewBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public IndicoCIFPriceViewBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.IndicoCIFPriceViewBO> Members
        public int Compare(Indico.BusinessObjects.IndicoCIFPriceViewBO x, Indico.BusinessObjects.IndicoCIFPriceViewBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.IndicoCIFPriceViewBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.IndicoCIFPriceViewBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.IndicoCIFPriceViewBO x, Indico.BusinessObjects.IndicoCIFPriceViewBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
