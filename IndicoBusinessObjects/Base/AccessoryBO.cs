// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class AccessoryBO : BusinessObject, IComparable
    {
        #region fields

        #region Scalar Fields
        private int id;
        private int _accessoryCategory;
        private string _code = string.Empty;
        private decimal? _cost;
        private string _description;
        private string _name = string.Empty;
        private string _suppCode;
        private int? _supplier;
        private int? _unit;
        #endregion
        
        #region Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.AccessoryCategoryBO _objAccessoryCategory;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.SupplierBO _objSupplier;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UnitBO _objUnit;
        #endregion
        
        #region Foreign Table Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.ArtWorktAccessoryBO> artWorktAccessorysWhereThisIsAccessoryList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _artWorktAccessorysWhereThisIsAccessoryLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.PatternAccessoryBO> patternAccessorysWhereThisIsAccessoryList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _patternAccessorysWhereThisIsAccessoryLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO> patternSupportAccessorysWhereThisIsAccessoryList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _patternSupportAccessorysWhereThisIsAccessoryLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.VisualLayoutAccessoryBO> visualLayoutAccessorysWhereThisIsAccessoryList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _visualLayoutAccessorysWhereThisIsAccessoryLoaded;
        #endregion
        
        #region Other fields
        
        private Indico.DAL.Accessory _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>.</summary>
        public int AccessoryCategory
        {   
            get {return _accessoryCategory;}
            set 
            {
                OnAccessoryCategoryChanging(value);
                _accessoryCategory = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.AccessoryCategory = (from o in this._context.Context.AccessoryCategory
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.AccessoryCategory>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.AccessoryCategory = null;
                OnAccessoryCategoryChanged();
            }
        }
        /// <summary>. The maximum length of this property is 8.</summary>
        public string Code
        {   
            get {return _code;}
            set 
            {
                OnCodeChanging(value);
                _code = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Code = value;
                }
                OnCodeChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? Cost
        {   
            get {return _cost;}
            set 
            {
                OnCostChanging(value);
                _cost = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Cost = value;
                }
                OnCostChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string Description
        {   
            get {return _description;}
            set 
            {
                OnDescriptionChanging(value);
                _description = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Description = value;
                }
                OnDescriptionChanged();
            }
        }
        /// <summary>. The maximum length of this property is 128.</summary>
        public string Name
        {   
            get {return _name;}
            set 
            {
                OnNameChanging(value);
                _name = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Name = value;
                }
                OnNameChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string SuppCode
        {   
            get {return _suppCode;}
            set 
            {
                OnSuppCodeChanging(value);
                _suppCode = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.SuppCode = value;
                }
                OnSuppCodeChanged();
            }
        }
        /// <summary>.</summary>
        public int? Supplier
        {   
            get {return _supplier;}
            set 
            {
                OnSupplierChanging(value);
                _supplier = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.Supplier = (from o in this._context.Context.Supplier
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Supplier>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Supplier = null;
                OnSupplierChanged();
            }
        }
        /// <summary>.</summary>
        public int? Unit
        {   
            get {return _unit;}
            set 
            {
                OnUnitChanging(value);
                _unit = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.Unit = (from o in this._context.Context.Unit
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Unit>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Unit = null;
                OnUnitChanged();
            }
        }
        
        internal Indico.DAL.Accessory ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        ///<summary>The AccessoryCategoryBO object identified by the value of AccessoryCategory</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.AccessoryCategoryBO objAccessoryCategory
        {
            get
            {
                if ( _accessoryCategory > 0 && _objAccessoryCategory == null)
                {
                        if (this._context == null)
                        {
                            _objAccessoryCategory = new Indico.BusinessObjects.AccessoryCategoryBO();
                        }
                        else
                        {
                            _objAccessoryCategory = new Indico.BusinessObjects.AccessoryCategoryBO(ref this._context);
                        }
                        _objAccessoryCategory.ID = _accessoryCategory;
                        _objAccessoryCategory.GetObject(); 
                }
                return _objAccessoryCategory;
            }
            set
            { 
                _objAccessoryCategory = value;
                _accessoryCategory = _objAccessoryCategory.ID;
            }
        }
        ///<summary>The SupplierBO object identified by the value of Supplier</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.SupplierBO objSupplier
        {
            get
            {
                if (_supplier != null && _supplier > 0 && _objSupplier == null)
                {
                        if (this._context == null)
                        {
                            _objSupplier = new Indico.BusinessObjects.SupplierBO();
                        }
                        else
                        {
                            _objSupplier = new Indico.BusinessObjects.SupplierBO(ref this._context);
                        }
                        _objSupplier.ID = Convert.ToInt32(_supplier);
                        _objSupplier.GetObject(); 
                }
                return _objSupplier;
            }
            set
            { 
                _objSupplier = value;
                _supplier = _objSupplier.ID;
            }
        }
        ///<summary>The UnitBO object identified by the value of Unit</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UnitBO objUnit
        {
            get
            {
                if (_unit != null && _unit > 0 && _objUnit == null)
                {
                        if (this._context == null)
                        {
                            _objUnit = new Indico.BusinessObjects.UnitBO();
                        }
                        else
                        {
                            _objUnit = new Indico.BusinessObjects.UnitBO(ref this._context);
                        }
                        _objUnit.ID = Convert.ToInt32(_unit);
                        _objUnit.GetObject(); 
                }
                return _objUnit;
            }
            set
            { 
                _objUnit = value;
                _unit = _objUnit.ID;
            }
        }
        #endregion
        
        #region Foreign Object Foreign Key Collections
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.ArtWorktAccessoryBO> ArtWorktAccessorysWhereThisIsAccessory // FK_ArtWorktAccessory_Accessory
        {
            get
            {
                if (!_artWorktAccessorysWhereThisIsAccessoryLoaded)
                {
                    _artWorktAccessorysWhereThisIsAccessoryLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Accessory obj = (from o in context.Accessory
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.ArtWorktAccessorysWhereThisIsAccessory.Load();
                        artWorktAccessorysWhereThisIsAccessoryList = new IndicoList<Indico.BusinessObjects.ArtWorktAccessoryBO>(obj.ArtWorktAccessorysWhereThisIsAccessory.Count);
                        
                        foreach (Indico.DAL.ArtWorktAccessory o in obj.ArtWorktAccessorysWhereThisIsAccessory)
                        {
                            Indico.BusinessObjects.ArtWorktAccessoryBO fkObj = new Indico.BusinessObjects.ArtWorktAccessoryBO(o, ref this._context);
                            artWorktAccessorysWhereThisIsAccessoryList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        artWorktAccessorysWhereThisIsAccessoryList = new IndicoList<Indico.BusinessObjects.ArtWorktAccessoryBO>();
                    }
                    
                    artWorktAccessorysWhereThisIsAccessoryList.OnBeforeRemove += new EventHandler(ArtWorktAccessorysWhereThisIsAccessoryList_OnBeforeRemove);
                    artWorktAccessorysWhereThisIsAccessoryList.OnAfterAdd += new EventHandler(ArtWorktAccessorysWhereThisIsAccessoryList_OnAfterAdd);
                }
                
                return artWorktAccessorysWhereThisIsAccessoryList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.PatternAccessoryBO> PatternAccessorysWhereThisIsAccessory // FK_PatternAccessory_Accessory
        {
            get
            {
                if (!_patternAccessorysWhereThisIsAccessoryLoaded)
                {
                    _patternAccessorysWhereThisIsAccessoryLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Accessory obj = (from o in context.Accessory
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.PatternAccessorysWhereThisIsAccessory.Load();
                        patternAccessorysWhereThisIsAccessoryList = new IndicoList<Indico.BusinessObjects.PatternAccessoryBO>(obj.PatternAccessorysWhereThisIsAccessory.Count);
                        
                        foreach (Indico.DAL.PatternAccessory o in obj.PatternAccessorysWhereThisIsAccessory)
                        {
                            Indico.BusinessObjects.PatternAccessoryBO fkObj = new Indico.BusinessObjects.PatternAccessoryBO(o, ref this._context);
                            patternAccessorysWhereThisIsAccessoryList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        patternAccessorysWhereThisIsAccessoryList = new IndicoList<Indico.BusinessObjects.PatternAccessoryBO>();
                    }
                    
                    patternAccessorysWhereThisIsAccessoryList.OnBeforeRemove += new EventHandler(PatternAccessorysWhereThisIsAccessoryList_OnBeforeRemove);
                    patternAccessorysWhereThisIsAccessoryList.OnAfterAdd += new EventHandler(PatternAccessorysWhereThisIsAccessoryList_OnAfterAdd);
                }
                
                return patternAccessorysWhereThisIsAccessoryList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO> PatternSupportAccessorysWhereThisIsAccessory // FK_PatternSupportAccessory_Accessory
        {
            get
            {
                if (!_patternSupportAccessorysWhereThisIsAccessoryLoaded)
                {
                    _patternSupportAccessorysWhereThisIsAccessoryLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Accessory obj = (from o in context.Accessory
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.PatternSupportAccessorysWhereThisIsAccessory.Load();
                        patternSupportAccessorysWhereThisIsAccessoryList = new IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>(obj.PatternSupportAccessorysWhereThisIsAccessory.Count);
                        
                        foreach (Indico.DAL.PatternSupportAccessory o in obj.PatternSupportAccessorysWhereThisIsAccessory)
                        {
                            Indico.BusinessObjects.PatternSupportAccessoryBO fkObj = new Indico.BusinessObjects.PatternSupportAccessoryBO(o, ref this._context);
                            patternSupportAccessorysWhereThisIsAccessoryList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        patternSupportAccessorysWhereThisIsAccessoryList = new IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>();
                    }
                    
                    patternSupportAccessorysWhereThisIsAccessoryList.OnBeforeRemove += new EventHandler(PatternSupportAccessorysWhereThisIsAccessoryList_OnBeforeRemove);
                    patternSupportAccessorysWhereThisIsAccessoryList.OnAfterAdd += new EventHandler(PatternSupportAccessorysWhereThisIsAccessoryList_OnAfterAdd);
                }
                
                return patternSupportAccessorysWhereThisIsAccessoryList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.VisualLayoutAccessoryBO> VisualLayoutAccessorysWhereThisIsAccessory // FK_VisualLayoutAccessory_Accessory
        {
            get
            {
                if (!_visualLayoutAccessorysWhereThisIsAccessoryLoaded)
                {
                    _visualLayoutAccessorysWhereThisIsAccessoryLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Accessory obj = (from o in context.Accessory
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.VisualLayoutAccessorysWhereThisIsAccessory.Load();
                        visualLayoutAccessorysWhereThisIsAccessoryList = new IndicoList<Indico.BusinessObjects.VisualLayoutAccessoryBO>(obj.VisualLayoutAccessorysWhereThisIsAccessory.Count);
                        
                        foreach (Indico.DAL.VisualLayoutAccessory o in obj.VisualLayoutAccessorysWhereThisIsAccessory)
                        {
                            Indico.BusinessObjects.VisualLayoutAccessoryBO fkObj = new Indico.BusinessObjects.VisualLayoutAccessoryBO(o, ref this._context);
                            visualLayoutAccessorysWhereThisIsAccessoryList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        visualLayoutAccessorysWhereThisIsAccessoryList = new IndicoList<Indico.BusinessObjects.VisualLayoutAccessoryBO>();
                    }
                    
                    visualLayoutAccessorysWhereThisIsAccessoryList.OnBeforeRemove += new EventHandler(VisualLayoutAccessorysWhereThisIsAccessoryList_OnBeforeRemove);
                    visualLayoutAccessorysWhereThisIsAccessoryList.OnAfterAdd += new EventHandler(VisualLayoutAccessorysWhereThisIsAccessoryList_OnAfterAdd);
                }
                
                return visualLayoutAccessorysWhereThisIsAccessoryList;
            }
        }
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the AccessoryBO class using the supplied Indico.DAL.Accessory. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.Accessory whose properties will be used to initialise the AccessoryBO</param>
        internal AccessoryBO(Indico.DAL.Accessory obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.Accessory 
            this.ID = obj.ID;
            
            this.AccessoryCategory = (obj.AccessoryCategoryReference.EntityKey != null && obj.AccessoryCategoryReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.AccessoryCategoryReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Code = obj.Code;
            this.Cost = obj.Cost;
            this.Description = obj.Description;
            this.Name = obj.Name;
            this.SuppCode = obj.SuppCode;
            this.Supplier = (obj.SupplierReference.EntityKey != null && obj.SupplierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.SupplierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Unit = (obj.UnitReference.EntityKey != null && obj.UnitReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.UnitReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.Accessory SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.Accessory properties
            Indico.DAL.Accessory obj = new Indico.DAL.Accessory();
            
            if (this.ID > 0)
            {
                obj = context.Accessory.FirstOrDefault<Accessory>(o => o.ID == this.ID);
            }
            
            obj.Code = this.Code;
            obj.Cost = this.Cost;
            obj.Description = this.Description;
            obj.Name = this.Name;
            obj.SuppCode = this.SuppCode;
            
            if (this.AccessoryCategory > 0) obj.AccessoryCategory = context.AccessoryCategory.FirstOrDefault(o => o.ID == this.AccessoryCategory);
            if (this.Supplier != null && this.Supplier > 0) obj.Supplier = context.Supplier.FirstOrDefault(o => o.ID == this.Supplier);
            if (this.Unit != null && this.Unit > 0) obj.Unit = context.Unit.FirstOrDefault(o => o.ID == this.Unit);
            
            if (_artWorktAccessorysWhereThisIsAccessoryLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.ArtWorktAccessoryBO.ToEntityList(this.ArtWorktAccessorysWhereThisIsAccessory, context), 
                    obj.ArtWorktAccessorysWhereThisIsAccessory);
            if (_patternAccessorysWhereThisIsAccessoryLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.PatternAccessoryBO.ToEntityList(this.PatternAccessorysWhereThisIsAccessory, context), 
                    obj.PatternAccessorysWhereThisIsAccessory);
            if (_patternSupportAccessorysWhereThisIsAccessoryLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.PatternSupportAccessoryBO.ToEntityList(this.PatternSupportAccessorysWhereThisIsAccessory, context), 
                    obj.PatternSupportAccessorysWhereThisIsAccessory);
            if (_visualLayoutAccessorysWhereThisIsAccessoryLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.VisualLayoutAccessoryBO.ToEntityList(this.VisualLayoutAccessorysWhereThisIsAccessory, context), 
                    obj.VisualLayoutAccessorysWhereThisIsAccessory);
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.Accessory))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.Accessory obj = (Indico.DAL.Accessory)eObj;
            
            // set the Indico.BusinessObjects.AccessoryBO properties
            this.ID = obj.ID;
            
            this.Code = obj.Code;
            this.Cost = obj.Cost;
            this.Description = obj.Description;
            this.Name = obj.Name;
            this.SuppCode = obj.SuppCode;
            
            this.AccessoryCategory = (obj.AccessoryCategoryReference.EntityKey != null && obj.AccessoryCategoryReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.AccessoryCategoryReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Supplier = (obj.SupplierReference.EntityKey != null && obj.SupplierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.SupplierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Unit = (obj.UnitReference.EntityKey != null && obj.UnitReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.UnitReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.AccessoryBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.AccessoryBO properties
            this.ID = obj.ID;
            
            this.AccessoryCategory = obj.AccessoryCategory;
            this.Code = obj.Code;
            this.Cost = obj.Cost;
            this.Description = obj.Description;
            this.Name = obj.Name;
            this.SuppCode = obj.SuppCode;
            this.Supplier = obj.Supplier;
            this.Unit = obj.Unit;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.AccessoryBO> IQueryableToList(IQueryable<Indico.DAL.Accessory> oQuery)
        {
            List<Indico.DAL.Accessory> oList = oQuery.ToList();
            List<Indico.BusinessObjects.AccessoryBO> rList = new List<Indico.BusinessObjects.AccessoryBO>(oList.Count);
            foreach (Indico.DAL.Accessory o in oList)
            {
                Indico.BusinessObjects.AccessoryBO obj = new Indico.BusinessObjects.AccessoryBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.AccessoryBO> ToList(IEnumerable<Indico.DAL.Accessory> oQuery)
        {
            List<Indico.DAL.Accessory> oList = oQuery.ToList();
            List<Indico.BusinessObjects.AccessoryBO> rList = new List<Indico.BusinessObjects.AccessoryBO>(oList.Count);
            foreach (Indico.DAL.Accessory o in oList)
            {
                Indico.BusinessObjects.AccessoryBO obj = new Indico.BusinessObjects.AccessoryBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.Accessory> ToEntityList(List<AccessoryBO> bos, IndicoEntities context)
        {
            // build a List of Accessory entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.Accessory.Count() == 0) ? new List<Indico.DAL.Accessory>() : (context.Accessory.Where(BuildContainsExpression<Accessory, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.Accessory>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Accessory> ToEntityCollection(List<AccessoryBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of Accessory entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.Accessory> el = (context.Accessory.Count() == 0) ? new List<Indico.DAL.Accessory>() : 
                context.Accessory.Where(BuildContainsExpression<Accessory, int>(e => e.ID, ids))
                .ToList<Indico.DAL.Accessory>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Accessory> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Accessory>();
                
            foreach (Indico.DAL.Accessory r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.Accessory ToEntity(IndicoEntities context)
        {
            return (from o in context.Accessory
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToAccessory(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Accessory obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToAccessory(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.Accessory obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Accessory obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.AccessoryBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.AccessoryBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.Accessory> oQuery =
                        from o in context.Accessory
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.Accessory> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.AccessoryBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.AccessoryBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.AccessoryBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.AccessoryBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.Accessory> oQuery =
                (from o in context.Accessory
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.AccessoryBO> accessorys = IQueryableToList(oQuery);
            context.Dispose();
            return accessorys;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.AccessoryBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.AccessoryBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.AccessoryBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.AccessoryBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Accessory> oQuery =
                (from o in context.Accessory
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Name == string.Empty || this.Name == o.Name) &&
                    (this.Code == string.Empty || this.Code == o.Code) &&
                    (this.AccessoryCategory == 0 || this.AccessoryCategory == o.AccessoryCategory.ID) &&
                    (this.Description == null || this.Description == o.Description) &&
                    (this.Cost == null || this.Cost == o.Cost) &&
                    (this.SuppCode == null || this.SuppCode == o.SuppCode) &&
                    (this.Unit == null || this.Unit == o.Unit.ID) &&
                    (this.Supplier == null || this.Supplier == o.Supplier.ID) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.AccessoryBO> accessorys = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return accessorys;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Accessory
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Name == string.Empty || this.Name == o.Name) &&
                    (this.Code == string.Empty || this.Code == o.Code) &&
                    (this.AccessoryCategory == 0 || this.AccessoryCategory == o.AccessoryCategory.ID) &&
                    (this.Description == null || this.Description == o.Description) &&
                    (this.Cost == null || this.Cost == o.Cost) &&
                    (this.SuppCode == null || this.SuppCode == o.SuppCode) &&
                    (this.Unit == null || this.Unit == o.Unit.ID) &&
                    (this.Supplier == null || this.Supplier == o.Supplier.ID) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.AccessoryBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.AccessoryBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.AccessoryBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.AccessoryBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Accessory> oQuery =
                (from o in context.Accessory
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Name == string.Empty || o.Name.Contains(this.Name)) &&
                    (this.Code == string.Empty || o.Code.Contains(this.Code)) &&
                    (this.AccessoryCategory == 0 || o.AccessoryCategory.ID == this.AccessoryCategory) &&
                    (this.Description == null || o.Description.Contains(this.Description)) &&
                    (this.Cost == null || o.Cost == this.Cost) &&
                    (this.SuppCode == null || o.SuppCode.Contains(this.SuppCode)) &&
                    (this.Unit == null || o.Unit.ID == this.Unit) &&
                    (this.Supplier == null || o.Supplier.ID == this.Supplier) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.AccessoryBO> accessorys = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return accessorys;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Accessory
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Name == string.Empty || o.Name.Contains(this.Name)) &&
                    (this.Code == string.Empty || o.Code.Contains(this.Code)) &&
                    (this.AccessoryCategory == 0 || o.AccessoryCategory.ID == this.AccessoryCategory) &&
                    (this.Description == null || o.Description.Contains(this.Description)) &&
                    (this.Cost == null || o.Cost == this.Cost) &&
                    (this.SuppCode == null || o.SuppCode.Contains(this.SuppCode)) &&
                    (this.Unit == null || o.Unit.ID == this.Unit) &&
                    (this.Supplier == null || o.Supplier.ID == this.Supplier) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.AccessoryBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.AccessoryBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.AccessoryBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.AccessoryBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Accessory> oQuery =
                (from o in context.Accessory
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.AccessoryCategory == 0 || this.AccessoryCategory == o.AccessoryCategory.ID) && 
                    (this.Cost == null || this.Cost == o.Cost) && 
                    (this.Unit == null || this.Unit == o.Unit.ID) && 
                    (this.Supplier == null || this.Supplier == o.Supplier.ID) && 
                    ((o.Name.Contains(this.Name)) ||
                    (o.Code.Contains(this.Code)) ||
                    (o.Description.Contains(this.Description)) ||
                    (o.SuppCode.Contains(this.SuppCode)) ||
                    (this.Name == null && this.Code == null && this.Description == null && this.SuppCode == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.AccessoryBO> accessorys = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return accessorys;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Accessory
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.AccessoryCategory == 0 || this.AccessoryCategory == o.AccessoryCategory.ID) && 
                    (this.Cost == null || this.Cost == o.Cost) && 
                    (this.Unit == null || this.Unit == o.Unit.ID) && 
                    (this.Supplier == null || this.Supplier == o.Supplier.ID) && 
                    ((o.Name.Contains(this.Name)) ||
                    (o.Code.Contains(this.Code)) ||
                    (o.Description.Contains(this.Description)) ||
                    (o.SuppCode.Contains(this.SuppCode)) ||
                    (this.Name == null && this.Code == null && this.Description == null && this.SuppCode == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.AccessoryBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.AccessoryBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.AccessoryBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.AccessoryBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.AccessoryBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.AccessoryBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnAccessoryBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("AccessoryBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnAccessoryBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnAccessoryBOIDChanged();
        partial void OnAccessoryBOIDChanging(int value);
        
        partial void OnNameChanged()
        {
            OnAccessoryBONameChanged();
        }
        
        partial void OnNameChanging(string value)
        {
            if (value != null && value.Length > 128)
            {
                throw new Exception(String.Format("AccessoryBO.Name has a maximum length of 128. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnAccessoryBONameChanging(value);
        }
        partial void OnNameChanged();
        partial void OnNameChanging(string value);
        partial void OnAccessoryBONameChanged();
        partial void OnAccessoryBONameChanging(string value);
        
        partial void OnCodeChanged()
        {
            OnAccessoryBOCodeChanged();
        }
        
        partial void OnCodeChanging(string value)
        {
            if (value != null && value.Length > 8)
            {
                throw new Exception(String.Format("AccessoryBO.Code has a maximum length of 8. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnAccessoryBOCodeChanging(value);
        }
        partial void OnCodeChanged();
        partial void OnCodeChanging(string value);
        partial void OnAccessoryBOCodeChanged();
        partial void OnAccessoryBOCodeChanging(string value);
        
        partial void OnAccessoryCategoryChanged()
        {
            OnAccessoryBOAccessoryCategoryChanged();
        }
        
        partial void OnAccessoryCategoryChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("AccessoryBO.AccessoryCategory must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnAccessoryBOAccessoryCategoryChanging(value);
        }
        partial void OnAccessoryCategoryChanged();
        partial void OnAccessoryCategoryChanging(int value);
        partial void OnAccessoryBOAccessoryCategoryChanged();
        partial void OnAccessoryBOAccessoryCategoryChanging(int value);
        
        partial void OnDescriptionChanged()
        {
            OnAccessoryBODescriptionChanged();
        }
        
        partial void OnDescriptionChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("AccessoryBO.Description has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnAccessoryBODescriptionChanging(value);
        }
        partial void OnDescriptionChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnAccessoryBODescriptionChanged();
        partial void OnAccessoryBODescriptionChanging(string value);
        
        partial void OnCostChanged()
        {
            OnAccessoryBOCostChanged();
        }
        
        partial void OnCostChanging(decimal? value)
        {
            OnAccessoryBOCostChanging(value);
        }
        partial void OnCostChanged();
        partial void OnCostChanging(decimal? value);
        partial void OnAccessoryBOCostChanged();
        partial void OnAccessoryBOCostChanging(decimal? value);
        
        partial void OnSuppCodeChanged()
        {
            OnAccessoryBOSuppCodeChanged();
        }
        
        partial void OnSuppCodeChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("AccessoryBO.SuppCode has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnAccessoryBOSuppCodeChanging(value);
        }
        partial void OnSuppCodeChanged();
        partial void OnSuppCodeChanging(string value);
        partial void OnAccessoryBOSuppCodeChanged();
        partial void OnAccessoryBOSuppCodeChanging(string value);
        
        partial void OnUnitChanged()
        {
            OnAccessoryBOUnitChanged();
        }
        
        partial void OnUnitChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("AccessoryBO.Unit must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnAccessoryBOUnitChanging(value);
        }
        partial void OnUnitChanged();
        partial void OnUnitChanging(int? value);
        partial void OnAccessoryBOUnitChanged();
        partial void OnAccessoryBOUnitChanging(int? value);
        
        partial void OnSupplierChanged()
        {
            OnAccessoryBOSupplierChanged();
        }
        
        partial void OnSupplierChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("AccessoryBO.Supplier must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnAccessoryBOSupplierChanging(value);
        }
        partial void OnSupplierChanged();
        partial void OnSupplierChanging(int? value);
        partial void OnAccessoryBOSupplierChanged();
        partial void OnAccessoryBOSupplierChanging(int? value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.AccessoryBO))
                return 1;
            Indico.BusinessObjects.AccessoryBOComparer c = new Indico.BusinessObjects.AccessoryBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.AccessoryBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.Accessory)sender);
            }
        }
        
        void ArtWorktAccessorysWhereThisIsAccessoryList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.ArtWorktAccessory obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.ArtWorktAccessoryBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.ArtWorktAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.ArtWorktAccessoryBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.ArtWorktAccessorysWhereThisIsAccessory.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.ArtWorktAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.ArtWorktAccessoryBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.ArtWorktAccessorysWhereThisIsAccessory.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void ArtWorktAccessorysWhereThisIsAccessoryList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.ArtWorktAccessory obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.ArtWorktAccessoryBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.ArtWorktAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.ArtWorktAccessoryBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.ArtWorktAccessorysWhereThisIsAccessory.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.ArtWorktAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.ArtWorktAccessoryBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.ArtWorktAccessorysWhereThisIsAccessory.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PatternAccessorysWhereThisIsAccessoryList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.PatternAccessory obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PatternAccessoryBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PatternAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternAccessoryBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternAccessorysWhereThisIsAccessory.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PatternAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternAccessoryBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternAccessorysWhereThisIsAccessory.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PatternAccessorysWhereThisIsAccessoryList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.PatternAccessory obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PatternAccessoryBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PatternAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternAccessoryBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternAccessorysWhereThisIsAccessory.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PatternAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternAccessoryBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternAccessorysWhereThisIsAccessory.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PatternSupportAccessorysWhereThisIsAccessoryList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.PatternSupportAccessory obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternSupportAccessorysWhereThisIsAccessory.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternSupportAccessorysWhereThisIsAccessory.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PatternSupportAccessorysWhereThisIsAccessoryList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.PatternSupportAccessory obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternSupportAccessorysWhereThisIsAccessory.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternSupportAccessorysWhereThisIsAccessory.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void VisualLayoutAccessorysWhereThisIsAccessoryList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.VisualLayoutAccessory obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.VisualLayoutAccessoryBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.VisualLayoutAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.VisualLayoutAccessoryBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.VisualLayoutAccessorysWhereThisIsAccessory.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.VisualLayoutAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.VisualLayoutAccessoryBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.VisualLayoutAccessorysWhereThisIsAccessory.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void VisualLayoutAccessorysWhereThisIsAccessoryList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.VisualLayoutAccessory obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.VisualLayoutAccessoryBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.VisualLayoutAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.VisualLayoutAccessoryBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.VisualLayoutAccessorysWhereThisIsAccessory.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.VisualLayoutAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.VisualLayoutAccessoryBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.VisualLayoutAccessorysWhereThisIsAccessory.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
            this._artWorktAccessorysWhereThisIsAccessoryLoaded = false;
            if (this.artWorktAccessorysWhereThisIsAccessoryList != null)
            {
                this.artWorktAccessorysWhereThisIsAccessoryList.OnBeforeRemove -= new EventHandler(ArtWorktAccessorysWhereThisIsAccessoryList_OnBeforeRemove);
                this.artWorktAccessorysWhereThisIsAccessoryList.OnAfterAdd -= new EventHandler(ArtWorktAccessorysWhereThisIsAccessoryList_OnAfterAdd);
            }
            this._patternAccessorysWhereThisIsAccessoryLoaded = false;
            if (this.patternAccessorysWhereThisIsAccessoryList != null)
            {
                this.patternAccessorysWhereThisIsAccessoryList.OnBeforeRemove -= new EventHandler(PatternAccessorysWhereThisIsAccessoryList_OnBeforeRemove);
                this.patternAccessorysWhereThisIsAccessoryList.OnAfterAdd -= new EventHandler(PatternAccessorysWhereThisIsAccessoryList_OnAfterAdd);
            }
            this._patternSupportAccessorysWhereThisIsAccessoryLoaded = false;
            if (this.patternSupportAccessorysWhereThisIsAccessoryList != null)
            {
                this.patternSupportAccessorysWhereThisIsAccessoryList.OnBeforeRemove -= new EventHandler(PatternSupportAccessorysWhereThisIsAccessoryList_OnBeforeRemove);
                this.patternSupportAccessorysWhereThisIsAccessoryList.OnAfterAdd -= new EventHandler(PatternSupportAccessorysWhereThisIsAccessoryList_OnAfterAdd);
            }
            this._visualLayoutAccessorysWhereThisIsAccessoryLoaded = false;
            if (this.visualLayoutAccessorysWhereThisIsAccessoryList != null)
            {
                this.visualLayoutAccessorysWhereThisIsAccessoryList.OnBeforeRemove -= new EventHandler(VisualLayoutAccessorysWhereThisIsAccessoryList_OnBeforeRemove);
                this.visualLayoutAccessorysWhereThisIsAccessoryList.OnAfterAdd -= new EventHandler(VisualLayoutAccessorysWhereThisIsAccessoryList_OnAfterAdd);
            }
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region AccessoryBOComparer
    public class AccessoryBOComparer : IComparer<Indico.BusinessObjects.AccessoryBO>
    {
        private string propertyToCompareName;
        public AccessoryBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.AccessoryBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.AccessoryBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public AccessoryBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.AccessoryBO> Members
        public int Compare(Indico.BusinessObjects.AccessoryBO x, Indico.BusinessObjects.AccessoryBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.AccessoryBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.AccessoryBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.AccessoryBO x, Indico.BusinessObjects.AccessoryBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
