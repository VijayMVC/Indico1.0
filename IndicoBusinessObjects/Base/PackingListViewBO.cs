// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

//using Indico.BusinessObjects.Util;
//using Indico.BusinessObjects;
using Indico.DAL;


namespace Indico.BusinessObjects
{
    /// <summary>
    /// PackingListViewBO provides the business logic for maintaining Indico.DAL.PackingListView records in the data store.
    /// </summary>
    /// <remarks>
    /// PackingListViewBO provides the business logic for maintaining Indico.DAL.PackingListView records in the data store. 
    /// By default it provides basic Search methods for retrieving Indico.DAL.PackingListView
    /// records using the PackingListView DAL class. Other methods implement atomic chunks of Business Logic according to
    /// the business rules.
    /// </remarks>
    public partial class PackingListViewBO : BusinessObject, IComparable
    {
        #region fields
        private int? _packingList;
        private int? _weeklyProductionCapacity;
        private int? _cartonNo;
        private int? _orderNumber;
        private int? _orderDetail;
        private string _vLName;
        private string _pattern;
        private string _distributor;
        private string _client;
        private DateTime? _weekendDate;
        private int? _packingTotal;
        private int? _scannedTotal;
        private int? _shimentModeID;
        private string _shipmentMode;
        private string _companyName;
        private string _address;
        private string _suberb;
        private string _state;
        private string _postCode;
        private string _country;
        private string _contactDetails;
        private bool? _isWeeklyShipment;
        private bool? _isAdelaideWareHouse;
        private int? _shipTo;
        #endregion
        
        #region Properties
        /// <summary></summary>
        public int? PackingList
        {   get {return _packingList;}
            set 
            {
                _packingList = value;
            }
        }
        /// <summary></summary>
        public int? WeeklyProductionCapacity
        {   get {return _weeklyProductionCapacity;}
            set 
            {
                _weeklyProductionCapacity = value;
            }
        }
        /// <summary></summary>
        public int? CartonNo
        {   get {return _cartonNo;}
            set 
            {
                _cartonNo = value;
            }
        }
        /// <summary></summary>
        public int? OrderNumber
        {   get {return _orderNumber;}
            set 
            {
                _orderNumber = value;
            }
        }
        /// <summary></summary>
        public int? OrderDetail
        {   get {return _orderDetail;}
            set 
            {
                _orderDetail = value;
            }
        }
        /// <summary></summary>
        public string VLName
        {   get {return _vLName;}
            set 
            {
                _vLName = value;
            }
        }
        /// <summary></summary>
        public string Pattern
        {   get {return _pattern;}
            set 
            {
                _pattern = value;
            }
        }
        /// <summary></summary>
        public string Distributor
        {   get {return _distributor;}
            set 
            {
                _distributor = value;
            }
        }
        /// <summary></summary>
        public string Client
        {   get {return _client;}
            set 
            {
                _client = value;
            }
        }
        /// <summary></summary>
        public DateTime? WeekendDate
        {   get {return _weekendDate;}
            set 
            {
                _weekendDate = value;
            }
        }
        /// <summary></summary>
        public int? PackingTotal
        {   get {return _packingTotal;}
            set 
            {
                _packingTotal = value;
            }
        }
        /// <summary></summary>
        public int? ScannedTotal
        {   get {return _scannedTotal;}
            set 
            {
                _scannedTotal = value;
            }
        }
        /// <summary></summary>
        public int? ShimentModeID
        {   get {return _shimentModeID;}
            set 
            {
                _shimentModeID = value;
            }
        }
        /// <summary></summary>
        public string ShipmentMode
        {   get {return _shipmentMode;}
            set 
            {
                _shipmentMode = value;
            }
        }
        /// <summary></summary>
        public string CompanyName
        {   get {return _companyName;}
            set 
            {
                _companyName = value;
            }
        }
        /// <summary></summary>
        public string Address
        {   get {return _address;}
            set 
            {
                _address = value;
            }
        }
        /// <summary></summary>
        public string Suberb
        {   get {return _suberb;}
            set 
            {
                _suberb = value;
            }
        }
        /// <summary></summary>
        public string State
        {   get {return _state;}
            set 
            {
                _state = value;
            }
        }
        /// <summary></summary>
        public string PostCode
        {   get {return _postCode;}
            set 
            {
                _postCode = value;
            }
        }
        /// <summary></summary>
        public string Country
        {   get {return _country;}
            set 
            {
                _country = value;
            }
        }
        /// <summary></summary>
        public string ContactDetails
        {   get {return _contactDetails;}
            set 
            {
                _contactDetails = value;
            }
        }
        /// <summary></summary>
        public bool? IsWeeklyShipment
        {   get {return _isWeeklyShipment;}
            set 
            {
                _isWeeklyShipment = value;
            }
        }
        /// <summary></summary>
        public bool? IsAdelaideWareHouse
        {   get {return _isAdelaideWareHouse;}
            set 
            {
                _isAdelaideWareHouse = value;
            }
        }
        /// <summary></summary>
        public int? ShipTo
        {   get {return _shipTo;}
            set 
            {
                _shipTo = value;
            }
        }
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the PackingListViewBO class using the supplied Indico.DAL.PackingListView. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.PackingListView whose properties will be used to initialise the PackingListViewBO</param>
        internal PackingListViewBO(Indico.DAL.PackingListView obj)
        {
            // set the properties from the Indico.DAL.PackingListView 
            this.PackingList = obj.PackingList;
            this.WeeklyProductionCapacity = obj.WeeklyProductionCapacity;
            this.CartonNo = obj.CartonNo;
            this.OrderNumber = obj.OrderNumber;
            this.OrderDetail = obj.OrderDetail;
            this.VLName = obj.VLName;
            this.Pattern = obj.Pattern;
            this.Distributor = obj.Distributor;
            this.Client = obj.Client;
            this.WeekendDate = obj.WeekendDate;
            this.PackingTotal = obj.PackingTotal;
            this.ScannedTotal = obj.ScannedTotal;
            this.ShimentModeID = obj.ShimentModeID;
            this.ShipmentMode = obj.ShipmentMode;
            this.CompanyName = obj.CompanyName;
            this.Address = obj.Address;
            this.Suberb = obj.Suberb;
            this.State = obj.State;
            this.PostCode = obj.PostCode;
            this.Country = obj.Country;
            this.ContactDetails = obj.ContactDetails;
            this.IsWeeklyShipment = obj.IsWeeklyShipment;
            this.IsAdelaideWareHouse = obj.IsAdelaideWareHouse;
            this.ShipTo = obj.ShipTo;
        }
        #endregion
        
        #region Internal utility methods
        internal void SetDAL(Indico.DAL.PackingListView obj, IndicoEntities context)
        {
            // set the Indico.DAL.PackingListView properties
            obj.PackingList = Convert.ToInt32(PackingList);
            obj.WeeklyProductionCapacity = Convert.ToInt32(WeeklyProductionCapacity);
            obj.CartonNo = Convert.ToInt32(CartonNo);
            obj.OrderNumber = Convert.ToInt32(OrderNumber);
            obj.OrderDetail = Convert.ToInt32(OrderDetail);
            obj.VLName = VLName;
            obj.Pattern = Pattern;
            obj.Distributor = Distributor;
            obj.Client = Client;
            obj.WeekendDate = Convert.ToDateTime(WeekendDate);
            obj.PackingTotal = Convert.ToInt32(PackingTotal);
            obj.ScannedTotal = Convert.ToInt32(ScannedTotal);
            obj.ShimentModeID = Convert.ToInt32(ShimentModeID);
            obj.ShipmentMode = ShipmentMode;
            obj.CompanyName = CompanyName;
            obj.Address = Address;
            obj.Suberb = Suberb;
            obj.State = State;
            obj.PostCode = PostCode;
            obj.Country = Country;
            obj.ContactDetails = ContactDetails;
            obj.IsWeeklyShipment = Convert.ToBoolean(IsWeeklyShipment);
            obj.IsAdelaideWareHouse = Convert.ToBoolean(IsAdelaideWareHouse);
            obj.ShipTo = Convert.ToInt32(ShipTo);
        }
        
        internal void SetBO(Indico.DAL.PackingListView obj)
        {
            // set the Indico.BusinessObjects.PackingListViewBO properties    
            this.PackingList = obj.PackingList;
            this.WeeklyProductionCapacity = obj.WeeklyProductionCapacity;
            this.CartonNo = obj.CartonNo;
            this.OrderNumber = obj.OrderNumber;
            this.OrderDetail = obj.OrderDetail;
            this.VLName = obj.VLName;
            this.Pattern = obj.Pattern;
            this.Distributor = obj.Distributor;
            this.Client = obj.Client;
            this.WeekendDate = obj.WeekendDate;
            this.PackingTotal = obj.PackingTotal;
            this.ScannedTotal = obj.ScannedTotal;
            this.ShimentModeID = obj.ShimentModeID;
            this.ShipmentMode = obj.ShipmentMode;
            this.CompanyName = obj.CompanyName;
            this.Address = obj.Address;
            this.Suberb = obj.Suberb;
            this.State = obj.State;
            this.PostCode = obj.PostCode;
            this.Country = obj.Country;
            this.ContactDetails = obj.ContactDetails;
            this.IsWeeklyShipment = obj.IsWeeklyShipment;
            this.IsAdelaideWareHouse = obj.IsAdelaideWareHouse;
            this.ShipTo = obj.ShipTo;
        }
        
        internal void SetBO(Indico.BusinessObjects.PackingListViewBO obj)
        {
            // set this Indico.BusinessObjects.PackingListViewBO properties
            this.PackingList = obj.PackingList;
            this.WeeklyProductionCapacity = obj.WeeklyProductionCapacity;
            this.CartonNo = obj.CartonNo;
            this.OrderNumber = obj.OrderNumber;
            this.OrderDetail = obj.OrderDetail;
            this.VLName = obj.VLName;
            this.Pattern = obj.Pattern;
            this.Distributor = obj.Distributor;
            this.Client = obj.Client;
            this.WeekendDate = obj.WeekendDate;
            this.PackingTotal = obj.PackingTotal;
            this.ScannedTotal = obj.ScannedTotal;
            this.ShimentModeID = obj.ShimentModeID;
            this.ShipmentMode = obj.ShipmentMode;
            this.CompanyName = obj.CompanyName;
            this.Address = obj.Address;
            this.Suberb = obj.Suberb;
            this.State = obj.State;
            this.PostCode = obj.PostCode;
            this.Country = obj.Country;
            this.ContactDetails = obj.ContactDetails;
            this.IsWeeklyShipment = obj.IsWeeklyShipment;
            this.IsAdelaideWareHouse = obj.IsAdelaideWareHouse;
            this.ShipTo = obj.ShipTo;
        }
        
        private static List<Indico.BusinessObjects.PackingListViewBO> IQueryableToList(IQueryable<Indico.DAL.PackingListView> oQuery)
        {
            List<Indico.DAL.PackingListView> oList = oQuery.ToList();
            List<Indico.BusinessObjects.PackingListViewBO> rList = new List<Indico.BusinessObjects.PackingListViewBO>(oList.Count);
            foreach (Indico.DAL.PackingListView o in oList)
            {
                Indico.BusinessObjects.PackingListViewBO obj = new Indico.BusinessObjects.PackingListViewBO(o);
                rList.Add(obj);
            }
            return rList;
        }
        #endregion
        
        #region BusinessObject methods
        
        #region GetAllObject
        public static List<Indico.BusinessObjects.PackingListViewBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public static List<Indico.BusinessObjects.PackingListViewBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public static List<Indico.BusinessObjects.PackingListViewBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public static List<Indico.BusinessObjects.PackingListViewBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.PackingListView> oQuery =
                (from o in context.PackingListView
                 orderby o.PackingList
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.PackingList).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PackingListViewBO> packinglistviews = IQueryableToList(oQuery);
            context.Dispose();
            return packinglistviews;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.PackingListViewBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.PackingListViewBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PackingListViewBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PackingListViewBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.PackingListView> oQuery =
                (from o in context.PackingListView
                 where
                    (this.PackingList == null || this.PackingList == o.PackingList) &&
                    (this.WeeklyProductionCapacity == null || this.WeeklyProductionCapacity == o.WeeklyProductionCapacity) &&
                    (this.CartonNo == null || this.CartonNo == o.CartonNo) &&
                    (this.OrderNumber == null || this.OrderNumber == o.OrderNumber) &&
                    (this.OrderDetail == null || this.OrderDetail == o.OrderDetail) &&
                    (this.VLName == null || this.VLName == o.VLName) &&
                    (this.Pattern == null || this.Pattern == o.Pattern) &&
                    (this.Distributor == null || this.Distributor == o.Distributor) &&
                    (this.Client == null || this.Client == o.Client) &&
                    (this.WeekendDate == null || this.WeekendDate == o.WeekendDate) &&
                    (this.PackingTotal == null || this.PackingTotal == o.PackingTotal) &&
                    (this.ScannedTotal == null || this.ScannedTotal == o.ScannedTotal) &&
                    (this.ShimentModeID == null || this.ShimentModeID == o.ShimentModeID) &&
                    (this.ShipmentMode == null || this.ShipmentMode == o.ShipmentMode) &&
                    (this.CompanyName == null || this.CompanyName == o.CompanyName) &&
                    (this.Address == null || this.Address == o.Address) &&
                    (this.Suberb == null || this.Suberb == o.Suberb) &&
                    (this.State == null || this.State == o.State) &&
                    (this.PostCode == null || this.PostCode == o.PostCode) &&
                    (this.Country == null || this.Country == o.Country) &&
                    (this.ContactDetails == null || this.ContactDetails == o.ContactDetails) &&
                    (this.IsWeeklyShipment == null || this.IsWeeklyShipment == o.IsWeeklyShipment) &&
                    (this.IsAdelaideWareHouse == null || this.IsAdelaideWareHouse == o.IsAdelaideWareHouse) &&
                    (this.ShipTo == null || this.ShipTo == o.ShipTo) 
                 orderby o.PackingList
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.PackingList).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PackingListViewBO> packinglistviews = IQueryableToList(oQuery);
            context.Dispose();
            return packinglistviews;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.PackingListView
                 where
                    (this.PackingList == null || this.PackingList == o.PackingList) &&
                    (this.WeeklyProductionCapacity == null || this.WeeklyProductionCapacity == o.WeeklyProductionCapacity) &&
                    (this.CartonNo == null || this.CartonNo == o.CartonNo) &&
                    (this.OrderNumber == null || this.OrderNumber == o.OrderNumber) &&
                    (this.OrderDetail == null || this.OrderDetail == o.OrderDetail) &&
                    (this.VLName == null || this.VLName == o.VLName) &&
                    (this.Pattern == null || this.Pattern == o.Pattern) &&
                    (this.Distributor == null || this.Distributor == o.Distributor) &&
                    (this.Client == null || this.Client == o.Client) &&
                    (this.WeekendDate == null || this.WeekendDate == o.WeekendDate) &&
                    (this.PackingTotal == null || this.PackingTotal == o.PackingTotal) &&
                    (this.ScannedTotal == null || this.ScannedTotal == o.ScannedTotal) &&
                    (this.ShimentModeID == null || this.ShimentModeID == o.ShimentModeID) &&
                    (this.ShipmentMode == null || this.ShipmentMode == o.ShipmentMode) &&
                    (this.CompanyName == null || this.CompanyName == o.CompanyName) &&
                    (this.Address == null || this.Address == o.Address) &&
                    (this.Suberb == null || this.Suberb == o.Suberb) &&
                    (this.State == null || this.State == o.State) &&
                    (this.PostCode == null || this.PostCode == o.PostCode) &&
                    (this.Country == null || this.Country == o.Country) &&
                    (this.ContactDetails == null || this.ContactDetails == o.ContactDetails) &&
                    (this.IsWeeklyShipment == null || this.IsWeeklyShipment == o.IsWeeklyShipment) &&
                    (this.IsAdelaideWareHouse == null || this.IsAdelaideWareHouse == o.IsAdelaideWareHouse) &&
                    (this.ShipTo == null || this.ShipTo == o.ShipTo) 
                 orderby o.PackingList
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.PackingListViewBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.PackingListViewBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PackingListViewBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PackingListViewBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.PackingListView> oQuery =
                (from o in context.PackingListView
                 where
                    (this.PackingList == null || o.PackingList == this.PackingList) &&
                    (this.WeeklyProductionCapacity == null || o.WeeklyProductionCapacity == this.WeeklyProductionCapacity) &&
                    (this.CartonNo == null || o.CartonNo == this.CartonNo) &&
                    (this.OrderNumber == null || o.OrderNumber == this.OrderNumber) &&
                    (this.OrderDetail == null || o.OrderDetail == this.OrderDetail) &&
                    (this.VLName == null || o.VLName.Contains(this.VLName)) &&
                    (this.Pattern == null || o.Pattern.Contains(this.Pattern)) &&
                    (this.Distributor == null || o.Distributor.Contains(this.Distributor)) &&
                    (this.Client == null || o.Client.Contains(this.Client)) &&
                    (this.WeekendDate == null || o.WeekendDate == this.WeekendDate) &&
                    (this.PackingTotal == null || o.PackingTotal == this.PackingTotal) &&
                    (this.ScannedTotal == null || o.ScannedTotal == this.ScannedTotal) &&
                    (this.ShimentModeID == null || o.ShimentModeID == this.ShimentModeID) &&
                    (this.ShipmentMode == null || o.ShipmentMode.Contains(this.ShipmentMode)) &&
                    (this.CompanyName == null || o.CompanyName.Contains(this.CompanyName)) &&
                    (this.Address == null || o.Address.Contains(this.Address)) &&
                    (this.Suberb == null || o.Suberb.Contains(this.Suberb)) &&
                    (this.State == null || o.State.Contains(this.State)) &&
                    (this.PostCode == null || o.PostCode.Contains(this.PostCode)) &&
                    (this.Country == null || o.Country.Contains(this.Country)) &&
                    (this.ContactDetails == null || o.ContactDetails.Contains(this.ContactDetails)) &&
                    (this.IsWeeklyShipment == null || o.IsWeeklyShipment == this.IsWeeklyShipment) &&
                    (this.IsAdelaideWareHouse == null || o.IsAdelaideWareHouse == this.IsAdelaideWareHouse) &&
                    (this.ShipTo == null || o.ShipTo == this.ShipTo) 
                 orderby o.PackingList
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.PackingList).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PackingListViewBO> packinglistviews = IQueryableToList(oQuery);
            context.Dispose();
            return packinglistviews;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.PackingListView
                 where
                    (this.PackingList == null || o.PackingList == this.PackingList) &&
                    (this.WeeklyProductionCapacity == null || o.WeeklyProductionCapacity == this.WeeklyProductionCapacity) &&
                    (this.CartonNo == null || o.CartonNo == this.CartonNo) &&
                    (this.OrderNumber == null || o.OrderNumber == this.OrderNumber) &&
                    (this.OrderDetail == null || o.OrderDetail == this.OrderDetail) &&
                    (this.VLName == null || o.VLName.Contains(this.VLName)) &&
                    (this.Pattern == null || o.Pattern.Contains(this.Pattern)) &&
                    (this.Distributor == null || o.Distributor.Contains(this.Distributor)) &&
                    (this.Client == null || o.Client.Contains(this.Client)) &&
                    (this.WeekendDate == null || o.WeekendDate == this.WeekendDate) &&
                    (this.PackingTotal == null || o.PackingTotal == this.PackingTotal) &&
                    (this.ScannedTotal == null || o.ScannedTotal == this.ScannedTotal) &&
                    (this.ShimentModeID == null || o.ShimentModeID == this.ShimentModeID) &&
                    (this.ShipmentMode == null || o.ShipmentMode.Contains(this.ShipmentMode)) &&
                    (this.CompanyName == null || o.CompanyName.Contains(this.CompanyName)) &&
                    (this.Address == null || o.Address.Contains(this.Address)) &&
                    (this.Suberb == null || o.Suberb.Contains(this.Suberb)) &&
                    (this.State == null || o.State.Contains(this.State)) &&
                    (this.PostCode == null || o.PostCode.Contains(this.PostCode)) &&
                    (this.Country == null || o.Country.Contains(this.Country)) &&
                    (this.ContactDetails == null || o.ContactDetails.Contains(this.ContactDetails)) &&
                    (this.IsWeeklyShipment == null || o.IsWeeklyShipment == this.IsWeeklyShipment) &&
                    (this.IsAdelaideWareHouse == null || o.IsAdelaideWareHouse == this.IsAdelaideWareHouse) &&
                    (this.ShipTo == null || o.ShipTo == this.ShipTo) 
                 orderby o.PackingList
                 select o).Count();
            
        }
        
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.PackingListViewBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.PackingListViewBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PackingListViewBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PackingListViewBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.PackingListView> oQuery =
                (from o in context.PackingListView
                 where
                    (this.PackingList == null || this.PackingList == o.PackingList) && 
                    (this.WeeklyProductionCapacity == null || this.WeeklyProductionCapacity == o.WeeklyProductionCapacity) && 
                    (this.CartonNo == null || this.CartonNo == o.CartonNo) && 
                    (this.OrderNumber == null || this.OrderNumber == o.OrderNumber) && 
                    (this.OrderDetail == null || this.OrderDetail == o.OrderDetail) && 
                    (this.WeekendDate == null || this.WeekendDate == o.WeekendDate) && 
                    (this.PackingTotal == null || this.PackingTotal == o.PackingTotal) && 
                    (this.ScannedTotal == null || this.ScannedTotal == o.ScannedTotal) && 
                    (this.ShimentModeID == null || this.ShimentModeID == o.ShimentModeID) && 
                    (this.IsWeeklyShipment == null || this.IsWeeklyShipment == o.IsWeeklyShipment) && 
                    (this.IsAdelaideWareHouse == null || this.IsAdelaideWareHouse == o.IsAdelaideWareHouse) && 
                    (this.ShipTo == null || this.ShipTo == o.ShipTo) && 
                    ((o.VLName.Contains(this.VLName)) ||
                    (o.Pattern.Contains(this.Pattern)) ||
                    (o.Distributor.Contains(this.Distributor)) ||
                    (o.Client.Contains(this.Client)) ||
                    (o.ShipmentMode.Contains(this.ShipmentMode)) ||
                    (o.CompanyName.Contains(this.CompanyName)) ||
                    (o.Address.Contains(this.Address)) ||
                    (o.Suberb.Contains(this.Suberb)) ||
                    (o.State.Contains(this.State)) ||
                    (o.PostCode.Contains(this.PostCode)) ||
                    (o.Country.Contains(this.Country)) ||
                    (o.ContactDetails.Contains(this.ContactDetails)) ||
                    (this.VLName == null && this.Pattern == null && this.Distributor == null && this.Client == null && this.ShipmentMode == null && this.CompanyName == null && this.Address == null && this.Suberb == null && this.State == null && this.PostCode == null && this.Country == null && this.ContactDetails == null ))
                 orderby o.PackingList
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.PackingList).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PackingListViewBO> packinglistviews = IQueryableToList(oQuery);
            context.Dispose();
            return packinglistviews;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.PackingListView
                 where
                    (this.PackingList == null || this.PackingList == o.PackingList) && 
                    (this.WeeklyProductionCapacity == null || this.WeeklyProductionCapacity == o.WeeklyProductionCapacity) && 
                    (this.CartonNo == null || this.CartonNo == o.CartonNo) && 
                    (this.OrderNumber == null || this.OrderNumber == o.OrderNumber) && 
                    (this.OrderDetail == null || this.OrderDetail == o.OrderDetail) && 
                    (this.WeekendDate == null || this.WeekendDate == o.WeekendDate) && 
                    (this.PackingTotal == null || this.PackingTotal == o.PackingTotal) && 
                    (this.ScannedTotal == null || this.ScannedTotal == o.ScannedTotal) && 
                    (this.ShimentModeID == null || this.ShimentModeID == o.ShimentModeID) && 
                    (this.IsWeeklyShipment == null || this.IsWeeklyShipment == o.IsWeeklyShipment) && 
                    (this.IsAdelaideWareHouse == null || this.IsAdelaideWareHouse == o.IsAdelaideWareHouse) && 
                    (this.ShipTo == null || this.ShipTo == o.ShipTo) && 
                    ((o.VLName.Contains(this.VLName)) ||
                    (o.Pattern.Contains(this.Pattern)) ||
                    (o.Distributor.Contains(this.Distributor)) ||
                    (o.Client.Contains(this.Client)) ||
                    (o.ShipmentMode.Contains(this.ShipmentMode)) ||
                    (o.CompanyName.Contains(this.CompanyName)) ||
                    (o.Address.Contains(this.Address)) ||
                    (o.Suberb.Contains(this.Suberb)) ||
                    (o.State.Contains(this.State)) ||
                    (o.PostCode.Contains(this.PostCode)) ||
                    (o.Country.Contains(this.Country)) ||
                    (o.ContactDetails.Contains(this.ContactDetails)) ||
                    (this.VLName == null && this.Pattern == null && this.Distributor == null && this.Client == null && this.ShipmentMode == null && this.CompanyName == null && this.Address == null && this.Suberb == null && this.State == null && this.PostCode == null && this.Country == null && this.ContactDetails == null ))
                 orderby o.PackingList
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.PackingListViewBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.PackingListViewBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.PackingListViewBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.PackingListViewBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.PackingListViewBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.PackingListViewBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.PackingListViewBO))
                return 1;
            Indico.BusinessObjects.PackingListViewBOComparer c = new Indico.BusinessObjects.PackingListViewBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.PackingListViewBO);
        }

        #endregion
        #endregion
    }
    
    #region PackingListViewBOComparer
    public class PackingListViewBOComparer : IComparer<Indico.BusinessObjects.PackingListViewBO>
    {
        private string propertyToCompareName;
        public PackingListViewBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.PackingListViewBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.PackingListViewBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public PackingListViewBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.PackingListViewBO> Members
        public int Compare(Indico.BusinessObjects.PackingListViewBO x, Indico.BusinessObjects.PackingListViewBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.PackingListViewBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.PackingListViewBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.PackingListViewBO x, Indico.BusinessObjects.PackingListViewBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
