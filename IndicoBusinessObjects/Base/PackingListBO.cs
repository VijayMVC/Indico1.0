// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class PackingListBO : BusinessObject, IComparable
    {
        #region fields
        #region Scalar Fields
        private int id;
        private int _carton;
        private int _cartonNo;
        private DateTime _createdDate = DateTime.MinValue;
        private int _creator;
        private DateTime _modifiedDate = DateTime.MinValue;
        private int _modifier;
        private int _orderDetail;
        private int _packingQty;
        private string _remarks;
        private int _weeklyProductionCapacity;
        #endregion
        
        #region Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.CartonBO _objCarton;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objCreator;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objModifier;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.OrderDetailBO _objOrderDetail;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.WeeklyProductionCapacityBO _objWeeklyProductionCapacity;
        #endregion
        
        #region Foreign Table Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.PackingListCartonItemBO> packingListCartonItemsWhereThisIsPackingListList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _packingListCartonItemsWhereThisIsPackingListLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO> packingListSizeQtysWhereThisIsPackingListList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _packingListSizeQtysWhereThisIsPackingListLoaded;
        #endregion
        
        #region Other fields
        
        private Indico.DAL.PackingList _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>.</summary>
        public int Carton
        {   
            get {return _carton;}
            set 
            {
                OnCartonChanging(value);
                _carton = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Carton = (from o in this._context.Context.Carton
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Carton>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Carton = null;
                OnCartonChanged();
            }
        }
        /// <summary>.</summary>
        public int CartonNo
        {   
            get {return _cartonNo;}
            set 
            {
                OnCartonNoChanging(value);
                _cartonNo = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CartonNo = value;
                }
                OnCartonNoChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime CreatedDate
        {   
            get {return _createdDate;}
            set 
            {
                OnCreatedDateChanging(value);
                _createdDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CreatedDate = value;
                }
                OnCreatedDateChanged();
            }
        }
        /// <summary>.</summary>
        public int Creator
        {   
            get {return _creator;}
            set 
            {
                OnCreatorChanging(value);
                _creator = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Creator = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Creator = null;
                OnCreatorChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime ModifiedDate
        {   
            get {return _modifiedDate;}
            set 
            {
                OnModifiedDateChanging(value);
                _modifiedDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ModifiedDate = value;
                }
                OnModifiedDateChanged();
            }
        }
        /// <summary>.</summary>
        public int Modifier
        {   
            get {return _modifier;}
            set 
            {
                OnModifierChanging(value);
                _modifier = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Modifier = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Modifier = null;
                OnModifierChanged();
            }
        }
        /// <summary>.</summary>
        public int OrderDetail
        {   
            get {return _orderDetail;}
            set 
            {
                OnOrderDetailChanging(value);
                _orderDetail = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.OrderDetail = (from o in this._context.Context.OrderDetail
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.OrderDetail>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.OrderDetail = null;
                OnOrderDetailChanged();
            }
        }
        /// <summary>.</summary>
        public int PackingQty
        {   
            get {return _packingQty;}
            set 
            {
                OnPackingQtyChanging(value);
                _packingQty = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.PackingQty = value;
                }
                OnPackingQtyChanged();
            }
        }
        /// <summary>. The maximum length of this property is 512.</summary>
        public string Remarks
        {   
            get {return _remarks;}
            set 
            {
                OnRemarksChanging(value);
                _remarks = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Remarks = value;
                }
                OnRemarksChanged();
            }
        }
        /// <summary>.</summary>
        public int WeeklyProductionCapacity
        {   
            get {return _weeklyProductionCapacity;}
            set 
            {
                OnWeeklyProductionCapacityChanging(value);
                _weeklyProductionCapacity = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.WeeklyProductionCapacity = (from o in this._context.Context.WeeklyProductionCapacity
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.WeeklyProductionCapacity>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.WeeklyProductionCapacity = null;
                OnWeeklyProductionCapacityChanged();
            }
        }
        
        internal Indico.DAL.PackingList ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        ///<summary>The CartonBO object identified by the value of Carton</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.CartonBO objCarton
        {
            get
            {
                if ( _carton > 0 && _objCarton == null)
                {
                        if (this._context == null)
                        {
                            _objCarton = new Indico.BusinessObjects.CartonBO();
                        }
                        else
                        {
                            _objCarton = new Indico.BusinessObjects.CartonBO(ref this._context);
                        }
                        _objCarton.ID = _carton;
                        _objCarton.GetObject(); 
                }
                return _objCarton;
            }
            set
            { 
                _objCarton = value;
                _carton = _objCarton.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Creator</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objCreator
        {
            get
            {
                if ( _creator > 0 && _objCreator == null)
                {
                        if (this._context == null)
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objCreator.ID = _creator;
                        _objCreator.GetObject(); 
                }
                return _objCreator;
            }
            set
            { 
                _objCreator = value;
                _creator = _objCreator.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Modifier</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objModifier
        {
            get
            {
                if ( _modifier > 0 && _objModifier == null)
                {
                        if (this._context == null)
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objModifier.ID = _modifier;
                        _objModifier.GetObject(); 
                }
                return _objModifier;
            }
            set
            { 
                _objModifier = value;
                _modifier = _objModifier.ID;
            }
        }
        ///<summary>The OrderDetailBO object identified by the value of OrderDetail</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.OrderDetailBO objOrderDetail
        {
            get
            {
                if ( _orderDetail > 0 && _objOrderDetail == null)
                {
                        if (this._context == null)
                        {
                            _objOrderDetail = new Indico.BusinessObjects.OrderDetailBO();
                        }
                        else
                        {
                            _objOrderDetail = new Indico.BusinessObjects.OrderDetailBO(ref this._context);
                        }
                        _objOrderDetail.ID = _orderDetail;
                        _objOrderDetail.GetObject(); 
                }
                return _objOrderDetail;
            }
            set
            { 
                _objOrderDetail = value;
                _orderDetail = _objOrderDetail.ID;
            }
        }
        ///<summary>The WeeklyProductionCapacityBO object identified by the value of WeeklyProductionCapacity</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.WeeklyProductionCapacityBO objWeeklyProductionCapacity
        {
            get
            {
                if ( _weeklyProductionCapacity > 0 && _objWeeklyProductionCapacity == null)
                {
                        if (this._context == null)
                        {
                            _objWeeklyProductionCapacity = new Indico.BusinessObjects.WeeklyProductionCapacityBO();
                        }
                        else
                        {
                            _objWeeklyProductionCapacity = new Indico.BusinessObjects.WeeklyProductionCapacityBO(ref this._context);
                        }
                        _objWeeklyProductionCapacity.ID = _weeklyProductionCapacity;
                        _objWeeklyProductionCapacity.GetObject(); 
                }
                return _objWeeklyProductionCapacity;
            }
            set
            { 
                _objWeeklyProductionCapacity = value;
                _weeklyProductionCapacity = _objWeeklyProductionCapacity.ID;
            }
        }
        #endregion
        
        #region Foreign Object Foreign Key Collections
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.PackingListCartonItemBO> PackingListCartonItemsWhereThisIsPackingList // FK_PackingListCartonItem_PackingList
        {
            get
            {
                if (!_packingListCartonItemsWhereThisIsPackingListLoaded)
                {
                    _packingListCartonItemsWhereThisIsPackingListLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.PackingList obj = (from o in context.PackingList
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.PackingListCartonItemsWhereThisIsPackingList.Load();
                        packingListCartonItemsWhereThisIsPackingListList = new IndicoList<Indico.BusinessObjects.PackingListCartonItemBO>(obj.PackingListCartonItemsWhereThisIsPackingList.Count);
                        
                        foreach (Indico.DAL.PackingListCartonItem o in obj.PackingListCartonItemsWhereThisIsPackingList)
                        {
                            Indico.BusinessObjects.PackingListCartonItemBO fkObj = new Indico.BusinessObjects.PackingListCartonItemBO(o, ref this._context);
                            packingListCartonItemsWhereThisIsPackingListList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        packingListCartonItemsWhereThisIsPackingListList = new IndicoList<Indico.BusinessObjects.PackingListCartonItemBO>();
                    }
                    
                    packingListCartonItemsWhereThisIsPackingListList.OnBeforeRemove += new EventHandler(PackingListCartonItemsWhereThisIsPackingListList_OnBeforeRemove);
                    packingListCartonItemsWhereThisIsPackingListList.OnAfterAdd += new EventHandler(PackingListCartonItemsWhereThisIsPackingListList_OnAfterAdd);
                }
                
                return packingListCartonItemsWhereThisIsPackingListList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO> PackingListSizeQtysWhereThisIsPackingList // FK_PackingListSizeQty_PackingList
        {
            get
            {
                if (!_packingListSizeQtysWhereThisIsPackingListLoaded)
                {
                    _packingListSizeQtysWhereThisIsPackingListLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.PackingList obj = (from o in context.PackingList
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.PackingListSizeQtysWhereThisIsPackingList.Load();
                        packingListSizeQtysWhereThisIsPackingListList = new IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO>(obj.PackingListSizeQtysWhereThisIsPackingList.Count);
                        
                        foreach (Indico.DAL.PackingListSizeQty o in obj.PackingListSizeQtysWhereThisIsPackingList)
                        {
                            Indico.BusinessObjects.PackingListSizeQtyBO fkObj = new Indico.BusinessObjects.PackingListSizeQtyBO(o, ref this._context);
                            packingListSizeQtysWhereThisIsPackingListList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        packingListSizeQtysWhereThisIsPackingListList = new IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO>();
                    }
                    
                    packingListSizeQtysWhereThisIsPackingListList.OnBeforeRemove += new EventHandler(PackingListSizeQtysWhereThisIsPackingListList_OnBeforeRemove);
                    packingListSizeQtysWhereThisIsPackingListList.OnAfterAdd += new EventHandler(PackingListSizeQtysWhereThisIsPackingListList_OnAfterAdd);
                }
                
                return packingListSizeQtysWhereThisIsPackingListList;
            }
        }
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the PackingListBO class using the supplied Indico.DAL.PackingList. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.PackingList whose properties will be used to initialise the PackingListBO</param>
        internal PackingListBO(Indico.DAL.PackingList obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.PackingList 
            this.ID = obj.ID;
            
            this.Carton = (obj.CartonReference.EntityKey != null && obj.CartonReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CartonReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.CartonNo = obj.CartonNo;
            this.CreatedDate = obj.CreatedDate;
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.OrderDetail = (obj.OrderDetailReference.EntityKey != null && obj.OrderDetailReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.OrderDetailReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.PackingQty = obj.PackingQty;
            this.Remarks = obj.Remarks;
            this.WeeklyProductionCapacity = (obj.WeeklyProductionCapacityReference.EntityKey != null && obj.WeeklyProductionCapacityReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.WeeklyProductionCapacityReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.PackingList SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.PackingList properties
            Indico.DAL.PackingList obj = new Indico.DAL.PackingList();
            
            if (this.ID > 0)
            {
                obj = context.PackingList.FirstOrDefault<PackingList>(o => o.ID == this.ID);
            }
            
            obj.CartonNo = this.CartonNo;
            obj.CreatedDate = this.CreatedDate;
            obj.ModifiedDate = this.ModifiedDate;
            obj.PackingQty = this.PackingQty;
            obj.Remarks = this.Remarks;
            
            if (this.Carton > 0) obj.Carton = context.Carton.FirstOrDefault(o => o.ID == this.Carton);
            if (this.Creator > 0) obj.Creator = context.User.FirstOrDefault(o => o.ID == this.Creator);
            if (this.Modifier > 0) obj.Modifier = context.User.FirstOrDefault(o => o.ID == this.Modifier);
            if (this.OrderDetail > 0) obj.OrderDetail = context.OrderDetail.FirstOrDefault(o => o.ID == this.OrderDetail);
            if (this.WeeklyProductionCapacity > 0) obj.WeeklyProductionCapacity = context.WeeklyProductionCapacity.FirstOrDefault(o => o.ID == this.WeeklyProductionCapacity);
            
            if (_packingListCartonItemsWhereThisIsPackingListLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.PackingListCartonItemBO.ToEntityList(this.PackingListCartonItemsWhereThisIsPackingList, context), 
                    obj.PackingListCartonItemsWhereThisIsPackingList);
            if (_packingListSizeQtysWhereThisIsPackingListLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.PackingListSizeQtyBO.ToEntityList(this.PackingListSizeQtysWhereThisIsPackingList, context), 
                    obj.PackingListSizeQtysWhereThisIsPackingList);
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.PackingList))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.PackingList obj = (Indico.DAL.PackingList)eObj;
            
            // set the Indico.BusinessObjects.PackingListBO properties
            this.ID = obj.ID;
            
            this.CartonNo = obj.CartonNo;
            this.CreatedDate = obj.CreatedDate;
            this.ModifiedDate = obj.ModifiedDate;
            this.PackingQty = obj.PackingQty;
            this.Remarks = obj.Remarks;
            
            this.Carton = (obj.CartonReference.EntityKey != null && obj.CartonReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CartonReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.OrderDetail = (obj.OrderDetailReference.EntityKey != null && obj.OrderDetailReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.OrderDetailReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.WeeklyProductionCapacity = (obj.WeeklyProductionCapacityReference.EntityKey != null && obj.WeeklyProductionCapacityReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.WeeklyProductionCapacityReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.PackingListBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.PackingListBO properties
            this.ID = obj.ID;
            
            this.Carton = obj.Carton;
            this.CartonNo = obj.CartonNo;
            this.CreatedDate = obj.CreatedDate;
            this.Creator = obj.Creator;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = obj.Modifier;
            this.OrderDetail = obj.OrderDetail;
            this.PackingQty = obj.PackingQty;
            this.Remarks = obj.Remarks;
            this.WeeklyProductionCapacity = obj.WeeklyProductionCapacity;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.PackingListBO> IQueryableToList(IQueryable<Indico.DAL.PackingList> oQuery)
        {
            List<Indico.DAL.PackingList> oList = oQuery.ToList();
            List<Indico.BusinessObjects.PackingListBO> rList = new List<Indico.BusinessObjects.PackingListBO>(oList.Count);
            foreach (Indico.DAL.PackingList o in oList)
            {
                Indico.BusinessObjects.PackingListBO obj = new Indico.BusinessObjects.PackingListBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.PackingListBO> ToList(IEnumerable<Indico.DAL.PackingList> oQuery)
        {
            List<Indico.DAL.PackingList> oList = oQuery.ToList();
            List<Indico.BusinessObjects.PackingListBO> rList = new List<Indico.BusinessObjects.PackingListBO>(oList.Count);
            foreach (Indico.DAL.PackingList o in oList)
            {
                Indico.BusinessObjects.PackingListBO obj = new Indico.BusinessObjects.PackingListBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.PackingList> ToEntityList(List<PackingListBO> bos, IndicoEntities context)
        {
            // build a List of PackingList entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.PackingList.Count() == 0) ? new List<Indico.DAL.PackingList>() : (context.PackingList.Where(BuildContainsExpression<PackingList, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.PackingList>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.PackingList> ToEntityCollection(List<PackingListBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of PackingList entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.PackingList> el = (context.PackingList.Count() == 0) ? new List<Indico.DAL.PackingList>() : 
                context.PackingList.Where(BuildContainsExpression<PackingList, int>(e => e.ID, ids))
                .ToList<Indico.DAL.PackingList>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.PackingList> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.PackingList>();
                
            foreach (Indico.DAL.PackingList r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.PackingList ToEntity(IndicoEntities context)
        {
            return (from o in context.PackingList
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToPackingList(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.PackingList obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToPackingList(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.PackingList obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.PackingList obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.PackingListBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.PackingListBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.PackingList> oQuery =
                        from o in context.PackingList
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.PackingList> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.PackingListBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.PackingListBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PackingListBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PackingListBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.PackingList> oQuery =
                (from o in context.PackingList
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PackingListBO> packinglists = IQueryableToList(oQuery);
            context.Dispose();
            return packinglists;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.PackingListBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.PackingListBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PackingListBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PackingListBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.PackingList> oQuery =
                (from o in context.PackingList
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.CartonNo == 0 || this.CartonNo == o.CartonNo) &&
                    (this.WeeklyProductionCapacity == 0 || this.WeeklyProductionCapacity == o.WeeklyProductionCapacity.ID) &&
                    (this.OrderDetail == 0 || this.OrderDetail == o.OrderDetail.ID) &&
                    (this.PackingQty == 0 || this.PackingQty == o.PackingQty) &&
                    (this.Carton == 0 || this.Carton == o.Carton.ID) &&
                    (this.Remarks == null || this.Remarks == o.Remarks) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PackingListBO> packinglists = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return packinglists;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.PackingList
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.CartonNo == 0 || this.CartonNo == o.CartonNo) &&
                    (this.WeeklyProductionCapacity == 0 || this.WeeklyProductionCapacity == o.WeeklyProductionCapacity.ID) &&
                    (this.OrderDetail == 0 || this.OrderDetail == o.OrderDetail.ID) &&
                    (this.PackingQty == 0 || this.PackingQty == o.PackingQty) &&
                    (this.Carton == 0 || this.Carton == o.Carton.ID) &&
                    (this.Remarks == null || this.Remarks == o.Remarks) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.PackingListBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.PackingListBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PackingListBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PackingListBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.PackingList> oQuery =
                (from o in context.PackingList
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.CartonNo == 0 || o.CartonNo == this.CartonNo) &&
                    (this.WeeklyProductionCapacity == 0 || o.WeeklyProductionCapacity.ID == this.WeeklyProductionCapacity) &&
                    (this.OrderDetail == 0 || o.OrderDetail.ID == this.OrderDetail) &&
                    (this.PackingQty == 0 || o.PackingQty == this.PackingQty) &&
                    (this.Carton == 0 || o.Carton.ID == this.Carton) &&
                    (this.Remarks == null || o.Remarks.Contains(this.Remarks)) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.ModifiedDate == DateTime.MinValue || o.ModifiedDate == this.ModifiedDate) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PackingListBO> packinglists = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return packinglists;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.PackingList
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.CartonNo == 0 || o.CartonNo == this.CartonNo) &&
                    (this.WeeklyProductionCapacity == 0 || o.WeeklyProductionCapacity.ID == this.WeeklyProductionCapacity) &&
                    (this.OrderDetail == 0 || o.OrderDetail.ID == this.OrderDetail) &&
                    (this.PackingQty == 0 || o.PackingQty == this.PackingQty) &&
                    (this.Carton == 0 || o.Carton.ID == this.Carton) &&
                    (this.Remarks == null || o.Remarks.Contains(this.Remarks)) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.ModifiedDate == DateTime.MinValue || o.ModifiedDate == this.ModifiedDate) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.PackingListBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.PackingListBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PackingListBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PackingListBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.PackingList> oQuery =
                (from o in context.PackingList
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.CartonNo == 0 || this.CartonNo == o.CartonNo) && 
                    (this.WeeklyProductionCapacity == 0 || this.WeeklyProductionCapacity == o.WeeklyProductionCapacity.ID) && 
                    (this.OrderDetail == 0 || this.OrderDetail == o.OrderDetail.ID) && 
                    (this.PackingQty == 0 || this.PackingQty == o.PackingQty) && 
                    (this.Carton == 0 || this.Carton == o.Carton.ID) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) && 
                    ((o.Remarks.Contains(this.Remarks)) ||
                    (this.Remarks == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PackingListBO> packinglists = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return packinglists;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.PackingList
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.CartonNo == 0 || this.CartonNo == o.CartonNo) && 
                    (this.WeeklyProductionCapacity == 0 || this.WeeklyProductionCapacity == o.WeeklyProductionCapacity.ID) && 
                    (this.OrderDetail == 0 || this.OrderDetail == o.OrderDetail.ID) && 
                    (this.PackingQty == 0 || this.PackingQty == o.PackingQty) && 
                    (this.Carton == 0 || this.Carton == o.Carton.ID) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) && 
                    ((o.Remarks.Contains(this.Remarks)) ||
                    (this.Remarks == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.PackingListBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.PackingListBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.PackingListBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.PackingListBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.PackingListBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.PackingListBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnPackingListBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PackingListBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPackingListBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnPackingListBOIDChanged();
        partial void OnPackingListBOIDChanging(int value);
        
        partial void OnCartonNoChanged()
        {
            OnPackingListBOCartonNoChanged();
        }
        
        partial void OnCartonNoChanging(int value)
        {
            OnPackingListBOCartonNoChanging(value);
        }
        partial void OnCartonNoChanged();
        partial void OnCartonNoChanging(int value);
        partial void OnPackingListBOCartonNoChanged();
        partial void OnPackingListBOCartonNoChanging(int value);
        
        partial void OnWeeklyProductionCapacityChanged()
        {
            OnPackingListBOWeeklyProductionCapacityChanged();
        }
        
        partial void OnWeeklyProductionCapacityChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PackingListBO.WeeklyProductionCapacity must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPackingListBOWeeklyProductionCapacityChanging(value);
        }
        partial void OnWeeklyProductionCapacityChanged();
        partial void OnWeeklyProductionCapacityChanging(int value);
        partial void OnPackingListBOWeeklyProductionCapacityChanged();
        partial void OnPackingListBOWeeklyProductionCapacityChanging(int value);
        
        partial void OnOrderDetailChanged()
        {
            OnPackingListBOOrderDetailChanged();
        }
        
        partial void OnOrderDetailChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PackingListBO.OrderDetail must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPackingListBOOrderDetailChanging(value);
        }
        partial void OnOrderDetailChanged();
        partial void OnOrderDetailChanging(int value);
        partial void OnPackingListBOOrderDetailChanged();
        partial void OnPackingListBOOrderDetailChanging(int value);
        
        partial void OnPackingQtyChanged()
        {
            OnPackingListBOPackingQtyChanged();
        }
        
        partial void OnPackingQtyChanging(int value)
        {
            OnPackingListBOPackingQtyChanging(value);
        }
        partial void OnPackingQtyChanged();
        partial void OnPackingQtyChanging(int value);
        partial void OnPackingListBOPackingQtyChanged();
        partial void OnPackingListBOPackingQtyChanging(int value);
        
        partial void OnCartonChanged()
        {
            OnPackingListBOCartonChanged();
        }
        
        partial void OnCartonChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PackingListBO.Carton must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPackingListBOCartonChanging(value);
        }
        partial void OnCartonChanged();
        partial void OnCartonChanging(int value);
        partial void OnPackingListBOCartonChanged();
        partial void OnPackingListBOCartonChanging(int value);
        
        partial void OnRemarksChanged()
        {
            OnPackingListBORemarksChanged();
        }
        
        partial void OnRemarksChanging(string value)
        {
            if (value != null && value.Length > 512)
            {
                throw new Exception(String.Format("PackingListBO.Remarks has a maximum length of 512. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPackingListBORemarksChanging(value);
        }
        partial void OnRemarksChanged();
        partial void OnRemarksChanging(string value);
        partial void OnPackingListBORemarksChanged();
        partial void OnPackingListBORemarksChanging(string value);
        
        partial void OnCreatorChanged()
        {
            OnPackingListBOCreatorChanged();
        }
        
        partial void OnCreatorChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PackingListBO.Creator must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPackingListBOCreatorChanging(value);
        }
        partial void OnCreatorChanged();
        partial void OnCreatorChanging(int value);
        partial void OnPackingListBOCreatorChanged();
        partial void OnPackingListBOCreatorChanging(int value);
        
        partial void OnCreatedDateChanged()
        {
            OnPackingListBOCreatedDateChanged();
        }
        
        partial void OnCreatedDateChanging(DateTime value)
        {
            OnPackingListBOCreatedDateChanging(value);
        }
        partial void OnCreatedDateChanged();
        partial void OnCreatedDateChanging(DateTime value);
        partial void OnPackingListBOCreatedDateChanged();
        partial void OnPackingListBOCreatedDateChanging(DateTime value);
        
        partial void OnModifierChanged()
        {
            OnPackingListBOModifierChanged();
        }
        
        partial void OnModifierChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PackingListBO.Modifier must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPackingListBOModifierChanging(value);
        }
        partial void OnModifierChanged();
        partial void OnModifierChanging(int value);
        partial void OnPackingListBOModifierChanged();
        partial void OnPackingListBOModifierChanging(int value);
        
        partial void OnModifiedDateChanged()
        {
            OnPackingListBOModifiedDateChanged();
        }
        
        partial void OnModifiedDateChanging(DateTime value)
        {
            OnPackingListBOModifiedDateChanging(value);
        }
        partial void OnModifiedDateChanged();
        partial void OnModifiedDateChanging(DateTime value);
        partial void OnPackingListBOModifiedDateChanged();
        partial void OnPackingListBOModifiedDateChanging(DateTime value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.PackingListBO))
                return 1;
            Indico.BusinessObjects.PackingListBOComparer c = new Indico.BusinessObjects.PackingListBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.PackingListBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.PackingList)sender);
            }
        }
        
        void PackingListCartonItemsWhereThisIsPackingListList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.PackingListCartonItem obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PackingListCartonItemBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PackingListCartonItemBO>)sender)[((IndicoList<Indico.BusinessObjects.PackingListCartonItemBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PackingListCartonItemsWhereThisIsPackingList.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PackingListCartonItemBO>)sender)[((IndicoList<Indico.BusinessObjects.PackingListCartonItemBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PackingListCartonItemsWhereThisIsPackingList.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PackingListCartonItemsWhereThisIsPackingListList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.PackingListCartonItem obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PackingListCartonItemBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PackingListCartonItemBO>)sender)[((IndicoList<Indico.BusinessObjects.PackingListCartonItemBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PackingListCartonItemsWhereThisIsPackingList.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PackingListCartonItemBO>)sender)[((IndicoList<Indico.BusinessObjects.PackingListCartonItemBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PackingListCartonItemsWhereThisIsPackingList.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PackingListSizeQtysWhereThisIsPackingListList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.PackingListSizeQty obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO>)sender)[((IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PackingListSizeQtysWhereThisIsPackingList.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO>)sender)[((IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PackingListSizeQtysWhereThisIsPackingList.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PackingListSizeQtysWhereThisIsPackingListList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.PackingListSizeQty obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO>)sender)[((IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PackingListSizeQtysWhereThisIsPackingList.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO>)sender)[((IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PackingListSizeQtysWhereThisIsPackingList.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
            this._packingListCartonItemsWhereThisIsPackingListLoaded = false;
            if (this.packingListCartonItemsWhereThisIsPackingListList != null)
            {
                this.packingListCartonItemsWhereThisIsPackingListList.OnBeforeRemove -= new EventHandler(PackingListCartonItemsWhereThisIsPackingListList_OnBeforeRemove);
                this.packingListCartonItemsWhereThisIsPackingListList.OnAfterAdd -= new EventHandler(PackingListCartonItemsWhereThisIsPackingListList_OnAfterAdd);
            }
            this._packingListSizeQtysWhereThisIsPackingListLoaded = false;
            if (this.packingListSizeQtysWhereThisIsPackingListList != null)
            {
                this.packingListSizeQtysWhereThisIsPackingListList.OnBeforeRemove -= new EventHandler(PackingListSizeQtysWhereThisIsPackingListList_OnBeforeRemove);
                this.packingListSizeQtysWhereThisIsPackingListList.OnAfterAdd -= new EventHandler(PackingListSizeQtysWhereThisIsPackingListList_OnAfterAdd);
            }
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region PackingListBOComparer
    public class PackingListBOComparer : IComparer<Indico.BusinessObjects.PackingListBO>
    {
        private string propertyToCompareName;
        public PackingListBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.PackingListBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.PackingListBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public PackingListBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.PackingListBO> Members
        public int Compare(Indico.BusinessObjects.PackingListBO x, Indico.BusinessObjects.PackingListBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.PackingListBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.PackingListBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.PackingListBO x, Indico.BusinessObjects.PackingListBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
