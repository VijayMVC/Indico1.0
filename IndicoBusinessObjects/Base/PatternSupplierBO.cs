// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class PatternSupplierBO : BusinessObject, IComparable
    {
        #region fields
        #region Scalar Fields
        private int id;
        private string _address1;
        private string _address2;
        private string _city;
        private int? _country;
        private DateTime _createdDate = DateTime.MinValue;
        private int _creator;
        private string _emailAddress;
        private DateTime _modifiedDate = DateTime.MinValue;
        private int _modifier;
        private string _name = string.Empty;
        private string _postcode;
        private string _state;
        private string _telephoneNumber;
        #endregion
        
        #region Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.CountryBO _objCountry;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objCreator;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objModifier;
        #endregion
        
        #region Foreign Table Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.PatternBO> patternsWhereThisIsPatternSupplierList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _patternsWhereThisIsPatternSupplierLoaded;
        #endregion
        
        #region Other fields
        
        private Indico.DAL.PatternSupplier _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>Address1 of the pattern supplier. The maximum length of this property is 128.</summary>
        public string Address1
        {   
            get {return _address1;}
            set 
            {
                OnAddress1Changing(value);
                _address1 = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Address1 = value;
                }
                OnAddress1Changed();
            }
        }
        /// <summary>Address2 of the pattern supplier. The maximum length of this property is 128.</summary>
        public string Address2
        {   
            get {return _address2;}
            set 
            {
                OnAddress2Changing(value);
                _address2 = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Address2 = value;
                }
                OnAddress2Changed();
            }
        }
        /// <summary>City of the pattern supplier. The maximum length of this property is 68.</summary>
        public string City
        {   
            get {return _city;}
            set 
            {
                OnCityChanging(value);
                _city = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.City = value;
                }
                OnCityChanged();
            }
        }
        /// <summary>Country of the pattern supplier.</summary>
        public int? Country
        {   
            get {return _country;}
            set 
            {
                OnCountryChanging(value);
                _country = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.Country = (from o in this._context.Context.Country
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Country>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Country = null;
                OnCountryChanged();
            }
        }
        /// <summary>Created date.</summary>
        public DateTime CreatedDate
        {   
            get {return _createdDate;}
            set 
            {
                OnCreatedDateChanging(value);
                _createdDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CreatedDate = value;
                }
                OnCreatedDateChanged();
            }
        }
        /// <summary>Creator.</summary>
        public int Creator
        {   
            get {return _creator;}
            set 
            {
                OnCreatorChanging(value);
                _creator = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Creator = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Creator = null;
                OnCreatorChanged();
            }
        }
        /// <summary>Email address of the pattern supplier. The maximum length of this property is 128.</summary>
        public string EmailAddress
        {   
            get {return _emailAddress;}
            set 
            {
                OnEmailAddressChanging(value);
                _emailAddress = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.EmailAddress = value;
                }
                OnEmailAddressChanged();
            }
        }
        /// <summary>Modified date.</summary>
        public DateTime ModifiedDate
        {   
            get {return _modifiedDate;}
            set 
            {
                OnModifiedDateChanging(value);
                _modifiedDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ModifiedDate = value;
                }
                OnModifiedDateChanged();
            }
        }
        /// <summary>Modifier.</summary>
        public int Modifier
        {   
            get {return _modifier;}
            set 
            {
                OnModifierChanging(value);
                _modifier = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Modifier = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Modifier = null;
                OnModifierChanged();
            }
        }
        /// <summary>Name of the pattern supplier. The maximum length of this property is 64.</summary>
        public string Name
        {   
            get {return _name;}
            set 
            {
                OnNameChanging(value);
                _name = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Name = value;
                }
                OnNameChanged();
            }
        }
        /// <summary>Postcode of the pattern supplier. The maximum length of this property is 20.</summary>
        public string Postcode
        {   
            get {return _postcode;}
            set 
            {
                OnPostcodeChanging(value);
                _postcode = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Postcode = value;
                }
                OnPostcodeChanged();
            }
        }
        /// <summary>State of the pattern supplier. The maximum length of this property is 20.</summary>
        public string State
        {   
            get {return _state;}
            set 
            {
                OnStateChanging(value);
                _state = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.State = value;
                }
                OnStateChanged();
            }
        }
        /// <summary>Telephononumber of the pattern supplier. The maximum length of this property is 20.</summary>
        public string TelephoneNumber
        {   
            get {return _telephoneNumber;}
            set 
            {
                OnTelephoneNumberChanging(value);
                _telephoneNumber = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.TelephoneNumber = value;
                }
                OnTelephoneNumberChanged();
            }
        }
        
        internal Indico.DAL.PatternSupplier ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        ///<summary>The CountryBO object identified by the value of Country</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.CountryBO objCountry
        {
            get
            {
                if (_country != null && _country > 0 && _objCountry == null)
                {
                        if (this._context == null)
                        {
                            _objCountry = new Indico.BusinessObjects.CountryBO();
                        }
                        else
                        {
                            _objCountry = new Indico.BusinessObjects.CountryBO(ref this._context);
                        }
                        _objCountry.ID = Convert.ToInt32(_country);
                        _objCountry.GetObject(); 
                }
                return _objCountry;
            }
            set
            { 
                _objCountry = value;
                _country = _objCountry.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Creator</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objCreator
        {
            get
            {
                if ( _creator > 0 && _objCreator == null)
                {
                        if (this._context == null)
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objCreator.ID = _creator;
                        _objCreator.GetObject(); 
                }
                return _objCreator;
            }
            set
            { 
                _objCreator = value;
                _creator = _objCreator.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Modifier</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objModifier
        {
            get
            {
                if ( _modifier > 0 && _objModifier == null)
                {
                        if (this._context == null)
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objModifier.ID = _modifier;
                        _objModifier.GetObject(); 
                }
                return _objModifier;
            }
            set
            { 
                _objModifier = value;
                _modifier = _objModifier.ID;
            }
        }
        #endregion
        
        #region Foreign Object Foreign Key Collections
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.PatternBO> PatternsWhereThisIsPatternSupplier // FK_Pattern_PatternSupplier
        {
            get
            {
                if (!_patternsWhereThisIsPatternSupplierLoaded)
                {
                    _patternsWhereThisIsPatternSupplierLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.PatternSupplier obj = (from o in context.PatternSupplier
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.PatternsWhereThisIsPatternSupplier.Load();
                        patternsWhereThisIsPatternSupplierList = new IndicoList<Indico.BusinessObjects.PatternBO>(obj.PatternsWhereThisIsPatternSupplier.Count);
                        
                        foreach (Indico.DAL.Pattern o in obj.PatternsWhereThisIsPatternSupplier)
                        {
                            Indico.BusinessObjects.PatternBO fkObj = new Indico.BusinessObjects.PatternBO(o, ref this._context);
                            patternsWhereThisIsPatternSupplierList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        patternsWhereThisIsPatternSupplierList = new IndicoList<Indico.BusinessObjects.PatternBO>();
                    }
                    
                    patternsWhereThisIsPatternSupplierList.OnBeforeRemove += new EventHandler(PatternsWhereThisIsPatternSupplierList_OnBeforeRemove);
                    patternsWhereThisIsPatternSupplierList.OnAfterAdd += new EventHandler(PatternsWhereThisIsPatternSupplierList_OnAfterAdd);
                }
                
                return patternsWhereThisIsPatternSupplierList;
            }
        }
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the PatternSupplierBO class using the supplied Indico.DAL.PatternSupplier. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.PatternSupplier whose properties will be used to initialise the PatternSupplierBO</param>
        internal PatternSupplierBO(Indico.DAL.PatternSupplier obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.PatternSupplier 
            this.ID = obj.ID;
            
            this.Address1 = obj.Address1;
            this.Address2 = obj.Address2;
            this.City = obj.City;
            this.Country = (obj.CountryReference.EntityKey != null && obj.CountryReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CountryReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.CreatedDate = obj.CreatedDate;
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.EmailAddress = obj.EmailAddress;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Name = obj.Name;
            this.Postcode = obj.Postcode;
            this.State = obj.State;
            this.TelephoneNumber = obj.TelephoneNumber;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.PatternSupplier SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.PatternSupplier properties
            Indico.DAL.PatternSupplier obj = new Indico.DAL.PatternSupplier();
            
            if (this.ID > 0)
            {
                obj = context.PatternSupplier.FirstOrDefault<PatternSupplier>(o => o.ID == this.ID);
            }
            
            obj.Address1 = this.Address1;
            obj.Address2 = this.Address2;
            obj.City = this.City;
            obj.CreatedDate = this.CreatedDate;
            obj.EmailAddress = this.EmailAddress;
            obj.ModifiedDate = this.ModifiedDate;
            obj.Name = this.Name;
            obj.Postcode = this.Postcode;
            obj.State = this.State;
            obj.TelephoneNumber = this.TelephoneNumber;
            
            if (this.Country != null && this.Country > 0) obj.Country = context.Country.FirstOrDefault(o => o.ID == this.Country);
            if (this.Creator > 0) obj.Creator = context.User.FirstOrDefault(o => o.ID == this.Creator);
            if (this.Modifier > 0) obj.Modifier = context.User.FirstOrDefault(o => o.ID == this.Modifier);
            
            if (_patternsWhereThisIsPatternSupplierLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.PatternBO.ToEntityList(this.PatternsWhereThisIsPatternSupplier, context), 
                    obj.PatternsWhereThisIsPatternSupplier);
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.PatternSupplier))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.PatternSupplier obj = (Indico.DAL.PatternSupplier)eObj;
            
            // set the Indico.BusinessObjects.PatternSupplierBO properties
            this.ID = obj.ID;
            
            this.Address1 = obj.Address1;
            this.Address2 = obj.Address2;
            this.City = obj.City;
            this.CreatedDate = obj.CreatedDate;
            this.EmailAddress = obj.EmailAddress;
            this.ModifiedDate = obj.ModifiedDate;
            this.Name = obj.Name;
            this.Postcode = obj.Postcode;
            this.State = obj.State;
            this.TelephoneNumber = obj.TelephoneNumber;
            
            this.Country = (obj.CountryReference.EntityKey != null && obj.CountryReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CountryReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.PatternSupplierBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.PatternSupplierBO properties
            this.ID = obj.ID;
            
            this.Address1 = obj.Address1;
            this.Address2 = obj.Address2;
            this.City = obj.City;
            this.Country = obj.Country;
            this.CreatedDate = obj.CreatedDate;
            this.Creator = obj.Creator;
            this.EmailAddress = obj.EmailAddress;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = obj.Modifier;
            this.Name = obj.Name;
            this.Postcode = obj.Postcode;
            this.State = obj.State;
            this.TelephoneNumber = obj.TelephoneNumber;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.PatternSupplierBO> IQueryableToList(IQueryable<Indico.DAL.PatternSupplier> oQuery)
        {
            List<Indico.DAL.PatternSupplier> oList = oQuery.ToList();
            List<Indico.BusinessObjects.PatternSupplierBO> rList = new List<Indico.BusinessObjects.PatternSupplierBO>(oList.Count);
            foreach (Indico.DAL.PatternSupplier o in oList)
            {
                Indico.BusinessObjects.PatternSupplierBO obj = new Indico.BusinessObjects.PatternSupplierBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.PatternSupplierBO> ToList(IEnumerable<Indico.DAL.PatternSupplier> oQuery)
        {
            List<Indico.DAL.PatternSupplier> oList = oQuery.ToList();
            List<Indico.BusinessObjects.PatternSupplierBO> rList = new List<Indico.BusinessObjects.PatternSupplierBO>(oList.Count);
            foreach (Indico.DAL.PatternSupplier o in oList)
            {
                Indico.BusinessObjects.PatternSupplierBO obj = new Indico.BusinessObjects.PatternSupplierBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.PatternSupplier> ToEntityList(List<PatternSupplierBO> bos, IndicoEntities context)
        {
            // build a List of PatternSupplier entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.PatternSupplier.Count() == 0) ? new List<Indico.DAL.PatternSupplier>() : (context.PatternSupplier.Where(BuildContainsExpression<PatternSupplier, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.PatternSupplier>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.PatternSupplier> ToEntityCollection(List<PatternSupplierBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of PatternSupplier entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.PatternSupplier> el = (context.PatternSupplier.Count() == 0) ? new List<Indico.DAL.PatternSupplier>() : 
                context.PatternSupplier.Where(BuildContainsExpression<PatternSupplier, int>(e => e.ID, ids))
                .ToList<Indico.DAL.PatternSupplier>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.PatternSupplier> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.PatternSupplier>();
                
            foreach (Indico.DAL.PatternSupplier r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.PatternSupplier ToEntity(IndicoEntities context)
        {
            return (from o in context.PatternSupplier
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToPatternSupplier(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.PatternSupplier obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToPatternSupplier(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.PatternSupplier obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.PatternSupplier obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.PatternSupplierBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.PatternSupplierBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.PatternSupplier> oQuery =
                        from o in context.PatternSupplier
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.PatternSupplier> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.PatternSupplierBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.PatternSupplierBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PatternSupplierBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PatternSupplierBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.PatternSupplier> oQuery =
                (from o in context.PatternSupplier
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PatternSupplierBO> patternsuppliers = IQueryableToList(oQuery);
            context.Dispose();
            return patternsuppliers;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.PatternSupplierBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.PatternSupplierBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PatternSupplierBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PatternSupplierBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.PatternSupplier> oQuery =
                (from o in context.PatternSupplier
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Name == string.Empty || this.Name == o.Name) &&
                    (this.Address1 == null || this.Address1 == o.Address1) &&
                    (this.Address2 == null || this.Address2 == o.Address2) &&
                    (this.City == null || this.City == o.City) &&
                    (this.State == null || this.State == o.State) &&
                    (this.Postcode == null || this.Postcode == o.Postcode) &&
                    (this.Country == null || this.Country == o.Country.ID) &&
                    (this.EmailAddress == null || this.EmailAddress == o.EmailAddress) &&
                    (this.TelephoneNumber == null || this.TelephoneNumber == o.TelephoneNumber) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PatternSupplierBO> patternsuppliers = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return patternsuppliers;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.PatternSupplier
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Name == string.Empty || this.Name == o.Name) &&
                    (this.Address1 == null || this.Address1 == o.Address1) &&
                    (this.Address2 == null || this.Address2 == o.Address2) &&
                    (this.City == null || this.City == o.City) &&
                    (this.State == null || this.State == o.State) &&
                    (this.Postcode == null || this.Postcode == o.Postcode) &&
                    (this.Country == null || this.Country == o.Country.ID) &&
                    (this.EmailAddress == null || this.EmailAddress == o.EmailAddress) &&
                    (this.TelephoneNumber == null || this.TelephoneNumber == o.TelephoneNumber) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.PatternSupplierBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.PatternSupplierBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PatternSupplierBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PatternSupplierBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.PatternSupplier> oQuery =
                (from o in context.PatternSupplier
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Name == string.Empty || o.Name.Contains(this.Name)) &&
                    (this.Address1 == null || o.Address1.Contains(this.Address1)) &&
                    (this.Address2 == null || o.Address2.Contains(this.Address2)) &&
                    (this.City == null || o.City.Contains(this.City)) &&
                    (this.State == null || o.State.Contains(this.State)) &&
                    (this.Postcode == null || o.Postcode.Contains(this.Postcode)) &&
                    (this.Country == null || o.Country.ID == this.Country) &&
                    (this.EmailAddress == null || o.EmailAddress.Contains(this.EmailAddress)) &&
                    (this.TelephoneNumber == null || o.TelephoneNumber.Contains(this.TelephoneNumber)) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.ModifiedDate == DateTime.MinValue || o.ModifiedDate == this.ModifiedDate) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PatternSupplierBO> patternsuppliers = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return patternsuppliers;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.PatternSupplier
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Name == string.Empty || o.Name.Contains(this.Name)) &&
                    (this.Address1 == null || o.Address1.Contains(this.Address1)) &&
                    (this.Address2 == null || o.Address2.Contains(this.Address2)) &&
                    (this.City == null || o.City.Contains(this.City)) &&
                    (this.State == null || o.State.Contains(this.State)) &&
                    (this.Postcode == null || o.Postcode.Contains(this.Postcode)) &&
                    (this.Country == null || o.Country.ID == this.Country) &&
                    (this.EmailAddress == null || o.EmailAddress.Contains(this.EmailAddress)) &&
                    (this.TelephoneNumber == null || o.TelephoneNumber.Contains(this.TelephoneNumber)) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.ModifiedDate == DateTime.MinValue || o.ModifiedDate == this.ModifiedDate) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.PatternSupplierBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.PatternSupplierBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PatternSupplierBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PatternSupplierBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.PatternSupplier> oQuery =
                (from o in context.PatternSupplier
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Country == null || this.Country == o.Country.ID) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) && 
                    ((o.Name.Contains(this.Name)) ||
                    (o.Address1.Contains(this.Address1)) ||
                    (o.Address2.Contains(this.Address2)) ||
                    (o.City.Contains(this.City)) ||
                    (o.State.Contains(this.State)) ||
                    (o.Postcode.Contains(this.Postcode)) ||
                    (o.EmailAddress.Contains(this.EmailAddress)) ||
                    (o.TelephoneNumber.Contains(this.TelephoneNumber)) ||
                    (this.Name == null && this.Address1 == null && this.Address2 == null && this.City == null && this.State == null && this.Postcode == null && this.EmailAddress == null && this.TelephoneNumber == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PatternSupplierBO> patternsuppliers = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return patternsuppliers;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.PatternSupplier
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Country == null || this.Country == o.Country.ID) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) && 
                    ((o.Name.Contains(this.Name)) ||
                    (o.Address1.Contains(this.Address1)) ||
                    (o.Address2.Contains(this.Address2)) ||
                    (o.City.Contains(this.City)) ||
                    (o.State.Contains(this.State)) ||
                    (o.Postcode.Contains(this.Postcode)) ||
                    (o.EmailAddress.Contains(this.EmailAddress)) ||
                    (o.TelephoneNumber.Contains(this.TelephoneNumber)) ||
                    (this.Name == null && this.Address1 == null && this.Address2 == null && this.City == null && this.State == null && this.Postcode == null && this.EmailAddress == null && this.TelephoneNumber == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.PatternSupplierBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.PatternSupplierBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.PatternSupplierBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.PatternSupplierBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.PatternSupplierBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.PatternSupplierBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnPatternSupplierBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PatternSupplierBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPatternSupplierBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnPatternSupplierBOIDChanged();
        partial void OnPatternSupplierBOIDChanging(int value);
        
        partial void OnNameChanged()
        {
            OnPatternSupplierBONameChanged();
        }
        
        partial void OnNameChanging(string value)
        {
            if (value != null && value.Length > 64)
            {
                throw new Exception(String.Format("PatternSupplierBO.Name has a maximum length of 64. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPatternSupplierBONameChanging(value);
        }
        partial void OnNameChanged();
        partial void OnNameChanging(string value);
        partial void OnPatternSupplierBONameChanged();
        partial void OnPatternSupplierBONameChanging(string value);
        
        partial void OnAddress1Changed()
        {
            OnPatternSupplierBOAddress1Changed();
        }
        
        partial void OnAddress1Changing(string value)
        {
            if (value != null && value.Length > 128)
            {
                throw new Exception(String.Format("PatternSupplierBO.Address1 has a maximum length of 128. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPatternSupplierBOAddress1Changing(value);
        }
        partial void OnAddress1Changed();
        partial void OnAddress1Changing(string value);
        partial void OnPatternSupplierBOAddress1Changed();
        partial void OnPatternSupplierBOAddress1Changing(string value);
        
        partial void OnAddress2Changed()
        {
            OnPatternSupplierBOAddress2Changed();
        }
        
        partial void OnAddress2Changing(string value)
        {
            if (value != null && value.Length > 128)
            {
                throw new Exception(String.Format("PatternSupplierBO.Address2 has a maximum length of 128. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPatternSupplierBOAddress2Changing(value);
        }
        partial void OnAddress2Changed();
        partial void OnAddress2Changing(string value);
        partial void OnPatternSupplierBOAddress2Changed();
        partial void OnPatternSupplierBOAddress2Changing(string value);
        
        partial void OnCityChanged()
        {
            OnPatternSupplierBOCityChanged();
        }
        
        partial void OnCityChanging(string value)
        {
            if (value != null && value.Length > 68)
            {
                throw new Exception(String.Format("PatternSupplierBO.City has a maximum length of 68. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPatternSupplierBOCityChanging(value);
        }
        partial void OnCityChanged();
        partial void OnCityChanging(string value);
        partial void OnPatternSupplierBOCityChanged();
        partial void OnPatternSupplierBOCityChanging(string value);
        
        partial void OnStateChanged()
        {
            OnPatternSupplierBOStateChanged();
        }
        
        partial void OnStateChanging(string value)
        {
            if (value != null && value.Length > 20)
            {
                throw new Exception(String.Format("PatternSupplierBO.State has a maximum length of 20. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPatternSupplierBOStateChanging(value);
        }
        partial void OnStateChanged();
        partial void OnStateChanging(string value);
        partial void OnPatternSupplierBOStateChanged();
        partial void OnPatternSupplierBOStateChanging(string value);
        
        partial void OnPostcodeChanged()
        {
            OnPatternSupplierBOPostcodeChanged();
        }
        
        partial void OnPostcodeChanging(string value)
        {
            if (value != null && value.Length > 20)
            {
                throw new Exception(String.Format("PatternSupplierBO.Postcode has a maximum length of 20. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPatternSupplierBOPostcodeChanging(value);
        }
        partial void OnPostcodeChanged();
        partial void OnPostcodeChanging(string value);
        partial void OnPatternSupplierBOPostcodeChanged();
        partial void OnPatternSupplierBOPostcodeChanging(string value);
        
        partial void OnCountryChanged()
        {
            OnPatternSupplierBOCountryChanged();
        }
        
        partial void OnCountryChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("PatternSupplierBO.Country must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPatternSupplierBOCountryChanging(value);
        }
        partial void OnCountryChanged();
        partial void OnCountryChanging(int? value);
        partial void OnPatternSupplierBOCountryChanged();
        partial void OnPatternSupplierBOCountryChanging(int? value);
        
        partial void OnEmailAddressChanged()
        {
            OnPatternSupplierBOEmailAddressChanged();
        }
        
        partial void OnEmailAddressChanging(string value)
        {
            if (value != null && value.Length > 128)
            {
                throw new Exception(String.Format("PatternSupplierBO.EmailAddress has a maximum length of 128. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPatternSupplierBOEmailAddressChanging(value);
        }
        partial void OnEmailAddressChanged();
        partial void OnEmailAddressChanging(string value);
        partial void OnPatternSupplierBOEmailAddressChanged();
        partial void OnPatternSupplierBOEmailAddressChanging(string value);
        
        partial void OnTelephoneNumberChanged()
        {
            OnPatternSupplierBOTelephoneNumberChanged();
        }
        
        partial void OnTelephoneNumberChanging(string value)
        {
            if (value != null && value.Length > 20)
            {
                throw new Exception(String.Format("PatternSupplierBO.TelephoneNumber has a maximum length of 20. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnPatternSupplierBOTelephoneNumberChanging(value);
        }
        partial void OnTelephoneNumberChanged();
        partial void OnTelephoneNumberChanging(string value);
        partial void OnPatternSupplierBOTelephoneNumberChanged();
        partial void OnPatternSupplierBOTelephoneNumberChanging(string value);
        
        partial void OnCreatorChanged()
        {
            OnPatternSupplierBOCreatorChanged();
        }
        
        partial void OnCreatorChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PatternSupplierBO.Creator must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPatternSupplierBOCreatorChanging(value);
        }
        partial void OnCreatorChanged();
        partial void OnCreatorChanging(int value);
        partial void OnPatternSupplierBOCreatorChanged();
        partial void OnPatternSupplierBOCreatorChanging(int value);
        
        partial void OnCreatedDateChanged()
        {
            OnPatternSupplierBOCreatedDateChanged();
        }
        
        partial void OnCreatedDateChanging(DateTime value)
        {
            OnPatternSupplierBOCreatedDateChanging(value);
        }
        partial void OnCreatedDateChanged();
        partial void OnCreatedDateChanging(DateTime value);
        partial void OnPatternSupplierBOCreatedDateChanged();
        partial void OnPatternSupplierBOCreatedDateChanging(DateTime value);
        
        partial void OnModifierChanged()
        {
            OnPatternSupplierBOModifierChanged();
        }
        
        partial void OnModifierChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PatternSupplierBO.Modifier must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPatternSupplierBOModifierChanging(value);
        }
        partial void OnModifierChanged();
        partial void OnModifierChanging(int value);
        partial void OnPatternSupplierBOModifierChanged();
        partial void OnPatternSupplierBOModifierChanging(int value);
        
        partial void OnModifiedDateChanged()
        {
            OnPatternSupplierBOModifiedDateChanged();
        }
        
        partial void OnModifiedDateChanging(DateTime value)
        {
            OnPatternSupplierBOModifiedDateChanging(value);
        }
        partial void OnModifiedDateChanged();
        partial void OnModifiedDateChanging(DateTime value);
        partial void OnPatternSupplierBOModifiedDateChanged();
        partial void OnPatternSupplierBOModifiedDateChanging(DateTime value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.PatternSupplierBO))
                return 1;
            Indico.BusinessObjects.PatternSupplierBOComparer c = new Indico.BusinessObjects.PatternSupplierBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.PatternSupplierBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.PatternSupplier)sender);
            }
        }
        
        void PatternsWhereThisIsPatternSupplierList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Pattern obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PatternBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PatternBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternsWhereThisIsPatternSupplier.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PatternBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternsWhereThisIsPatternSupplier.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PatternsWhereThisIsPatternSupplierList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Pattern obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PatternBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PatternBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternsWhereThisIsPatternSupplier.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PatternBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternsWhereThisIsPatternSupplier.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
            this._patternsWhereThisIsPatternSupplierLoaded = false;
            if (this.patternsWhereThisIsPatternSupplierList != null)
            {
                this.patternsWhereThisIsPatternSupplierList.OnBeforeRemove -= new EventHandler(PatternsWhereThisIsPatternSupplierList_OnBeforeRemove);
                this.patternsWhereThisIsPatternSupplierList.OnAfterAdd -= new EventHandler(PatternsWhereThisIsPatternSupplierList_OnAfterAdd);
            }
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region PatternSupplierBOComparer
    public class PatternSupplierBOComparer : IComparer<Indico.BusinessObjects.PatternSupplierBO>
    {
        private string propertyToCompareName;
        public PatternSupplierBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.PatternSupplierBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.PatternSupplierBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public PatternSupplierBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.PatternSupplierBO> Members
        public int Compare(Indico.BusinessObjects.PatternSupplierBO x, Indico.BusinessObjects.PatternSupplierBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.PatternSupplierBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.PatternSupplierBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.PatternSupplierBO x, Indico.BusinessObjects.PatternSupplierBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
