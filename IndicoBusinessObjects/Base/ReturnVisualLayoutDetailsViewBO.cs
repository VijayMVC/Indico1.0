// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

//using Indico.BusinessObjects.Util;
//using Indico.BusinessObjects;
using Indico.DAL;


namespace Indico.BusinessObjects
{
    /// <summary>
    /// ReturnVisualLayoutDetailsViewBO provides the business logic for maintaining Indico.DAL.ReturnVisualLayoutDetailsView records in the data store.
    /// </summary>
    /// <remarks>
    /// ReturnVisualLayoutDetailsViewBO provides the business logic for maintaining Indico.DAL.ReturnVisualLayoutDetailsView records in the data store. 
    /// By default it provides basic Search methods for retrieving Indico.DAL.ReturnVisualLayoutDetailsView
    /// records using the ReturnVisualLayoutDetailsView DAL class. Other methods implement atomic chunks of Business Logic according to
    /// the business rules.
    /// </remarks>
    public partial class ReturnVisualLayoutDetailsViewBO : BusinessObject, IComparable
    {
        #region fields
        private int? _visualLayout;
        private string _name;
        private string _description;
        private string _pattern;
        private string _fabric;
        private string _client;
        private string _distributor;
        private string _coordinator;
        private string _nNPFilePath;
        private DateTime? _createdDate;
        private bool? _isCommonProduct;
        private int? _resolutionProfile;
        private int? _printer;
        private string _sizeSet;
        private bool? _orderDetails;
        #endregion
        
        #region Properties
        /// <summary></summary>
        public int? VisualLayout
        {   get {return _visualLayout;}
            set 
            {
                _visualLayout = value;
            }
        }
        /// <summary></summary>
        public string Name
        {   get {return _name;}
            set 
            {
                _name = value;
            }
        }
        /// <summary></summary>
        public string Description
        {   get {return _description;}
            set 
            {
                _description = value;
            }
        }
        /// <summary></summary>
        public string Pattern
        {   get {return _pattern;}
            set 
            {
                _pattern = value;
            }
        }
        /// <summary></summary>
        public string Fabric
        {   get {return _fabric;}
            set 
            {
                _fabric = value;
            }
        }
        /// <summary></summary>
        public string Client
        {   get {return _client;}
            set 
            {
                _client = value;
            }
        }
        /// <summary></summary>
        public string Distributor
        {   get {return _distributor;}
            set 
            {
                _distributor = value;
            }
        }
        /// <summary></summary>
        public string Coordinator
        {   get {return _coordinator;}
            set 
            {
                _coordinator = value;
            }
        }
        /// <summary></summary>
        public string NNPFilePath
        {   get {return _nNPFilePath;}
            set 
            {
                _nNPFilePath = value;
            }
        }
        /// <summary></summary>
        public DateTime? CreatedDate
        {   get {return _createdDate;}
            set 
            {
                _createdDate = value;
            }
        }
        /// <summary></summary>
        public bool? IsCommonProduct
        {   get {return _isCommonProduct;}
            set 
            {
                _isCommonProduct = value;
            }
        }
        /// <summary></summary>
        public int? ResolutionProfile
        {   get {return _resolutionProfile;}
            set 
            {
                _resolutionProfile = value;
            }
        }
        /// <summary></summary>
        public int? Printer
        {   get {return _printer;}
            set 
            {
                _printer = value;
            }
        }
        /// <summary></summary>
        public string SizeSet
        {   get {return _sizeSet;}
            set 
            {
                _sizeSet = value;
            }
        }
        /// <summary></summary>
        public bool? OrderDetails
        {   get {return _orderDetails;}
            set 
            {
                _orderDetails = value;
            }
        }
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the ReturnVisualLayoutDetailsViewBO class using the supplied Indico.DAL.ReturnVisualLayoutDetailsView. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.ReturnVisualLayoutDetailsView whose properties will be used to initialise the ReturnVisualLayoutDetailsViewBO</param>
        internal ReturnVisualLayoutDetailsViewBO(Indico.DAL.ReturnVisualLayoutDetailsView obj)
        {
            // set the properties from the Indico.DAL.ReturnVisualLayoutDetailsView 
            this.VisualLayout = obj.VisualLayout;
            this.Name = obj.Name;
            this.Description = obj.Description;
            this.Pattern = obj.Pattern;
            this.Fabric = obj.Fabric;
            this.Client = obj.Client;
            this.Distributor = obj.Distributor;
            this.Coordinator = obj.Coordinator;
            this.NNPFilePath = obj.NNPFilePath;
            this.CreatedDate = obj.CreatedDate;
            this.IsCommonProduct = obj.IsCommonProduct;
            this.ResolutionProfile = obj.ResolutionProfile;
            this.Printer = obj.Printer;
            this.SizeSet = obj.SizeSet;
            this.OrderDetails = obj.OrderDetails;
        }
        #endregion
        
        #region Internal utility methods
        internal void SetDAL(Indico.DAL.ReturnVisualLayoutDetailsView obj, IndicoEntities context)
        {
            // set the Indico.DAL.ReturnVisualLayoutDetailsView properties
            obj.VisualLayout = Convert.ToInt32(VisualLayout);
            obj.Name = Name;
            obj.Description = Description;
            obj.Pattern = Pattern;
            obj.Fabric = Fabric;
            obj.Client = Client;
            obj.Distributor = Distributor;
            obj.Coordinator = Coordinator;
            obj.NNPFilePath = NNPFilePath;
            obj.CreatedDate = Convert.ToDateTime(CreatedDate);
            obj.IsCommonProduct = Convert.ToBoolean(IsCommonProduct);
            obj.ResolutionProfile = Convert.ToInt32(ResolutionProfile);
            obj.Printer = Convert.ToInt32(Printer);
            obj.SizeSet = SizeSet;
            obj.OrderDetails = Convert.ToBoolean(OrderDetails);
        }
        
        internal void SetBO(Indico.DAL.ReturnVisualLayoutDetailsView obj)
        {
            // set the Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO properties    
            this.VisualLayout = obj.VisualLayout;
            this.Name = obj.Name;
            this.Description = obj.Description;
            this.Pattern = obj.Pattern;
            this.Fabric = obj.Fabric;
            this.Client = obj.Client;
            this.Distributor = obj.Distributor;
            this.Coordinator = obj.Coordinator;
            this.NNPFilePath = obj.NNPFilePath;
            this.CreatedDate = obj.CreatedDate;
            this.IsCommonProduct = obj.IsCommonProduct;
            this.ResolutionProfile = obj.ResolutionProfile;
            this.Printer = obj.Printer;
            this.SizeSet = obj.SizeSet;
            this.OrderDetails = obj.OrderDetails;
        }
        
        internal void SetBO(Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO obj)
        {
            // set this Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO properties
            this.VisualLayout = obj.VisualLayout;
            this.Name = obj.Name;
            this.Description = obj.Description;
            this.Pattern = obj.Pattern;
            this.Fabric = obj.Fabric;
            this.Client = obj.Client;
            this.Distributor = obj.Distributor;
            this.Coordinator = obj.Coordinator;
            this.NNPFilePath = obj.NNPFilePath;
            this.CreatedDate = obj.CreatedDate;
            this.IsCommonProduct = obj.IsCommonProduct;
            this.ResolutionProfile = obj.ResolutionProfile;
            this.Printer = obj.Printer;
            this.SizeSet = obj.SizeSet;
            this.OrderDetails = obj.OrderDetails;
        }
        
        private static List<Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO> IQueryableToList(IQueryable<Indico.DAL.ReturnVisualLayoutDetailsView> oQuery)
        {
            List<Indico.DAL.ReturnVisualLayoutDetailsView> oList = oQuery.ToList();
            List<Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO> rList = new List<Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO>(oList.Count);
            foreach (Indico.DAL.ReturnVisualLayoutDetailsView o in oList)
            {
                Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO obj = new Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO(o);
                rList.Add(obj);
            }
            return rList;
        }
        #endregion
        
        #region BusinessObject methods
        
        #region GetAllObject
        public static List<Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public static List<Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public static List<Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public static List<Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnVisualLayoutDetailsView> oQuery =
                (from o in context.ReturnVisualLayoutDetailsView
                 orderby o.VisualLayout
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.VisualLayout).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO> returnvisuallayoutdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return returnvisuallayoutdetailsviews;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnVisualLayoutDetailsView> oQuery =
                (from o in context.ReturnVisualLayoutDetailsView
                 where
                    (this.VisualLayout == null || this.VisualLayout == o.VisualLayout) &&
                    (this.Name == null || this.Name == o.Name) &&
                    (this.Description == null || this.Description == o.Description) &&
                    (this.Pattern == null || this.Pattern == o.Pattern) &&
                    (this.Fabric == null || this.Fabric == o.Fabric) &&
                    (this.Client == null || this.Client == o.Client) &&
                    (this.Distributor == null || this.Distributor == o.Distributor) &&
                    (this.Coordinator == null || this.Coordinator == o.Coordinator) &&
                    (this.NNPFilePath == null || this.NNPFilePath == o.NNPFilePath) &&
                    (this.CreatedDate == null || this.CreatedDate == o.CreatedDate) &&
                    (this.IsCommonProduct == null || this.IsCommonProduct == o.IsCommonProduct) &&
                    (this.ResolutionProfile == null || this.ResolutionProfile == o.ResolutionProfile) &&
                    (this.Printer == null || this.Printer == o.Printer) &&
                    (this.SizeSet == null || this.SizeSet == o.SizeSet) &&
                    (this.OrderDetails == null || this.OrderDetails == o.OrderDetails) 
                 orderby o.VisualLayout
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.VisualLayout).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO> returnvisuallayoutdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return returnvisuallayoutdetailsviews;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnVisualLayoutDetailsView
                 where
                    (this.VisualLayout == null || this.VisualLayout == o.VisualLayout) &&
                    (this.Name == null || this.Name == o.Name) &&
                    (this.Description == null || this.Description == o.Description) &&
                    (this.Pattern == null || this.Pattern == o.Pattern) &&
                    (this.Fabric == null || this.Fabric == o.Fabric) &&
                    (this.Client == null || this.Client == o.Client) &&
                    (this.Distributor == null || this.Distributor == o.Distributor) &&
                    (this.Coordinator == null || this.Coordinator == o.Coordinator) &&
                    (this.NNPFilePath == null || this.NNPFilePath == o.NNPFilePath) &&
                    (this.CreatedDate == null || this.CreatedDate == o.CreatedDate) &&
                    (this.IsCommonProduct == null || this.IsCommonProduct == o.IsCommonProduct) &&
                    (this.ResolutionProfile == null || this.ResolutionProfile == o.ResolutionProfile) &&
                    (this.Printer == null || this.Printer == o.Printer) &&
                    (this.SizeSet == null || this.SizeSet == o.SizeSet) &&
                    (this.OrderDetails == null || this.OrderDetails == o.OrderDetails) 
                 orderby o.VisualLayout
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnVisualLayoutDetailsView> oQuery =
                (from o in context.ReturnVisualLayoutDetailsView
                 where
                    (this.VisualLayout == null || o.VisualLayout == this.VisualLayout) &&
                    (this.Name == null || o.Name.Contains(this.Name)) &&
                    (this.Description == null || o.Description.Contains(this.Description)) &&
                    (this.Pattern == null || o.Pattern.Contains(this.Pattern)) &&
                    (this.Fabric == null || o.Fabric.Contains(this.Fabric)) &&
                    (this.Client == null || o.Client.Contains(this.Client)) &&
                    (this.Distributor == null || o.Distributor.Contains(this.Distributor)) &&
                    (this.Coordinator == null || o.Coordinator.Contains(this.Coordinator)) &&
                    (this.NNPFilePath == null || o.NNPFilePath.Contains(this.NNPFilePath)) &&
                    (this.CreatedDate == null || o.CreatedDate == this.CreatedDate) &&
                    (this.IsCommonProduct == null || o.IsCommonProduct == this.IsCommonProduct) &&
                    (this.ResolutionProfile == null || o.ResolutionProfile == this.ResolutionProfile) &&
                    (this.Printer == null || o.Printer == this.Printer) &&
                    (this.SizeSet == null || o.SizeSet.Contains(this.SizeSet)) &&
                    (this.OrderDetails == null || o.OrderDetails == this.OrderDetails) 
                 orderby o.VisualLayout
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.VisualLayout).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO> returnvisuallayoutdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return returnvisuallayoutdetailsviews;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnVisualLayoutDetailsView
                 where
                    (this.VisualLayout == null || o.VisualLayout == this.VisualLayout) &&
                    (this.Name == null || o.Name.Contains(this.Name)) &&
                    (this.Description == null || o.Description.Contains(this.Description)) &&
                    (this.Pattern == null || o.Pattern.Contains(this.Pattern)) &&
                    (this.Fabric == null || o.Fabric.Contains(this.Fabric)) &&
                    (this.Client == null || o.Client.Contains(this.Client)) &&
                    (this.Distributor == null || o.Distributor.Contains(this.Distributor)) &&
                    (this.Coordinator == null || o.Coordinator.Contains(this.Coordinator)) &&
                    (this.NNPFilePath == null || o.NNPFilePath.Contains(this.NNPFilePath)) &&
                    (this.CreatedDate == null || o.CreatedDate == this.CreatedDate) &&
                    (this.IsCommonProduct == null || o.IsCommonProduct == this.IsCommonProduct) &&
                    (this.ResolutionProfile == null || o.ResolutionProfile == this.ResolutionProfile) &&
                    (this.Printer == null || o.Printer == this.Printer) &&
                    (this.SizeSet == null || o.SizeSet.Contains(this.SizeSet)) &&
                    (this.OrderDetails == null || o.OrderDetails == this.OrderDetails) 
                 orderby o.VisualLayout
                 select o).Count();
            
        }
        
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnVisualLayoutDetailsView> oQuery =
                (from o in context.ReturnVisualLayoutDetailsView
                 where
                    (this.VisualLayout == null || this.VisualLayout == o.VisualLayout) && 
                    (this.CreatedDate == null || this.CreatedDate == o.CreatedDate) && 
                    (this.IsCommonProduct == null || this.IsCommonProduct == o.IsCommonProduct) && 
                    (this.ResolutionProfile == null || this.ResolutionProfile == o.ResolutionProfile) && 
                    (this.Printer == null || this.Printer == o.Printer) && 
                    (this.OrderDetails == null || this.OrderDetails == o.OrderDetails) && 
                    ((o.Name.Contains(this.Name)) ||
                    (o.Description.Contains(this.Description)) ||
                    (o.Pattern.Contains(this.Pattern)) ||
                    (o.Fabric.Contains(this.Fabric)) ||
                    (o.Client.Contains(this.Client)) ||
                    (o.Distributor.Contains(this.Distributor)) ||
                    (o.Coordinator.Contains(this.Coordinator)) ||
                    (o.NNPFilePath.Contains(this.NNPFilePath)) ||
                    (o.SizeSet.Contains(this.SizeSet)) ||
                    (this.Name == null && this.Description == null && this.Pattern == null && this.Fabric == null && this.Client == null && this.Distributor == null && this.Coordinator == null && this.NNPFilePath == null && this.SizeSet == null ))
                 orderby o.VisualLayout
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.VisualLayout).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO> returnvisuallayoutdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return returnvisuallayoutdetailsviews;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnVisualLayoutDetailsView
                 where
                    (this.VisualLayout == null || this.VisualLayout == o.VisualLayout) && 
                    (this.CreatedDate == null || this.CreatedDate == o.CreatedDate) && 
                    (this.IsCommonProduct == null || this.IsCommonProduct == o.IsCommonProduct) && 
                    (this.ResolutionProfile == null || this.ResolutionProfile == o.ResolutionProfile) && 
                    (this.Printer == null || this.Printer == o.Printer) && 
                    (this.OrderDetails == null || this.OrderDetails == o.OrderDetails) && 
                    ((o.Name.Contains(this.Name)) ||
                    (o.Description.Contains(this.Description)) ||
                    (o.Pattern.Contains(this.Pattern)) ||
                    (o.Fabric.Contains(this.Fabric)) ||
                    (o.Client.Contains(this.Client)) ||
                    (o.Distributor.Contains(this.Distributor)) ||
                    (o.Coordinator.Contains(this.Coordinator)) ||
                    (o.NNPFilePath.Contains(this.NNPFilePath)) ||
                    (o.SizeSet.Contains(this.SizeSet)) ||
                    (this.Name == null && this.Description == null && this.Pattern == null && this.Fabric == null && this.Client == null && this.Distributor == null && this.Coordinator == null && this.NNPFilePath == null && this.SizeSet == null ))
                 orderby o.VisualLayout
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO))
                return 1;
            Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBOComparer c = new Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO);
        }

        #endregion
        #endregion
    }
    
    #region ReturnVisualLayoutDetailsViewBOComparer
    public class ReturnVisualLayoutDetailsViewBOComparer : IComparer<Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO>
    {
        private string propertyToCompareName;
        public ReturnVisualLayoutDetailsViewBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public ReturnVisualLayoutDetailsViewBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO> Members
        public int Compare(Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO x, Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO x, Indico.BusinessObjects.ReturnVisualLayoutDetailsViewBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
