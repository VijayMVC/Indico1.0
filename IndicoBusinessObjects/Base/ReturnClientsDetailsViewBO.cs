// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

//using Indico.BusinessObjects.Util;
//using Indico.BusinessObjects;
using Indico.DAL;


namespace Indico.BusinessObjects
{
    /// <summary>
    /// ReturnClientsDetailsViewBO provides the business logic for maintaining Indico.DAL.ReturnClientsDetailsView records in the data store.
    /// </summary>
    /// <remarks>
    /// ReturnClientsDetailsViewBO provides the business logic for maintaining Indico.DAL.ReturnClientsDetailsView records in the data store. 
    /// By default it provides basic Search methods for retrieving Indico.DAL.ReturnClientsDetailsView
    /// records using the ReturnClientsDetailsView DAL class. Other methods implement atomic chunks of Business Logic according to
    /// the business rules.
    /// </remarks>
    public partial class ReturnClientsDetailsViewBO : BusinessObject, IComparable
    {
        #region fields
        private int? _client;
        private string _distributor;
        private string _name;
        private string _address;
        private string _nickName;
        private string _city;
        private string _state;
        private string _postalCode;
        private string _country;
        private string _phone;
        private string _email;
        private string _creator;
        private DateTime? _createdDate;
        private string _modifier;
        private DateTime? _modifiedDate;
        private bool? _visualLayouts;
        private bool? _order;
        #endregion
        
        #region Properties
        /// <summary></summary>
        public int? Client
        {   get {return _client;}
            set 
            {
                _client = value;
            }
        }
        /// <summary></summary>
        public string Distributor
        {   get {return _distributor;}
            set 
            {
                _distributor = value;
            }
        }
        /// <summary></summary>
        public string Name
        {   get {return _name;}
            set 
            {
                _name = value;
            }
        }
        /// <summary></summary>
        public string Address
        {   get {return _address;}
            set 
            {
                _address = value;
            }
        }
        /// <summary></summary>
        public string NickName
        {   get {return _nickName;}
            set 
            {
                _nickName = value;
            }
        }
        /// <summary></summary>
        public string City
        {   get {return _city;}
            set 
            {
                _city = value;
            }
        }
        /// <summary></summary>
        public string State
        {   get {return _state;}
            set 
            {
                _state = value;
            }
        }
        /// <summary></summary>
        public string PostalCode
        {   get {return _postalCode;}
            set 
            {
                _postalCode = value;
            }
        }
        /// <summary></summary>
        public string Country
        {   get {return _country;}
            set 
            {
                _country = value;
            }
        }
        /// <summary></summary>
        public string Phone
        {   get {return _phone;}
            set 
            {
                _phone = value;
            }
        }
        /// <summary></summary>
        public string Email
        {   get {return _email;}
            set 
            {
                _email = value;
            }
        }
        /// <summary></summary>
        public string Creator
        {   get {return _creator;}
            set 
            {
                _creator = value;
            }
        }
        /// <summary></summary>
        public DateTime? CreatedDate
        {   get {return _createdDate;}
            set 
            {
                _createdDate = value;
            }
        }
        /// <summary></summary>
        public string Modifier
        {   get {return _modifier;}
            set 
            {
                _modifier = value;
            }
        }
        /// <summary></summary>
        public DateTime? ModifiedDate
        {   get {return _modifiedDate;}
            set 
            {
                _modifiedDate = value;
            }
        }
        /// <summary></summary>
        public bool? VisualLayouts
        {   get {return _visualLayouts;}
            set 
            {
                _visualLayouts = value;
            }
        }
        /// <summary></summary>
        public bool? Order
        {   get {return _order;}
            set 
            {
                _order = value;
            }
        }
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the ReturnClientsDetailsViewBO class using the supplied Indico.DAL.ReturnClientsDetailsView. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.ReturnClientsDetailsView whose properties will be used to initialise the ReturnClientsDetailsViewBO</param>
        internal ReturnClientsDetailsViewBO(Indico.DAL.ReturnClientsDetailsView obj)
        {
            // set the properties from the Indico.DAL.ReturnClientsDetailsView 
            this.Client = obj.Client;
            this.Distributor = obj.Distributor;
            this.Name = obj.Name;
            this.Address = obj.Address;
            this.NickName = obj.NickName;
            this.City = obj.City;
            this.State = obj.State;
            this.PostalCode = obj.PostalCode;
            this.Country = obj.Country;
            this.Phone = obj.Phone;
            this.Email = obj.Email;
            this.Creator = obj.Creator;
            this.CreatedDate = obj.CreatedDate;
            this.Modifier = obj.Modifier;
            this.ModifiedDate = obj.ModifiedDate;
            this.VisualLayouts = obj.VisualLayouts;
            this.Order = obj.Order;
        }
        #endregion
        
        #region Internal utility methods
        internal void SetDAL(Indico.DAL.ReturnClientsDetailsView obj, IndicoEntities context)
        {
            // set the Indico.DAL.ReturnClientsDetailsView properties
            obj.Client = Convert.ToInt32(Client);
            obj.Distributor = Distributor;
            obj.Name = Name;
            obj.Address = Address;
            obj.NickName = NickName;
            obj.City = City;
            obj.State = State;
            obj.PostalCode = PostalCode;
            obj.Country = Country;
            obj.Phone = Phone;
            obj.Email = Email;
            obj.Creator = Creator;
            obj.CreatedDate = Convert.ToDateTime(CreatedDate);
            obj.Modifier = Modifier;
            obj.ModifiedDate = Convert.ToDateTime(ModifiedDate);
            obj.VisualLayouts = Convert.ToBoolean(VisualLayouts);
            obj.Order = Convert.ToBoolean(Order);
        }
        
        internal void SetBO(Indico.DAL.ReturnClientsDetailsView obj)
        {
            // set the Indico.BusinessObjects.ReturnClientsDetailsViewBO properties    
            this.Client = obj.Client;
            this.Distributor = obj.Distributor;
            this.Name = obj.Name;
            this.Address = obj.Address;
            this.NickName = obj.NickName;
            this.City = obj.City;
            this.State = obj.State;
            this.PostalCode = obj.PostalCode;
            this.Country = obj.Country;
            this.Phone = obj.Phone;
            this.Email = obj.Email;
            this.Creator = obj.Creator;
            this.CreatedDate = obj.CreatedDate;
            this.Modifier = obj.Modifier;
            this.ModifiedDate = obj.ModifiedDate;
            this.VisualLayouts = obj.VisualLayouts;
            this.Order = obj.Order;
        }
        
        internal void SetBO(Indico.BusinessObjects.ReturnClientsDetailsViewBO obj)
        {
            // set this Indico.BusinessObjects.ReturnClientsDetailsViewBO properties
            this.Client = obj.Client;
            this.Distributor = obj.Distributor;
            this.Name = obj.Name;
            this.Address = obj.Address;
            this.NickName = obj.NickName;
            this.City = obj.City;
            this.State = obj.State;
            this.PostalCode = obj.PostalCode;
            this.Country = obj.Country;
            this.Phone = obj.Phone;
            this.Email = obj.Email;
            this.Creator = obj.Creator;
            this.CreatedDate = obj.CreatedDate;
            this.Modifier = obj.Modifier;
            this.ModifiedDate = obj.ModifiedDate;
            this.VisualLayouts = obj.VisualLayouts;
            this.Order = obj.Order;
        }
        
        private static List<Indico.BusinessObjects.ReturnClientsDetailsViewBO> IQueryableToList(IQueryable<Indico.DAL.ReturnClientsDetailsView> oQuery)
        {
            List<Indico.DAL.ReturnClientsDetailsView> oList = oQuery.ToList();
            List<Indico.BusinessObjects.ReturnClientsDetailsViewBO> rList = new List<Indico.BusinessObjects.ReturnClientsDetailsViewBO>(oList.Count);
            foreach (Indico.DAL.ReturnClientsDetailsView o in oList)
            {
                Indico.BusinessObjects.ReturnClientsDetailsViewBO obj = new Indico.BusinessObjects.ReturnClientsDetailsViewBO(o);
                rList.Add(obj);
            }
            return rList;
        }
        #endregion
        
        #region BusinessObject methods
        
        #region GetAllObject
        public static List<Indico.BusinessObjects.ReturnClientsDetailsViewBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public static List<Indico.BusinessObjects.ReturnClientsDetailsViewBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public static List<Indico.BusinessObjects.ReturnClientsDetailsViewBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public static List<Indico.BusinessObjects.ReturnClientsDetailsViewBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnClientsDetailsView> oQuery =
                (from o in context.ReturnClientsDetailsView
                 orderby o.Client
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.Client).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnClientsDetailsViewBO> returnclientsdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return returnclientsdetailsviews;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.ReturnClientsDetailsViewBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.ReturnClientsDetailsViewBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnClientsDetailsViewBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnClientsDetailsViewBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnClientsDetailsView> oQuery =
                (from o in context.ReturnClientsDetailsView
                 where
                    (this.Client == null || this.Client == o.Client) &&
                    (this.Distributor == null || this.Distributor == o.Distributor) &&
                    (this.Name == null || this.Name == o.Name) &&
                    (this.Address == null || this.Address == o.Address) &&
                    (this.NickName == null || this.NickName == o.NickName) &&
                    (this.City == null || this.City == o.City) &&
                    (this.State == null || this.State == o.State) &&
                    (this.PostalCode == null || this.PostalCode == o.PostalCode) &&
                    (this.Country == null || this.Country == o.Country) &&
                    (this.Phone == null || this.Phone == o.Phone) &&
                    (this.Email == null || this.Email == o.Email) &&
                    (this.Creator == null || this.Creator == o.Creator) &&
                    (this.CreatedDate == null || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == null || this.Modifier == o.Modifier) &&
                    (this.ModifiedDate == null || this.ModifiedDate == o.ModifiedDate) &&
                    (this.VisualLayouts == null || this.VisualLayouts == o.VisualLayouts) &&
                    (this.Order == null || this.Order == o.Order) 
                 orderby o.Client
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.Client).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnClientsDetailsViewBO> returnclientsdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return returnclientsdetailsviews;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnClientsDetailsView
                 where
                    (this.Client == null || this.Client == o.Client) &&
                    (this.Distributor == null || this.Distributor == o.Distributor) &&
                    (this.Name == null || this.Name == o.Name) &&
                    (this.Address == null || this.Address == o.Address) &&
                    (this.NickName == null || this.NickName == o.NickName) &&
                    (this.City == null || this.City == o.City) &&
                    (this.State == null || this.State == o.State) &&
                    (this.PostalCode == null || this.PostalCode == o.PostalCode) &&
                    (this.Country == null || this.Country == o.Country) &&
                    (this.Phone == null || this.Phone == o.Phone) &&
                    (this.Email == null || this.Email == o.Email) &&
                    (this.Creator == null || this.Creator == o.Creator) &&
                    (this.CreatedDate == null || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == null || this.Modifier == o.Modifier) &&
                    (this.ModifiedDate == null || this.ModifiedDate == o.ModifiedDate) &&
                    (this.VisualLayouts == null || this.VisualLayouts == o.VisualLayouts) &&
                    (this.Order == null || this.Order == o.Order) 
                 orderby o.Client
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.ReturnClientsDetailsViewBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.ReturnClientsDetailsViewBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnClientsDetailsViewBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnClientsDetailsViewBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnClientsDetailsView> oQuery =
                (from o in context.ReturnClientsDetailsView
                 where
                    (this.Client == null || o.Client == this.Client) &&
                    (this.Distributor == null || o.Distributor.Contains(this.Distributor)) &&
                    (this.Name == null || o.Name.Contains(this.Name)) &&
                    (this.Address == null || o.Address.Contains(this.Address)) &&
                    (this.NickName == null || o.NickName.Contains(this.NickName)) &&
                    (this.City == null || o.City.Contains(this.City)) &&
                    (this.State == null || o.State.Contains(this.State)) &&
                    (this.PostalCode == null || o.PostalCode.Contains(this.PostalCode)) &&
                    (this.Country == null || o.Country.Contains(this.Country)) &&
                    (this.Phone == null || o.Phone.Contains(this.Phone)) &&
                    (this.Email == null || o.Email.Contains(this.Email)) &&
                    (this.Creator == null || o.Creator.Contains(this.Creator)) &&
                    (this.CreatedDate == null || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == null || o.Modifier.Contains(this.Modifier)) &&
                    (this.ModifiedDate == null || o.ModifiedDate == this.ModifiedDate) &&
                    (this.VisualLayouts == null || o.VisualLayouts == this.VisualLayouts) &&
                    (this.Order == null || o.Order == this.Order) 
                 orderby o.Client
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.Client).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnClientsDetailsViewBO> returnclientsdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return returnclientsdetailsviews;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnClientsDetailsView
                 where
                    (this.Client == null || o.Client == this.Client) &&
                    (this.Distributor == null || o.Distributor.Contains(this.Distributor)) &&
                    (this.Name == null || o.Name.Contains(this.Name)) &&
                    (this.Address == null || o.Address.Contains(this.Address)) &&
                    (this.NickName == null || o.NickName.Contains(this.NickName)) &&
                    (this.City == null || o.City.Contains(this.City)) &&
                    (this.State == null || o.State.Contains(this.State)) &&
                    (this.PostalCode == null || o.PostalCode.Contains(this.PostalCode)) &&
                    (this.Country == null || o.Country.Contains(this.Country)) &&
                    (this.Phone == null || o.Phone.Contains(this.Phone)) &&
                    (this.Email == null || o.Email.Contains(this.Email)) &&
                    (this.Creator == null || o.Creator.Contains(this.Creator)) &&
                    (this.CreatedDate == null || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == null || o.Modifier.Contains(this.Modifier)) &&
                    (this.ModifiedDate == null || o.ModifiedDate == this.ModifiedDate) &&
                    (this.VisualLayouts == null || o.VisualLayouts == this.VisualLayouts) &&
                    (this.Order == null || o.Order == this.Order) 
                 orderby o.Client
                 select o).Count();
            
        }
        
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.ReturnClientsDetailsViewBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.ReturnClientsDetailsViewBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnClientsDetailsViewBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnClientsDetailsViewBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnClientsDetailsView> oQuery =
                (from o in context.ReturnClientsDetailsView
                 where
                    (this.Client == null || this.Client == o.Client) && 
                    (this.CreatedDate == null || this.CreatedDate == o.CreatedDate) && 
                    (this.ModifiedDate == null || this.ModifiedDate == o.ModifiedDate) && 
                    (this.VisualLayouts == null || this.VisualLayouts == o.VisualLayouts) && 
                    (this.Order == null || this.Order == o.Order) && 
                    ((o.Distributor.Contains(this.Distributor)) ||
                    (o.Name.Contains(this.Name)) ||
                    (o.Address.Contains(this.Address)) ||
                    (o.NickName.Contains(this.NickName)) ||
                    (o.City.Contains(this.City)) ||
                    (o.State.Contains(this.State)) ||
                    (o.PostalCode.Contains(this.PostalCode)) ||
                    (o.Country.Contains(this.Country)) ||
                    (o.Phone.Contains(this.Phone)) ||
                    (o.Email.Contains(this.Email)) ||
                    (o.Creator.Contains(this.Creator)) ||
                    (o.Modifier.Contains(this.Modifier)) ||
                    (this.Distributor == null && this.Name == null && this.Address == null && this.NickName == null && this.City == null && this.State == null && this.PostalCode == null && this.Country == null && this.Phone == null && this.Email == null && this.Creator == null && this.Modifier == null ))
                 orderby o.Client
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.Client).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnClientsDetailsViewBO> returnclientsdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return returnclientsdetailsviews;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnClientsDetailsView
                 where
                    (this.Client == null || this.Client == o.Client) && 
                    (this.CreatedDate == null || this.CreatedDate == o.CreatedDate) && 
                    (this.ModifiedDate == null || this.ModifiedDate == o.ModifiedDate) && 
                    (this.VisualLayouts == null || this.VisualLayouts == o.VisualLayouts) && 
                    (this.Order == null || this.Order == o.Order) && 
                    ((o.Distributor.Contains(this.Distributor)) ||
                    (o.Name.Contains(this.Name)) ||
                    (o.Address.Contains(this.Address)) ||
                    (o.NickName.Contains(this.NickName)) ||
                    (o.City.Contains(this.City)) ||
                    (o.State.Contains(this.State)) ||
                    (o.PostalCode.Contains(this.PostalCode)) ||
                    (o.Country.Contains(this.Country)) ||
                    (o.Phone.Contains(this.Phone)) ||
                    (o.Email.Contains(this.Email)) ||
                    (o.Creator.Contains(this.Creator)) ||
                    (o.Modifier.Contains(this.Modifier)) ||
                    (this.Distributor == null && this.Name == null && this.Address == null && this.NickName == null && this.City == null && this.State == null && this.PostalCode == null && this.Country == null && this.Phone == null && this.Email == null && this.Creator == null && this.Modifier == null ))
                 orderby o.Client
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.ReturnClientsDetailsViewBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.ReturnClientsDetailsViewBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.ReturnClientsDetailsViewBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.ReturnClientsDetailsViewBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.ReturnClientsDetailsViewBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.ReturnClientsDetailsViewBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.ReturnClientsDetailsViewBO))
                return 1;
            Indico.BusinessObjects.ReturnClientsDetailsViewBOComparer c = new Indico.BusinessObjects.ReturnClientsDetailsViewBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.ReturnClientsDetailsViewBO);
        }

        #endregion
        #endregion
    }
    
    #region ReturnClientsDetailsViewBOComparer
    public class ReturnClientsDetailsViewBOComparer : IComparer<Indico.BusinessObjects.ReturnClientsDetailsViewBO>
    {
        private string propertyToCompareName;
        public ReturnClientsDetailsViewBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.ReturnClientsDetailsViewBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.ReturnClientsDetailsViewBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public ReturnClientsDetailsViewBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.ReturnClientsDetailsViewBO> Members
        public int Compare(Indico.BusinessObjects.ReturnClientsDetailsViewBO x, Indico.BusinessObjects.ReturnClientsDetailsViewBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.ReturnClientsDetailsViewBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.ReturnClientsDetailsViewBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.ReturnClientsDetailsViewBO x, Indico.BusinessObjects.ReturnClientsDetailsViewBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
