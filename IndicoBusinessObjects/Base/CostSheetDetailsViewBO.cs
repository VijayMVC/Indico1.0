// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

//using Indico.BusinessObjects.Util;
//using Indico.BusinessObjects;
using Indico.DAL;


namespace Indico.BusinessObjects
{
    /// <summary>
    /// CostSheetDetailsViewBO provides the business logic for maintaining Indico.DAL.CostSheetDetailsView records in the data store.
    /// </summary>
    /// <remarks>
    /// CostSheetDetailsViewBO provides the business logic for maintaining Indico.DAL.CostSheetDetailsView records in the data store. 
    /// By default it provides basic Search methods for retrieving Indico.DAL.CostSheetDetailsView
    /// records using the CostSheetDetailsView DAL class. Other methods implement atomic chunks of Business Logic according to
    /// the business rules.
    /// </remarks>
    public partial class CostSheetDetailsViewBO : BusinessObject, IComparable
    {
        #region fields
        private int? _costSheet;
        private string _pattern;
        private string _fabric;
        private decimal? _quotedFOBCost;
        private decimal? _quotedCIF;
        private decimal? _quotedMP;
        private decimal? _exchangeRate;
        private string _category;
        private decimal? _sMV;
        private decimal? _sMVRate;
        private decimal? _calculateCM;
        private decimal? _totalFabricCost;
        private decimal? _totalAccessoriesCost;
        private decimal? _hPCost;
        private decimal? _labelCost;
        private decimal? _cM;
        private decimal? _jKFOBCost;
        private decimal? _roundup;
        private decimal? _dutyRate;
        private decimal? _subCons;
        private decimal? _marginRate;
        private decimal? _duty;
        private decimal? _fOBAUD;
        private decimal? _airFregiht;
        private decimal? _impCharges;
        private decimal? _landed;
        private decimal? _mGTOH;
        private decimal? _indicoOH;
        private decimal? _inkCost;
        private decimal? _paperCost;
        private bool? _showToIndico;
        #endregion
        
        #region Properties
        /// <summary></summary>
        public int? CostSheet
        {   get {return _costSheet;}
            set 
            {
                _costSheet = value;
            }
        }
        /// <summary></summary>
        public string Pattern
        {   get {return _pattern;}
            set 
            {
                _pattern = value;
            }
        }
        /// <summary></summary>
        public string Fabric
        {   get {return _fabric;}
            set 
            {
                _fabric = value;
            }
        }
        /// <summary></summary>
        public decimal? QuotedFOBCost
        {   get {return _quotedFOBCost;}
            set 
            {
                _quotedFOBCost = value;
            }
        }
        /// <summary></summary>
        public decimal? QuotedCIF
        {   get {return _quotedCIF;}
            set 
            {
                _quotedCIF = value;
            }
        }
        /// <summary></summary>
        public decimal? QuotedMP
        {   get {return _quotedMP;}
            set 
            {
                _quotedMP = value;
            }
        }
        /// <summary></summary>
        public decimal? ExchangeRate
        {   get {return _exchangeRate;}
            set 
            {
                _exchangeRate = value;
            }
        }
        /// <summary></summary>
        public string Category
        {   get {return _category;}
            set 
            {
                _category = value;
            }
        }
        /// <summary></summary>
        public decimal? SMV
        {   get {return _sMV;}
            set 
            {
                _sMV = value;
            }
        }
        /// <summary></summary>
        public decimal? SMVRate
        {   get {return _sMVRate;}
            set 
            {
                _sMVRate = value;
            }
        }
        /// <summary></summary>
        public decimal? CalculateCM
        {   get {return _calculateCM;}
            set 
            {
                _calculateCM = value;
            }
        }
        /// <summary></summary>
        public decimal? TotalFabricCost
        {   get {return _totalFabricCost;}
            set 
            {
                _totalFabricCost = value;
            }
        }
        /// <summary></summary>
        public decimal? TotalAccessoriesCost
        {   get {return _totalAccessoriesCost;}
            set 
            {
                _totalAccessoriesCost = value;
            }
        }
        /// <summary></summary>
        public decimal? HPCost
        {   get {return _hPCost;}
            set 
            {
                _hPCost = value;
            }
        }
        /// <summary></summary>
        public decimal? LabelCost
        {   get {return _labelCost;}
            set 
            {
                _labelCost = value;
            }
        }
        /// <summary></summary>
        public decimal? CM
        {   get {return _cM;}
            set 
            {
                _cM = value;
            }
        }
        /// <summary></summary>
        public decimal? JKFOBCost
        {   get {return _jKFOBCost;}
            set 
            {
                _jKFOBCost = value;
            }
        }
        /// <summary></summary>
        public decimal? Roundup
        {   get {return _roundup;}
            set 
            {
                _roundup = value;
            }
        }
        /// <summary></summary>
        public decimal? DutyRate
        {   get {return _dutyRate;}
            set 
            {
                _dutyRate = value;
            }
        }
        /// <summary></summary>
        public decimal? SubCons
        {   get {return _subCons;}
            set 
            {
                _subCons = value;
            }
        }
        /// <summary></summary>
        public decimal? MarginRate
        {   get {return _marginRate;}
            set 
            {
                _marginRate = value;
            }
        }
        /// <summary></summary>
        public decimal? Duty
        {   get {return _duty;}
            set 
            {
                _duty = value;
            }
        }
        /// <summary></summary>
        public decimal? FOBAUD
        {   get {return _fOBAUD;}
            set 
            {
                _fOBAUD = value;
            }
        }
        /// <summary></summary>
        public decimal? AirFregiht
        {   get {return _airFregiht;}
            set 
            {
                _airFregiht = value;
            }
        }
        /// <summary></summary>
        public decimal? ImpCharges
        {   get {return _impCharges;}
            set 
            {
                _impCharges = value;
            }
        }
        /// <summary></summary>
        public decimal? Landed
        {   get {return _landed;}
            set 
            {
                _landed = value;
            }
        }
        /// <summary></summary>
        public decimal? MGTOH
        {   get {return _mGTOH;}
            set 
            {
                _mGTOH = value;
            }
        }
        /// <summary></summary>
        public decimal? IndicoOH
        {   get {return _indicoOH;}
            set 
            {
                _indicoOH = value;
            }
        }
        /// <summary></summary>
        public decimal? InkCost
        {   get {return _inkCost;}
            set 
            {
                _inkCost = value;
            }
        }
        /// <summary></summary>
        public decimal? PaperCost
        {   get {return _paperCost;}
            set 
            {
                _paperCost = value;
            }
        }
        /// <summary></summary>
        public bool? ShowToIndico
        {   get {return _showToIndico;}
            set 
            {
                _showToIndico = value;
            }
        }
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the CostSheetDetailsViewBO class using the supplied Indico.DAL.CostSheetDetailsView. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.CostSheetDetailsView whose properties will be used to initialise the CostSheetDetailsViewBO</param>
        internal CostSheetDetailsViewBO(Indico.DAL.CostSheetDetailsView obj)
        {
            // set the properties from the Indico.DAL.CostSheetDetailsView 
            this.CostSheet = obj.CostSheet;
            this.Pattern = obj.Pattern;
            this.Fabric = obj.Fabric;
            this.QuotedFOBCost = obj.QuotedFOBCost;
            this.QuotedCIF = obj.QuotedCIF;
            this.QuotedMP = obj.QuotedMP;
            this.ExchangeRate = obj.ExchangeRate;
            this.Category = obj.Category;
            this.SMV = obj.SMV;
            this.SMVRate = obj.SMVRate;
            this.CalculateCM = obj.CalculateCM;
            this.TotalFabricCost = obj.TotalFabricCost;
            this.TotalAccessoriesCost = obj.TotalAccessoriesCost;
            this.HPCost = obj.HPCost;
            this.LabelCost = obj.LabelCost;
            this.CM = obj.CM;
            this.JKFOBCost = obj.JKFOBCost;
            this.Roundup = obj.Roundup;
            this.DutyRate = obj.DutyRate;
            this.SubCons = obj.SubCons;
            this.MarginRate = obj.MarginRate;
            this.Duty = obj.Duty;
            this.FOBAUD = obj.FOBAUD;
            this.AirFregiht = obj.AirFregiht;
            this.ImpCharges = obj.ImpCharges;
            this.Landed = obj.Landed;
            this.MGTOH = obj.MGTOH;
            this.IndicoOH = obj.IndicoOH;
            this.InkCost = obj.InkCost;
            this.PaperCost = obj.PaperCost;
            this.ShowToIndico = obj.ShowToIndico;
        }
        #endregion
        
        #region Internal utility methods
        internal void SetDAL(Indico.DAL.CostSheetDetailsView obj, IndicoEntities context)
        {
            // set the Indico.DAL.CostSheetDetailsView properties
            obj.CostSheet = Convert.ToInt32(CostSheet);
            obj.Pattern = Pattern;
            obj.Fabric = Fabric;
            obj.QuotedFOBCost = Convert.ToDecimal(QuotedFOBCost);
            obj.QuotedCIF = Convert.ToDecimal(QuotedCIF);
            obj.QuotedMP = Convert.ToDecimal(QuotedMP);
            obj.ExchangeRate = Convert.ToDecimal(ExchangeRate);
            obj.Category = Category;
            obj.SMV = Convert.ToDecimal(SMV);
            obj.SMVRate = Convert.ToDecimal(SMVRate);
            obj.CalculateCM = Convert.ToDecimal(CalculateCM);
            obj.TotalFabricCost = Convert.ToDecimal(TotalFabricCost);
            obj.TotalAccessoriesCost = Convert.ToDecimal(TotalAccessoriesCost);
            obj.HPCost = Convert.ToDecimal(HPCost);
            obj.LabelCost = Convert.ToDecimal(LabelCost);
            obj.CM = Convert.ToDecimal(CM);
            obj.JKFOBCost = Convert.ToDecimal(JKFOBCost);
            obj.Roundup = Convert.ToDecimal(Roundup);
            obj.DutyRate = Convert.ToDecimal(DutyRate);
            obj.SubCons = Convert.ToDecimal(SubCons);
            obj.MarginRate = Convert.ToDecimal(MarginRate);
            obj.Duty = Convert.ToDecimal(Duty);
            obj.FOBAUD = Convert.ToDecimal(FOBAUD);
            obj.AirFregiht = Convert.ToDecimal(AirFregiht);
            obj.ImpCharges = Convert.ToDecimal(ImpCharges);
            obj.Landed = Convert.ToDecimal(Landed);
            obj.MGTOH = Convert.ToDecimal(MGTOH);
            obj.IndicoOH = Convert.ToDecimal(IndicoOH);
            obj.InkCost = Convert.ToDecimal(InkCost);
            obj.PaperCost = Convert.ToDecimal(PaperCost);
            obj.ShowToIndico = Convert.ToBoolean(ShowToIndico);
        }
        
        internal void SetBO(Indico.DAL.CostSheetDetailsView obj)
        {
            // set the Indico.BusinessObjects.CostSheetDetailsViewBO properties    
            this.CostSheet = obj.CostSheet;
            this.Pattern = obj.Pattern;
            this.Fabric = obj.Fabric;
            this.QuotedFOBCost = obj.QuotedFOBCost;
            this.QuotedCIF = obj.QuotedCIF;
            this.QuotedMP = obj.QuotedMP;
            this.ExchangeRate = obj.ExchangeRate;
            this.Category = obj.Category;
            this.SMV = obj.SMV;
            this.SMVRate = obj.SMVRate;
            this.CalculateCM = obj.CalculateCM;
            this.TotalFabricCost = obj.TotalFabricCost;
            this.TotalAccessoriesCost = obj.TotalAccessoriesCost;
            this.HPCost = obj.HPCost;
            this.LabelCost = obj.LabelCost;
            this.CM = obj.CM;
            this.JKFOBCost = obj.JKFOBCost;
            this.Roundup = obj.Roundup;
            this.DutyRate = obj.DutyRate;
            this.SubCons = obj.SubCons;
            this.MarginRate = obj.MarginRate;
            this.Duty = obj.Duty;
            this.FOBAUD = obj.FOBAUD;
            this.AirFregiht = obj.AirFregiht;
            this.ImpCharges = obj.ImpCharges;
            this.Landed = obj.Landed;
            this.MGTOH = obj.MGTOH;
            this.IndicoOH = obj.IndicoOH;
            this.InkCost = obj.InkCost;
            this.PaperCost = obj.PaperCost;
            this.ShowToIndico = obj.ShowToIndico;
        }
        
        internal void SetBO(Indico.BusinessObjects.CostSheetDetailsViewBO obj)
        {
            // set this Indico.BusinessObjects.CostSheetDetailsViewBO properties
            this.CostSheet = obj.CostSheet;
            this.Pattern = obj.Pattern;
            this.Fabric = obj.Fabric;
            this.QuotedFOBCost = obj.QuotedFOBCost;
            this.QuotedCIF = obj.QuotedCIF;
            this.QuotedMP = obj.QuotedMP;
            this.ExchangeRate = obj.ExchangeRate;
            this.Category = obj.Category;
            this.SMV = obj.SMV;
            this.SMVRate = obj.SMVRate;
            this.CalculateCM = obj.CalculateCM;
            this.TotalFabricCost = obj.TotalFabricCost;
            this.TotalAccessoriesCost = obj.TotalAccessoriesCost;
            this.HPCost = obj.HPCost;
            this.LabelCost = obj.LabelCost;
            this.CM = obj.CM;
            this.JKFOBCost = obj.JKFOBCost;
            this.Roundup = obj.Roundup;
            this.DutyRate = obj.DutyRate;
            this.SubCons = obj.SubCons;
            this.MarginRate = obj.MarginRate;
            this.Duty = obj.Duty;
            this.FOBAUD = obj.FOBAUD;
            this.AirFregiht = obj.AirFregiht;
            this.ImpCharges = obj.ImpCharges;
            this.Landed = obj.Landed;
            this.MGTOH = obj.MGTOH;
            this.IndicoOH = obj.IndicoOH;
            this.InkCost = obj.InkCost;
            this.PaperCost = obj.PaperCost;
            this.ShowToIndico = obj.ShowToIndico;
        }
        
        private static List<Indico.BusinessObjects.CostSheetDetailsViewBO> IQueryableToList(IQueryable<Indico.DAL.CostSheetDetailsView> oQuery)
        {
            List<Indico.DAL.CostSheetDetailsView> oList = oQuery.ToList();
            List<Indico.BusinessObjects.CostSheetDetailsViewBO> rList = new List<Indico.BusinessObjects.CostSheetDetailsViewBO>(oList.Count);
            foreach (Indico.DAL.CostSheetDetailsView o in oList)
            {
                Indico.BusinessObjects.CostSheetDetailsViewBO obj = new Indico.BusinessObjects.CostSheetDetailsViewBO(o);
                rList.Add(obj);
            }
            return rList;
        }
        #endregion
        
        #region BusinessObject methods
        
        #region GetAllObject
        public static List<Indico.BusinessObjects.CostSheetDetailsViewBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public static List<Indico.BusinessObjects.CostSheetDetailsViewBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public static List<Indico.BusinessObjects.CostSheetDetailsViewBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public static List<Indico.BusinessObjects.CostSheetDetailsViewBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.CostSheetDetailsView> oQuery =
                (from o in context.CostSheetDetailsView
                 orderby o.CostSheet
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.CostSheet).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.CostSheetDetailsViewBO> costsheetdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return costsheetdetailsviews;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.CostSheetDetailsViewBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.CostSheetDetailsViewBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.CostSheetDetailsViewBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.CostSheetDetailsViewBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.CostSheetDetailsView> oQuery =
                (from o in context.CostSheetDetailsView
                 where
                    (this.CostSheet == null || this.CostSheet == o.CostSheet) &&
                    (this.Pattern == null || this.Pattern == o.Pattern) &&
                    (this.Fabric == null || this.Fabric == o.Fabric) &&
                    (this.QuotedFOBCost == null || this.QuotedFOBCost == o.QuotedFOBCost) &&
                    (this.QuotedCIF == null || this.QuotedCIF == o.QuotedCIF) &&
                    (this.QuotedMP == null || this.QuotedMP == o.QuotedMP) &&
                    (this.ExchangeRate == null || this.ExchangeRate == o.ExchangeRate) &&
                    (this.Category == null || this.Category == o.Category) &&
                    (this.SMV == null || this.SMV == o.SMV) &&
                    (this.SMVRate == null || this.SMVRate == o.SMVRate) &&
                    (this.CalculateCM == null || this.CalculateCM == o.CalculateCM) &&
                    (this.TotalFabricCost == null || this.TotalFabricCost == o.TotalFabricCost) &&
                    (this.TotalAccessoriesCost == null || this.TotalAccessoriesCost == o.TotalAccessoriesCost) &&
                    (this.HPCost == null || this.HPCost == o.HPCost) &&
                    (this.LabelCost == null || this.LabelCost == o.LabelCost) &&
                    (this.CM == null || this.CM == o.CM) &&
                    (this.JKFOBCost == null || this.JKFOBCost == o.JKFOBCost) &&
                    (this.Roundup == null || this.Roundup == o.Roundup) &&
                    (this.DutyRate == null || this.DutyRate == o.DutyRate) &&
                    (this.SubCons == null || this.SubCons == o.SubCons) &&
                    (this.MarginRate == null || this.MarginRate == o.MarginRate) &&
                    (this.Duty == null || this.Duty == o.Duty) &&
                    (this.FOBAUD == null || this.FOBAUD == o.FOBAUD) &&
                    (this.AirFregiht == null || this.AirFregiht == o.AirFregiht) &&
                    (this.ImpCharges == null || this.ImpCharges == o.ImpCharges) &&
                    (this.Landed == null || this.Landed == o.Landed) &&
                    (this.MGTOH == null || this.MGTOH == o.MGTOH) &&
                    (this.IndicoOH == null || this.IndicoOH == o.IndicoOH) &&
                    (this.InkCost == null || this.InkCost == o.InkCost) &&
                    (this.PaperCost == null || this.PaperCost == o.PaperCost) &&
                    (this.ShowToIndico == null || this.ShowToIndico == o.ShowToIndico) 
                 orderby o.CostSheet
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.CostSheet).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.CostSheetDetailsViewBO> costsheetdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return costsheetdetailsviews;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.CostSheetDetailsView
                 where
                    (this.CostSheet == null || this.CostSheet == o.CostSheet) &&
                    (this.Pattern == null || this.Pattern == o.Pattern) &&
                    (this.Fabric == null || this.Fabric == o.Fabric) &&
                    (this.QuotedFOBCost == null || this.QuotedFOBCost == o.QuotedFOBCost) &&
                    (this.QuotedCIF == null || this.QuotedCIF == o.QuotedCIF) &&
                    (this.QuotedMP == null || this.QuotedMP == o.QuotedMP) &&
                    (this.ExchangeRate == null || this.ExchangeRate == o.ExchangeRate) &&
                    (this.Category == null || this.Category == o.Category) &&
                    (this.SMV == null || this.SMV == o.SMV) &&
                    (this.SMVRate == null || this.SMVRate == o.SMVRate) &&
                    (this.CalculateCM == null || this.CalculateCM == o.CalculateCM) &&
                    (this.TotalFabricCost == null || this.TotalFabricCost == o.TotalFabricCost) &&
                    (this.TotalAccessoriesCost == null || this.TotalAccessoriesCost == o.TotalAccessoriesCost) &&
                    (this.HPCost == null || this.HPCost == o.HPCost) &&
                    (this.LabelCost == null || this.LabelCost == o.LabelCost) &&
                    (this.CM == null || this.CM == o.CM) &&
                    (this.JKFOBCost == null || this.JKFOBCost == o.JKFOBCost) &&
                    (this.Roundup == null || this.Roundup == o.Roundup) &&
                    (this.DutyRate == null || this.DutyRate == o.DutyRate) &&
                    (this.SubCons == null || this.SubCons == o.SubCons) &&
                    (this.MarginRate == null || this.MarginRate == o.MarginRate) &&
                    (this.Duty == null || this.Duty == o.Duty) &&
                    (this.FOBAUD == null || this.FOBAUD == o.FOBAUD) &&
                    (this.AirFregiht == null || this.AirFregiht == o.AirFregiht) &&
                    (this.ImpCharges == null || this.ImpCharges == o.ImpCharges) &&
                    (this.Landed == null || this.Landed == o.Landed) &&
                    (this.MGTOH == null || this.MGTOH == o.MGTOH) &&
                    (this.IndicoOH == null || this.IndicoOH == o.IndicoOH) &&
                    (this.InkCost == null || this.InkCost == o.InkCost) &&
                    (this.PaperCost == null || this.PaperCost == o.PaperCost) &&
                    (this.ShowToIndico == null || this.ShowToIndico == o.ShowToIndico) 
                 orderby o.CostSheet
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.CostSheetDetailsViewBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.CostSheetDetailsViewBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.CostSheetDetailsViewBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.CostSheetDetailsViewBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.CostSheetDetailsView> oQuery =
                (from o in context.CostSheetDetailsView
                 where
                    (this.CostSheet == null || o.CostSheet == this.CostSheet) &&
                    (this.Pattern == null || o.Pattern.Contains(this.Pattern)) &&
                    (this.Fabric == null || o.Fabric.Contains(this.Fabric)) &&
                    (this.QuotedFOBCost == null || o.QuotedFOBCost == this.QuotedFOBCost) &&
                    (this.QuotedCIF == null || o.QuotedCIF == this.QuotedCIF) &&
                    (this.QuotedMP == null || o.QuotedMP == this.QuotedMP) &&
                    (this.ExchangeRate == null || o.ExchangeRate == this.ExchangeRate) &&
                    (this.Category == null || o.Category.Contains(this.Category)) &&
                    (this.SMV == null || o.SMV == this.SMV) &&
                    (this.SMVRate == null || o.SMVRate == this.SMVRate) &&
                    (this.CalculateCM == null || o.CalculateCM == this.CalculateCM) &&
                    (this.TotalFabricCost == null || o.TotalFabricCost == this.TotalFabricCost) &&
                    (this.TotalAccessoriesCost == null || o.TotalAccessoriesCost == this.TotalAccessoriesCost) &&
                    (this.HPCost == null || o.HPCost == this.HPCost) &&
                    (this.LabelCost == null || o.LabelCost == this.LabelCost) &&
                    (this.CM == null || o.CM == this.CM) &&
                    (this.JKFOBCost == null || o.JKFOBCost == this.JKFOBCost) &&
                    (this.Roundup == null || o.Roundup == this.Roundup) &&
                    (this.DutyRate == null || o.DutyRate == this.DutyRate) &&
                    (this.SubCons == null || o.SubCons == this.SubCons) &&
                    (this.MarginRate == null || o.MarginRate == this.MarginRate) &&
                    (this.Duty == null || o.Duty == this.Duty) &&
                    (this.FOBAUD == null || o.FOBAUD == this.FOBAUD) &&
                    (this.AirFregiht == null || o.AirFregiht == this.AirFregiht) &&
                    (this.ImpCharges == null || o.ImpCharges == this.ImpCharges) &&
                    (this.Landed == null || o.Landed == this.Landed) &&
                    (this.MGTOH == null || o.MGTOH == this.MGTOH) &&
                    (this.IndicoOH == null || o.IndicoOH == this.IndicoOH) &&
                    (this.InkCost == null || o.InkCost == this.InkCost) &&
                    (this.PaperCost == null || o.PaperCost == this.PaperCost) &&
                    (this.ShowToIndico == null || o.ShowToIndico == this.ShowToIndico) 
                 orderby o.CostSheet
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.CostSheet).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.CostSheetDetailsViewBO> costsheetdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return costsheetdetailsviews;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.CostSheetDetailsView
                 where
                    (this.CostSheet == null || o.CostSheet == this.CostSheet) &&
                    (this.Pattern == null || o.Pattern.Contains(this.Pattern)) &&
                    (this.Fabric == null || o.Fabric.Contains(this.Fabric)) &&
                    (this.QuotedFOBCost == null || o.QuotedFOBCost == this.QuotedFOBCost) &&
                    (this.QuotedCIF == null || o.QuotedCIF == this.QuotedCIF) &&
                    (this.QuotedMP == null || o.QuotedMP == this.QuotedMP) &&
                    (this.ExchangeRate == null || o.ExchangeRate == this.ExchangeRate) &&
                    (this.Category == null || o.Category.Contains(this.Category)) &&
                    (this.SMV == null || o.SMV == this.SMV) &&
                    (this.SMVRate == null || o.SMVRate == this.SMVRate) &&
                    (this.CalculateCM == null || o.CalculateCM == this.CalculateCM) &&
                    (this.TotalFabricCost == null || o.TotalFabricCost == this.TotalFabricCost) &&
                    (this.TotalAccessoriesCost == null || o.TotalAccessoriesCost == this.TotalAccessoriesCost) &&
                    (this.HPCost == null || o.HPCost == this.HPCost) &&
                    (this.LabelCost == null || o.LabelCost == this.LabelCost) &&
                    (this.CM == null || o.CM == this.CM) &&
                    (this.JKFOBCost == null || o.JKFOBCost == this.JKFOBCost) &&
                    (this.Roundup == null || o.Roundup == this.Roundup) &&
                    (this.DutyRate == null || o.DutyRate == this.DutyRate) &&
                    (this.SubCons == null || o.SubCons == this.SubCons) &&
                    (this.MarginRate == null || o.MarginRate == this.MarginRate) &&
                    (this.Duty == null || o.Duty == this.Duty) &&
                    (this.FOBAUD == null || o.FOBAUD == this.FOBAUD) &&
                    (this.AirFregiht == null || o.AirFregiht == this.AirFregiht) &&
                    (this.ImpCharges == null || o.ImpCharges == this.ImpCharges) &&
                    (this.Landed == null || o.Landed == this.Landed) &&
                    (this.MGTOH == null || o.MGTOH == this.MGTOH) &&
                    (this.IndicoOH == null || o.IndicoOH == this.IndicoOH) &&
                    (this.InkCost == null || o.InkCost == this.InkCost) &&
                    (this.PaperCost == null || o.PaperCost == this.PaperCost) &&
                    (this.ShowToIndico == null || o.ShowToIndico == this.ShowToIndico) 
                 orderby o.CostSheet
                 select o).Count();
            
        }
        
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.CostSheetDetailsViewBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.CostSheetDetailsViewBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.CostSheetDetailsViewBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.CostSheetDetailsViewBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.CostSheetDetailsView> oQuery =
                (from o in context.CostSheetDetailsView
                 where
                    (this.CostSheet == null || this.CostSheet == o.CostSheet) && 
                    (this.QuotedFOBCost == null || this.QuotedFOBCost == o.QuotedFOBCost) && 
                    (this.QuotedCIF == null || this.QuotedCIF == o.QuotedCIF) && 
                    (this.QuotedMP == null || this.QuotedMP == o.QuotedMP) && 
                    (this.ExchangeRate == null || this.ExchangeRate == o.ExchangeRate) && 
                    (this.SMV == null || this.SMV == o.SMV) && 
                    (this.SMVRate == null || this.SMVRate == o.SMVRate) && 
                    (this.CalculateCM == null || this.CalculateCM == o.CalculateCM) && 
                    (this.TotalFabricCost == null || this.TotalFabricCost == o.TotalFabricCost) && 
                    (this.TotalAccessoriesCost == null || this.TotalAccessoriesCost == o.TotalAccessoriesCost) && 
                    (this.HPCost == null || this.HPCost == o.HPCost) && 
                    (this.LabelCost == null || this.LabelCost == o.LabelCost) && 
                    (this.CM == null || this.CM == o.CM) && 
                    (this.JKFOBCost == null || this.JKFOBCost == o.JKFOBCost) && 
                    (this.Roundup == null || this.Roundup == o.Roundup) && 
                    (this.DutyRate == null || this.DutyRate == o.DutyRate) && 
                    (this.SubCons == null || this.SubCons == o.SubCons) && 
                    (this.MarginRate == null || this.MarginRate == o.MarginRate) && 
                    (this.Duty == null || this.Duty == o.Duty) && 
                    (this.FOBAUD == null || this.FOBAUD == o.FOBAUD) && 
                    (this.AirFregiht == null || this.AirFregiht == o.AirFregiht) && 
                    (this.ImpCharges == null || this.ImpCharges == o.ImpCharges) && 
                    (this.Landed == null || this.Landed == o.Landed) && 
                    (this.MGTOH == null || this.MGTOH == o.MGTOH) && 
                    (this.IndicoOH == null || this.IndicoOH == o.IndicoOH) && 
                    (this.InkCost == null || this.InkCost == o.InkCost) && 
                    (this.PaperCost == null || this.PaperCost == o.PaperCost) && 
                    (this.ShowToIndico == null || this.ShowToIndico == o.ShowToIndico) && 
                    ((o.Pattern.Contains(this.Pattern)) ||
                    (o.Fabric.Contains(this.Fabric)) ||
                    (o.Category.Contains(this.Category)) ||
                    (this.Pattern == null && this.Fabric == null && this.Category == null ))
                 orderby o.CostSheet
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.CostSheet).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.CostSheetDetailsViewBO> costsheetdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return costsheetdetailsviews;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.CostSheetDetailsView
                 where
                    (this.CostSheet == null || this.CostSheet == o.CostSheet) && 
                    (this.QuotedFOBCost == null || this.QuotedFOBCost == o.QuotedFOBCost) && 
                    (this.QuotedCIF == null || this.QuotedCIF == o.QuotedCIF) && 
                    (this.QuotedMP == null || this.QuotedMP == o.QuotedMP) && 
                    (this.ExchangeRate == null || this.ExchangeRate == o.ExchangeRate) && 
                    (this.SMV == null || this.SMV == o.SMV) && 
                    (this.SMVRate == null || this.SMVRate == o.SMVRate) && 
                    (this.CalculateCM == null || this.CalculateCM == o.CalculateCM) && 
                    (this.TotalFabricCost == null || this.TotalFabricCost == o.TotalFabricCost) && 
                    (this.TotalAccessoriesCost == null || this.TotalAccessoriesCost == o.TotalAccessoriesCost) && 
                    (this.HPCost == null || this.HPCost == o.HPCost) && 
                    (this.LabelCost == null || this.LabelCost == o.LabelCost) && 
                    (this.CM == null || this.CM == o.CM) && 
                    (this.JKFOBCost == null || this.JKFOBCost == o.JKFOBCost) && 
                    (this.Roundup == null || this.Roundup == o.Roundup) && 
                    (this.DutyRate == null || this.DutyRate == o.DutyRate) && 
                    (this.SubCons == null || this.SubCons == o.SubCons) && 
                    (this.MarginRate == null || this.MarginRate == o.MarginRate) && 
                    (this.Duty == null || this.Duty == o.Duty) && 
                    (this.FOBAUD == null || this.FOBAUD == o.FOBAUD) && 
                    (this.AirFregiht == null || this.AirFregiht == o.AirFregiht) && 
                    (this.ImpCharges == null || this.ImpCharges == o.ImpCharges) && 
                    (this.Landed == null || this.Landed == o.Landed) && 
                    (this.MGTOH == null || this.MGTOH == o.MGTOH) && 
                    (this.IndicoOH == null || this.IndicoOH == o.IndicoOH) && 
                    (this.InkCost == null || this.InkCost == o.InkCost) && 
                    (this.PaperCost == null || this.PaperCost == o.PaperCost) && 
                    (this.ShowToIndico == null || this.ShowToIndico == o.ShowToIndico) && 
                    ((o.Pattern.Contains(this.Pattern)) ||
                    (o.Fabric.Contains(this.Fabric)) ||
                    (o.Category.Contains(this.Category)) ||
                    (this.Pattern == null && this.Fabric == null && this.Category == null ))
                 orderby o.CostSheet
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.CostSheetDetailsViewBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.CostSheetDetailsViewBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.CostSheetDetailsViewBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.CostSheetDetailsViewBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.CostSheetDetailsViewBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.CostSheetDetailsViewBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.CostSheetDetailsViewBO))
                return 1;
            Indico.BusinessObjects.CostSheetDetailsViewBOComparer c = new Indico.BusinessObjects.CostSheetDetailsViewBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.CostSheetDetailsViewBO);
        }

        #endregion
        #endregion
    }
    
    #region CostSheetDetailsViewBOComparer
    public class CostSheetDetailsViewBOComparer : IComparer<Indico.BusinessObjects.CostSheetDetailsViewBO>
    {
        private string propertyToCompareName;
        public CostSheetDetailsViewBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.CostSheetDetailsViewBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.CostSheetDetailsViewBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public CostSheetDetailsViewBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.CostSheetDetailsViewBO> Members
        public int Compare(Indico.BusinessObjects.CostSheetDetailsViewBO x, Indico.BusinessObjects.CostSheetDetailsViewBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.CostSheetDetailsViewBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.CostSheetDetailsViewBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.CostSheetDetailsViewBO x, Indico.BusinessObjects.CostSheetDetailsViewBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
