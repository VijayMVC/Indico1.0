// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

//using Indico.BusinessObjects.Util;
//using Indico.BusinessObjects;
using Indico.DAL;


namespace Indico.BusinessObjects
{
    /// <summary>
    /// ReturnWeeklySummaryViewBO provides the business logic for maintaining Indico.DAL.ReturnWeeklySummaryView records in the data store.
    /// </summary>
    /// <remarks>
    /// ReturnWeeklySummaryViewBO provides the business logic for maintaining Indico.DAL.ReturnWeeklySummaryView records in the data store. 
    /// By default it provides basic Search methods for retrieving Indico.DAL.ReturnWeeklySummaryView
    /// records using the ReturnWeeklySummaryView DAL class. Other methods implement atomic chunks of Business Logic according to
    /// the business rules.
    /// </remarks>
    public partial class ReturnWeeklySummaryViewBO : BusinessObject, IComparable
    {
        #region fields
        private string _companyName;
        private int? _qty;
        private string _shipmentMode;
        private int? _shipmentModeID;
        private int? _distributorClientAddress;
        private string _paymentMethod;
        private string _invoiceStatus;
        private DateTime? _shipmentDate;
        private int? _invoice;
        private string _country;
        #endregion
        
        #region Properties
        /// <summary></summary>
        public string CompanyName
        {   get {return _companyName;}
            set 
            {
                _companyName = value;
            }
        }
        /// <summary></summary>
        public int? Qty
        {   get {return _qty;}
            set 
            {
                _qty = value;
            }
        }
        /// <summary></summary>
        public string ShipmentMode
        {   get {return _shipmentMode;}
            set 
            {
                _shipmentMode = value;
            }
        }
        /// <summary></summary>
        public int? ShipmentModeID
        {   get {return _shipmentModeID;}
            set 
            {
                _shipmentModeID = value;
            }
        }
        /// <summary></summary>
        public int? DistributorClientAddress
        {   get {return _distributorClientAddress;}
            set 
            {
                _distributorClientAddress = value;
            }
        }
        /// <summary></summary>
        public string PaymentMethod
        {   get {return _paymentMethod;}
            set 
            {
                _paymentMethod = value;
            }
        }
        /// <summary></summary>
        public string InvoiceStatus
        {   get {return _invoiceStatus;}
            set 
            {
                _invoiceStatus = value;
            }
        }
        /// <summary></summary>
        public DateTime? ShipmentDate
        {   get {return _shipmentDate;}
            set 
            {
                _shipmentDate = value;
            }
        }
        /// <summary></summary>
        public int? Invoice
        {   get {return _invoice;}
            set 
            {
                _invoice = value;
            }
        }
        /// <summary></summary>
        public string Country
        {   get {return _country;}
            set 
            {
                _country = value;
            }
        }
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the ReturnWeeklySummaryViewBO class using the supplied Indico.DAL.ReturnWeeklySummaryView. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.ReturnWeeklySummaryView whose properties will be used to initialise the ReturnWeeklySummaryViewBO</param>
        internal ReturnWeeklySummaryViewBO(Indico.DAL.ReturnWeeklySummaryView obj)
        {
            // set the properties from the Indico.DAL.ReturnWeeklySummaryView 
            this.CompanyName = obj.CompanyName;
            this.Qty = obj.Qty;
            this.ShipmentMode = obj.ShipmentMode;
            this.ShipmentModeID = obj.ShipmentModeID;
            this.DistributorClientAddress = obj.DistributorClientAddress;
            this.PaymentMethod = obj.PaymentMethod;
            this.InvoiceStatus = obj.InvoiceStatus;
            this.ShipmentDate = obj.ShipmentDate;
            this.Invoice = obj.Invoice;
            this.Country = obj.Country;
        }
        #endregion
        
        #region Internal utility methods
        internal void SetDAL(Indico.DAL.ReturnWeeklySummaryView obj, IndicoEntities context)
        {
            // set the Indico.DAL.ReturnWeeklySummaryView properties
            obj.CompanyName = CompanyName;
            obj.Qty = Convert.ToInt32(Qty);
            obj.ShipmentMode = ShipmentMode;
            obj.ShipmentModeID = Convert.ToInt32(ShipmentModeID);
            obj.DistributorClientAddress = Convert.ToInt32(DistributorClientAddress);
            obj.PaymentMethod = PaymentMethod;
            obj.InvoiceStatus = InvoiceStatus;
            obj.ShipmentDate = Convert.ToDateTime(ShipmentDate);
            obj.Invoice = Convert.ToInt32(Invoice);
            obj.Country = Country;
        }
        
        internal void SetBO(Indico.DAL.ReturnWeeklySummaryView obj)
        {
            // set the Indico.BusinessObjects.ReturnWeeklySummaryViewBO properties    
            this.CompanyName = obj.CompanyName;
            this.Qty = obj.Qty;
            this.ShipmentMode = obj.ShipmentMode;
            this.ShipmentModeID = obj.ShipmentModeID;
            this.DistributorClientAddress = obj.DistributorClientAddress;
            this.PaymentMethod = obj.PaymentMethod;
            this.InvoiceStatus = obj.InvoiceStatus;
            this.ShipmentDate = obj.ShipmentDate;
            this.Invoice = obj.Invoice;
            this.Country = obj.Country;
        }
        
        internal void SetBO(Indico.BusinessObjects.ReturnWeeklySummaryViewBO obj)
        {
            // set this Indico.BusinessObjects.ReturnWeeklySummaryViewBO properties
            this.CompanyName = obj.CompanyName;
            this.Qty = obj.Qty;
            this.ShipmentMode = obj.ShipmentMode;
            this.ShipmentModeID = obj.ShipmentModeID;
            this.DistributorClientAddress = obj.DistributorClientAddress;
            this.PaymentMethod = obj.PaymentMethod;
            this.InvoiceStatus = obj.InvoiceStatus;
            this.ShipmentDate = obj.ShipmentDate;
            this.Invoice = obj.Invoice;
            this.Country = obj.Country;
        }
        
        private static List<Indico.BusinessObjects.ReturnWeeklySummaryViewBO> IQueryableToList(IQueryable<Indico.DAL.ReturnWeeklySummaryView> oQuery)
        {
            List<Indico.DAL.ReturnWeeklySummaryView> oList = oQuery.ToList();
            List<Indico.BusinessObjects.ReturnWeeklySummaryViewBO> rList = new List<Indico.BusinessObjects.ReturnWeeklySummaryViewBO>(oList.Count);
            foreach (Indico.DAL.ReturnWeeklySummaryView o in oList)
            {
                Indico.BusinessObjects.ReturnWeeklySummaryViewBO obj = new Indico.BusinessObjects.ReturnWeeklySummaryViewBO(o);
                rList.Add(obj);
            }
            return rList;
        }
        #endregion
        
        #region BusinessObject methods
        
        #region GetAllObject
        public static List<Indico.BusinessObjects.ReturnWeeklySummaryViewBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public static List<Indico.BusinessObjects.ReturnWeeklySummaryViewBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public static List<Indico.BusinessObjects.ReturnWeeklySummaryViewBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public static List<Indico.BusinessObjects.ReturnWeeklySummaryViewBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnWeeklySummaryView> oQuery =
                (from o in context.ReturnWeeklySummaryView
                 orderby o.CompanyName
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.CompanyName).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnWeeklySummaryViewBO> returnweeklysummaryviews = IQueryableToList(oQuery);
            context.Dispose();
            return returnweeklysummaryviews;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.ReturnWeeklySummaryViewBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.ReturnWeeklySummaryViewBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnWeeklySummaryViewBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnWeeklySummaryViewBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnWeeklySummaryView> oQuery =
                (from o in context.ReturnWeeklySummaryView
                 where
                    (this.CompanyName == null || this.CompanyName == o.CompanyName) &&
                    (this.Qty == null || this.Qty == o.Qty) &&
                    (this.ShipmentMode == null || this.ShipmentMode == o.ShipmentMode) &&
                    (this.ShipmentModeID == null || this.ShipmentModeID == o.ShipmentModeID) &&
                    (this.DistributorClientAddress == null || this.DistributorClientAddress == o.DistributorClientAddress) &&
                    (this.PaymentMethod == null || this.PaymentMethod == o.PaymentMethod) &&
                    (this.InvoiceStatus == null || this.InvoiceStatus == o.InvoiceStatus) &&
                    (this.ShipmentDate == null || this.ShipmentDate == o.ShipmentDate) &&
                    (this.Invoice == null || this.Invoice == o.Invoice) &&
                    (this.Country == null || this.Country == o.Country) 
                 orderby o.CompanyName
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.CompanyName).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnWeeklySummaryViewBO> returnweeklysummaryviews = IQueryableToList(oQuery);
            context.Dispose();
            return returnweeklysummaryviews;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnWeeklySummaryView
                 where
                    (this.CompanyName == null || this.CompanyName == o.CompanyName) &&
                    (this.Qty == null || this.Qty == o.Qty) &&
                    (this.ShipmentMode == null || this.ShipmentMode == o.ShipmentMode) &&
                    (this.ShipmentModeID == null || this.ShipmentModeID == o.ShipmentModeID) &&
                    (this.DistributorClientAddress == null || this.DistributorClientAddress == o.DistributorClientAddress) &&
                    (this.PaymentMethod == null || this.PaymentMethod == o.PaymentMethod) &&
                    (this.InvoiceStatus == null || this.InvoiceStatus == o.InvoiceStatus) &&
                    (this.ShipmentDate == null || this.ShipmentDate == o.ShipmentDate) &&
                    (this.Invoice == null || this.Invoice == o.Invoice) &&
                    (this.Country == null || this.Country == o.Country) 
                 orderby o.CompanyName
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.ReturnWeeklySummaryViewBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.ReturnWeeklySummaryViewBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnWeeklySummaryViewBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnWeeklySummaryViewBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnWeeklySummaryView> oQuery =
                (from o in context.ReturnWeeklySummaryView
                 where
                    (this.CompanyName == null || o.CompanyName.Contains(this.CompanyName)) &&
                    (this.Qty == null || o.Qty == this.Qty) &&
                    (this.ShipmentMode == null || o.ShipmentMode.Contains(this.ShipmentMode)) &&
                    (this.ShipmentModeID == null || o.ShipmentModeID == this.ShipmentModeID) &&
                    (this.DistributorClientAddress == null || o.DistributorClientAddress == this.DistributorClientAddress) &&
                    (this.PaymentMethod == null || o.PaymentMethod.Contains(this.PaymentMethod)) &&
                    (this.InvoiceStatus == null || o.InvoiceStatus.Contains(this.InvoiceStatus)) &&
                    (this.ShipmentDate == null || o.ShipmentDate == this.ShipmentDate) &&
                    (this.Invoice == null || o.Invoice == this.Invoice) &&
                    (this.Country == null || o.Country.Contains(this.Country)) 
                 orderby o.CompanyName
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.CompanyName).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnWeeklySummaryViewBO> returnweeklysummaryviews = IQueryableToList(oQuery);
            context.Dispose();
            return returnweeklysummaryviews;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnWeeklySummaryView
                 where
                    (this.CompanyName == null || o.CompanyName.Contains(this.CompanyName)) &&
                    (this.Qty == null || o.Qty == this.Qty) &&
                    (this.ShipmentMode == null || o.ShipmentMode.Contains(this.ShipmentMode)) &&
                    (this.ShipmentModeID == null || o.ShipmentModeID == this.ShipmentModeID) &&
                    (this.DistributorClientAddress == null || o.DistributorClientAddress == this.DistributorClientAddress) &&
                    (this.PaymentMethod == null || o.PaymentMethod.Contains(this.PaymentMethod)) &&
                    (this.InvoiceStatus == null || o.InvoiceStatus.Contains(this.InvoiceStatus)) &&
                    (this.ShipmentDate == null || o.ShipmentDate == this.ShipmentDate) &&
                    (this.Invoice == null || o.Invoice == this.Invoice) &&
                    (this.Country == null || o.Country.Contains(this.Country)) 
                 orderby o.CompanyName
                 select o).Count();
            
        }
        
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.ReturnWeeklySummaryViewBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.ReturnWeeklySummaryViewBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnWeeklySummaryViewBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnWeeklySummaryViewBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnWeeklySummaryView> oQuery =
                (from o in context.ReturnWeeklySummaryView
                 where
                    (this.Qty == null || this.Qty == o.Qty) && 
                    (this.ShipmentModeID == null || this.ShipmentModeID == o.ShipmentModeID) && 
                    (this.DistributorClientAddress == null || this.DistributorClientAddress == o.DistributorClientAddress) && 
                    (this.ShipmentDate == null || this.ShipmentDate == o.ShipmentDate) && 
                    (this.Invoice == null || this.Invoice == o.Invoice) && 
                    ((o.CompanyName.Contains(this.CompanyName)) ||
                    (o.ShipmentMode.Contains(this.ShipmentMode)) ||
                    (o.PaymentMethod.Contains(this.PaymentMethod)) ||
                    (o.InvoiceStatus.Contains(this.InvoiceStatus)) ||
                    (o.Country.Contains(this.Country)) ||
                    (this.CompanyName == null && this.ShipmentMode == null && this.PaymentMethod == null && this.InvoiceStatus == null && this.Country == null ))
                 orderby o.CompanyName
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.CompanyName).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnWeeklySummaryViewBO> returnweeklysummaryviews = IQueryableToList(oQuery);
            context.Dispose();
            return returnweeklysummaryviews;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnWeeklySummaryView
                 where
                    (this.Qty == null || this.Qty == o.Qty) && 
                    (this.ShipmentModeID == null || this.ShipmentModeID == o.ShipmentModeID) && 
                    (this.DistributorClientAddress == null || this.DistributorClientAddress == o.DistributorClientAddress) && 
                    (this.ShipmentDate == null || this.ShipmentDate == o.ShipmentDate) && 
                    (this.Invoice == null || this.Invoice == o.Invoice) && 
                    ((o.CompanyName.Contains(this.CompanyName)) ||
                    (o.ShipmentMode.Contains(this.ShipmentMode)) ||
                    (o.PaymentMethod.Contains(this.PaymentMethod)) ||
                    (o.InvoiceStatus.Contains(this.InvoiceStatus)) ||
                    (o.Country.Contains(this.Country)) ||
                    (this.CompanyName == null && this.ShipmentMode == null && this.PaymentMethod == null && this.InvoiceStatus == null && this.Country == null ))
                 orderby o.CompanyName
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.ReturnWeeklySummaryViewBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.ReturnWeeklySummaryViewBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.ReturnWeeklySummaryViewBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.ReturnWeeklySummaryViewBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.ReturnWeeklySummaryViewBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.ReturnWeeklySummaryViewBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.ReturnWeeklySummaryViewBO))
                return 1;
            Indico.BusinessObjects.ReturnWeeklySummaryViewBOComparer c = new Indico.BusinessObjects.ReturnWeeklySummaryViewBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.ReturnWeeklySummaryViewBO);
        }

        #endregion
        #endregion
    }
    
    #region ReturnWeeklySummaryViewBOComparer
    public class ReturnWeeklySummaryViewBOComparer : IComparer<Indico.BusinessObjects.ReturnWeeklySummaryViewBO>
    {
        private string propertyToCompareName;
        public ReturnWeeklySummaryViewBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.ReturnWeeklySummaryViewBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.ReturnWeeklySummaryViewBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public ReturnWeeklySummaryViewBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.ReturnWeeklySummaryViewBO> Members
        public int Compare(Indico.BusinessObjects.ReturnWeeklySummaryViewBO x, Indico.BusinessObjects.ReturnWeeklySummaryViewBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.ReturnWeeklySummaryViewBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.ReturnWeeklySummaryViewBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.ReturnWeeklySummaryViewBO x, Indico.BusinessObjects.ReturnWeeklySummaryViewBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
