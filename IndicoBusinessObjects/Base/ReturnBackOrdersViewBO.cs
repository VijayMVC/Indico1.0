// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

//using Indico.BusinessObjects.Util;
//using Indico.BusinessObjects;
using Indico.DAL;


namespace Indico.BusinessObjects
{
    /// <summary>
    /// ReturnBackOrdersViewBO provides the business logic for maintaining Indico.DAL.ReturnBackOrdersView records in the data store.
    /// </summary>
    /// <remarks>
    /// ReturnBackOrdersViewBO provides the business logic for maintaining Indico.DAL.ReturnBackOrdersView records in the data store. 
    /// By default it provides basic Search methods for retrieving Indico.DAL.ReturnBackOrdersView
    /// records using the ReturnBackOrdersView DAL class. Other methods implement atomic chunks of Business Logic according to
    /// the business rules.
    /// </remarks>
    public partial class ReturnBackOrdersViewBO : BusinessObject, IComparable
    {
        #region fields
        private int? _distributorID;
        private string _distributor;
        private string _coordinator;
        private int? _coordinatorID;
        private bool? _backOrder;
        private int? _qty;
        private string _distributorEmailAddress;
        private string _coordinatorEmailAddress;
        private int? _count;
        #endregion
        
        #region Properties
        /// <summary></summary>
        public int? DistributorID
        {   get {return _distributorID;}
            set 
            {
                _distributorID = value;
            }
        }
        /// <summary></summary>
        public string Distributor
        {   get {return _distributor;}
            set 
            {
                _distributor = value;
            }
        }
        /// <summary></summary>
        public string Coordinator
        {   get {return _coordinator;}
            set 
            {
                _coordinator = value;
            }
        }
        /// <summary></summary>
        public int? CoordinatorID
        {   get {return _coordinatorID;}
            set 
            {
                _coordinatorID = value;
            }
        }
        /// <summary></summary>
        public bool? BackOrder
        {   get {return _backOrder;}
            set 
            {
                _backOrder = value;
            }
        }
        /// <summary></summary>
        public int? Qty
        {   get {return _qty;}
            set 
            {
                _qty = value;
            }
        }
        /// <summary></summary>
        public string DistributorEmailAddress
        {   get {return _distributorEmailAddress;}
            set 
            {
                _distributorEmailAddress = value;
            }
        }
        /// <summary></summary>
        public string CoordinatorEmailAddress
        {   get {return _coordinatorEmailAddress;}
            set 
            {
                _coordinatorEmailAddress = value;
            }
        }
        /// <summary></summary>
        public int? Count
        {   get {return _count;}
            set 
            {
                _count = value;
            }
        }
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the ReturnBackOrdersViewBO class using the supplied Indico.DAL.ReturnBackOrdersView. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.ReturnBackOrdersView whose properties will be used to initialise the ReturnBackOrdersViewBO</param>
        internal ReturnBackOrdersViewBO(Indico.DAL.ReturnBackOrdersView obj)
        {
            // set the properties from the Indico.DAL.ReturnBackOrdersView 
            this.DistributorID = obj.DistributorID;
            this.Distributor = obj.Distributor;
            this.Coordinator = obj.Coordinator;
            this.CoordinatorID = obj.CoordinatorID;
            this.BackOrder = obj.BackOrder;
            this.Qty = obj.Qty;
            this.DistributorEmailAddress = obj.DistributorEmailAddress;
            this.CoordinatorEmailAddress = obj.CoordinatorEmailAddress;
            this.Count = obj.Count;
        }
        #endregion
        
        #region Internal utility methods
        internal void SetDAL(Indico.DAL.ReturnBackOrdersView obj, IndicoEntities context)
        {
            // set the Indico.DAL.ReturnBackOrdersView properties
            obj.DistributorID = Convert.ToInt32(DistributorID);
            obj.Distributor = Distributor;
            obj.Coordinator = Coordinator;
            obj.CoordinatorID = Convert.ToInt32(CoordinatorID);
            obj.BackOrder = Convert.ToBoolean(BackOrder);
            obj.Qty = Convert.ToInt32(Qty);
            obj.DistributorEmailAddress = DistributorEmailAddress;
            obj.CoordinatorEmailAddress = CoordinatorEmailAddress;
            obj.Count = Convert.ToInt32(Count);
        }
        
        internal void SetBO(Indico.DAL.ReturnBackOrdersView obj)
        {
            // set the Indico.BusinessObjects.ReturnBackOrdersViewBO properties    
            this.DistributorID = obj.DistributorID;
            this.Distributor = obj.Distributor;
            this.Coordinator = obj.Coordinator;
            this.CoordinatorID = obj.CoordinatorID;
            this.BackOrder = obj.BackOrder;
            this.Qty = obj.Qty;
            this.DistributorEmailAddress = obj.DistributorEmailAddress;
            this.CoordinatorEmailAddress = obj.CoordinatorEmailAddress;
            this.Count = obj.Count;
        }
        
        internal void SetBO(Indico.BusinessObjects.ReturnBackOrdersViewBO obj)
        {
            // set this Indico.BusinessObjects.ReturnBackOrdersViewBO properties
            this.DistributorID = obj.DistributorID;
            this.Distributor = obj.Distributor;
            this.Coordinator = obj.Coordinator;
            this.CoordinatorID = obj.CoordinatorID;
            this.BackOrder = obj.BackOrder;
            this.Qty = obj.Qty;
            this.DistributorEmailAddress = obj.DistributorEmailAddress;
            this.CoordinatorEmailAddress = obj.CoordinatorEmailAddress;
            this.Count = obj.Count;
        }
        
        private static List<Indico.BusinessObjects.ReturnBackOrdersViewBO> IQueryableToList(IQueryable<Indico.DAL.ReturnBackOrdersView> oQuery)
        {
            List<Indico.DAL.ReturnBackOrdersView> oList = oQuery.ToList();
            List<Indico.BusinessObjects.ReturnBackOrdersViewBO> rList = new List<Indico.BusinessObjects.ReturnBackOrdersViewBO>(oList.Count);
            foreach (Indico.DAL.ReturnBackOrdersView o in oList)
            {
                Indico.BusinessObjects.ReturnBackOrdersViewBO obj = new Indico.BusinessObjects.ReturnBackOrdersViewBO(o);
                rList.Add(obj);
            }
            return rList;
        }
        #endregion
        
        #region BusinessObject methods
        
        #region GetAllObject
        public static List<Indico.BusinessObjects.ReturnBackOrdersViewBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public static List<Indico.BusinessObjects.ReturnBackOrdersViewBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public static List<Indico.BusinessObjects.ReturnBackOrdersViewBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public static List<Indico.BusinessObjects.ReturnBackOrdersViewBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnBackOrdersView> oQuery =
                (from o in context.ReturnBackOrdersView
                 orderby o.DistributorID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.DistributorID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnBackOrdersViewBO> returnbackordersviews = IQueryableToList(oQuery);
            context.Dispose();
            return returnbackordersviews;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.ReturnBackOrdersViewBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.ReturnBackOrdersViewBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnBackOrdersViewBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnBackOrdersViewBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnBackOrdersView> oQuery =
                (from o in context.ReturnBackOrdersView
                 where
                    (this.DistributorID == null || this.DistributorID == o.DistributorID) &&
                    (this.Distributor == null || this.Distributor == o.Distributor) &&
                    (this.Coordinator == null || this.Coordinator == o.Coordinator) &&
                    (this.CoordinatorID == null || this.CoordinatorID == o.CoordinatorID) &&
                    (this.BackOrder == null || this.BackOrder == o.BackOrder) &&
                    (this.Qty == null || this.Qty == o.Qty) &&
                    (this.DistributorEmailAddress == null || this.DistributorEmailAddress == o.DistributorEmailAddress) &&
                    (this.CoordinatorEmailAddress == null || this.CoordinatorEmailAddress == o.CoordinatorEmailAddress) &&
                    (this.Count == null || this.Count == o.Count) 
                 orderby o.DistributorID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.DistributorID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnBackOrdersViewBO> returnbackordersviews = IQueryableToList(oQuery);
            context.Dispose();
            return returnbackordersviews;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnBackOrdersView
                 where
                    (this.DistributorID == null || this.DistributorID == o.DistributorID) &&
                    (this.Distributor == null || this.Distributor == o.Distributor) &&
                    (this.Coordinator == null || this.Coordinator == o.Coordinator) &&
                    (this.CoordinatorID == null || this.CoordinatorID == o.CoordinatorID) &&
                    (this.BackOrder == null || this.BackOrder == o.BackOrder) &&
                    (this.Qty == null || this.Qty == o.Qty) &&
                    (this.DistributorEmailAddress == null || this.DistributorEmailAddress == o.DistributorEmailAddress) &&
                    (this.CoordinatorEmailAddress == null || this.CoordinatorEmailAddress == o.CoordinatorEmailAddress) &&
                    (this.Count == null || this.Count == o.Count) 
                 orderby o.DistributorID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.ReturnBackOrdersViewBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.ReturnBackOrdersViewBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnBackOrdersViewBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnBackOrdersViewBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnBackOrdersView> oQuery =
                (from o in context.ReturnBackOrdersView
                 where
                    (this.DistributorID == null || o.DistributorID == this.DistributorID) &&
                    (this.Distributor == null || o.Distributor.Contains(this.Distributor)) &&
                    (this.Coordinator == null || o.Coordinator.Contains(this.Coordinator)) &&
                    (this.CoordinatorID == null || o.CoordinatorID == this.CoordinatorID) &&
                    (this.BackOrder == null || o.BackOrder == this.BackOrder) &&
                    (this.Qty == null || o.Qty == this.Qty) &&
                    (this.DistributorEmailAddress == null || o.DistributorEmailAddress.Contains(this.DistributorEmailAddress)) &&
                    (this.CoordinatorEmailAddress == null || o.CoordinatorEmailAddress.Contains(this.CoordinatorEmailAddress)) &&
                    (this.Count == null || o.Count == this.Count) 
                 orderby o.DistributorID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.DistributorID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnBackOrdersViewBO> returnbackordersviews = IQueryableToList(oQuery);
            context.Dispose();
            return returnbackordersviews;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnBackOrdersView
                 where
                    (this.DistributorID == null || o.DistributorID == this.DistributorID) &&
                    (this.Distributor == null || o.Distributor.Contains(this.Distributor)) &&
                    (this.Coordinator == null || o.Coordinator.Contains(this.Coordinator)) &&
                    (this.CoordinatorID == null || o.CoordinatorID == this.CoordinatorID) &&
                    (this.BackOrder == null || o.BackOrder == this.BackOrder) &&
                    (this.Qty == null || o.Qty == this.Qty) &&
                    (this.DistributorEmailAddress == null || o.DistributorEmailAddress.Contains(this.DistributorEmailAddress)) &&
                    (this.CoordinatorEmailAddress == null || o.CoordinatorEmailAddress.Contains(this.CoordinatorEmailAddress)) &&
                    (this.Count == null || o.Count == this.Count) 
                 orderby o.DistributorID
                 select o).Count();
            
        }
        
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.ReturnBackOrdersViewBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.ReturnBackOrdersViewBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnBackOrdersViewBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnBackOrdersViewBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnBackOrdersView> oQuery =
                (from o in context.ReturnBackOrdersView
                 where
                    (this.DistributorID == null || this.DistributorID == o.DistributorID) && 
                    (this.CoordinatorID == null || this.CoordinatorID == o.CoordinatorID) && 
                    (this.BackOrder == null || this.BackOrder == o.BackOrder) && 
                    (this.Qty == null || this.Qty == o.Qty) && 
                    (this.Count == null || this.Count == o.Count) && 
                    ((o.Distributor.Contains(this.Distributor)) ||
                    (o.Coordinator.Contains(this.Coordinator)) ||
                    (o.DistributorEmailAddress.Contains(this.DistributorEmailAddress)) ||
                    (o.CoordinatorEmailAddress.Contains(this.CoordinatorEmailAddress)) ||
                    (this.Distributor == null && this.Coordinator == null && this.DistributorEmailAddress == null && this.CoordinatorEmailAddress == null ))
                 orderby o.DistributorID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.DistributorID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnBackOrdersViewBO> returnbackordersviews = IQueryableToList(oQuery);
            context.Dispose();
            return returnbackordersviews;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnBackOrdersView
                 where
                    (this.DistributorID == null || this.DistributorID == o.DistributorID) && 
                    (this.CoordinatorID == null || this.CoordinatorID == o.CoordinatorID) && 
                    (this.BackOrder == null || this.BackOrder == o.BackOrder) && 
                    (this.Qty == null || this.Qty == o.Qty) && 
                    (this.Count == null || this.Count == o.Count) && 
                    ((o.Distributor.Contains(this.Distributor)) ||
                    (o.Coordinator.Contains(this.Coordinator)) ||
                    (o.DistributorEmailAddress.Contains(this.DistributorEmailAddress)) ||
                    (o.CoordinatorEmailAddress.Contains(this.CoordinatorEmailAddress)) ||
                    (this.Distributor == null && this.Coordinator == null && this.DistributorEmailAddress == null && this.CoordinatorEmailAddress == null ))
                 orderby o.DistributorID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.ReturnBackOrdersViewBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.ReturnBackOrdersViewBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.ReturnBackOrdersViewBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.ReturnBackOrdersViewBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.ReturnBackOrdersViewBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.ReturnBackOrdersViewBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.ReturnBackOrdersViewBO))
                return 1;
            Indico.BusinessObjects.ReturnBackOrdersViewBOComparer c = new Indico.BusinessObjects.ReturnBackOrdersViewBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.ReturnBackOrdersViewBO);
        }

        #endregion
        #endregion
    }
    
    #region ReturnBackOrdersViewBOComparer
    public class ReturnBackOrdersViewBOComparer : IComparer<Indico.BusinessObjects.ReturnBackOrdersViewBO>
    {
        private string propertyToCompareName;
        public ReturnBackOrdersViewBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.ReturnBackOrdersViewBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.ReturnBackOrdersViewBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public ReturnBackOrdersViewBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.ReturnBackOrdersViewBO> Members
        public int Compare(Indico.BusinessObjects.ReturnBackOrdersViewBO x, Indico.BusinessObjects.ReturnBackOrdersViewBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.ReturnBackOrdersViewBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.ReturnBackOrdersViewBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.ReturnBackOrdersViewBO x, Indico.BusinessObjects.ReturnBackOrdersViewBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
