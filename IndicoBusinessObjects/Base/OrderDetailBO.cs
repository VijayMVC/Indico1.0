// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class OrderDetailBO : BusinessObject, IComparable
    {
        #region fields
        #region Scalar Fields
        private int id;
        private int? _artWork;
        private int? _despatchTo;
        private decimal? _distributorSurcharge;
        private decimal? _editedPrice;
        private string _editedPriceRemarks;
        private int _fabricCode;
        private string _factoryInstructions;
        private bool _isBrandingKit;
        private bool? _isCourierDelivery;
        private bool _isLockerPatch;
        private bool _isRepeat;
        private bool? _isRequiredNamesNumbers;
        private bool? _isWeeklyShipment;
        private int? _label;
        private string _nameAndNumbersFilePath;
        private int _order;
        private int _orderType;
        private int _pattern;
        private int? _paymentMethod;
        private bool? _photoApprovalReq;
        private string _promoCode;
        private DateTime _requestedDate = DateTime.MinValue;
        private int? _reservation;
        private DateTime _sheduledDate = DateTime.MinValue;
        private DateTime _shipmentDate = DateTime.MinValue;
        private int? _shipmentMode;
        private int? _status;
        private decimal _surcharge;
        private int? _visualLayout;
        private string _visualLayoutNotes;
        #endregion
        
        #region Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.ArtWorkBO _objArtWork;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.DistributorClientAddressBO _objDespatchTo;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.FabricCodeBO _objFabricCode;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.LabelBO _objLabel;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.OrderBO _objOrder;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.OrderTypeBO _objOrderType;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.PatternBO _objPattern;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.PaymentMethodBO _objPaymentMethod;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.ReservationBO _objReservation;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.ShipmentModeBO _objShipmentMode;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.OrderDetailStatusBO _objStatus;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.VisualLayoutBO _objVisualLayout;
        #endregion
        
        #region Foreign Table Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO> factoryOrderDetialsWhereThisIsOrderDetailList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _factoryOrderDetialsWhereThisIsOrderDetailLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.InvoiceOrderBO> invoiceOrdersWhereThisIsOrderDetailList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _invoiceOrdersWhereThisIsOrderDetailLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.OrderDetailQtyBO> orderDetailQtysWhereThisIsOrderDetailList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _orderDetailQtysWhereThisIsOrderDetailLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.PackingListBO> packingListsWhereThisIsOrderDetailList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _packingListsWhereThisIsOrderDetailLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.ProductionPlanningBO> productionPlanningsWhereThisIsOrderDetailList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _productionPlanningsWhereThisIsOrderDetailLoaded;
        #endregion
        
        #region Other fields
        
        private Indico.DAL.OrderDetail _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>.</summary>
        public int? ArtWork
        {   
            get {return _artWork;}
            set 
            {
                OnArtWorkChanging(value);
                _artWork = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.ArtWork = (from o in this._context.Context.ArtWork
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.ArtWork>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.ArtWork = null;
                OnArtWorkChanged();
            }
        }
        /// <summary>.</summary>
        public int? DespatchTo
        {   
            get {return _despatchTo;}
            set 
            {
                OnDespatchToChanging(value);
                _despatchTo = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.DespatchTo = (from o in this._context.Context.DistributorClientAddress
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.DistributorClientAddress>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.DespatchTo = null;
                OnDespatchToChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? DistributorSurcharge
        {   
            get {return _distributorSurcharge;}
            set 
            {
                OnDistributorSurchargeChanging(value);
                _distributorSurcharge = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.DistributorSurcharge = value;
                }
                OnDistributorSurchargeChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? EditedPrice
        {   
            get {return _editedPrice;}
            set 
            {
                OnEditedPriceChanging(value);
                _editedPrice = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.EditedPrice = value;
                }
                OnEditedPriceChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string EditedPriceRemarks
        {   
            get {return _editedPriceRemarks;}
            set 
            {
                OnEditedPriceRemarksChanging(value);
                _editedPriceRemarks = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.EditedPriceRemarks = value;
                }
                OnEditedPriceRemarksChanged();
            }
        }
        /// <summary>Fabric of the order.</summary>
        public int FabricCode
        {   
            get {return _fabricCode;}
            set 
            {
                OnFabricCodeChanging(value);
                _fabricCode = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.FabricCode = (from o in this._context.Context.FabricCode
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.FabricCode>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.FabricCode = null;
                OnFabricCodeChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string FactoryInstructions
        {   
            get {return _factoryInstructions;}
            set 
            {
                OnFactoryInstructionsChanging(value);
                _factoryInstructions = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.FactoryInstructions = value;
                }
                OnFactoryInstructionsChanged();
            }
        }
        /// <summary>.</summary>
        public bool IsBrandingKit
        {   
            get {return _isBrandingKit;}
            set 
            {
                OnIsBrandingKitChanging(value);
                _isBrandingKit = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsBrandingKit = value;
                }
                OnIsBrandingKitChanged();
            }
        }
        /// <summary>.</summary>
        public bool? IsCourierDelivery
        {   
            get {return _isCourierDelivery;}
            set 
            {
                OnIsCourierDeliveryChanging(value);
                _isCourierDelivery = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsCourierDelivery = value;
                }
                OnIsCourierDeliveryChanged();
            }
        }
        /// <summary>.</summary>
        public bool IsLockerPatch
        {   
            get {return _isLockerPatch;}
            set 
            {
                OnIsLockerPatchChanging(value);
                _isLockerPatch = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsLockerPatch = value;
                }
                OnIsLockerPatchChanged();
            }
        }
        /// <summary>.</summary>
        public bool IsRepeat
        {   
            get {return _isRepeat;}
            set 
            {
                OnIsRepeatChanging(value);
                _isRepeat = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsRepeat = value;
                }
                OnIsRepeatChanged();
            }
        }
        /// <summary>.</summary>
        public bool? IsRequiredNamesNumbers
        {   
            get {return _isRequiredNamesNumbers;}
            set 
            {
                OnIsRequiredNamesNumbersChanging(value);
                _isRequiredNamesNumbers = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsRequiredNamesNumbers = value;
                }
                OnIsRequiredNamesNumbersChanged();
            }
        }
        /// <summary>.</summary>
        public bool? IsWeeklyShipment
        {   
            get {return _isWeeklyShipment;}
            set 
            {
                OnIsWeeklyShipmentChanging(value);
                _isWeeklyShipment = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsWeeklyShipment = value;
                }
                OnIsWeeklyShipmentChanged();
            }
        }
        /// <summary>.</summary>
        public int? Label
        {   
            get {return _label;}
            set 
            {
                OnLabelChanging(value);
                _label = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.Label = (from o in this._context.Context.Label
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Label>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Label = null;
                OnLabelChanged();
            }
        }
        /// <summary>NNP file path. The maximum length of this property is 255.</summary>
        public string NameAndNumbersFilePath
        {   
            get {return _nameAndNumbersFilePath;}
            set 
            {
                OnNameAndNumbersFilePathChanging(value);
                _nameAndNumbersFilePath = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.NameAndNumbersFilePath = value;
                }
                OnNameAndNumbersFilePathChanged();
            }
        }
        /// <summary>Order ID.</summary>
        public int Order
        {   
            get {return _order;}
            set 
            {
                OnOrderChanging(value);
                _order = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Order = (from o in this._context.Context.Order
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Order>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Order = null;
                OnOrderChanged();
            }
        }
        /// <summary>Order type.</summary>
        public int OrderType
        {   
            get {return _orderType;}
            set 
            {
                OnOrderTypeChanging(value);
                _orderType = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.OrderType = (from o in this._context.Context.OrderType
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.OrderType>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.OrderType = null;
                OnOrderTypeChanged();
            }
        }
        /// <summary>Pattern of the order.</summary>
        public int Pattern
        {   
            get {return _pattern;}
            set 
            {
                OnPatternChanging(value);
                _pattern = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Pattern = (from o in this._context.Context.Pattern
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Pattern>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Pattern = null;
                OnPatternChanged();
            }
        }
        /// <summary>.</summary>
        public int? PaymentMethod
        {   
            get {return _paymentMethod;}
            set 
            {
                OnPaymentMethodChanging(value);
                _paymentMethod = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.PaymentMethod = (from o in this._context.Context.PaymentMethod
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.PaymentMethod>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.PaymentMethod = null;
                OnPaymentMethodChanged();
            }
        }
        /// <summary>.</summary>
        public bool? PhotoApprovalReq
        {   
            get {return _photoApprovalReq;}
            set 
            {
                OnPhotoApprovalReqChanging(value);
                _photoApprovalReq = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.PhotoApprovalReq = value;
                }
                OnPhotoApprovalReqChanged();
            }
        }
        /// <summary>. The maximum length of this property is 32.</summary>
        public string PromoCode
        {   
            get {return _promoCode;}
            set 
            {
                OnPromoCodeChanging(value);
                _promoCode = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.PromoCode = value;
                }
                OnPromoCodeChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime RequestedDate
        {   
            get {return _requestedDate;}
            set 
            {
                OnRequestedDateChanging(value);
                _requestedDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.RequestedDate = value;
                }
                OnRequestedDateChanged();
            }
        }
        /// <summary>.</summary>
        public int? Reservation
        {   
            get {return _reservation;}
            set 
            {
                OnReservationChanging(value);
                _reservation = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.Reservation = (from o in this._context.Context.Reservation
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Reservation>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Reservation = null;
                OnReservationChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime SheduledDate
        {   
            get {return _sheduledDate;}
            set 
            {
                OnSheduledDateChanging(value);
                _sheduledDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.SheduledDate = value;
                }
                OnSheduledDateChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime ShipmentDate
        {   
            get {return _shipmentDate;}
            set 
            {
                OnShipmentDateChanging(value);
                _shipmentDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ShipmentDate = value;
                }
                OnShipmentDateChanged();
            }
        }
        /// <summary>.</summary>
        public int? ShipmentMode
        {   
            get {return _shipmentMode;}
            set 
            {
                OnShipmentModeChanging(value);
                _shipmentMode = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.ShipmentMode = (from o in this._context.Context.ShipmentMode
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.ShipmentMode>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.ShipmentMode = null;
                OnShipmentModeChanged();
            }
        }
        /// <summary>.</summary>
        public int? Status
        {   
            get {return _status;}
            set 
            {
                OnStatusChanging(value);
                _status = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.Status = (from o in this._context.Context.OrderDetailStatus
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.OrderDetailStatus>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Status = null;
                OnStatusChanged();
            }
        }
        /// <summary>.</summary>
        public decimal Surcharge
        {   
            get {return _surcharge;}
            set 
            {
                OnSurchargeChanging(value);
                _surcharge = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Surcharge = value;
                }
                OnSurchargeChanged();
            }
        }
        /// <summary>VL number.</summary>
        public int? VisualLayout
        {   
            get {return _visualLayout;}
            set 
            {
                OnVisualLayoutChanging(value);
                _visualLayout = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.VisualLayout = (from o in this._context.Context.VisualLayout
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.VisualLayout>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.VisualLayout = null;
                OnVisualLayoutChanged();
            }
        }
        /// <summary>VL notes. The maximum length of this property is 255.</summary>
        public string VisualLayoutNotes
        {   
            get {return _visualLayoutNotes;}
            set 
            {
                OnVisualLayoutNotesChanging(value);
                _visualLayoutNotes = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.VisualLayoutNotes = value;
                }
                OnVisualLayoutNotesChanged();
            }
        }
        
        internal Indico.DAL.OrderDetail ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        ///<summary>The ArtWorkBO object identified by the value of ArtWork</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.ArtWorkBO objArtWork
        {
            get
            {
                if (_artWork != null && _artWork > 0 && _objArtWork == null)
                {
                        if (this._context == null)
                        {
                            _objArtWork = new Indico.BusinessObjects.ArtWorkBO();
                        }
                        else
                        {
                            _objArtWork = new Indico.BusinessObjects.ArtWorkBO(ref this._context);
                        }
                        _objArtWork.ID = Convert.ToInt32(_artWork);
                        _objArtWork.GetObject(); 
                }
                return _objArtWork;
            }
            set
            { 
                _objArtWork = value;
                _artWork = _objArtWork.ID;
            }
        }
        ///<summary>The DistributorClientAddressBO object identified by the value of DespatchTo</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.DistributorClientAddressBO objDespatchTo
        {
            get
            {
                if (_despatchTo != null && _despatchTo > 0 && _objDespatchTo == null)
                {
                        if (this._context == null)
                        {
                            _objDespatchTo = new Indico.BusinessObjects.DistributorClientAddressBO();
                        }
                        else
                        {
                            _objDespatchTo = new Indico.BusinessObjects.DistributorClientAddressBO(ref this._context);
                        }
                        _objDespatchTo.ID = Convert.ToInt32(_despatchTo);
                        _objDespatchTo.GetObject(); 
                }
                return _objDespatchTo;
            }
            set
            { 
                _objDespatchTo = value;
                _despatchTo = _objDespatchTo.ID;
            }
        }
        ///<summary>The FabricCodeBO object identified by the value of FabricCode</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.FabricCodeBO objFabricCode
        {
            get
            {
                if ( _fabricCode > 0 && _objFabricCode == null)
                {
                        if (this._context == null)
                        {
                            _objFabricCode = new Indico.BusinessObjects.FabricCodeBO();
                        }
                        else
                        {
                            _objFabricCode = new Indico.BusinessObjects.FabricCodeBO(ref this._context);
                        }
                        _objFabricCode.ID = _fabricCode;
                        _objFabricCode.GetObject(); 
                }
                return _objFabricCode;
            }
            set
            { 
                _objFabricCode = value;
                _fabricCode = _objFabricCode.ID;
            }
        }
        ///<summary>The LabelBO object identified by the value of Label</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.LabelBO objLabel
        {
            get
            {
                if (_label != null && _label > 0 && _objLabel == null)
                {
                        if (this._context == null)
                        {
                            _objLabel = new Indico.BusinessObjects.LabelBO();
                        }
                        else
                        {
                            _objLabel = new Indico.BusinessObjects.LabelBO(ref this._context);
                        }
                        _objLabel.ID = Convert.ToInt32(_label);
                        _objLabel.GetObject(); 
                }
                return _objLabel;
            }
            set
            { 
                _objLabel = value;
                _label = _objLabel.ID;
            }
        }
        ///<summary>The OrderBO object identified by the value of Order</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.OrderBO objOrder
        {
            get
            {
                if ( _order > 0 && _objOrder == null)
                {
                        if (this._context == null)
                        {
                            _objOrder = new Indico.BusinessObjects.OrderBO();
                        }
                        else
                        {
                            _objOrder = new Indico.BusinessObjects.OrderBO(ref this._context);
                        }
                        _objOrder.ID = _order;
                        _objOrder.GetObject(); 
                }
                return _objOrder;
            }
            set
            { 
                _objOrder = value;
                _order = _objOrder.ID;
            }
        }
        ///<summary>The OrderTypeBO object identified by the value of OrderType</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.OrderTypeBO objOrderType
        {
            get
            {
                if ( _orderType > 0 && _objOrderType == null)
                {
                        if (this._context == null)
                        {
                            _objOrderType = new Indico.BusinessObjects.OrderTypeBO();
                        }
                        else
                        {
                            _objOrderType = new Indico.BusinessObjects.OrderTypeBO(ref this._context);
                        }
                        _objOrderType.ID = _orderType;
                        _objOrderType.GetObject(); 
                }
                return _objOrderType;
            }
            set
            { 
                _objOrderType = value;
                _orderType = _objOrderType.ID;
            }
        }
        ///<summary>The PatternBO object identified by the value of Pattern</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.PatternBO objPattern
        {
            get
            {
                if ( _pattern > 0 && _objPattern == null)
                {
                        if (this._context == null)
                        {
                            _objPattern = new Indico.BusinessObjects.PatternBO();
                        }
                        else
                        {
                            _objPattern = new Indico.BusinessObjects.PatternBO(ref this._context);
                        }
                        _objPattern.ID = _pattern;
                        _objPattern.GetObject(); 
                }
                return _objPattern;
            }
            set
            { 
                _objPattern = value;
                _pattern = _objPattern.ID;
            }
        }
        ///<summary>The PaymentMethodBO object identified by the value of PaymentMethod</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.PaymentMethodBO objPaymentMethod
        {
            get
            {
                if (_paymentMethod != null && _paymentMethod > 0 && _objPaymentMethod == null)
                {
                        if (this._context == null)
                        {
                            _objPaymentMethod = new Indico.BusinessObjects.PaymentMethodBO();
                        }
                        else
                        {
                            _objPaymentMethod = new Indico.BusinessObjects.PaymentMethodBO(ref this._context);
                        }
                        _objPaymentMethod.ID = Convert.ToInt32(_paymentMethod);
                        _objPaymentMethod.GetObject(); 
                }
                return _objPaymentMethod;
            }
            set
            { 
                _objPaymentMethod = value;
                _paymentMethod = _objPaymentMethod.ID;
            }
        }
        ///<summary>The ReservationBO object identified by the value of Reservation</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.ReservationBO objReservation
        {
            get
            {
                if (_reservation != null && _reservation > 0 && _objReservation == null)
                {
                        if (this._context == null)
                        {
                            _objReservation = new Indico.BusinessObjects.ReservationBO();
                        }
                        else
                        {
                            _objReservation = new Indico.BusinessObjects.ReservationBO(ref this._context);
                        }
                        _objReservation.ID = Convert.ToInt32(_reservation);
                        _objReservation.GetObject(); 
                }
                return _objReservation;
            }
            set
            { 
                _objReservation = value;
                _reservation = _objReservation.ID;
            }
        }
        ///<summary>The ShipmentModeBO object identified by the value of ShipmentMode</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.ShipmentModeBO objShipmentMode
        {
            get
            {
                if (_shipmentMode != null && _shipmentMode > 0 && _objShipmentMode == null)
                {
                        if (this._context == null)
                        {
                            _objShipmentMode = new Indico.BusinessObjects.ShipmentModeBO();
                        }
                        else
                        {
                            _objShipmentMode = new Indico.BusinessObjects.ShipmentModeBO(ref this._context);
                        }
                        _objShipmentMode.ID = Convert.ToInt32(_shipmentMode);
                        _objShipmentMode.GetObject(); 
                }
                return _objShipmentMode;
            }
            set
            { 
                _objShipmentMode = value;
                _shipmentMode = _objShipmentMode.ID;
            }
        }
        ///<summary>The OrderDetailStatusBO object identified by the value of Status</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.OrderDetailStatusBO objStatus
        {
            get
            {
                if (_status != null && _status > 0 && _objStatus == null)
                {
                        if (this._context == null)
                        {
                            _objStatus = new Indico.BusinessObjects.OrderDetailStatusBO();
                        }
                        else
                        {
                            _objStatus = new Indico.BusinessObjects.OrderDetailStatusBO(ref this._context);
                        }
                        _objStatus.ID = Convert.ToInt32(_status);
                        _objStatus.GetObject(); 
                }
                return _objStatus;
            }
            set
            { 
                _objStatus = value;
                _status = _objStatus.ID;
            }
        }
        ///<summary>The VisualLayoutBO object identified by the value of VisualLayout</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.VisualLayoutBO objVisualLayout
        {
            get
            {
                if (_visualLayout != null && _visualLayout > 0 && _objVisualLayout == null)
                {
                        if (this._context == null)
                        {
                            _objVisualLayout = new Indico.BusinessObjects.VisualLayoutBO();
                        }
                        else
                        {
                            _objVisualLayout = new Indico.BusinessObjects.VisualLayoutBO(ref this._context);
                        }
                        _objVisualLayout.ID = Convert.ToInt32(_visualLayout);
                        _objVisualLayout.GetObject(); 
                }
                return _objVisualLayout;
            }
            set
            { 
                _objVisualLayout = value;
                _visualLayout = _objVisualLayout.ID;
            }
        }
        #endregion
        
        #region Foreign Object Foreign Key Collections
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO> FactoryOrderDetialsWhereThisIsOrderDetail // FK_FactoryOrderDetial_OrderDetail
        {
            get
            {
                if (!_factoryOrderDetialsWhereThisIsOrderDetailLoaded)
                {
                    _factoryOrderDetialsWhereThisIsOrderDetailLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.OrderDetail obj = (from o in context.OrderDetail
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.FactoryOrderDetialsWhereThisIsOrderDetail.Load();
                        factoryOrderDetialsWhereThisIsOrderDetailList = new IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO>(obj.FactoryOrderDetialsWhereThisIsOrderDetail.Count);
                        
                        foreach (Indico.DAL.FactoryOrderDetial o in obj.FactoryOrderDetialsWhereThisIsOrderDetail)
                        {
                            Indico.BusinessObjects.FactoryOrderDetialBO fkObj = new Indico.BusinessObjects.FactoryOrderDetialBO(o, ref this._context);
                            factoryOrderDetialsWhereThisIsOrderDetailList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        factoryOrderDetialsWhereThisIsOrderDetailList = new IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO>();
                    }
                    
                    factoryOrderDetialsWhereThisIsOrderDetailList.OnBeforeRemove += new EventHandler(FactoryOrderDetialsWhereThisIsOrderDetailList_OnBeforeRemove);
                    factoryOrderDetialsWhereThisIsOrderDetailList.OnAfterAdd += new EventHandler(FactoryOrderDetialsWhereThisIsOrderDetailList_OnAfterAdd);
                }
                
                return factoryOrderDetialsWhereThisIsOrderDetailList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.InvoiceOrderBO> InvoiceOrdersWhereThisIsOrderDetail // FK_InvoiceOrder_OrderDetail
        {
            get
            {
                if (!_invoiceOrdersWhereThisIsOrderDetailLoaded)
                {
                    _invoiceOrdersWhereThisIsOrderDetailLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.OrderDetail obj = (from o in context.OrderDetail
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.InvoiceOrdersWhereThisIsOrderDetail.Load();
                        invoiceOrdersWhereThisIsOrderDetailList = new IndicoList<Indico.BusinessObjects.InvoiceOrderBO>(obj.InvoiceOrdersWhereThisIsOrderDetail.Count);
                        
                        foreach (Indico.DAL.InvoiceOrder o in obj.InvoiceOrdersWhereThisIsOrderDetail)
                        {
                            Indico.BusinessObjects.InvoiceOrderBO fkObj = new Indico.BusinessObjects.InvoiceOrderBO(o, ref this._context);
                            invoiceOrdersWhereThisIsOrderDetailList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        invoiceOrdersWhereThisIsOrderDetailList = new IndicoList<Indico.BusinessObjects.InvoiceOrderBO>();
                    }
                    
                    invoiceOrdersWhereThisIsOrderDetailList.OnBeforeRemove += new EventHandler(InvoiceOrdersWhereThisIsOrderDetailList_OnBeforeRemove);
                    invoiceOrdersWhereThisIsOrderDetailList.OnAfterAdd += new EventHandler(InvoiceOrdersWhereThisIsOrderDetailList_OnAfterAdd);
                }
                
                return invoiceOrdersWhereThisIsOrderDetailList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.OrderDetailQtyBO> OrderDetailQtysWhereThisIsOrderDetail // FK_OrderDetailQty_OrderDetail
        {
            get
            {
                if (!_orderDetailQtysWhereThisIsOrderDetailLoaded)
                {
                    _orderDetailQtysWhereThisIsOrderDetailLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.OrderDetail obj = (from o in context.OrderDetail
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.OrderDetailQtysWhereThisIsOrderDetail.Load();
                        orderDetailQtysWhereThisIsOrderDetailList = new IndicoList<Indico.BusinessObjects.OrderDetailQtyBO>(obj.OrderDetailQtysWhereThisIsOrderDetail.Count);
                        
                        foreach (Indico.DAL.OrderDetailQty o in obj.OrderDetailQtysWhereThisIsOrderDetail)
                        {
                            Indico.BusinessObjects.OrderDetailQtyBO fkObj = new Indico.BusinessObjects.OrderDetailQtyBO(o, ref this._context);
                            orderDetailQtysWhereThisIsOrderDetailList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        orderDetailQtysWhereThisIsOrderDetailList = new IndicoList<Indico.BusinessObjects.OrderDetailQtyBO>();
                    }
                    
                    orderDetailQtysWhereThisIsOrderDetailList.OnBeforeRemove += new EventHandler(OrderDetailQtysWhereThisIsOrderDetailList_OnBeforeRemove);
                    orderDetailQtysWhereThisIsOrderDetailList.OnAfterAdd += new EventHandler(OrderDetailQtysWhereThisIsOrderDetailList_OnAfterAdd);
                }
                
                return orderDetailQtysWhereThisIsOrderDetailList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.PackingListBO> PackingListsWhereThisIsOrderDetail // FK_PackingList_OrderDetail
        {
            get
            {
                if (!_packingListsWhereThisIsOrderDetailLoaded)
                {
                    _packingListsWhereThisIsOrderDetailLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.OrderDetail obj = (from o in context.OrderDetail
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.PackingListsWhereThisIsOrderDetail.Load();
                        packingListsWhereThisIsOrderDetailList = new IndicoList<Indico.BusinessObjects.PackingListBO>(obj.PackingListsWhereThisIsOrderDetail.Count);
                        
                        foreach (Indico.DAL.PackingList o in obj.PackingListsWhereThisIsOrderDetail)
                        {
                            Indico.BusinessObjects.PackingListBO fkObj = new Indico.BusinessObjects.PackingListBO(o, ref this._context);
                            packingListsWhereThisIsOrderDetailList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        packingListsWhereThisIsOrderDetailList = new IndicoList<Indico.BusinessObjects.PackingListBO>();
                    }
                    
                    packingListsWhereThisIsOrderDetailList.OnBeforeRemove += new EventHandler(PackingListsWhereThisIsOrderDetailList_OnBeforeRemove);
                    packingListsWhereThisIsOrderDetailList.OnAfterAdd += new EventHandler(PackingListsWhereThisIsOrderDetailList_OnAfterAdd);
                }
                
                return packingListsWhereThisIsOrderDetailList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.ProductionPlanningBO> ProductionPlanningsWhereThisIsOrderDetail // FK_ProductionPlanning_OrderDetail
        {
            get
            {
                if (!_productionPlanningsWhereThisIsOrderDetailLoaded)
                {
                    _productionPlanningsWhereThisIsOrderDetailLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.OrderDetail obj = (from o in context.OrderDetail
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.ProductionPlanningsWhereThisIsOrderDetail.Load();
                        productionPlanningsWhereThisIsOrderDetailList = new IndicoList<Indico.BusinessObjects.ProductionPlanningBO>(obj.ProductionPlanningsWhereThisIsOrderDetail.Count);
                        
                        foreach (Indico.DAL.ProductionPlanning o in obj.ProductionPlanningsWhereThisIsOrderDetail)
                        {
                            Indico.BusinessObjects.ProductionPlanningBO fkObj = new Indico.BusinessObjects.ProductionPlanningBO(o, ref this._context);
                            productionPlanningsWhereThisIsOrderDetailList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        productionPlanningsWhereThisIsOrderDetailList = new IndicoList<Indico.BusinessObjects.ProductionPlanningBO>();
                    }
                    
                    productionPlanningsWhereThisIsOrderDetailList.OnBeforeRemove += new EventHandler(ProductionPlanningsWhereThisIsOrderDetailList_OnBeforeRemove);
                    productionPlanningsWhereThisIsOrderDetailList.OnAfterAdd += new EventHandler(ProductionPlanningsWhereThisIsOrderDetailList_OnAfterAdd);
                }
                
                return productionPlanningsWhereThisIsOrderDetailList;
            }
        }
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the OrderDetailBO class using the supplied Indico.DAL.OrderDetail. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.OrderDetail whose properties will be used to initialise the OrderDetailBO</param>
        internal OrderDetailBO(Indico.DAL.OrderDetail obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.OrderDetail 
            this.ID = obj.ID;
            
            this.ArtWork = (obj.ArtWorkReference.EntityKey != null && obj.ArtWorkReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ArtWorkReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.DespatchTo = (obj.DespatchToReference.EntityKey != null && obj.DespatchToReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.DespatchToReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.DistributorSurcharge = obj.DistributorSurcharge;
            this.EditedPrice = obj.EditedPrice;
            this.EditedPriceRemarks = obj.EditedPriceRemarks;
            this.FabricCode = (obj.FabricCodeReference.EntityKey != null && obj.FabricCodeReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.FabricCodeReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.FactoryInstructions = obj.FactoryInstructions;
            this.IsBrandingKit = obj.IsBrandingKit;
            this.IsCourierDelivery = obj.IsCourierDelivery;
            this.IsLockerPatch = obj.IsLockerPatch;
            this.IsRepeat = obj.IsRepeat;
            this.IsRequiredNamesNumbers = obj.IsRequiredNamesNumbers;
            this.IsWeeklyShipment = obj.IsWeeklyShipment;
            this.Label = (obj.LabelReference.EntityKey != null && obj.LabelReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.LabelReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.NameAndNumbersFilePath = obj.NameAndNumbersFilePath;
            this.Order = (obj.OrderReference.EntityKey != null && obj.OrderReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.OrderReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.OrderType = (obj.OrderTypeReference.EntityKey != null && obj.OrderTypeReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.OrderTypeReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Pattern = (obj.PatternReference.EntityKey != null && obj.PatternReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PatternReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.PaymentMethod = (obj.PaymentMethodReference.EntityKey != null && obj.PaymentMethodReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PaymentMethodReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.PhotoApprovalReq = obj.PhotoApprovalReq;
            this.PromoCode = obj.PromoCode;
            this.RequestedDate = obj.RequestedDate;
            this.Reservation = (obj.ReservationReference.EntityKey != null && obj.ReservationReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ReservationReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.SheduledDate = obj.SheduledDate;
            this.ShipmentDate = obj.ShipmentDate;
            this.ShipmentMode = (obj.ShipmentModeReference.EntityKey != null && obj.ShipmentModeReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ShipmentModeReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Status = (obj.StatusReference.EntityKey != null && obj.StatusReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.StatusReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Surcharge = obj.Surcharge;
            this.VisualLayout = (obj.VisualLayoutReference.EntityKey != null && obj.VisualLayoutReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.VisualLayoutReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.VisualLayoutNotes = obj.VisualLayoutNotes;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.OrderDetail SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.OrderDetail properties
            Indico.DAL.OrderDetail obj = new Indico.DAL.OrderDetail();
            
            if (this.ID > 0)
            {
                obj = context.OrderDetail.FirstOrDefault<OrderDetail>(o => o.ID == this.ID);
            }
            
            obj.DistributorSurcharge = this.DistributorSurcharge;
            obj.EditedPrice = this.EditedPrice;
            obj.EditedPriceRemarks = this.EditedPriceRemarks;
            obj.FactoryInstructions = this.FactoryInstructions;
            obj.IsBrandingKit = this.IsBrandingKit;
            obj.IsCourierDelivery = this.IsCourierDelivery;
            obj.IsLockerPatch = this.IsLockerPatch;
            obj.IsRepeat = this.IsRepeat;
            obj.IsRequiredNamesNumbers = this.IsRequiredNamesNumbers;
            obj.IsWeeklyShipment = this.IsWeeklyShipment;
            obj.NameAndNumbersFilePath = this.NameAndNumbersFilePath;
            obj.PhotoApprovalReq = this.PhotoApprovalReq;
            obj.PromoCode = this.PromoCode;
            obj.RequestedDate = this.RequestedDate;
            obj.SheduledDate = this.SheduledDate;
            obj.ShipmentDate = this.ShipmentDate;
            obj.Surcharge = this.Surcharge;
            obj.VisualLayoutNotes = this.VisualLayoutNotes;
            
            if (this.ArtWork != null && this.ArtWork > 0) obj.ArtWork = context.ArtWork.FirstOrDefault(o => o.ID == this.ArtWork);
            if (this.DespatchTo != null && this.DespatchTo > 0) obj.DespatchTo = context.DistributorClientAddress.FirstOrDefault(o => o.ID == this.DespatchTo);
            if (this.FabricCode > 0) obj.FabricCode = context.FabricCode.FirstOrDefault(o => o.ID == this.FabricCode);
            if (this.Label != null && this.Label > 0) obj.Label = context.Label.FirstOrDefault(o => o.ID == this.Label);
            if (this.Order > 0) obj.Order = context.Order.FirstOrDefault(o => o.ID == this.Order);
            if (this.OrderType > 0) obj.OrderType = context.OrderType.FirstOrDefault(o => o.ID == this.OrderType);
            if (this.Pattern > 0) obj.Pattern = context.Pattern.FirstOrDefault(o => o.ID == this.Pattern);
            if (this.PaymentMethod != null && this.PaymentMethod > 0) obj.PaymentMethod = context.PaymentMethod.FirstOrDefault(o => o.ID == this.PaymentMethod);
            if (this.Reservation != null && this.Reservation > 0) obj.Reservation = context.Reservation.FirstOrDefault(o => o.ID == this.Reservation);
            if (this.ShipmentMode != null && this.ShipmentMode > 0) obj.ShipmentMode = context.ShipmentMode.FirstOrDefault(o => o.ID == this.ShipmentMode);
            if (this.Status != null && this.Status > 0) obj.Status = context.OrderDetailStatus.FirstOrDefault(o => o.ID == this.Status);
            if (this.VisualLayout != null && this.VisualLayout > 0) obj.VisualLayout = context.VisualLayout.FirstOrDefault(o => o.ID == this.VisualLayout);
            
            if (_factoryOrderDetialsWhereThisIsOrderDetailLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.FactoryOrderDetialBO.ToEntityList(this.FactoryOrderDetialsWhereThisIsOrderDetail, context), 
                    obj.FactoryOrderDetialsWhereThisIsOrderDetail);
            if (_invoiceOrdersWhereThisIsOrderDetailLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.InvoiceOrderBO.ToEntityList(this.InvoiceOrdersWhereThisIsOrderDetail, context), 
                    obj.InvoiceOrdersWhereThisIsOrderDetail);
            if (_orderDetailQtysWhereThisIsOrderDetailLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.OrderDetailQtyBO.ToEntityList(this.OrderDetailQtysWhereThisIsOrderDetail, context), 
                    obj.OrderDetailQtysWhereThisIsOrderDetail);
            if (_packingListsWhereThisIsOrderDetailLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.PackingListBO.ToEntityList(this.PackingListsWhereThisIsOrderDetail, context), 
                    obj.PackingListsWhereThisIsOrderDetail);
            if (_productionPlanningsWhereThisIsOrderDetailLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.ProductionPlanningBO.ToEntityList(this.ProductionPlanningsWhereThisIsOrderDetail, context), 
                    obj.ProductionPlanningsWhereThisIsOrderDetail);
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.OrderDetail))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.OrderDetail obj = (Indico.DAL.OrderDetail)eObj;
            
            // set the Indico.BusinessObjects.OrderDetailBO properties
            this.ID = obj.ID;
            
            this.DistributorSurcharge = obj.DistributorSurcharge;
            this.EditedPrice = obj.EditedPrice;
            this.EditedPriceRemarks = obj.EditedPriceRemarks;
            this.FactoryInstructions = obj.FactoryInstructions;
            this.IsBrandingKit = obj.IsBrandingKit;
            this.IsCourierDelivery = obj.IsCourierDelivery;
            this.IsLockerPatch = obj.IsLockerPatch;
            this.IsRepeat = obj.IsRepeat;
            this.IsRequiredNamesNumbers = obj.IsRequiredNamesNumbers;
            this.IsWeeklyShipment = obj.IsWeeklyShipment;
            this.NameAndNumbersFilePath = obj.NameAndNumbersFilePath;
            this.PhotoApprovalReq = obj.PhotoApprovalReq;
            this.PromoCode = obj.PromoCode;
            this.RequestedDate = obj.RequestedDate;
            this.SheduledDate = obj.SheduledDate;
            this.ShipmentDate = obj.ShipmentDate;
            this.Surcharge = obj.Surcharge;
            this.VisualLayoutNotes = obj.VisualLayoutNotes;
            
            this.ArtWork = (obj.ArtWorkReference.EntityKey != null && obj.ArtWorkReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ArtWorkReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.DespatchTo = (obj.DespatchToReference.EntityKey != null && obj.DespatchToReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.DespatchToReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.FabricCode = (obj.FabricCodeReference.EntityKey != null && obj.FabricCodeReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.FabricCodeReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Label = (obj.LabelReference.EntityKey != null && obj.LabelReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.LabelReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Order = (obj.OrderReference.EntityKey != null && obj.OrderReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.OrderReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.OrderType = (obj.OrderTypeReference.EntityKey != null && obj.OrderTypeReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.OrderTypeReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Pattern = (obj.PatternReference.EntityKey != null && obj.PatternReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PatternReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.PaymentMethod = (obj.PaymentMethodReference.EntityKey != null && obj.PaymentMethodReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PaymentMethodReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Reservation = (obj.ReservationReference.EntityKey != null && obj.ReservationReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ReservationReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.ShipmentMode = (obj.ShipmentModeReference.EntityKey != null && obj.ShipmentModeReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ShipmentModeReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Status = (obj.StatusReference.EntityKey != null && obj.StatusReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.StatusReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.VisualLayout = (obj.VisualLayoutReference.EntityKey != null && obj.VisualLayoutReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.VisualLayoutReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.OrderDetailBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.OrderDetailBO properties
            this.ID = obj.ID;
            
            this.ArtWork = obj.ArtWork;
            this.DespatchTo = obj.DespatchTo;
            this.DistributorSurcharge = obj.DistributorSurcharge;
            this.EditedPrice = obj.EditedPrice;
            this.EditedPriceRemarks = obj.EditedPriceRemarks;
            this.FabricCode = obj.FabricCode;
            this.FactoryInstructions = obj.FactoryInstructions;
            this.IsBrandingKit = obj.IsBrandingKit;
            this.IsCourierDelivery = obj.IsCourierDelivery;
            this.IsLockerPatch = obj.IsLockerPatch;
            this.IsRepeat = obj.IsRepeat;
            this.IsRequiredNamesNumbers = obj.IsRequiredNamesNumbers;
            this.IsWeeklyShipment = obj.IsWeeklyShipment;
            this.Label = obj.Label;
            this.NameAndNumbersFilePath = obj.NameAndNumbersFilePath;
            this.Order = obj.Order;
            this.OrderType = obj.OrderType;
            this.Pattern = obj.Pattern;
            this.PaymentMethod = obj.PaymentMethod;
            this.PhotoApprovalReq = obj.PhotoApprovalReq;
            this.PromoCode = obj.PromoCode;
            this.RequestedDate = obj.RequestedDate;
            this.Reservation = obj.Reservation;
            this.SheduledDate = obj.SheduledDate;
            this.ShipmentDate = obj.ShipmentDate;
            this.ShipmentMode = obj.ShipmentMode;
            this.Status = obj.Status;
            this.Surcharge = obj.Surcharge;
            this.VisualLayout = obj.VisualLayout;
            this.VisualLayoutNotes = obj.VisualLayoutNotes;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.OrderDetailBO> IQueryableToList(IQueryable<Indico.DAL.OrderDetail> oQuery)
        {
            List<Indico.DAL.OrderDetail> oList = oQuery.ToList();
            List<Indico.BusinessObjects.OrderDetailBO> rList = new List<Indico.BusinessObjects.OrderDetailBO>(oList.Count);
            foreach (Indico.DAL.OrderDetail o in oList)
            {
                Indico.BusinessObjects.OrderDetailBO obj = new Indico.BusinessObjects.OrderDetailBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.OrderDetailBO> ToList(IEnumerable<Indico.DAL.OrderDetail> oQuery)
        {
            List<Indico.DAL.OrderDetail> oList = oQuery.ToList();
            List<Indico.BusinessObjects.OrderDetailBO> rList = new List<Indico.BusinessObjects.OrderDetailBO>(oList.Count);
            foreach (Indico.DAL.OrderDetail o in oList)
            {
                Indico.BusinessObjects.OrderDetailBO obj = new Indico.BusinessObjects.OrderDetailBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.OrderDetail> ToEntityList(List<OrderDetailBO> bos, IndicoEntities context)
        {
            // build a List of OrderDetail entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.OrderDetail.Count() == 0) ? new List<Indico.DAL.OrderDetail>() : (context.OrderDetail.Where(BuildContainsExpression<OrderDetail, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.OrderDetail>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.OrderDetail> ToEntityCollection(List<OrderDetailBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of OrderDetail entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.OrderDetail> el = (context.OrderDetail.Count() == 0) ? new List<Indico.DAL.OrderDetail>() : 
                context.OrderDetail.Where(BuildContainsExpression<OrderDetail, int>(e => e.ID, ids))
                .ToList<Indico.DAL.OrderDetail>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.OrderDetail> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.OrderDetail>();
                
            foreach (Indico.DAL.OrderDetail r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.OrderDetail ToEntity(IndicoEntities context)
        {
            return (from o in context.OrderDetail
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToOrderDetail(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.OrderDetail obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToOrderDetail(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.OrderDetail obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.OrderDetail obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.OrderDetailBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.OrderDetailBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.OrderDetail> oQuery =
                        from o in context.OrderDetail
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.OrderDetail> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.OrderDetailBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.OrderDetailBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.OrderDetailBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.OrderDetailBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.OrderDetail> oQuery =
                (from o in context.OrderDetail
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.OrderDetailBO> orderdetails = IQueryableToList(oQuery);
            context.Dispose();
            return orderdetails;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.OrderDetailBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.OrderDetailBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.OrderDetailBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.OrderDetailBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.OrderDetail> oQuery =
                (from o in context.OrderDetail
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.OrderType == 0 || this.OrderType == o.OrderType.ID) &&
                    (this.VisualLayout == null || this.VisualLayout == o.VisualLayout.ID) &&
                    (this.Pattern == 0 || this.Pattern == o.Pattern.ID) &&
                    (this.FabricCode == 0 || this.FabricCode == o.FabricCode.ID) &&
                    (this.VisualLayoutNotes == null || this.VisualLayoutNotes == o.VisualLayoutNotes) &&
                    (this.NameAndNumbersFilePath == null || this.NameAndNumbersFilePath == o.NameAndNumbersFilePath) &&
                    (this.Order == 0 || this.Order == o.Order.ID) &&
                    (this.Status == null || this.Status == o.Status.ID) &&
                    (this.ShipmentDate == DateTime.MinValue || this.ShipmentDate == o.ShipmentDate) &&
                    (this.SheduledDate == DateTime.MinValue || this.SheduledDate == o.SheduledDate) &&
                    (this.IsRepeat == false || this.IsRepeat == o.IsRepeat) &&
                    (this.RequestedDate == DateTime.MinValue || this.RequestedDate == o.RequestedDate) &&
                    (this.EditedPrice == null || this.EditedPrice == o.EditedPrice) &&
                    (this.EditedPriceRemarks == null || this.EditedPriceRemarks == o.EditedPriceRemarks) &&
                    (this.Reservation == null || this.Reservation == o.Reservation.ID) &&
                    (this.PhotoApprovalReq == null || this.PhotoApprovalReq == o.PhotoApprovalReq) &&
                    (this.IsRequiredNamesNumbers == null || this.IsRequiredNamesNumbers == o.IsRequiredNamesNumbers) &&
                    (this.IsBrandingKit == false || this.IsBrandingKit == o.IsBrandingKit) &&
                    (this.IsLockerPatch == false || this.IsLockerPatch == o.IsLockerPatch) &&
                    (this.ArtWork == null || this.ArtWork == o.ArtWork.ID) &&
                    (this.Label == null || this.Label == o.Label.ID) &&
                    (this.PaymentMethod == null || this.PaymentMethod == o.PaymentMethod.ID) &&
                    (this.ShipmentMode == null || this.ShipmentMode == o.ShipmentMode.ID) &&
                    (this.IsWeeklyShipment == null || this.IsWeeklyShipment == o.IsWeeklyShipment) &&
                    (this.IsCourierDelivery == null || this.IsCourierDelivery == o.IsCourierDelivery) &&
                    (this.DespatchTo == null || this.DespatchTo == o.DespatchTo.ID) &&
                    (this.PromoCode == null || this.PromoCode == o.PromoCode) &&
                    (this.FactoryInstructions == null || this.FactoryInstructions == o.FactoryInstructions) &&
                    (this.Surcharge == 0 || this.Surcharge == o.Surcharge) &&
                    (this.DistributorSurcharge == null || this.DistributorSurcharge == o.DistributorSurcharge) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.OrderDetailBO> orderdetails = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return orderdetails;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.OrderDetail
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.OrderType == 0 || this.OrderType == o.OrderType.ID) &&
                    (this.VisualLayout == null || this.VisualLayout == o.VisualLayout.ID) &&
                    (this.Pattern == 0 || this.Pattern == o.Pattern.ID) &&
                    (this.FabricCode == 0 || this.FabricCode == o.FabricCode.ID) &&
                    (this.VisualLayoutNotes == null || this.VisualLayoutNotes == o.VisualLayoutNotes) &&
                    (this.NameAndNumbersFilePath == null || this.NameAndNumbersFilePath == o.NameAndNumbersFilePath) &&
                    (this.Order == 0 || this.Order == o.Order.ID) &&
                    (this.Status == null || this.Status == o.Status.ID) &&
                    (this.ShipmentDate == DateTime.MinValue || this.ShipmentDate == o.ShipmentDate) &&
                    (this.SheduledDate == DateTime.MinValue || this.SheduledDate == o.SheduledDate) &&
                    (this.IsRepeat == false || this.IsRepeat == o.IsRepeat) &&
                    (this.RequestedDate == DateTime.MinValue || this.RequestedDate == o.RequestedDate) &&
                    (this.EditedPrice == null || this.EditedPrice == o.EditedPrice) &&
                    (this.EditedPriceRemarks == null || this.EditedPriceRemarks == o.EditedPriceRemarks) &&
                    (this.Reservation == null || this.Reservation == o.Reservation.ID) &&
                    (this.PhotoApprovalReq == null || this.PhotoApprovalReq == o.PhotoApprovalReq) &&
                    (this.IsRequiredNamesNumbers == null || this.IsRequiredNamesNumbers == o.IsRequiredNamesNumbers) &&
                    (this.IsBrandingKit == false || this.IsBrandingKit == o.IsBrandingKit) &&
                    (this.IsLockerPatch == false || this.IsLockerPatch == o.IsLockerPatch) &&
                    (this.ArtWork == null || this.ArtWork == o.ArtWork.ID) &&
                    (this.Label == null || this.Label == o.Label.ID) &&
                    (this.PaymentMethod == null || this.PaymentMethod == o.PaymentMethod.ID) &&
                    (this.ShipmentMode == null || this.ShipmentMode == o.ShipmentMode.ID) &&
                    (this.IsWeeklyShipment == null || this.IsWeeklyShipment == o.IsWeeklyShipment) &&
                    (this.IsCourierDelivery == null || this.IsCourierDelivery == o.IsCourierDelivery) &&
                    (this.DespatchTo == null || this.DespatchTo == o.DespatchTo.ID) &&
                    (this.PromoCode == null || this.PromoCode == o.PromoCode) &&
                    (this.FactoryInstructions == null || this.FactoryInstructions == o.FactoryInstructions) &&
                    (this.Surcharge == 0 || this.Surcharge == o.Surcharge) &&
                    (this.DistributorSurcharge == null || this.DistributorSurcharge == o.DistributorSurcharge) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.OrderDetailBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.OrderDetailBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.OrderDetailBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.OrderDetailBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.OrderDetail> oQuery =
                (from o in context.OrderDetail
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.OrderType == 0 || o.OrderType.ID == this.OrderType) &&
                    (this.VisualLayout == null || o.VisualLayout.ID == this.VisualLayout) &&
                    (this.Pattern == 0 || o.Pattern.ID == this.Pattern) &&
                    (this.FabricCode == 0 || o.FabricCode.ID == this.FabricCode) &&
                    (this.VisualLayoutNotes == null || o.VisualLayoutNotes.Contains(this.VisualLayoutNotes)) &&
                    (this.NameAndNumbersFilePath == null || o.NameAndNumbersFilePath.Contains(this.NameAndNumbersFilePath)) &&
                    (this.Order == 0 || o.Order.ID == this.Order) &&
                    (this.Status == null || o.Status.ID == this.Status) &&
                    (this.ShipmentDate == DateTime.MinValue || o.ShipmentDate == this.ShipmentDate) &&
                    (this.SheduledDate == DateTime.MinValue || o.SheduledDate == this.SheduledDate) &&
                    (this.IsRepeat == false || o.IsRepeat == this.IsRepeat) &&
                    (this.RequestedDate == DateTime.MinValue || o.RequestedDate == this.RequestedDate) &&
                    (this.EditedPrice == null || o.EditedPrice == this.EditedPrice) &&
                    (this.EditedPriceRemarks == null || o.EditedPriceRemarks.Contains(this.EditedPriceRemarks)) &&
                    (this.Reservation == null || o.Reservation.ID == this.Reservation) &&
                    (this.PhotoApprovalReq == null || o.PhotoApprovalReq == this.PhotoApprovalReq) &&
                    (this.IsRequiredNamesNumbers == null || o.IsRequiredNamesNumbers == this.IsRequiredNamesNumbers) &&
                    (this.IsBrandingKit == false || o.IsBrandingKit == this.IsBrandingKit) &&
                    (this.IsLockerPatch == false || o.IsLockerPatch == this.IsLockerPatch) &&
                    (this.ArtWork == null || o.ArtWork.ID == this.ArtWork) &&
                    (this.Label == null || o.Label.ID == this.Label) &&
                    (this.PaymentMethod == null || o.PaymentMethod.ID == this.PaymentMethod) &&
                    (this.ShipmentMode == null || o.ShipmentMode.ID == this.ShipmentMode) &&
                    (this.IsWeeklyShipment == null || o.IsWeeklyShipment == this.IsWeeklyShipment) &&
                    (this.IsCourierDelivery == null || o.IsCourierDelivery == this.IsCourierDelivery) &&
                    (this.DespatchTo == null || o.DespatchTo.ID == this.DespatchTo) &&
                    (this.PromoCode == null || o.PromoCode.Contains(this.PromoCode)) &&
                    (this.FactoryInstructions == null || o.FactoryInstructions.Contains(this.FactoryInstructions)) &&
                    (this.Surcharge == 0 || o.Surcharge == this.Surcharge) &&
                    (this.DistributorSurcharge == null || o.DistributorSurcharge == this.DistributorSurcharge) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.OrderDetailBO> orderdetails = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return orderdetails;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.OrderDetail
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.OrderType == 0 || o.OrderType.ID == this.OrderType) &&
                    (this.VisualLayout == null || o.VisualLayout.ID == this.VisualLayout) &&
                    (this.Pattern == 0 || o.Pattern.ID == this.Pattern) &&
                    (this.FabricCode == 0 || o.FabricCode.ID == this.FabricCode) &&
                    (this.VisualLayoutNotes == null || o.VisualLayoutNotes.Contains(this.VisualLayoutNotes)) &&
                    (this.NameAndNumbersFilePath == null || o.NameAndNumbersFilePath.Contains(this.NameAndNumbersFilePath)) &&
                    (this.Order == 0 || o.Order.ID == this.Order) &&
                    (this.Status == null || o.Status.ID == this.Status) &&
                    (this.ShipmentDate == DateTime.MinValue || o.ShipmentDate == this.ShipmentDate) &&
                    (this.SheduledDate == DateTime.MinValue || o.SheduledDate == this.SheduledDate) &&
                    (this.IsRepeat == false || o.IsRepeat == this.IsRepeat) &&
                    (this.RequestedDate == DateTime.MinValue || o.RequestedDate == this.RequestedDate) &&
                    (this.EditedPrice == null || o.EditedPrice == this.EditedPrice) &&
                    (this.EditedPriceRemarks == null || o.EditedPriceRemarks.Contains(this.EditedPriceRemarks)) &&
                    (this.Reservation == null || o.Reservation.ID == this.Reservation) &&
                    (this.PhotoApprovalReq == null || o.PhotoApprovalReq == this.PhotoApprovalReq) &&
                    (this.IsRequiredNamesNumbers == null || o.IsRequiredNamesNumbers == this.IsRequiredNamesNumbers) &&
                    (this.IsBrandingKit == false || o.IsBrandingKit == this.IsBrandingKit) &&
                    (this.IsLockerPatch == false || o.IsLockerPatch == this.IsLockerPatch) &&
                    (this.ArtWork == null || o.ArtWork.ID == this.ArtWork) &&
                    (this.Label == null || o.Label.ID == this.Label) &&
                    (this.PaymentMethod == null || o.PaymentMethod.ID == this.PaymentMethod) &&
                    (this.ShipmentMode == null || o.ShipmentMode.ID == this.ShipmentMode) &&
                    (this.IsWeeklyShipment == null || o.IsWeeklyShipment == this.IsWeeklyShipment) &&
                    (this.IsCourierDelivery == null || o.IsCourierDelivery == this.IsCourierDelivery) &&
                    (this.DespatchTo == null || o.DespatchTo.ID == this.DespatchTo) &&
                    (this.PromoCode == null || o.PromoCode.Contains(this.PromoCode)) &&
                    (this.FactoryInstructions == null || o.FactoryInstructions.Contains(this.FactoryInstructions)) &&
                    (this.Surcharge == 0 || o.Surcharge == this.Surcharge) &&
                    (this.DistributorSurcharge == null || o.DistributorSurcharge == this.DistributorSurcharge) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.OrderDetailBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.OrderDetailBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.OrderDetailBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.OrderDetailBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.OrderDetail> oQuery =
                (from o in context.OrderDetail
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.OrderType == 0 || this.OrderType == o.OrderType.ID) && 
                    (this.VisualLayout == null || this.VisualLayout == o.VisualLayout.ID) && 
                    (this.Pattern == 0 || this.Pattern == o.Pattern.ID) && 
                    (this.FabricCode == 0 || this.FabricCode == o.FabricCode.ID) && 
                    (this.Order == 0 || this.Order == o.Order.ID) && 
                    (this.Status == null || this.Status == o.Status.ID) && 
                    (this.ShipmentDate == DateTime.MinValue || this.ShipmentDate == o.ShipmentDate) && 
                    (this.SheduledDate == DateTime.MinValue || this.SheduledDate == o.SheduledDate) && 
                    (this.IsRepeat == false || this.IsRepeat == o.IsRepeat) && 
                    (this.RequestedDate == DateTime.MinValue || this.RequestedDate == o.RequestedDate) && 
                    (this.EditedPrice == null || this.EditedPrice == o.EditedPrice) && 
                    (this.Reservation == null || this.Reservation == o.Reservation.ID) && 
                    (this.PhotoApprovalReq == null || this.PhotoApprovalReq == o.PhotoApprovalReq) && 
                    (this.IsRequiredNamesNumbers == null || this.IsRequiredNamesNumbers == o.IsRequiredNamesNumbers) && 
                    (this.IsBrandingKit == false || this.IsBrandingKit == o.IsBrandingKit) && 
                    (this.IsLockerPatch == false || this.IsLockerPatch == o.IsLockerPatch) && 
                    (this.ArtWork == null || this.ArtWork == o.ArtWork.ID) && 
                    (this.Label == null || this.Label == o.Label.ID) && 
                    (this.PaymentMethod == null || this.PaymentMethod == o.PaymentMethod.ID) && 
                    (this.ShipmentMode == null || this.ShipmentMode == o.ShipmentMode.ID) && 
                    (this.IsWeeklyShipment == null || this.IsWeeklyShipment == o.IsWeeklyShipment) && 
                    (this.IsCourierDelivery == null || this.IsCourierDelivery == o.IsCourierDelivery) && 
                    (this.DespatchTo == null || this.DespatchTo == o.DespatchTo.ID) && 
                    (this.Surcharge == 0 || this.Surcharge == o.Surcharge) && 
                    (this.DistributorSurcharge == null || this.DistributorSurcharge == o.DistributorSurcharge) && 
                    ((o.VisualLayoutNotes.Contains(this.VisualLayoutNotes)) ||
                    (o.NameAndNumbersFilePath.Contains(this.NameAndNumbersFilePath)) ||
                    (o.EditedPriceRemarks.Contains(this.EditedPriceRemarks)) ||
                    (o.PromoCode.Contains(this.PromoCode)) ||
                    (o.FactoryInstructions.Contains(this.FactoryInstructions)) ||
                    (this.VisualLayoutNotes == null && this.NameAndNumbersFilePath == null && this.EditedPriceRemarks == null && this.PromoCode == null && this.FactoryInstructions == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.OrderDetailBO> orderdetails = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return orderdetails;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.OrderDetail
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.OrderType == 0 || this.OrderType == o.OrderType.ID) && 
                    (this.VisualLayout == null || this.VisualLayout == o.VisualLayout.ID) && 
                    (this.Pattern == 0 || this.Pattern == o.Pattern.ID) && 
                    (this.FabricCode == 0 || this.FabricCode == o.FabricCode.ID) && 
                    (this.Order == 0 || this.Order == o.Order.ID) && 
                    (this.Status == null || this.Status == o.Status.ID) && 
                    (this.ShipmentDate == DateTime.MinValue || this.ShipmentDate == o.ShipmentDate) && 
                    (this.SheduledDate == DateTime.MinValue || this.SheduledDate == o.SheduledDate) && 
                    (this.IsRepeat == false || this.IsRepeat == o.IsRepeat) && 
                    (this.RequestedDate == DateTime.MinValue || this.RequestedDate == o.RequestedDate) && 
                    (this.EditedPrice == null || this.EditedPrice == o.EditedPrice) && 
                    (this.Reservation == null || this.Reservation == o.Reservation.ID) && 
                    (this.PhotoApprovalReq == null || this.PhotoApprovalReq == o.PhotoApprovalReq) && 
                    (this.IsRequiredNamesNumbers == null || this.IsRequiredNamesNumbers == o.IsRequiredNamesNumbers) && 
                    (this.IsBrandingKit == false || this.IsBrandingKit == o.IsBrandingKit) && 
                    (this.IsLockerPatch == false || this.IsLockerPatch == o.IsLockerPatch) && 
                    (this.ArtWork == null || this.ArtWork == o.ArtWork.ID) && 
                    (this.Label == null || this.Label == o.Label.ID) && 
                    (this.PaymentMethod == null || this.PaymentMethod == o.PaymentMethod.ID) && 
                    (this.ShipmentMode == null || this.ShipmentMode == o.ShipmentMode.ID) && 
                    (this.IsWeeklyShipment == null || this.IsWeeklyShipment == o.IsWeeklyShipment) && 
                    (this.IsCourierDelivery == null || this.IsCourierDelivery == o.IsCourierDelivery) && 
                    (this.DespatchTo == null || this.DespatchTo == o.DespatchTo.ID) && 
                    (this.Surcharge == 0 || this.Surcharge == o.Surcharge) && 
                    (this.DistributorSurcharge == null || this.DistributorSurcharge == o.DistributorSurcharge) && 
                    ((o.VisualLayoutNotes.Contains(this.VisualLayoutNotes)) ||
                    (o.NameAndNumbersFilePath.Contains(this.NameAndNumbersFilePath)) ||
                    (o.EditedPriceRemarks.Contains(this.EditedPriceRemarks)) ||
                    (o.PromoCode.Contains(this.PromoCode)) ||
                    (o.FactoryInstructions.Contains(this.FactoryInstructions)) ||
                    (this.VisualLayoutNotes == null && this.NameAndNumbersFilePath == null && this.EditedPriceRemarks == null && this.PromoCode == null && this.FactoryInstructions == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.OrderDetailBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.OrderDetailBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.OrderDetailBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.OrderDetailBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.OrderDetailBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.OrderDetailBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnOrderDetailBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("OrderDetailBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderDetailBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnOrderDetailBOIDChanged();
        partial void OnOrderDetailBOIDChanging(int value);
        
        partial void OnOrderTypeChanged()
        {
            OnOrderDetailBOOrderTypeChanged();
        }
        
        partial void OnOrderTypeChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("OrderDetailBO.OrderType must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderDetailBOOrderTypeChanging(value);
        }
        partial void OnOrderTypeChanged();
        partial void OnOrderTypeChanging(int value);
        partial void OnOrderDetailBOOrderTypeChanged();
        partial void OnOrderDetailBOOrderTypeChanging(int value);
        
        partial void OnVisualLayoutChanged()
        {
            OnOrderDetailBOVisualLayoutChanged();
        }
        
        partial void OnVisualLayoutChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("OrderDetailBO.VisualLayout must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderDetailBOVisualLayoutChanging(value);
        }
        partial void OnVisualLayoutChanged();
        partial void OnVisualLayoutChanging(int? value);
        partial void OnOrderDetailBOVisualLayoutChanged();
        partial void OnOrderDetailBOVisualLayoutChanging(int? value);
        
        partial void OnPatternChanged()
        {
            OnOrderDetailBOPatternChanged();
        }
        
        partial void OnPatternChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("OrderDetailBO.Pattern must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderDetailBOPatternChanging(value);
        }
        partial void OnPatternChanged();
        partial void OnPatternChanging(int value);
        partial void OnOrderDetailBOPatternChanged();
        partial void OnOrderDetailBOPatternChanging(int value);
        
        partial void OnFabricCodeChanged()
        {
            OnOrderDetailBOFabricCodeChanged();
        }
        
        partial void OnFabricCodeChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("OrderDetailBO.FabricCode must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderDetailBOFabricCodeChanging(value);
        }
        partial void OnFabricCodeChanged();
        partial void OnFabricCodeChanging(int value);
        partial void OnOrderDetailBOFabricCodeChanged();
        partial void OnOrderDetailBOFabricCodeChanging(int value);
        
        partial void OnVisualLayoutNotesChanged()
        {
            OnOrderDetailBOVisualLayoutNotesChanged();
        }
        
        partial void OnVisualLayoutNotesChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("OrderDetailBO.VisualLayoutNotes has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnOrderDetailBOVisualLayoutNotesChanging(value);
        }
        partial void OnVisualLayoutNotesChanged();
        partial void OnVisualLayoutNotesChanging(string value);
        partial void OnOrderDetailBOVisualLayoutNotesChanged();
        partial void OnOrderDetailBOVisualLayoutNotesChanging(string value);
        
        partial void OnNameAndNumbersFilePathChanged()
        {
            OnOrderDetailBONameAndNumbersFilePathChanged();
        }
        
        partial void OnNameAndNumbersFilePathChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("OrderDetailBO.NameAndNumbersFilePath has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnOrderDetailBONameAndNumbersFilePathChanging(value);
        }
        partial void OnNameAndNumbersFilePathChanged();
        partial void OnNameAndNumbersFilePathChanging(string value);
        partial void OnOrderDetailBONameAndNumbersFilePathChanged();
        partial void OnOrderDetailBONameAndNumbersFilePathChanging(string value);
        
        partial void OnOrderChanged()
        {
            OnOrderDetailBOOrderChanged();
        }
        
        partial void OnOrderChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("OrderDetailBO.Order must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderDetailBOOrderChanging(value);
        }
        partial void OnOrderChanged();
        partial void OnOrderChanging(int value);
        partial void OnOrderDetailBOOrderChanged();
        partial void OnOrderDetailBOOrderChanging(int value);
        
        partial void OnStatusChanged()
        {
            OnOrderDetailBOStatusChanged();
        }
        
        partial void OnStatusChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("OrderDetailBO.Status must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderDetailBOStatusChanging(value);
        }
        partial void OnStatusChanged();
        partial void OnStatusChanging(int? value);
        partial void OnOrderDetailBOStatusChanged();
        partial void OnOrderDetailBOStatusChanging(int? value);
        
        partial void OnShipmentDateChanged()
        {
            OnOrderDetailBOShipmentDateChanged();
        }
        
        partial void OnShipmentDateChanging(DateTime value)
        {
            OnOrderDetailBOShipmentDateChanging(value);
        }
        partial void OnShipmentDateChanged();
        partial void OnShipmentDateChanging(DateTime value);
        partial void OnOrderDetailBOShipmentDateChanged();
        partial void OnOrderDetailBOShipmentDateChanging(DateTime value);
        
        partial void OnSheduledDateChanged()
        {
            OnOrderDetailBOSheduledDateChanged();
        }
        
        partial void OnSheduledDateChanging(DateTime value)
        {
            OnOrderDetailBOSheduledDateChanging(value);
        }
        partial void OnSheduledDateChanged();
        partial void OnSheduledDateChanging(DateTime value);
        partial void OnOrderDetailBOSheduledDateChanged();
        partial void OnOrderDetailBOSheduledDateChanging(DateTime value);
        
        partial void OnIsRepeatChanged()
        {
            OnOrderDetailBOIsRepeatChanged();
        }
        
        partial void OnIsRepeatChanging(bool value)
        {
            OnOrderDetailBOIsRepeatChanging(value);
        }
        partial void OnIsRepeatChanged();
        partial void OnIsRepeatChanging(bool value);
        partial void OnOrderDetailBOIsRepeatChanged();
        partial void OnOrderDetailBOIsRepeatChanging(bool value);
        
        partial void OnRequestedDateChanged()
        {
            OnOrderDetailBORequestedDateChanged();
        }
        
        partial void OnRequestedDateChanging(DateTime value)
        {
            OnOrderDetailBORequestedDateChanging(value);
        }
        partial void OnRequestedDateChanged();
        partial void OnRequestedDateChanging(DateTime value);
        partial void OnOrderDetailBORequestedDateChanged();
        partial void OnOrderDetailBORequestedDateChanging(DateTime value);
        
        partial void OnEditedPriceChanged()
        {
            OnOrderDetailBOEditedPriceChanged();
        }
        
        partial void OnEditedPriceChanging(decimal? value)
        {
            OnOrderDetailBOEditedPriceChanging(value);
        }
        partial void OnEditedPriceChanged();
        partial void OnEditedPriceChanging(decimal? value);
        partial void OnOrderDetailBOEditedPriceChanged();
        partial void OnOrderDetailBOEditedPriceChanging(decimal? value);
        
        partial void OnEditedPriceRemarksChanged()
        {
            OnOrderDetailBOEditedPriceRemarksChanged();
        }
        
        partial void OnEditedPriceRemarksChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("OrderDetailBO.EditedPriceRemarks has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnOrderDetailBOEditedPriceRemarksChanging(value);
        }
        partial void OnEditedPriceRemarksChanged();
        partial void OnEditedPriceRemarksChanging(string value);
        partial void OnOrderDetailBOEditedPriceRemarksChanged();
        partial void OnOrderDetailBOEditedPriceRemarksChanging(string value);
        
        partial void OnReservationChanged()
        {
            OnOrderDetailBOReservationChanged();
        }
        
        partial void OnReservationChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("OrderDetailBO.Reservation must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderDetailBOReservationChanging(value);
        }
        partial void OnReservationChanged();
        partial void OnReservationChanging(int? value);
        partial void OnOrderDetailBOReservationChanged();
        partial void OnOrderDetailBOReservationChanging(int? value);
        
        partial void OnPhotoApprovalReqChanged()
        {
            OnOrderDetailBOPhotoApprovalReqChanged();
        }
        
        partial void OnPhotoApprovalReqChanging(bool? value)
        {
            OnOrderDetailBOPhotoApprovalReqChanging(value);
        }
        partial void OnPhotoApprovalReqChanged();
        partial void OnPhotoApprovalReqChanging(bool? value);
        partial void OnOrderDetailBOPhotoApprovalReqChanged();
        partial void OnOrderDetailBOPhotoApprovalReqChanging(bool? value);
        
        partial void OnIsRequiredNamesNumbersChanged()
        {
            OnOrderDetailBOIsRequiredNamesNumbersChanged();
        }
        
        partial void OnIsRequiredNamesNumbersChanging(bool? value)
        {
            OnOrderDetailBOIsRequiredNamesNumbersChanging(value);
        }
        partial void OnIsRequiredNamesNumbersChanged();
        partial void OnIsRequiredNamesNumbersChanging(bool? value);
        partial void OnOrderDetailBOIsRequiredNamesNumbersChanged();
        partial void OnOrderDetailBOIsRequiredNamesNumbersChanging(bool? value);
        
        partial void OnIsBrandingKitChanged()
        {
            OnOrderDetailBOIsBrandingKitChanged();
        }
        
        partial void OnIsBrandingKitChanging(bool value)
        {
            OnOrderDetailBOIsBrandingKitChanging(value);
        }
        partial void OnIsBrandingKitChanged();
        partial void OnIsBrandingKitChanging(bool value);
        partial void OnOrderDetailBOIsBrandingKitChanged();
        partial void OnOrderDetailBOIsBrandingKitChanging(bool value);
        
        partial void OnIsLockerPatchChanged()
        {
            OnOrderDetailBOIsLockerPatchChanged();
        }
        
        partial void OnIsLockerPatchChanging(bool value)
        {
            OnOrderDetailBOIsLockerPatchChanging(value);
        }
        partial void OnIsLockerPatchChanged();
        partial void OnIsLockerPatchChanging(bool value);
        partial void OnOrderDetailBOIsLockerPatchChanged();
        partial void OnOrderDetailBOIsLockerPatchChanging(bool value);
        
        partial void OnArtWorkChanged()
        {
            OnOrderDetailBOArtWorkChanged();
        }
        
        partial void OnArtWorkChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("OrderDetailBO.ArtWork must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderDetailBOArtWorkChanging(value);
        }
        partial void OnArtWorkChanged();
        partial void OnArtWorkChanging(int? value);
        partial void OnOrderDetailBOArtWorkChanged();
        partial void OnOrderDetailBOArtWorkChanging(int? value);
        
        partial void OnLabelChanged()
        {
            OnOrderDetailBOLabelChanged();
        }
        
        partial void OnLabelChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("OrderDetailBO.Label must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderDetailBOLabelChanging(value);
        }
        partial void OnLabelChanged();
        partial void OnLabelChanging(int? value);
        partial void OnOrderDetailBOLabelChanged();
        partial void OnOrderDetailBOLabelChanging(int? value);
        
        partial void OnPaymentMethodChanged()
        {
            OnOrderDetailBOPaymentMethodChanged();
        }
        
        partial void OnPaymentMethodChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("OrderDetailBO.PaymentMethod must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderDetailBOPaymentMethodChanging(value);
        }
        partial void OnPaymentMethodChanged();
        partial void OnPaymentMethodChanging(int? value);
        partial void OnOrderDetailBOPaymentMethodChanged();
        partial void OnOrderDetailBOPaymentMethodChanging(int? value);
        
        partial void OnShipmentModeChanged()
        {
            OnOrderDetailBOShipmentModeChanged();
        }
        
        partial void OnShipmentModeChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("OrderDetailBO.ShipmentMode must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderDetailBOShipmentModeChanging(value);
        }
        partial void OnShipmentModeChanged();
        partial void OnShipmentModeChanging(int? value);
        partial void OnOrderDetailBOShipmentModeChanged();
        partial void OnOrderDetailBOShipmentModeChanging(int? value);
        
        partial void OnIsWeeklyShipmentChanged()
        {
            OnOrderDetailBOIsWeeklyShipmentChanged();
        }
        
        partial void OnIsWeeklyShipmentChanging(bool? value)
        {
            OnOrderDetailBOIsWeeklyShipmentChanging(value);
        }
        partial void OnIsWeeklyShipmentChanged();
        partial void OnIsWeeklyShipmentChanging(bool? value);
        partial void OnOrderDetailBOIsWeeklyShipmentChanged();
        partial void OnOrderDetailBOIsWeeklyShipmentChanging(bool? value);
        
        partial void OnIsCourierDeliveryChanged()
        {
            OnOrderDetailBOIsCourierDeliveryChanged();
        }
        
        partial void OnIsCourierDeliveryChanging(bool? value)
        {
            OnOrderDetailBOIsCourierDeliveryChanging(value);
        }
        partial void OnIsCourierDeliveryChanged();
        partial void OnIsCourierDeliveryChanging(bool? value);
        partial void OnOrderDetailBOIsCourierDeliveryChanged();
        partial void OnOrderDetailBOIsCourierDeliveryChanging(bool? value);
        
        partial void OnDespatchToChanged()
        {
            OnOrderDetailBODespatchToChanged();
        }
        
        partial void OnDespatchToChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("OrderDetailBO.DespatchTo must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderDetailBODespatchToChanging(value);
        }
        partial void OnDespatchToChanged();
        partial void OnDespatchToChanging(int? value);
        partial void OnOrderDetailBODespatchToChanged();
        partial void OnOrderDetailBODespatchToChanging(int? value);
        
        partial void OnPromoCodeChanged()
        {
            OnOrderDetailBOPromoCodeChanged();
        }
        
        partial void OnPromoCodeChanging(string value)
        {
            if (value != null && value.Length > 32)
            {
                throw new Exception(String.Format("OrderDetailBO.PromoCode has a maximum length of 32. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnOrderDetailBOPromoCodeChanging(value);
        }
        partial void OnPromoCodeChanged();
        partial void OnPromoCodeChanging(string value);
        partial void OnOrderDetailBOPromoCodeChanged();
        partial void OnOrderDetailBOPromoCodeChanging(string value);
        
        partial void OnFactoryInstructionsChanged()
        {
            OnOrderDetailBOFactoryInstructionsChanged();
        }
        
        partial void OnFactoryInstructionsChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("OrderDetailBO.FactoryInstructions has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnOrderDetailBOFactoryInstructionsChanging(value);
        }
        partial void OnFactoryInstructionsChanged();
        partial void OnFactoryInstructionsChanging(string value);
        partial void OnOrderDetailBOFactoryInstructionsChanged();
        partial void OnOrderDetailBOFactoryInstructionsChanging(string value);
        
        partial void OnSurchargeChanged()
        {
            OnOrderDetailBOSurchargeChanged();
        }
        
        partial void OnSurchargeChanging(decimal value)
        {
            OnOrderDetailBOSurchargeChanging(value);
        }
        partial void OnSurchargeChanged();
        partial void OnSurchargeChanging(decimal value);
        partial void OnOrderDetailBOSurchargeChanged();
        partial void OnOrderDetailBOSurchargeChanging(decimal value);
        
        partial void OnDistributorSurchargeChanged()
        {
            OnOrderDetailBODistributorSurchargeChanged();
        }
        
        partial void OnDistributorSurchargeChanging(decimal? value)
        {
            OnOrderDetailBODistributorSurchargeChanging(value);
        }
        partial void OnDistributorSurchargeChanged();
        partial void OnDistributorSurchargeChanging(decimal? value);
        partial void OnOrderDetailBODistributorSurchargeChanged();
        partial void OnOrderDetailBODistributorSurchargeChanging(decimal? value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.OrderDetailBO))
                return 1;
            Indico.BusinessObjects.OrderDetailBOComparer c = new Indico.BusinessObjects.OrderDetailBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.OrderDetailBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.OrderDetail)sender);
            }
        }
        
        void FactoryOrderDetialsWhereThisIsOrderDetailList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.FactoryOrderDetial obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO>)sender)[((IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.FactoryOrderDetialsWhereThisIsOrderDetail.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO>)sender)[((IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.FactoryOrderDetialsWhereThisIsOrderDetail.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void FactoryOrderDetialsWhereThisIsOrderDetailList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.FactoryOrderDetial obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO>)sender)[((IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.FactoryOrderDetialsWhereThisIsOrderDetail.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO>)sender)[((IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.FactoryOrderDetialsWhereThisIsOrderDetail.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void InvoiceOrdersWhereThisIsOrderDetailList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.InvoiceOrder obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.InvoiceOrderBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.InvoiceOrderBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceOrderBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.InvoiceOrdersWhereThisIsOrderDetail.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.InvoiceOrderBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceOrderBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.InvoiceOrdersWhereThisIsOrderDetail.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void InvoiceOrdersWhereThisIsOrderDetailList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.InvoiceOrder obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.InvoiceOrderBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.InvoiceOrderBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceOrderBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.InvoiceOrdersWhereThisIsOrderDetail.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.InvoiceOrderBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceOrderBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.InvoiceOrdersWhereThisIsOrderDetail.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrderDetailQtysWhereThisIsOrderDetailList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.OrderDetailQty obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderDetailQtyBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderDetailQtyBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailQtyBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrderDetailQtysWhereThisIsOrderDetail.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderDetailQtyBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailQtyBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrderDetailQtysWhereThisIsOrderDetail.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrderDetailQtysWhereThisIsOrderDetailList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.OrderDetailQty obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderDetailQtyBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderDetailQtyBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailQtyBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrderDetailQtysWhereThisIsOrderDetail.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderDetailQtyBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailQtyBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrderDetailQtysWhereThisIsOrderDetail.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PackingListsWhereThisIsOrderDetailList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.PackingList obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PackingListBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PackingListBO>)sender)[((IndicoList<Indico.BusinessObjects.PackingListBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PackingListsWhereThisIsOrderDetail.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PackingListBO>)sender)[((IndicoList<Indico.BusinessObjects.PackingListBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PackingListsWhereThisIsOrderDetail.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PackingListsWhereThisIsOrderDetailList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.PackingList obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PackingListBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PackingListBO>)sender)[((IndicoList<Indico.BusinessObjects.PackingListBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PackingListsWhereThisIsOrderDetail.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PackingListBO>)sender)[((IndicoList<Indico.BusinessObjects.PackingListBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PackingListsWhereThisIsOrderDetail.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void ProductionPlanningsWhereThisIsOrderDetailList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.ProductionPlanning obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.ProductionPlanningBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.ProductionPlanningBO>)sender)[((IndicoList<Indico.BusinessObjects.ProductionPlanningBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.ProductionPlanningsWhereThisIsOrderDetail.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.ProductionPlanningBO>)sender)[((IndicoList<Indico.BusinessObjects.ProductionPlanningBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.ProductionPlanningsWhereThisIsOrderDetail.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void ProductionPlanningsWhereThisIsOrderDetailList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.ProductionPlanning obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.ProductionPlanningBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.ProductionPlanningBO>)sender)[((IndicoList<Indico.BusinessObjects.ProductionPlanningBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.ProductionPlanningsWhereThisIsOrderDetail.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.ProductionPlanningBO>)sender)[((IndicoList<Indico.BusinessObjects.ProductionPlanningBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.ProductionPlanningsWhereThisIsOrderDetail.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
            this._factoryOrderDetialsWhereThisIsOrderDetailLoaded = false;
            if (this.factoryOrderDetialsWhereThisIsOrderDetailList != null)
            {
                this.factoryOrderDetialsWhereThisIsOrderDetailList.OnBeforeRemove -= new EventHandler(FactoryOrderDetialsWhereThisIsOrderDetailList_OnBeforeRemove);
                this.factoryOrderDetialsWhereThisIsOrderDetailList.OnAfterAdd -= new EventHandler(FactoryOrderDetialsWhereThisIsOrderDetailList_OnAfterAdd);
            }
            this._invoiceOrdersWhereThisIsOrderDetailLoaded = false;
            if (this.invoiceOrdersWhereThisIsOrderDetailList != null)
            {
                this.invoiceOrdersWhereThisIsOrderDetailList.OnBeforeRemove -= new EventHandler(InvoiceOrdersWhereThisIsOrderDetailList_OnBeforeRemove);
                this.invoiceOrdersWhereThisIsOrderDetailList.OnAfterAdd -= new EventHandler(InvoiceOrdersWhereThisIsOrderDetailList_OnAfterAdd);
            }
            this._orderDetailQtysWhereThisIsOrderDetailLoaded = false;
            if (this.orderDetailQtysWhereThisIsOrderDetailList != null)
            {
                this.orderDetailQtysWhereThisIsOrderDetailList.OnBeforeRemove -= new EventHandler(OrderDetailQtysWhereThisIsOrderDetailList_OnBeforeRemove);
                this.orderDetailQtysWhereThisIsOrderDetailList.OnAfterAdd -= new EventHandler(OrderDetailQtysWhereThisIsOrderDetailList_OnAfterAdd);
            }
            this._packingListsWhereThisIsOrderDetailLoaded = false;
            if (this.packingListsWhereThisIsOrderDetailList != null)
            {
                this.packingListsWhereThisIsOrderDetailList.OnBeforeRemove -= new EventHandler(PackingListsWhereThisIsOrderDetailList_OnBeforeRemove);
                this.packingListsWhereThisIsOrderDetailList.OnAfterAdd -= new EventHandler(PackingListsWhereThisIsOrderDetailList_OnAfterAdd);
            }
            this._productionPlanningsWhereThisIsOrderDetailLoaded = false;
            if (this.productionPlanningsWhereThisIsOrderDetailList != null)
            {
                this.productionPlanningsWhereThisIsOrderDetailList.OnBeforeRemove -= new EventHandler(ProductionPlanningsWhereThisIsOrderDetailList_OnBeforeRemove);
                this.productionPlanningsWhereThisIsOrderDetailList.OnAfterAdd -= new EventHandler(ProductionPlanningsWhereThisIsOrderDetailList_OnAfterAdd);
            }
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region OrderDetailBOComparer
    public class OrderDetailBOComparer : IComparer<Indico.BusinessObjects.OrderDetailBO>
    {
        private string propertyToCompareName;
        public OrderDetailBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.OrderDetailBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.OrderDetailBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public OrderDetailBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.OrderDetailBO> Members
        public int Compare(Indico.BusinessObjects.OrderDetailBO x, Indico.BusinessObjects.OrderDetailBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.OrderDetailBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.OrderDetailBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.OrderDetailBO x, Indico.BusinessObjects.OrderDetailBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
