// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class OrderBO : BusinessObject, IComparable
    {
        #region fields
        #region Scalar Fields
        private int id;
        private int? _addressType;
        private decimal? _artWorkCharges;
        private int? _billingAddress;
        private int _client;
        private bool? _converted;
        private DateTime _createdDate = DateTime.MinValue;
        private int _creator;
        private DateTime _date = DateTime.MinValue;
        private decimal? _deliveryCharges;
        private int? _deliveryOption;
        private int? _despatchTo;
        private int? _despatchToAddress;
        private int _distributor;
        private DateTime _estimatedCompletionDate = DateTime.MinValue;
        private int? _invoice;
        private bool _isAcceptedTermsAndConditions;
        private bool? _isAdelaideWareHouse;
        private bool? _isCourierDelivery;
        private bool _isDateNegotiable;
        private bool? _isDespatchDistributor;
        private bool? _isDespatchExistingDistributor;
        private bool? _isDespatchNewClient;
        private bool? _isFollowingAddress;
        private bool _isGSTExcluded;
        private bool? _isMentionAddress;
        private bool? _isOtherDelivery;
        private bool? _isShipExistingDistributor;
        private bool? _isShipNewClient;
        private bool? _isShipToDistributor;
        private bool _isTemporary;
        private bool? _isWeeklyShipment;
        private DateTime _modifiedDate = DateTime.MinValue;
        private int _modifier;
        private int? _mYOBCardFile;
        private string _notes;
        private string _oldPONo;
        private DateTime _orderSubmittedDate = DateTime.MinValue;
        private string _orderUsage;
        private decimal? _otherCharges;
        private string _otherChargesDescription;
        private string _otherDeliveryDescription;
        private int? _paymentMethod;
        private string _purchaseOrderNo;
        private int? _reservation;
        private DateTime? _shipmentDate;
        private int? _shipmentMode;
        private int? _shipTo;
        private int _status;
        #endregion
        
        #region Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.DistributorClientAddressBO _objBillingAddress;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.JobNameBO _objClient;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objCreator;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.DeliveryOptionBO _objDeliveryOption;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.CompanyBO _objDespatchTo;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.DistributorClientAddressBO _objDespatchToAddress;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.CompanyBO _objDistributor;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.InvoiceBO _objInvoice;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objModifier;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.MYOBCardFileBO _objMYOBCardFile;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.PaymentMethodBO _objPaymentMethod;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.ReservationBO _objReservation;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.ShipmentModeBO _objShipmentMode;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.CompanyBO _objShipTo;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.OrderStatusBO _objStatus;
        #endregion
        
        #region Foreign Table Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.OrderDetailBO> orderDetailsWhereThisIsOrderList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _orderDetailsWhereThisIsOrderLoaded;
        #endregion
        
        #region Other fields
        
        private Indico.DAL.Order _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>.</summary>
        public int? AddressType
        {   
            get {return _addressType;}
            set 
            {
                OnAddressTypeChanging(value);
                _addressType = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.AddressType = value;
                }
                OnAddressTypeChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? ArtWorkCharges
        {   
            get {return _artWorkCharges;}
            set 
            {
                OnArtWorkChargesChanging(value);
                _artWorkCharges = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ArtWorkCharges = value;
                }
                OnArtWorkChargesChanged();
            }
        }
        /// <summary>.</summary>
        public int? BillingAddress
        {   
            get {return _billingAddress;}
            set 
            {
                OnBillingAddressChanging(value);
                _billingAddress = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.BillingAddress = (from o in this._context.Context.DistributorClientAddress
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.DistributorClientAddress>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.BillingAddress = null;
                OnBillingAddressChanged();
            }
        }
        /// <summary>.</summary>
        public int Client
        {   
            get {return _client;}
            set 
            {
                OnClientChanging(value);
                _client = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Client = (from o in this._context.Context.JobName
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.JobName>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Client = null;
                OnClientChanged();
            }
        }
        /// <summary>.</summary>
        public bool? Converted
        {   
            get {return _converted;}
            set 
            {
                OnConvertedChanging(value);
                _converted = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Converted = value;
                }
                OnConvertedChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime CreatedDate
        {   
            get {return _createdDate;}
            set 
            {
                OnCreatedDateChanging(value);
                _createdDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CreatedDate = value;
                }
                OnCreatedDateChanged();
            }
        }
        /// <summary>.</summary>
        public int Creator
        {   
            get {return _creator;}
            set 
            {
                OnCreatorChanging(value);
                _creator = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Creator = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Creator = null;
                OnCreatorChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime Date
        {   
            get {return _date;}
            set 
            {
                OnDateChanging(value);
                _date = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Date = value;
                }
                OnDateChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? DeliveryCharges
        {   
            get {return _deliveryCharges;}
            set 
            {
                OnDeliveryChargesChanging(value);
                _deliveryCharges = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.DeliveryCharges = value;
                }
                OnDeliveryChargesChanged();
            }
        }
        /// <summary>.</summary>
        public int? DeliveryOption
        {   
            get {return _deliveryOption;}
            set 
            {
                OnDeliveryOptionChanging(value);
                _deliveryOption = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.DeliveryOption = (from o in this._context.Context.DeliveryOption
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.DeliveryOption>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.DeliveryOption = null;
                OnDeliveryOptionChanged();
            }
        }
        /// <summary>.</summary>
        public int? DespatchTo
        {   
            get {return _despatchTo;}
            set 
            {
                OnDespatchToChanging(value);
                _despatchTo = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.DespatchTo = (from o in this._context.Context.Company
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Company>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.DespatchTo = null;
                OnDespatchToChanged();
            }
        }
        /// <summary>.</summary>
        public int? DespatchToAddress
        {   
            get {return _despatchToAddress;}
            set 
            {
                OnDespatchToAddressChanging(value);
                _despatchToAddress = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.DespatchToAddress = (from o in this._context.Context.DistributorClientAddress
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.DistributorClientAddress>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.DespatchToAddress = null;
                OnDespatchToAddressChanged();
            }
        }
        /// <summary>.</summary>
        public int Distributor
        {   
            get {return _distributor;}
            set 
            {
                OnDistributorChanging(value);
                _distributor = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Distributor = (from o in this._context.Context.Company
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Company>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Distributor = null;
                OnDistributorChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime EstimatedCompletionDate
        {   
            get {return _estimatedCompletionDate;}
            set 
            {
                OnEstimatedCompletionDateChanging(value);
                _estimatedCompletionDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.EstimatedCompletionDate = value;
                }
                OnEstimatedCompletionDateChanged();
            }
        }
        /// <summary>.</summary>
        public int? Invoice
        {   
            get {return _invoice;}
            set 
            {
                OnInvoiceChanging(value);
                _invoice = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.Invoice = (from o in this._context.Context.Invoice
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Invoice>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Invoice = null;
                OnInvoiceChanged();
            }
        }
        /// <summary>.</summary>
        public bool IsAcceptedTermsAndConditions
        {   
            get {return _isAcceptedTermsAndConditions;}
            set 
            {
                OnIsAcceptedTermsAndConditionsChanging(value);
                _isAcceptedTermsAndConditions = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsAcceptedTermsAndConditions = value;
                }
                OnIsAcceptedTermsAndConditionsChanged();
            }
        }
        /// <summary>.</summary>
        public bool? IsAdelaideWareHouse
        {   
            get {return _isAdelaideWareHouse;}
            set 
            {
                OnIsAdelaideWareHouseChanging(value);
                _isAdelaideWareHouse = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsAdelaideWareHouse = value;
                }
                OnIsAdelaideWareHouseChanged();
            }
        }
        /// <summary>.</summary>
        public bool? IsCourierDelivery
        {   
            get {return _isCourierDelivery;}
            set 
            {
                OnIsCourierDeliveryChanging(value);
                _isCourierDelivery = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsCourierDelivery = value;
                }
                OnIsCourierDeliveryChanged();
            }
        }
        /// <summary>.</summary>
        public bool IsDateNegotiable
        {   
            get {return _isDateNegotiable;}
            set 
            {
                OnIsDateNegotiableChanging(value);
                _isDateNegotiable = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsDateNegotiable = value;
                }
                OnIsDateNegotiableChanged();
            }
        }
        /// <summary>.</summary>
        public bool? IsDespatchDistributor
        {   
            get {return _isDespatchDistributor;}
            set 
            {
                OnIsDespatchDistributorChanging(value);
                _isDespatchDistributor = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsDespatchDistributor = value;
                }
                OnIsDespatchDistributorChanged();
            }
        }
        /// <summary>.</summary>
        public bool? IsDespatchExistingDistributor
        {   
            get {return _isDespatchExistingDistributor;}
            set 
            {
                OnIsDespatchExistingDistributorChanging(value);
                _isDespatchExistingDistributor = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsDespatchExistingDistributor = value;
                }
                OnIsDespatchExistingDistributorChanged();
            }
        }
        /// <summary>.</summary>
        public bool? IsDespatchNewClient
        {   
            get {return _isDespatchNewClient;}
            set 
            {
                OnIsDespatchNewClientChanging(value);
                _isDespatchNewClient = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsDespatchNewClient = value;
                }
                OnIsDespatchNewClientChanged();
            }
        }
        /// <summary>.</summary>
        public bool? IsFollowingAddress
        {   
            get {return _isFollowingAddress;}
            set 
            {
                OnIsFollowingAddressChanging(value);
                _isFollowingAddress = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsFollowingAddress = value;
                }
                OnIsFollowingAddressChanged();
            }
        }
        /// <summary>.</summary>
        public bool IsGSTExcluded
        {   
            get {return _isGSTExcluded;}
            set 
            {
                OnIsGSTExcludedChanging(value);
                _isGSTExcluded = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsGSTExcluded = value;
                }
                OnIsGSTExcludedChanged();
            }
        }
        /// <summary>.</summary>
        public bool? IsMentionAddress
        {   
            get {return _isMentionAddress;}
            set 
            {
                OnIsMentionAddressChanging(value);
                _isMentionAddress = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsMentionAddress = value;
                }
                OnIsMentionAddressChanged();
            }
        }
        /// <summary>.</summary>
        public bool? IsOtherDelivery
        {   
            get {return _isOtherDelivery;}
            set 
            {
                OnIsOtherDeliveryChanging(value);
                _isOtherDelivery = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsOtherDelivery = value;
                }
                OnIsOtherDeliveryChanged();
            }
        }
        /// <summary>.</summary>
        public bool? IsShipExistingDistributor
        {   
            get {return _isShipExistingDistributor;}
            set 
            {
                OnIsShipExistingDistributorChanging(value);
                _isShipExistingDistributor = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsShipExistingDistributor = value;
                }
                OnIsShipExistingDistributorChanged();
            }
        }
        /// <summary>.</summary>
        public bool? IsShipNewClient
        {   
            get {return _isShipNewClient;}
            set 
            {
                OnIsShipNewClientChanging(value);
                _isShipNewClient = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsShipNewClient = value;
                }
                OnIsShipNewClientChanged();
            }
        }
        /// <summary>.</summary>
        public bool? IsShipToDistributor
        {   
            get {return _isShipToDistributor;}
            set 
            {
                OnIsShipToDistributorChanging(value);
                _isShipToDistributor = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsShipToDistributor = value;
                }
                OnIsShipToDistributorChanged();
            }
        }
        /// <summary>.</summary>
        public bool IsTemporary
        {   
            get {return _isTemporary;}
            set 
            {
                OnIsTemporaryChanging(value);
                _isTemporary = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsTemporary = value;
                }
                OnIsTemporaryChanged();
            }
        }
        /// <summary>.</summary>
        public bool? IsWeeklyShipment
        {   
            get {return _isWeeklyShipment;}
            set 
            {
                OnIsWeeklyShipmentChanging(value);
                _isWeeklyShipment = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsWeeklyShipment = value;
                }
                OnIsWeeklyShipmentChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime ModifiedDate
        {   
            get {return _modifiedDate;}
            set 
            {
                OnModifiedDateChanging(value);
                _modifiedDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ModifiedDate = value;
                }
                OnModifiedDateChanged();
            }
        }
        /// <summary>.</summary>
        public int Modifier
        {   
            get {return _modifier;}
            set 
            {
                OnModifierChanging(value);
                _modifier = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Modifier = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Modifier = null;
                OnModifierChanged();
            }
        }
        /// <summary>.</summary>
        public int? MYOBCardFile
        {   
            get {return _mYOBCardFile;}
            set 
            {
                OnMYOBCardFileChanging(value);
                _mYOBCardFile = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.MYOBCardFile = (from o in this._context.Context.MYOBCardFile
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.MYOBCardFile>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.MYOBCardFile = null;
                OnMYOBCardFileChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string Notes
        {   
            get {return _notes;}
            set 
            {
                OnNotesChanging(value);
                _notes = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Notes = value;
                }
                OnNotesChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string OldPONo
        {   
            get {return _oldPONo;}
            set 
            {
                OnOldPONoChanging(value);
                _oldPONo = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.OldPONo = value;
                }
                OnOldPONoChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime OrderSubmittedDate
        {   
            get {return _orderSubmittedDate;}
            set 
            {
                OnOrderSubmittedDateChanging(value);
                _orderSubmittedDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.OrderSubmittedDate = value;
                }
                OnOrderSubmittedDateChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string OrderUsage
        {   
            get {return _orderUsage;}
            set 
            {
                OnOrderUsageChanging(value);
                _orderUsage = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.OrderUsage = value;
                }
                OnOrderUsageChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? OtherCharges
        {   
            get {return _otherCharges;}
            set 
            {
                OnOtherChargesChanging(value);
                _otherCharges = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.OtherCharges = value;
                }
                OnOtherChargesChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string OtherChargesDescription
        {   
            get {return _otherChargesDescription;}
            set 
            {
                OnOtherChargesDescriptionChanging(value);
                _otherChargesDescription = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.OtherChargesDescription = value;
                }
                OnOtherChargesDescriptionChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string OtherDeliveryDescription
        {   
            get {return _otherDeliveryDescription;}
            set 
            {
                OnOtherDeliveryDescriptionChanging(value);
                _otherDeliveryDescription = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.OtherDeliveryDescription = value;
                }
                OnOtherDeliveryDescriptionChanged();
            }
        }
        /// <summary>.</summary>
        public int? PaymentMethod
        {   
            get {return _paymentMethod;}
            set 
            {
                OnPaymentMethodChanging(value);
                _paymentMethod = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.PaymentMethod = (from o in this._context.Context.PaymentMethod
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.PaymentMethod>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.PaymentMethod = null;
                OnPaymentMethodChanged();
            }
        }
        /// <summary>. The maximum length of this property is 50.</summary>
        public string PurchaseOrderNo
        {   
            get {return _purchaseOrderNo;}
            set 
            {
                OnPurchaseOrderNoChanging(value);
                _purchaseOrderNo = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.PurchaseOrderNo = value;
                }
                OnPurchaseOrderNoChanged();
            }
        }
        /// <summary>.</summary>
        public int? Reservation
        {   
            get {return _reservation;}
            set 
            {
                OnReservationChanging(value);
                _reservation = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.Reservation = (from o in this._context.Context.Reservation
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Reservation>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Reservation = null;
                OnReservationChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime? ShipmentDate
        {   
            get {return _shipmentDate;}
            set 
            {
                OnShipmentDateChanging(value);
                _shipmentDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ShipmentDate = value;
                }
                OnShipmentDateChanged();
            }
        }
        /// <summary>.</summary>
        public int? ShipmentMode
        {   
            get {return _shipmentMode;}
            set 
            {
                OnShipmentModeChanging(value);
                _shipmentMode = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.ShipmentMode = (from o in this._context.Context.ShipmentMode
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.ShipmentMode>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.ShipmentMode = null;
                OnShipmentModeChanged();
            }
        }
        /// <summary>.</summary>
        public int? ShipTo
        {   
            get {return _shipTo;}
            set 
            {
                OnShipToChanging(value);
                _shipTo = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.ShipTo = (from o in this._context.Context.Company
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Company>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.ShipTo = null;
                OnShipToChanged();
            }
        }
        /// <summary>.</summary>
        public int Status
        {   
            get {return _status;}
            set 
            {
                OnStatusChanging(value);
                _status = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Status = (from o in this._context.Context.OrderStatus
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.OrderStatus>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Status = null;
                OnStatusChanged();
            }
        }
        
        internal Indico.DAL.Order ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        ///<summary>The DistributorClientAddressBO object identified by the value of BillingAddress</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.DistributorClientAddressBO objBillingAddress
        {
            get
            {
                if (_billingAddress != null && _billingAddress > 0 && _objBillingAddress == null)
                {
                        if (this._context == null)
                        {
                            _objBillingAddress = new Indico.BusinessObjects.DistributorClientAddressBO();
                        }
                        else
                        {
                            _objBillingAddress = new Indico.BusinessObjects.DistributorClientAddressBO(ref this._context);
                        }
                        _objBillingAddress.ID = Convert.ToInt32(_billingAddress);
                        _objBillingAddress.GetObject(); 
                }
                return _objBillingAddress;
            }
            set
            { 
                _objBillingAddress = value;
                _billingAddress = _objBillingAddress.ID;
            }
        }
        ///<summary>The JobNameBO object identified by the value of Client</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.JobNameBO objClient
        {
            get
            {
                if ( _client > 0 && _objClient == null)
                {
                        if (this._context == null)
                        {
                            _objClient = new Indico.BusinessObjects.JobNameBO();
                        }
                        else
                        {
                            _objClient = new Indico.BusinessObjects.JobNameBO(ref this._context);
                        }
                        _objClient.ID = _client;
                        _objClient.GetObject(); 
                }
                return _objClient;
            }
            set
            { 
                _objClient = value;
                _client = _objClient.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Creator</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objCreator
        {
            get
            {
                if ( _creator > 0 && _objCreator == null)
                {
                        if (this._context == null)
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objCreator.ID = _creator;
                        _objCreator.GetObject(); 
                }
                return _objCreator;
            }
            set
            { 
                _objCreator = value;
                _creator = _objCreator.ID;
            }
        }
        ///<summary>The DeliveryOptionBO object identified by the value of DeliveryOption</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.DeliveryOptionBO objDeliveryOption
        {
            get
            {
                if (_deliveryOption != null && _deliveryOption > 0 && _objDeliveryOption == null)
                {
                        if (this._context == null)
                        {
                            _objDeliveryOption = new Indico.BusinessObjects.DeliveryOptionBO();
                        }
                        else
                        {
                            _objDeliveryOption = new Indico.BusinessObjects.DeliveryOptionBO(ref this._context);
                        }
                        _objDeliveryOption.ID = Convert.ToInt32(_deliveryOption);
                        _objDeliveryOption.GetObject(); 
                }
                return _objDeliveryOption;
            }
            set
            { 
                _objDeliveryOption = value;
                _deliveryOption = _objDeliveryOption.ID;
            }
        }
        ///<summary>The CompanyBO object identified by the value of DespatchTo</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.CompanyBO objDespatchTo
        {
            get
            {
                if (_despatchTo != null && _despatchTo > 0 && _objDespatchTo == null)
                {
                        if (this._context == null)
                        {
                            _objDespatchTo = new Indico.BusinessObjects.CompanyBO();
                        }
                        else
                        {
                            _objDespatchTo = new Indico.BusinessObjects.CompanyBO(ref this._context);
                        }
                        _objDespatchTo.ID = Convert.ToInt32(_despatchTo);
                        _objDespatchTo.GetObject(); 
                }
                return _objDespatchTo;
            }
            set
            { 
                _objDespatchTo = value;
                _despatchTo = _objDespatchTo.ID;
            }
        }
        ///<summary>The DistributorClientAddressBO object identified by the value of DespatchToAddress</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.DistributorClientAddressBO objDespatchToAddress
        {
            get
            {
                if (_despatchToAddress != null && _despatchToAddress > 0 && _objDespatchToAddress == null)
                {
                        if (this._context == null)
                        {
                            _objDespatchToAddress = new Indico.BusinessObjects.DistributorClientAddressBO();
                        }
                        else
                        {
                            _objDespatchToAddress = new Indico.BusinessObjects.DistributorClientAddressBO(ref this._context);
                        }
                        _objDespatchToAddress.ID = Convert.ToInt32(_despatchToAddress);
                        _objDespatchToAddress.GetObject(); 
                }
                return _objDespatchToAddress;
            }
            set
            { 
                _objDespatchToAddress = value;
                _despatchToAddress = _objDespatchToAddress.ID;
            }
        }
        ///<summary>The CompanyBO object identified by the value of Distributor</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.CompanyBO objDistributor
        {
            get
            {
                if ( _distributor > 0 && _objDistributor == null)
                {
                        if (this._context == null)
                        {
                            _objDistributor = new Indico.BusinessObjects.CompanyBO();
                        }
                        else
                        {
                            _objDistributor = new Indico.BusinessObjects.CompanyBO(ref this._context);
                        }
                        _objDistributor.ID = _distributor;
                        _objDistributor.GetObject(); 
                }
                return _objDistributor;
            }
            set
            { 
                _objDistributor = value;
                _distributor = _objDistributor.ID;
            }
        }
        ///<summary>The InvoiceBO object identified by the value of Invoice</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.InvoiceBO objInvoice
        {
            get
            {
                if (_invoice != null && _invoice > 0 && _objInvoice == null)
                {
                        if (this._context == null)
                        {
                            _objInvoice = new Indico.BusinessObjects.InvoiceBO();
                        }
                        else
                        {
                            _objInvoice = new Indico.BusinessObjects.InvoiceBO(ref this._context);
                        }
                        _objInvoice.ID = Convert.ToInt32(_invoice);
                        _objInvoice.GetObject(); 
                }
                return _objInvoice;
            }
            set
            { 
                _objInvoice = value;
                _invoice = _objInvoice.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Modifier</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objModifier
        {
            get
            {
                if ( _modifier > 0 && _objModifier == null)
                {
                        if (this._context == null)
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objModifier.ID = _modifier;
                        _objModifier.GetObject(); 
                }
                return _objModifier;
            }
            set
            { 
                _objModifier = value;
                _modifier = _objModifier.ID;
            }
        }
        ///<summary>The MYOBCardFileBO object identified by the value of MYOBCardFile</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.MYOBCardFileBO objMYOBCardFile
        {
            get
            {
                if (_mYOBCardFile != null && _mYOBCardFile > 0 && _objMYOBCardFile == null)
                {
                        if (this._context == null)
                        {
                            _objMYOBCardFile = new Indico.BusinessObjects.MYOBCardFileBO();
                        }
                        else
                        {
                            _objMYOBCardFile = new Indico.BusinessObjects.MYOBCardFileBO(ref this._context);
                        }
                        _objMYOBCardFile.ID = Convert.ToInt32(_mYOBCardFile);
                        _objMYOBCardFile.GetObject(); 
                }
                return _objMYOBCardFile;
            }
            set
            { 
                _objMYOBCardFile = value;
                _mYOBCardFile = _objMYOBCardFile.ID;
            }
        }
        ///<summary>The PaymentMethodBO object identified by the value of PaymentMethod</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.PaymentMethodBO objPaymentMethod
        {
            get
            {
                if (_paymentMethod != null && _paymentMethod > 0 && _objPaymentMethod == null)
                {
                        if (this._context == null)
                        {
                            _objPaymentMethod = new Indico.BusinessObjects.PaymentMethodBO();
                        }
                        else
                        {
                            _objPaymentMethod = new Indico.BusinessObjects.PaymentMethodBO(ref this._context);
                        }
                        _objPaymentMethod.ID = Convert.ToInt32(_paymentMethod);
                        _objPaymentMethod.GetObject(); 
                }
                return _objPaymentMethod;
            }
            set
            { 
                _objPaymentMethod = value;
                _paymentMethod = _objPaymentMethod.ID;
            }
        }
        ///<summary>The ReservationBO object identified by the value of Reservation</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.ReservationBO objReservation
        {
            get
            {
                if (_reservation != null && _reservation > 0 && _objReservation == null)
                {
                        if (this._context == null)
                        {
                            _objReservation = new Indico.BusinessObjects.ReservationBO();
                        }
                        else
                        {
                            _objReservation = new Indico.BusinessObjects.ReservationBO(ref this._context);
                        }
                        _objReservation.ID = Convert.ToInt32(_reservation);
                        _objReservation.GetObject(); 
                }
                return _objReservation;
            }
            set
            { 
                _objReservation = value;
                _reservation = _objReservation.ID;
            }
        }
        ///<summary>The ShipmentModeBO object identified by the value of ShipmentMode</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.ShipmentModeBO objShipmentMode
        {
            get
            {
                if (_shipmentMode != null && _shipmentMode > 0 && _objShipmentMode == null)
                {
                        if (this._context == null)
                        {
                            _objShipmentMode = new Indico.BusinessObjects.ShipmentModeBO();
                        }
                        else
                        {
                            _objShipmentMode = new Indico.BusinessObjects.ShipmentModeBO(ref this._context);
                        }
                        _objShipmentMode.ID = Convert.ToInt32(_shipmentMode);
                        _objShipmentMode.GetObject(); 
                }
                return _objShipmentMode;
            }
            set
            { 
                _objShipmentMode = value;
                _shipmentMode = _objShipmentMode.ID;
            }
        }
        ///<summary>The CompanyBO object identified by the value of ShipTo</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.CompanyBO objShipTo
        {
            get
            {
                if (_shipTo != null && _shipTo > 0 && _objShipTo == null)
                {
                        if (this._context == null)
                        {
                            _objShipTo = new Indico.BusinessObjects.CompanyBO();
                        }
                        else
                        {
                            _objShipTo = new Indico.BusinessObjects.CompanyBO(ref this._context);
                        }
                        _objShipTo.ID = Convert.ToInt32(_shipTo);
                        _objShipTo.GetObject(); 
                }
                return _objShipTo;
            }
            set
            { 
                _objShipTo = value;
                _shipTo = _objShipTo.ID;
            }
        }
        ///<summary>The OrderStatusBO object identified by the value of Status</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.OrderStatusBO objStatus
        {
            get
            {
                if ( _status > 0 && _objStatus == null)
                {
                        if (this._context == null)
                        {
                            _objStatus = new Indico.BusinessObjects.OrderStatusBO();
                        }
                        else
                        {
                            _objStatus = new Indico.BusinessObjects.OrderStatusBO(ref this._context);
                        }
                        _objStatus.ID = _status;
                        _objStatus.GetObject(); 
                }
                return _objStatus;
            }
            set
            { 
                _objStatus = value;
                _status = _objStatus.ID;
            }
        }
        #endregion
        
        #region Foreign Object Foreign Key Collections
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.OrderDetailBO> OrderDetailsWhereThisIsOrder // FK_OrderDetail_Order
        {
            get
            {
                if (!_orderDetailsWhereThisIsOrderLoaded)
                {
                    _orderDetailsWhereThisIsOrderLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Order obj = (from o in context.Order
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.OrderDetailsWhereThisIsOrder.Load();
                        orderDetailsWhereThisIsOrderList = new IndicoList<Indico.BusinessObjects.OrderDetailBO>(obj.OrderDetailsWhereThisIsOrder.Count);
                        
                        foreach (Indico.DAL.OrderDetail o in obj.OrderDetailsWhereThisIsOrder)
                        {
                            Indico.BusinessObjects.OrderDetailBO fkObj = new Indico.BusinessObjects.OrderDetailBO(o, ref this._context);
                            orderDetailsWhereThisIsOrderList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        orderDetailsWhereThisIsOrderList = new IndicoList<Indico.BusinessObjects.OrderDetailBO>();
                    }
                    
                    orderDetailsWhereThisIsOrderList.OnBeforeRemove += new EventHandler(OrderDetailsWhereThisIsOrderList_OnBeforeRemove);
                    orderDetailsWhereThisIsOrderList.OnAfterAdd += new EventHandler(OrderDetailsWhereThisIsOrderList_OnAfterAdd);
                }
                
                return orderDetailsWhereThisIsOrderList;
            }
        }
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the OrderBO class using the supplied Indico.DAL.Order. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.Order whose properties will be used to initialise the OrderBO</param>
        internal OrderBO(Indico.DAL.Order obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.Order 
            this.ID = obj.ID;
            
            this.AddressType = obj.AddressType;
            this.ArtWorkCharges = obj.ArtWorkCharges;
            this.BillingAddress = (obj.BillingAddressReference.EntityKey != null && obj.BillingAddressReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.BillingAddressReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Client = (obj.ClientReference.EntityKey != null && obj.ClientReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ClientReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Converted = obj.Converted;
            this.CreatedDate = obj.CreatedDate;
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Date = obj.Date;
            this.DeliveryCharges = obj.DeliveryCharges;
            this.DeliveryOption = (obj.DeliveryOptionReference.EntityKey != null && obj.DeliveryOptionReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.DeliveryOptionReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.DespatchTo = (obj.DespatchToReference.EntityKey != null && obj.DespatchToReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.DespatchToReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.DespatchToAddress = (obj.DespatchToAddressReference.EntityKey != null && obj.DespatchToAddressReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.DespatchToAddressReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Distributor = (obj.DistributorReference.EntityKey != null && obj.DistributorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.DistributorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.EstimatedCompletionDate = obj.EstimatedCompletionDate;
            this.Invoice = (obj.InvoiceReference.EntityKey != null && obj.InvoiceReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.InvoiceReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.IsAcceptedTermsAndConditions = obj.IsAcceptedTermsAndConditions;
            this.IsAdelaideWareHouse = obj.IsAdelaideWareHouse;
            this.IsCourierDelivery = obj.IsCourierDelivery;
            this.IsDateNegotiable = obj.IsDateNegotiable;
            this.IsDespatchDistributor = obj.IsDespatchDistributor;
            this.IsDespatchExistingDistributor = obj.IsDespatchExistingDistributor;
            this.IsDespatchNewClient = obj.IsDespatchNewClient;
            this.IsFollowingAddress = obj.IsFollowingAddress;
            this.IsGSTExcluded = obj.IsGSTExcluded;
            this.IsMentionAddress = obj.IsMentionAddress;
            this.IsOtherDelivery = obj.IsOtherDelivery;
            this.IsShipExistingDistributor = obj.IsShipExistingDistributor;
            this.IsShipNewClient = obj.IsShipNewClient;
            this.IsShipToDistributor = obj.IsShipToDistributor;
            this.IsTemporary = obj.IsTemporary;
            this.IsWeeklyShipment = obj.IsWeeklyShipment;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.MYOBCardFile = (obj.MYOBCardFileReference.EntityKey != null && obj.MYOBCardFileReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.MYOBCardFileReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Notes = obj.Notes;
            this.OldPONo = obj.OldPONo;
            this.OrderSubmittedDate = obj.OrderSubmittedDate;
            this.OrderUsage = obj.OrderUsage;
            this.OtherCharges = obj.OtherCharges;
            this.OtherChargesDescription = obj.OtherChargesDescription;
            this.OtherDeliveryDescription = obj.OtherDeliveryDescription;
            this.PaymentMethod = (obj.PaymentMethodReference.EntityKey != null && obj.PaymentMethodReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PaymentMethodReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.PurchaseOrderNo = obj.PurchaseOrderNo;
            this.Reservation = (obj.ReservationReference.EntityKey != null && obj.ReservationReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ReservationReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.ShipmentDate = obj.ShipmentDate;
            this.ShipmentMode = (obj.ShipmentModeReference.EntityKey != null && obj.ShipmentModeReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ShipmentModeReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.ShipTo = (obj.ShipToReference.EntityKey != null && obj.ShipToReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ShipToReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Status = (obj.StatusReference.EntityKey != null && obj.StatusReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.StatusReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.Order SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.Order properties
            Indico.DAL.Order obj = new Indico.DAL.Order();
            
            if (this.ID > 0)
            {
                obj = context.Order.FirstOrDefault<Order>(o => o.ID == this.ID);
            }
            
            obj.AddressType = this.AddressType;
            obj.ArtWorkCharges = this.ArtWorkCharges;
            obj.Converted = this.Converted;
            obj.CreatedDate = this.CreatedDate;
            obj.Date = this.Date;
            obj.DeliveryCharges = this.DeliveryCharges;
            obj.EstimatedCompletionDate = this.EstimatedCompletionDate;
            obj.IsAcceptedTermsAndConditions = this.IsAcceptedTermsAndConditions;
            obj.IsAdelaideWareHouse = this.IsAdelaideWareHouse;
            obj.IsCourierDelivery = this.IsCourierDelivery;
            obj.IsDateNegotiable = this.IsDateNegotiable;
            obj.IsDespatchDistributor = this.IsDespatchDistributor;
            obj.IsDespatchExistingDistributor = this.IsDespatchExistingDistributor;
            obj.IsDespatchNewClient = this.IsDespatchNewClient;
            obj.IsFollowingAddress = this.IsFollowingAddress;
            obj.IsGSTExcluded = this.IsGSTExcluded;
            obj.IsMentionAddress = this.IsMentionAddress;
            obj.IsOtherDelivery = this.IsOtherDelivery;
            obj.IsShipExistingDistributor = this.IsShipExistingDistributor;
            obj.IsShipNewClient = this.IsShipNewClient;
            obj.IsShipToDistributor = this.IsShipToDistributor;
            obj.IsTemporary = this.IsTemporary;
            obj.IsWeeklyShipment = this.IsWeeklyShipment;
            obj.ModifiedDate = this.ModifiedDate;
            obj.Notes = this.Notes;
            obj.OldPONo = this.OldPONo;
            obj.OrderSubmittedDate = this.OrderSubmittedDate;
            obj.OrderUsage = this.OrderUsage;
            obj.OtherCharges = this.OtherCharges;
            obj.OtherChargesDescription = this.OtherChargesDescription;
            obj.OtherDeliveryDescription = this.OtherDeliveryDescription;
            obj.PurchaseOrderNo = this.PurchaseOrderNo;
            obj.ShipmentDate = this.ShipmentDate;
            
            if (this.BillingAddress != null && this.BillingAddress > 0) obj.BillingAddress = context.DistributorClientAddress.FirstOrDefault(o => o.ID == this.BillingAddress);
            if (this.Client > 0) obj.Client = context.JobName.FirstOrDefault(o => o.ID == this.Client);
            if (this.Creator > 0) obj.Creator = context.User.FirstOrDefault(o => o.ID == this.Creator);
            if (this.DeliveryOption != null && this.DeliveryOption > 0) obj.DeliveryOption = context.DeliveryOption.FirstOrDefault(o => o.ID == this.DeliveryOption);
            if (this.DespatchTo != null && this.DespatchTo > 0) obj.DespatchTo = context.Company.FirstOrDefault(o => o.ID == this.DespatchTo);
            if (this.DespatchToAddress != null && this.DespatchToAddress > 0) obj.DespatchToAddress = context.DistributorClientAddress.FirstOrDefault(o => o.ID == this.DespatchToAddress);
            if (this.Distributor > 0) obj.Distributor = context.Company.FirstOrDefault(o => o.ID == this.Distributor);
            if (this.Invoice != null && this.Invoice > 0) obj.Invoice = context.Invoice.FirstOrDefault(o => o.ID == this.Invoice);
            if (this.Modifier > 0) obj.Modifier = context.User.FirstOrDefault(o => o.ID == this.Modifier);
            if (this.MYOBCardFile != null && this.MYOBCardFile > 0) obj.MYOBCardFile = context.MYOBCardFile.FirstOrDefault(o => o.ID == this.MYOBCardFile);
            if (this.PaymentMethod != null && this.PaymentMethod > 0) obj.PaymentMethod = context.PaymentMethod.FirstOrDefault(o => o.ID == this.PaymentMethod);
            if (this.Reservation != null && this.Reservation > 0) obj.Reservation = context.Reservation.FirstOrDefault(o => o.ID == this.Reservation);
            if (this.ShipmentMode != null && this.ShipmentMode > 0) obj.ShipmentMode = context.ShipmentMode.FirstOrDefault(o => o.ID == this.ShipmentMode);
            if (this.ShipTo != null && this.ShipTo > 0) obj.ShipTo = context.Company.FirstOrDefault(o => o.ID == this.ShipTo);
            if (this.Status > 0) obj.Status = context.OrderStatus.FirstOrDefault(o => o.ID == this.Status);
            
            if (_orderDetailsWhereThisIsOrderLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.OrderDetailBO.ToEntityList(this.OrderDetailsWhereThisIsOrder, context), 
                    obj.OrderDetailsWhereThisIsOrder);
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.Order))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.Order obj = (Indico.DAL.Order)eObj;
            
            // set the Indico.BusinessObjects.OrderBO properties
            this.ID = obj.ID;
            
            this.AddressType = obj.AddressType;
            this.ArtWorkCharges = obj.ArtWorkCharges;
            this.Converted = obj.Converted;
            this.CreatedDate = obj.CreatedDate;
            this.Date = obj.Date;
            this.DeliveryCharges = obj.DeliveryCharges;
            this.EstimatedCompletionDate = obj.EstimatedCompletionDate;
            this.IsAcceptedTermsAndConditions = obj.IsAcceptedTermsAndConditions;
            this.IsAdelaideWareHouse = obj.IsAdelaideWareHouse;
            this.IsCourierDelivery = obj.IsCourierDelivery;
            this.IsDateNegotiable = obj.IsDateNegotiable;
            this.IsDespatchDistributor = obj.IsDespatchDistributor;
            this.IsDespatchExistingDistributor = obj.IsDespatchExistingDistributor;
            this.IsDespatchNewClient = obj.IsDespatchNewClient;
            this.IsFollowingAddress = obj.IsFollowingAddress;
            this.IsGSTExcluded = obj.IsGSTExcluded;
            this.IsMentionAddress = obj.IsMentionAddress;
            this.IsOtherDelivery = obj.IsOtherDelivery;
            this.IsShipExistingDistributor = obj.IsShipExistingDistributor;
            this.IsShipNewClient = obj.IsShipNewClient;
            this.IsShipToDistributor = obj.IsShipToDistributor;
            this.IsTemporary = obj.IsTemporary;
            this.IsWeeklyShipment = obj.IsWeeklyShipment;
            this.ModifiedDate = obj.ModifiedDate;
            this.Notes = obj.Notes;
            this.OldPONo = obj.OldPONo;
            this.OrderSubmittedDate = obj.OrderSubmittedDate;
            this.OrderUsage = obj.OrderUsage;
            this.OtherCharges = obj.OtherCharges;
            this.OtherChargesDescription = obj.OtherChargesDescription;
            this.OtherDeliveryDescription = obj.OtherDeliveryDescription;
            this.PurchaseOrderNo = obj.PurchaseOrderNo;
            this.ShipmentDate = obj.ShipmentDate;
            
            this.BillingAddress = (obj.BillingAddressReference.EntityKey != null && obj.BillingAddressReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.BillingAddressReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Client = (obj.ClientReference.EntityKey != null && obj.ClientReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ClientReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.DeliveryOption = (obj.DeliveryOptionReference.EntityKey != null && obj.DeliveryOptionReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.DeliveryOptionReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.DespatchTo = (obj.DespatchToReference.EntityKey != null && obj.DespatchToReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.DespatchToReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.DespatchToAddress = (obj.DespatchToAddressReference.EntityKey != null && obj.DespatchToAddressReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.DespatchToAddressReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Distributor = (obj.DistributorReference.EntityKey != null && obj.DistributorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.DistributorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Invoice = (obj.InvoiceReference.EntityKey != null && obj.InvoiceReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.InvoiceReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.MYOBCardFile = (obj.MYOBCardFileReference.EntityKey != null && obj.MYOBCardFileReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.MYOBCardFileReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.PaymentMethod = (obj.PaymentMethodReference.EntityKey != null && obj.PaymentMethodReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PaymentMethodReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Reservation = (obj.ReservationReference.EntityKey != null && obj.ReservationReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ReservationReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.ShipmentMode = (obj.ShipmentModeReference.EntityKey != null && obj.ShipmentModeReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ShipmentModeReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.ShipTo = (obj.ShipToReference.EntityKey != null && obj.ShipToReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ShipToReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Status = (obj.StatusReference.EntityKey != null && obj.StatusReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.StatusReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.OrderBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.OrderBO properties
            this.ID = obj.ID;
            
            this.AddressType = obj.AddressType;
            this.ArtWorkCharges = obj.ArtWorkCharges;
            this.BillingAddress = obj.BillingAddress;
            this.Client = obj.Client;
            this.Converted = obj.Converted;
            this.CreatedDate = obj.CreatedDate;
            this.Creator = obj.Creator;
            this.Date = obj.Date;
            this.DeliveryCharges = obj.DeliveryCharges;
            this.DeliveryOption = obj.DeliveryOption;
            this.DespatchTo = obj.DespatchTo;
            this.DespatchToAddress = obj.DespatchToAddress;
            this.Distributor = obj.Distributor;
            this.EstimatedCompletionDate = obj.EstimatedCompletionDate;
            this.Invoice = obj.Invoice;
            this.IsAcceptedTermsAndConditions = obj.IsAcceptedTermsAndConditions;
            this.IsAdelaideWareHouse = obj.IsAdelaideWareHouse;
            this.IsCourierDelivery = obj.IsCourierDelivery;
            this.IsDateNegotiable = obj.IsDateNegotiable;
            this.IsDespatchDistributor = obj.IsDespatchDistributor;
            this.IsDespatchExistingDistributor = obj.IsDespatchExistingDistributor;
            this.IsDespatchNewClient = obj.IsDespatchNewClient;
            this.IsFollowingAddress = obj.IsFollowingAddress;
            this.IsGSTExcluded = obj.IsGSTExcluded;
            this.IsMentionAddress = obj.IsMentionAddress;
            this.IsOtherDelivery = obj.IsOtherDelivery;
            this.IsShipExistingDistributor = obj.IsShipExistingDistributor;
            this.IsShipNewClient = obj.IsShipNewClient;
            this.IsShipToDistributor = obj.IsShipToDistributor;
            this.IsTemporary = obj.IsTemporary;
            this.IsWeeklyShipment = obj.IsWeeklyShipment;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = obj.Modifier;
            this.MYOBCardFile = obj.MYOBCardFile;
            this.Notes = obj.Notes;
            this.OldPONo = obj.OldPONo;
            this.OrderSubmittedDate = obj.OrderSubmittedDate;
            this.OrderUsage = obj.OrderUsage;
            this.OtherCharges = obj.OtherCharges;
            this.OtherChargesDescription = obj.OtherChargesDescription;
            this.OtherDeliveryDescription = obj.OtherDeliveryDescription;
            this.PaymentMethod = obj.PaymentMethod;
            this.PurchaseOrderNo = obj.PurchaseOrderNo;
            this.Reservation = obj.Reservation;
            this.ShipmentDate = obj.ShipmentDate;
            this.ShipmentMode = obj.ShipmentMode;
            this.ShipTo = obj.ShipTo;
            this.Status = obj.Status;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.OrderBO> IQueryableToList(IQueryable<Indico.DAL.Order> oQuery)
        {
            List<Indico.DAL.Order> oList = oQuery.ToList();
            List<Indico.BusinessObjects.OrderBO> rList = new List<Indico.BusinessObjects.OrderBO>(oList.Count);
            foreach (Indico.DAL.Order o in oList)
            {
                Indico.BusinessObjects.OrderBO obj = new Indico.BusinessObjects.OrderBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.OrderBO> ToList(IEnumerable<Indico.DAL.Order> oQuery)
        {
            List<Indico.DAL.Order> oList = oQuery.ToList();
            List<Indico.BusinessObjects.OrderBO> rList = new List<Indico.BusinessObjects.OrderBO>(oList.Count);
            foreach (Indico.DAL.Order o in oList)
            {
                Indico.BusinessObjects.OrderBO obj = new Indico.BusinessObjects.OrderBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.Order> ToEntityList(List<OrderBO> bos, IndicoEntities context)
        {
            // build a List of Order entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.Order.Count() == 0) ? new List<Indico.DAL.Order>() : (context.Order.Where(BuildContainsExpression<Order, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.Order>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Order> ToEntityCollection(List<OrderBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of Order entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.Order> el = (context.Order.Count() == 0) ? new List<Indico.DAL.Order>() : 
                context.Order.Where(BuildContainsExpression<Order, int>(e => e.ID, ids))
                .ToList<Indico.DAL.Order>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Order> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Order>();
                
            foreach (Indico.DAL.Order r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.Order ToEntity(IndicoEntities context)
        {
            return (from o in context.Order
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToOrder(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Order obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToOrder(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.Order obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Order obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.OrderBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.OrderBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.Order> oQuery =
                        from o in context.Order
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.Order> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.OrderBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.OrderBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.OrderBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.OrderBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.Order> oQuery =
                (from o in context.Order
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.OrderBO> orders = IQueryableToList(oQuery);
            context.Dispose();
            return orders;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.OrderBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.OrderBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.OrderBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.OrderBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Order> oQuery =
                (from o in context.Order
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Date == DateTime.MinValue || this.Date == o.Date) &&
                    (this.Client == 0 || this.Client == o.Client.ID) &&
                    (this.Distributor == 0 || this.Distributor == o.Distributor.ID) &&
                    (this.OrderSubmittedDate == DateTime.MinValue || this.OrderSubmittedDate == o.OrderSubmittedDate) &&
                    (this.EstimatedCompletionDate == DateTime.MinValue || this.EstimatedCompletionDate == o.EstimatedCompletionDate) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) &&
                    (this.ShipmentDate == null || this.ShipmentDate == o.ShipmentDate) &&
                    (this.Status == 0 || this.Status == o.Status.ID) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.PaymentMethod == null || this.PaymentMethod == o.PaymentMethod.ID) &&
                    (this.OrderUsage == null || this.OrderUsage == o.OrderUsage) &&
                    (this.PurchaseOrderNo == null || this.PurchaseOrderNo == o.PurchaseOrderNo) &&
                    (this.Converted == null || this.Converted == o.Converted) &&
                    (this.OldPONo == null || this.OldPONo == o.OldPONo) &&
                    (this.Invoice == null || this.Invoice == o.Invoice.ID) &&
                    (this.IsTemporary == false || this.IsTemporary == o.IsTemporary) &&
                    (this.ShipmentMode == null || this.ShipmentMode == o.ShipmentMode.ID) &&
                    (this.ShipTo == null || this.ShipTo == o.ShipTo.ID) &&
                    (this.DespatchTo == null || this.DespatchTo == o.DespatchTo.ID) &&
                    (this.IsWeeklyShipment == null || this.IsWeeklyShipment == o.IsWeeklyShipment) &&
                    (this.IsCourierDelivery == null || this.IsCourierDelivery == o.IsCourierDelivery) &&
                    (this.IsAdelaideWareHouse == null || this.IsAdelaideWareHouse == o.IsAdelaideWareHouse) &&
                    (this.IsMentionAddress == null || this.IsMentionAddress == o.IsMentionAddress) &&
                    (this.IsFollowingAddress == null || this.IsFollowingAddress == o.IsFollowingAddress) &&
                    (this.Reservation == null || this.Reservation == o.Reservation.ID) &&
                    (this.IsShipToDistributor == null || this.IsShipToDistributor == o.IsShipToDistributor) &&
                    (this.IsShipExistingDistributor == null || this.IsShipExistingDistributor == o.IsShipExistingDistributor) &&
                    (this.IsShipNewClient == null || this.IsShipNewClient == o.IsShipNewClient) &&
                    (this.IsDespatchDistributor == null || this.IsDespatchDistributor == o.IsDespatchDistributor) &&
                    (this.IsDespatchExistingDistributor == null || this.IsDespatchExistingDistributor == o.IsDespatchExistingDistributor) &&
                    (this.IsDespatchNewClient == null || this.IsDespatchNewClient == o.IsDespatchNewClient) &&
                    (this.DeliveryOption == null || this.DeliveryOption == o.DeliveryOption.ID) &&
                    (this.IsDateNegotiable == false || this.IsDateNegotiable == o.IsDateNegotiable) &&
                    (this.Notes == null || this.Notes == o.Notes) &&
                    (this.IsAcceptedTermsAndConditions == false || this.IsAcceptedTermsAndConditions == o.IsAcceptedTermsAndConditions) &&
                    (this.AddressType == null || this.AddressType == o.AddressType) &&
                    (this.MYOBCardFile == null || this.MYOBCardFile == o.MYOBCardFile.ID) &&
                    (this.DeliveryCharges == null || this.DeliveryCharges == o.DeliveryCharges) &&
                    (this.ArtWorkCharges == null || this.ArtWorkCharges == o.ArtWorkCharges) &&
                    (this.OtherCharges == null || this.OtherCharges == o.OtherCharges) &&
                    (this.OtherChargesDescription == null || this.OtherChargesDescription == o.OtherChargesDescription) &&
                    (this.IsOtherDelivery == null || this.IsOtherDelivery == o.IsOtherDelivery) &&
                    (this.OtherDeliveryDescription == null || this.OtherDeliveryDescription == o.OtherDeliveryDescription) &&
                    (this.BillingAddress == null || this.BillingAddress == o.BillingAddress.ID) &&
                    (this.DespatchToAddress == null || this.DespatchToAddress == o.DespatchToAddress.ID) &&
                    (this.IsGSTExcluded == false || this.IsGSTExcluded == o.IsGSTExcluded) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.OrderBO> orders = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return orders;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Order
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Date == DateTime.MinValue || this.Date == o.Date) &&
                    (this.Client == 0 || this.Client == o.Client.ID) &&
                    (this.Distributor == 0 || this.Distributor == o.Distributor.ID) &&
                    (this.OrderSubmittedDate == DateTime.MinValue || this.OrderSubmittedDate == o.OrderSubmittedDate) &&
                    (this.EstimatedCompletionDate == DateTime.MinValue || this.EstimatedCompletionDate == o.EstimatedCompletionDate) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) &&
                    (this.ShipmentDate == null || this.ShipmentDate == o.ShipmentDate) &&
                    (this.Status == 0 || this.Status == o.Status.ID) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.PaymentMethod == null || this.PaymentMethod == o.PaymentMethod.ID) &&
                    (this.OrderUsage == null || this.OrderUsage == o.OrderUsage) &&
                    (this.PurchaseOrderNo == null || this.PurchaseOrderNo == o.PurchaseOrderNo) &&
                    (this.Converted == null || this.Converted == o.Converted) &&
                    (this.OldPONo == null || this.OldPONo == o.OldPONo) &&
                    (this.Invoice == null || this.Invoice == o.Invoice.ID) &&
                    (this.IsTemporary == false || this.IsTemporary == o.IsTemporary) &&
                    (this.ShipmentMode == null || this.ShipmentMode == o.ShipmentMode.ID) &&
                    (this.ShipTo == null || this.ShipTo == o.ShipTo.ID) &&
                    (this.DespatchTo == null || this.DespatchTo == o.DespatchTo.ID) &&
                    (this.IsWeeklyShipment == null || this.IsWeeklyShipment == o.IsWeeklyShipment) &&
                    (this.IsCourierDelivery == null || this.IsCourierDelivery == o.IsCourierDelivery) &&
                    (this.IsAdelaideWareHouse == null || this.IsAdelaideWareHouse == o.IsAdelaideWareHouse) &&
                    (this.IsMentionAddress == null || this.IsMentionAddress == o.IsMentionAddress) &&
                    (this.IsFollowingAddress == null || this.IsFollowingAddress == o.IsFollowingAddress) &&
                    (this.Reservation == null || this.Reservation == o.Reservation.ID) &&
                    (this.IsShipToDistributor == null || this.IsShipToDistributor == o.IsShipToDistributor) &&
                    (this.IsShipExistingDistributor == null || this.IsShipExistingDistributor == o.IsShipExistingDistributor) &&
                    (this.IsShipNewClient == null || this.IsShipNewClient == o.IsShipNewClient) &&
                    (this.IsDespatchDistributor == null || this.IsDespatchDistributor == o.IsDespatchDistributor) &&
                    (this.IsDespatchExistingDistributor == null || this.IsDespatchExistingDistributor == o.IsDespatchExistingDistributor) &&
                    (this.IsDespatchNewClient == null || this.IsDespatchNewClient == o.IsDespatchNewClient) &&
                    (this.DeliveryOption == null || this.DeliveryOption == o.DeliveryOption.ID) &&
                    (this.IsDateNegotiable == false || this.IsDateNegotiable == o.IsDateNegotiable) &&
                    (this.Notes == null || this.Notes == o.Notes) &&
                    (this.IsAcceptedTermsAndConditions == false || this.IsAcceptedTermsAndConditions == o.IsAcceptedTermsAndConditions) &&
                    (this.AddressType == null || this.AddressType == o.AddressType) &&
                    (this.MYOBCardFile == null || this.MYOBCardFile == o.MYOBCardFile.ID) &&
                    (this.DeliveryCharges == null || this.DeliveryCharges == o.DeliveryCharges) &&
                    (this.ArtWorkCharges == null || this.ArtWorkCharges == o.ArtWorkCharges) &&
                    (this.OtherCharges == null || this.OtherCharges == o.OtherCharges) &&
                    (this.OtherChargesDescription == null || this.OtherChargesDescription == o.OtherChargesDescription) &&
                    (this.IsOtherDelivery == null || this.IsOtherDelivery == o.IsOtherDelivery) &&
                    (this.OtherDeliveryDescription == null || this.OtherDeliveryDescription == o.OtherDeliveryDescription) &&
                    (this.BillingAddress == null || this.BillingAddress == o.BillingAddress.ID) &&
                    (this.DespatchToAddress == null || this.DespatchToAddress == o.DespatchToAddress.ID) &&
                    (this.IsGSTExcluded == false || this.IsGSTExcluded == o.IsGSTExcluded) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.OrderBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.OrderBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.OrderBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.OrderBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Order> oQuery =
                (from o in context.Order
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Date == DateTime.MinValue || o.Date == this.Date) &&
                    (this.Client == 0 || o.Client.ID == this.Client) &&
                    (this.Distributor == 0 || o.Distributor.ID == this.Distributor) &&
                    (this.OrderSubmittedDate == DateTime.MinValue || o.OrderSubmittedDate == this.OrderSubmittedDate) &&
                    (this.EstimatedCompletionDate == DateTime.MinValue || o.EstimatedCompletionDate == this.EstimatedCompletionDate) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.ModifiedDate == DateTime.MinValue || o.ModifiedDate == this.ModifiedDate) &&
                    (this.ShipmentDate == null || o.ShipmentDate == this.ShipmentDate) &&
                    (this.Status == 0 || o.Status.ID == this.Status) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.PaymentMethod == null || o.PaymentMethod.ID == this.PaymentMethod) &&
                    (this.OrderUsage == null || o.OrderUsage.Contains(this.OrderUsage)) &&
                    (this.PurchaseOrderNo == null || o.PurchaseOrderNo.Contains(this.PurchaseOrderNo)) &&
                    (this.Converted == null || o.Converted == this.Converted) &&
                    (this.OldPONo == null || o.OldPONo.Contains(this.OldPONo)) &&
                    (this.Invoice == null || o.Invoice.ID == this.Invoice) &&
                    (this.IsTemporary == false || o.IsTemporary == this.IsTemporary) &&
                    (this.ShipmentMode == null || o.ShipmentMode.ID == this.ShipmentMode) &&
                    (this.ShipTo == null || o.ShipTo.ID == this.ShipTo) &&
                    (this.DespatchTo == null || o.DespatchTo.ID == this.DespatchTo) &&
                    (this.IsWeeklyShipment == null || o.IsWeeklyShipment == this.IsWeeklyShipment) &&
                    (this.IsCourierDelivery == null || o.IsCourierDelivery == this.IsCourierDelivery) &&
                    (this.IsAdelaideWareHouse == null || o.IsAdelaideWareHouse == this.IsAdelaideWareHouse) &&
                    (this.IsMentionAddress == null || o.IsMentionAddress == this.IsMentionAddress) &&
                    (this.IsFollowingAddress == null || o.IsFollowingAddress == this.IsFollowingAddress) &&
                    (this.Reservation == null || o.Reservation.ID == this.Reservation) &&
                    (this.IsShipToDistributor == null || o.IsShipToDistributor == this.IsShipToDistributor) &&
                    (this.IsShipExistingDistributor == null || o.IsShipExistingDistributor == this.IsShipExistingDistributor) &&
                    (this.IsShipNewClient == null || o.IsShipNewClient == this.IsShipNewClient) &&
                    (this.IsDespatchDistributor == null || o.IsDespatchDistributor == this.IsDespatchDistributor) &&
                    (this.IsDespatchExistingDistributor == null || o.IsDespatchExistingDistributor == this.IsDespatchExistingDistributor) &&
                    (this.IsDespatchNewClient == null || o.IsDespatchNewClient == this.IsDespatchNewClient) &&
                    (this.DeliveryOption == null || o.DeliveryOption.ID == this.DeliveryOption) &&
                    (this.IsDateNegotiable == false || o.IsDateNegotiable == this.IsDateNegotiable) &&
                    (this.Notes == null || o.Notes.Contains(this.Notes)) &&
                    (this.IsAcceptedTermsAndConditions == false || o.IsAcceptedTermsAndConditions == this.IsAcceptedTermsAndConditions) &&
                    (this.AddressType == null || o.AddressType == this.AddressType) &&
                    (this.MYOBCardFile == null || o.MYOBCardFile.ID == this.MYOBCardFile) &&
                    (this.DeliveryCharges == null || o.DeliveryCharges == this.DeliveryCharges) &&
                    (this.ArtWorkCharges == null || o.ArtWorkCharges == this.ArtWorkCharges) &&
                    (this.OtherCharges == null || o.OtherCharges == this.OtherCharges) &&
                    (this.OtherChargesDescription == null || o.OtherChargesDescription.Contains(this.OtherChargesDescription)) &&
                    (this.IsOtherDelivery == null || o.IsOtherDelivery == this.IsOtherDelivery) &&
                    (this.OtherDeliveryDescription == null || o.OtherDeliveryDescription.Contains(this.OtherDeliveryDescription)) &&
                    (this.BillingAddress == null || o.BillingAddress.ID == this.BillingAddress) &&
                    (this.DespatchToAddress == null || o.DespatchToAddress.ID == this.DespatchToAddress) &&
                    (this.IsGSTExcluded == false || o.IsGSTExcluded == this.IsGSTExcluded) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.OrderBO> orders = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return orders;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Order
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Date == DateTime.MinValue || o.Date == this.Date) &&
                    (this.Client == 0 || o.Client.ID == this.Client) &&
                    (this.Distributor == 0 || o.Distributor.ID == this.Distributor) &&
                    (this.OrderSubmittedDate == DateTime.MinValue || o.OrderSubmittedDate == this.OrderSubmittedDate) &&
                    (this.EstimatedCompletionDate == DateTime.MinValue || o.EstimatedCompletionDate == this.EstimatedCompletionDate) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.ModifiedDate == DateTime.MinValue || o.ModifiedDate == this.ModifiedDate) &&
                    (this.ShipmentDate == null || o.ShipmentDate == this.ShipmentDate) &&
                    (this.Status == 0 || o.Status.ID == this.Status) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.PaymentMethod == null || o.PaymentMethod.ID == this.PaymentMethod) &&
                    (this.OrderUsage == null || o.OrderUsage.Contains(this.OrderUsage)) &&
                    (this.PurchaseOrderNo == null || o.PurchaseOrderNo.Contains(this.PurchaseOrderNo)) &&
                    (this.Converted == null || o.Converted == this.Converted) &&
                    (this.OldPONo == null || o.OldPONo.Contains(this.OldPONo)) &&
                    (this.Invoice == null || o.Invoice.ID == this.Invoice) &&
                    (this.IsTemporary == false || o.IsTemporary == this.IsTemporary) &&
                    (this.ShipmentMode == null || o.ShipmentMode.ID == this.ShipmentMode) &&
                    (this.ShipTo == null || o.ShipTo.ID == this.ShipTo) &&
                    (this.DespatchTo == null || o.DespatchTo.ID == this.DespatchTo) &&
                    (this.IsWeeklyShipment == null || o.IsWeeklyShipment == this.IsWeeklyShipment) &&
                    (this.IsCourierDelivery == null || o.IsCourierDelivery == this.IsCourierDelivery) &&
                    (this.IsAdelaideWareHouse == null || o.IsAdelaideWareHouse == this.IsAdelaideWareHouse) &&
                    (this.IsMentionAddress == null || o.IsMentionAddress == this.IsMentionAddress) &&
                    (this.IsFollowingAddress == null || o.IsFollowingAddress == this.IsFollowingAddress) &&
                    (this.Reservation == null || o.Reservation.ID == this.Reservation) &&
                    (this.IsShipToDistributor == null || o.IsShipToDistributor == this.IsShipToDistributor) &&
                    (this.IsShipExistingDistributor == null || o.IsShipExistingDistributor == this.IsShipExistingDistributor) &&
                    (this.IsShipNewClient == null || o.IsShipNewClient == this.IsShipNewClient) &&
                    (this.IsDespatchDistributor == null || o.IsDespatchDistributor == this.IsDespatchDistributor) &&
                    (this.IsDespatchExistingDistributor == null || o.IsDespatchExistingDistributor == this.IsDespatchExistingDistributor) &&
                    (this.IsDespatchNewClient == null || o.IsDespatchNewClient == this.IsDespatchNewClient) &&
                    (this.DeliveryOption == null || o.DeliveryOption.ID == this.DeliveryOption) &&
                    (this.IsDateNegotiable == false || o.IsDateNegotiable == this.IsDateNegotiable) &&
                    (this.Notes == null || o.Notes.Contains(this.Notes)) &&
                    (this.IsAcceptedTermsAndConditions == false || o.IsAcceptedTermsAndConditions == this.IsAcceptedTermsAndConditions) &&
                    (this.AddressType == null || o.AddressType == this.AddressType) &&
                    (this.MYOBCardFile == null || o.MYOBCardFile.ID == this.MYOBCardFile) &&
                    (this.DeliveryCharges == null || o.DeliveryCharges == this.DeliveryCharges) &&
                    (this.ArtWorkCharges == null || o.ArtWorkCharges == this.ArtWorkCharges) &&
                    (this.OtherCharges == null || o.OtherCharges == this.OtherCharges) &&
                    (this.OtherChargesDescription == null || o.OtherChargesDescription.Contains(this.OtherChargesDescription)) &&
                    (this.IsOtherDelivery == null || o.IsOtherDelivery == this.IsOtherDelivery) &&
                    (this.OtherDeliveryDescription == null || o.OtherDeliveryDescription.Contains(this.OtherDeliveryDescription)) &&
                    (this.BillingAddress == null || o.BillingAddress.ID == this.BillingAddress) &&
                    (this.DespatchToAddress == null || o.DespatchToAddress.ID == this.DespatchToAddress) &&
                    (this.IsGSTExcluded == false || o.IsGSTExcluded == this.IsGSTExcluded) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.OrderBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.OrderBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.OrderBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.OrderBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Order> oQuery =
                (from o in context.Order
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Date == DateTime.MinValue || this.Date == o.Date) && 
                    (this.Client == 0 || this.Client == o.Client.ID) && 
                    (this.Distributor == 0 || this.Distributor == o.Distributor.ID) && 
                    (this.OrderSubmittedDate == DateTime.MinValue || this.OrderSubmittedDate == o.OrderSubmittedDate) && 
                    (this.EstimatedCompletionDate == DateTime.MinValue || this.EstimatedCompletionDate == o.EstimatedCompletionDate) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) && 
                    (this.ShipmentDate == null || this.ShipmentDate == o.ShipmentDate) && 
                    (this.Status == 0 || this.Status == o.Status.ID) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.PaymentMethod == null || this.PaymentMethod == o.PaymentMethod.ID) && 
                    (this.Converted == null || this.Converted == o.Converted) && 
                    (this.Invoice == null || this.Invoice == o.Invoice.ID) && 
                    (this.IsTemporary == false || this.IsTemporary == o.IsTemporary) && 
                    (this.ShipmentMode == null || this.ShipmentMode == o.ShipmentMode.ID) && 
                    (this.ShipTo == null || this.ShipTo == o.ShipTo.ID) && 
                    (this.DespatchTo == null || this.DespatchTo == o.DespatchTo.ID) && 
                    (this.IsWeeklyShipment == null || this.IsWeeklyShipment == o.IsWeeklyShipment) && 
                    (this.IsCourierDelivery == null || this.IsCourierDelivery == o.IsCourierDelivery) && 
                    (this.IsAdelaideWareHouse == null || this.IsAdelaideWareHouse == o.IsAdelaideWareHouse) && 
                    (this.IsMentionAddress == null || this.IsMentionAddress == o.IsMentionAddress) && 
                    (this.IsFollowingAddress == null || this.IsFollowingAddress == o.IsFollowingAddress) && 
                    (this.Reservation == null || this.Reservation == o.Reservation.ID) && 
                    (this.IsShipToDistributor == null || this.IsShipToDistributor == o.IsShipToDistributor) && 
                    (this.IsShipExistingDistributor == null || this.IsShipExistingDistributor == o.IsShipExistingDistributor) && 
                    (this.IsShipNewClient == null || this.IsShipNewClient == o.IsShipNewClient) && 
                    (this.IsDespatchDistributor == null || this.IsDespatchDistributor == o.IsDespatchDistributor) && 
                    (this.IsDespatchExistingDistributor == null || this.IsDespatchExistingDistributor == o.IsDespatchExistingDistributor) && 
                    (this.IsDespatchNewClient == null || this.IsDespatchNewClient == o.IsDespatchNewClient) && 
                    (this.DeliveryOption == null || this.DeliveryOption == o.DeliveryOption.ID) && 
                    (this.IsDateNegotiable == false || this.IsDateNegotiable == o.IsDateNegotiable) && 
                    (this.IsAcceptedTermsAndConditions == false || this.IsAcceptedTermsAndConditions == o.IsAcceptedTermsAndConditions) && 
                    (this.AddressType == null || this.AddressType == o.AddressType) && 
                    (this.MYOBCardFile == null || this.MYOBCardFile == o.MYOBCardFile.ID) && 
                    (this.DeliveryCharges == null || this.DeliveryCharges == o.DeliveryCharges) && 
                    (this.ArtWorkCharges == null || this.ArtWorkCharges == o.ArtWorkCharges) && 
                    (this.OtherCharges == null || this.OtherCharges == o.OtherCharges) && 
                    (this.IsOtherDelivery == null || this.IsOtherDelivery == o.IsOtherDelivery) && 
                    (this.BillingAddress == null || this.BillingAddress == o.BillingAddress.ID) && 
                    (this.DespatchToAddress == null || this.DespatchToAddress == o.DespatchToAddress.ID) && 
                    (this.IsGSTExcluded == false || this.IsGSTExcluded == o.IsGSTExcluded) && 
                    ((o.OrderUsage.Contains(this.OrderUsage)) ||
                    (o.PurchaseOrderNo.Contains(this.PurchaseOrderNo)) ||
                    (o.OldPONo.Contains(this.OldPONo)) ||
                    (o.Notes.Contains(this.Notes)) ||
                    (o.OtherChargesDescription.Contains(this.OtherChargesDescription)) ||
                    (o.OtherDeliveryDescription.Contains(this.OtherDeliveryDescription)) ||
                    (this.OrderUsage == null && this.PurchaseOrderNo == null && this.OldPONo == null && this.Notes == null && this.OtherChargesDescription == null && this.OtherDeliveryDescription == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.OrderBO> orders = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return orders;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Order
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Date == DateTime.MinValue || this.Date == o.Date) && 
                    (this.Client == 0 || this.Client == o.Client.ID) && 
                    (this.Distributor == 0 || this.Distributor == o.Distributor.ID) && 
                    (this.OrderSubmittedDate == DateTime.MinValue || this.OrderSubmittedDate == o.OrderSubmittedDate) && 
                    (this.EstimatedCompletionDate == DateTime.MinValue || this.EstimatedCompletionDate == o.EstimatedCompletionDate) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) && 
                    (this.ShipmentDate == null || this.ShipmentDate == o.ShipmentDate) && 
                    (this.Status == 0 || this.Status == o.Status.ID) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.PaymentMethod == null || this.PaymentMethod == o.PaymentMethod.ID) && 
                    (this.Converted == null || this.Converted == o.Converted) && 
                    (this.Invoice == null || this.Invoice == o.Invoice.ID) && 
                    (this.IsTemporary == false || this.IsTemporary == o.IsTemporary) && 
                    (this.ShipmentMode == null || this.ShipmentMode == o.ShipmentMode.ID) && 
                    (this.ShipTo == null || this.ShipTo == o.ShipTo.ID) && 
                    (this.DespatchTo == null || this.DespatchTo == o.DespatchTo.ID) && 
                    (this.IsWeeklyShipment == null || this.IsWeeklyShipment == o.IsWeeklyShipment) && 
                    (this.IsCourierDelivery == null || this.IsCourierDelivery == o.IsCourierDelivery) && 
                    (this.IsAdelaideWareHouse == null || this.IsAdelaideWareHouse == o.IsAdelaideWareHouse) && 
                    (this.IsMentionAddress == null || this.IsMentionAddress == o.IsMentionAddress) && 
                    (this.IsFollowingAddress == null || this.IsFollowingAddress == o.IsFollowingAddress) && 
                    (this.Reservation == null || this.Reservation == o.Reservation.ID) && 
                    (this.IsShipToDistributor == null || this.IsShipToDistributor == o.IsShipToDistributor) && 
                    (this.IsShipExistingDistributor == null || this.IsShipExistingDistributor == o.IsShipExistingDistributor) && 
                    (this.IsShipNewClient == null || this.IsShipNewClient == o.IsShipNewClient) && 
                    (this.IsDespatchDistributor == null || this.IsDespatchDistributor == o.IsDespatchDistributor) && 
                    (this.IsDespatchExistingDistributor == null || this.IsDespatchExistingDistributor == o.IsDespatchExistingDistributor) && 
                    (this.IsDespatchNewClient == null || this.IsDespatchNewClient == o.IsDespatchNewClient) && 
                    (this.DeliveryOption == null || this.DeliveryOption == o.DeliveryOption.ID) && 
                    (this.IsDateNegotiable == false || this.IsDateNegotiable == o.IsDateNegotiable) && 
                    (this.IsAcceptedTermsAndConditions == false || this.IsAcceptedTermsAndConditions == o.IsAcceptedTermsAndConditions) && 
                    (this.AddressType == null || this.AddressType == o.AddressType) && 
                    (this.MYOBCardFile == null || this.MYOBCardFile == o.MYOBCardFile.ID) && 
                    (this.DeliveryCharges == null || this.DeliveryCharges == o.DeliveryCharges) && 
                    (this.ArtWorkCharges == null || this.ArtWorkCharges == o.ArtWorkCharges) && 
                    (this.OtherCharges == null || this.OtherCharges == o.OtherCharges) && 
                    (this.IsOtherDelivery == null || this.IsOtherDelivery == o.IsOtherDelivery) && 
                    (this.BillingAddress == null || this.BillingAddress == o.BillingAddress.ID) && 
                    (this.DespatchToAddress == null || this.DespatchToAddress == o.DespatchToAddress.ID) && 
                    (this.IsGSTExcluded == false || this.IsGSTExcluded == o.IsGSTExcluded) && 
                    ((o.OrderUsage.Contains(this.OrderUsage)) ||
                    (o.PurchaseOrderNo.Contains(this.PurchaseOrderNo)) ||
                    (o.OldPONo.Contains(this.OldPONo)) ||
                    (o.Notes.Contains(this.Notes)) ||
                    (o.OtherChargesDescription.Contains(this.OtherChargesDescription)) ||
                    (o.OtherDeliveryDescription.Contains(this.OtherDeliveryDescription)) ||
                    (this.OrderUsage == null && this.PurchaseOrderNo == null && this.OldPONo == null && this.Notes == null && this.OtherChargesDescription == null && this.OtherDeliveryDescription == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.OrderBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.OrderBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.OrderBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.OrderBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.OrderBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.OrderBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnOrderBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("OrderBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnOrderBOIDChanged();
        partial void OnOrderBOIDChanging(int value);
        
        partial void OnDateChanged()
        {
            OnOrderBODateChanged();
        }
        
        partial void OnDateChanging(DateTime value)
        {
            OnOrderBODateChanging(value);
        }
        partial void OnDateChanged();
        partial void OnDateChanging(DateTime value);
        partial void OnOrderBODateChanged();
        partial void OnOrderBODateChanging(DateTime value);
        
        partial void OnClientChanged()
        {
            OnOrderBOClientChanged();
        }
        
        partial void OnClientChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("OrderBO.Client must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderBOClientChanging(value);
        }
        partial void OnClientChanged();
        partial void OnClientChanging(int value);
        partial void OnOrderBOClientChanged();
        partial void OnOrderBOClientChanging(int value);
        
        partial void OnDistributorChanged()
        {
            OnOrderBODistributorChanged();
        }
        
        partial void OnDistributorChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("OrderBO.Distributor must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderBODistributorChanging(value);
        }
        partial void OnDistributorChanged();
        partial void OnDistributorChanging(int value);
        partial void OnOrderBODistributorChanged();
        partial void OnOrderBODistributorChanging(int value);
        
        partial void OnOrderSubmittedDateChanged()
        {
            OnOrderBOOrderSubmittedDateChanged();
        }
        
        partial void OnOrderSubmittedDateChanging(DateTime value)
        {
            OnOrderBOOrderSubmittedDateChanging(value);
        }
        partial void OnOrderSubmittedDateChanged();
        partial void OnOrderSubmittedDateChanging(DateTime value);
        partial void OnOrderBOOrderSubmittedDateChanged();
        partial void OnOrderBOOrderSubmittedDateChanging(DateTime value);
        
        partial void OnEstimatedCompletionDateChanged()
        {
            OnOrderBOEstimatedCompletionDateChanged();
        }
        
        partial void OnEstimatedCompletionDateChanging(DateTime value)
        {
            OnOrderBOEstimatedCompletionDateChanging(value);
        }
        partial void OnEstimatedCompletionDateChanged();
        partial void OnEstimatedCompletionDateChanging(DateTime value);
        partial void OnOrderBOEstimatedCompletionDateChanged();
        partial void OnOrderBOEstimatedCompletionDateChanging(DateTime value);
        
        partial void OnCreatedDateChanged()
        {
            OnOrderBOCreatedDateChanged();
        }
        
        partial void OnCreatedDateChanging(DateTime value)
        {
            OnOrderBOCreatedDateChanging(value);
        }
        partial void OnCreatedDateChanged();
        partial void OnCreatedDateChanging(DateTime value);
        partial void OnOrderBOCreatedDateChanged();
        partial void OnOrderBOCreatedDateChanging(DateTime value);
        
        partial void OnModifiedDateChanged()
        {
            OnOrderBOModifiedDateChanged();
        }
        
        partial void OnModifiedDateChanging(DateTime value)
        {
            OnOrderBOModifiedDateChanging(value);
        }
        partial void OnModifiedDateChanged();
        partial void OnModifiedDateChanging(DateTime value);
        partial void OnOrderBOModifiedDateChanged();
        partial void OnOrderBOModifiedDateChanging(DateTime value);
        
        partial void OnShipmentDateChanged()
        {
            OnOrderBOShipmentDateChanged();
        }
        
        partial void OnShipmentDateChanging(DateTime? value)
        {
            OnOrderBOShipmentDateChanging(value);
        }
        partial void OnShipmentDateChanged();
        partial void OnShipmentDateChanging(DateTime? value);
        partial void OnOrderBOShipmentDateChanged();
        partial void OnOrderBOShipmentDateChanging(DateTime? value);
        
        partial void OnStatusChanged()
        {
            OnOrderBOStatusChanged();
        }
        
        partial void OnStatusChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("OrderBO.Status must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderBOStatusChanging(value);
        }
        partial void OnStatusChanged();
        partial void OnStatusChanging(int value);
        partial void OnOrderBOStatusChanged();
        partial void OnOrderBOStatusChanging(int value);
        
        partial void OnCreatorChanged()
        {
            OnOrderBOCreatorChanged();
        }
        
        partial void OnCreatorChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("OrderBO.Creator must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderBOCreatorChanging(value);
        }
        partial void OnCreatorChanged();
        partial void OnCreatorChanging(int value);
        partial void OnOrderBOCreatorChanged();
        partial void OnOrderBOCreatorChanging(int value);
        
        partial void OnModifierChanged()
        {
            OnOrderBOModifierChanged();
        }
        
        partial void OnModifierChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("OrderBO.Modifier must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderBOModifierChanging(value);
        }
        partial void OnModifierChanged();
        partial void OnModifierChanging(int value);
        partial void OnOrderBOModifierChanged();
        partial void OnOrderBOModifierChanging(int value);
        
        partial void OnPaymentMethodChanged()
        {
            OnOrderBOPaymentMethodChanged();
        }
        
        partial void OnPaymentMethodChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("OrderBO.PaymentMethod must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderBOPaymentMethodChanging(value);
        }
        partial void OnPaymentMethodChanged();
        partial void OnPaymentMethodChanging(int? value);
        partial void OnOrderBOPaymentMethodChanged();
        partial void OnOrderBOPaymentMethodChanging(int? value);
        
        partial void OnOrderUsageChanged()
        {
            OnOrderBOOrderUsageChanged();
        }
        
        partial void OnOrderUsageChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("OrderBO.OrderUsage has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnOrderBOOrderUsageChanging(value);
        }
        partial void OnOrderUsageChanged();
        partial void OnOrderUsageChanging(string value);
        partial void OnOrderBOOrderUsageChanged();
        partial void OnOrderBOOrderUsageChanging(string value);
        
        partial void OnPurchaseOrderNoChanged()
        {
            OnOrderBOPurchaseOrderNoChanged();
        }
        
        partial void OnPurchaseOrderNoChanging(string value)
        {
            if (value != null && value.Length > 50)
            {
                throw new Exception(String.Format("OrderBO.PurchaseOrderNo has a maximum length of 50. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnOrderBOPurchaseOrderNoChanging(value);
        }
        partial void OnPurchaseOrderNoChanged();
        partial void OnPurchaseOrderNoChanging(string value);
        partial void OnOrderBOPurchaseOrderNoChanged();
        partial void OnOrderBOPurchaseOrderNoChanging(string value);
        
        partial void OnConvertedChanged()
        {
            OnOrderBOConvertedChanged();
        }
        
        partial void OnConvertedChanging(bool? value)
        {
            OnOrderBOConvertedChanging(value);
        }
        partial void OnConvertedChanged();
        partial void OnConvertedChanging(bool? value);
        partial void OnOrderBOConvertedChanged();
        partial void OnOrderBOConvertedChanging(bool? value);
        
        partial void OnOldPONoChanged()
        {
            OnOrderBOOldPONoChanged();
        }
        
        partial void OnOldPONoChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("OrderBO.OldPONo has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnOrderBOOldPONoChanging(value);
        }
        partial void OnOldPONoChanged();
        partial void OnOldPONoChanging(string value);
        partial void OnOrderBOOldPONoChanged();
        partial void OnOrderBOOldPONoChanging(string value);
        
        partial void OnInvoiceChanged()
        {
            OnOrderBOInvoiceChanged();
        }
        
        partial void OnInvoiceChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("OrderBO.Invoice must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderBOInvoiceChanging(value);
        }
        partial void OnInvoiceChanged();
        partial void OnInvoiceChanging(int? value);
        partial void OnOrderBOInvoiceChanged();
        partial void OnOrderBOInvoiceChanging(int? value);
        
        partial void OnIsTemporaryChanged()
        {
            OnOrderBOIsTemporaryChanged();
        }
        
        partial void OnIsTemporaryChanging(bool value)
        {
            OnOrderBOIsTemporaryChanging(value);
        }
        partial void OnIsTemporaryChanged();
        partial void OnIsTemporaryChanging(bool value);
        partial void OnOrderBOIsTemporaryChanged();
        partial void OnOrderBOIsTemporaryChanging(bool value);
        
        partial void OnShipmentModeChanged()
        {
            OnOrderBOShipmentModeChanged();
        }
        
        partial void OnShipmentModeChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("OrderBO.ShipmentMode must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderBOShipmentModeChanging(value);
        }
        partial void OnShipmentModeChanged();
        partial void OnShipmentModeChanging(int? value);
        partial void OnOrderBOShipmentModeChanged();
        partial void OnOrderBOShipmentModeChanging(int? value);
        
        partial void OnShipToChanged()
        {
            OnOrderBOShipToChanged();
        }
        
        partial void OnShipToChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("OrderBO.ShipTo must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderBOShipToChanging(value);
        }
        partial void OnShipToChanged();
        partial void OnShipToChanging(int? value);
        partial void OnOrderBOShipToChanged();
        partial void OnOrderBOShipToChanging(int? value);
        
        partial void OnDespatchToChanged()
        {
            OnOrderBODespatchToChanged();
        }
        
        partial void OnDespatchToChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("OrderBO.DespatchTo must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderBODespatchToChanging(value);
        }
        partial void OnDespatchToChanged();
        partial void OnDespatchToChanging(int? value);
        partial void OnOrderBODespatchToChanged();
        partial void OnOrderBODespatchToChanging(int? value);
        
        partial void OnIsWeeklyShipmentChanged()
        {
            OnOrderBOIsWeeklyShipmentChanged();
        }
        
        partial void OnIsWeeklyShipmentChanging(bool? value)
        {
            OnOrderBOIsWeeklyShipmentChanging(value);
        }
        partial void OnIsWeeklyShipmentChanged();
        partial void OnIsWeeklyShipmentChanging(bool? value);
        partial void OnOrderBOIsWeeklyShipmentChanged();
        partial void OnOrderBOIsWeeklyShipmentChanging(bool? value);
        
        partial void OnIsCourierDeliveryChanged()
        {
            OnOrderBOIsCourierDeliveryChanged();
        }
        
        partial void OnIsCourierDeliveryChanging(bool? value)
        {
            OnOrderBOIsCourierDeliveryChanging(value);
        }
        partial void OnIsCourierDeliveryChanged();
        partial void OnIsCourierDeliveryChanging(bool? value);
        partial void OnOrderBOIsCourierDeliveryChanged();
        partial void OnOrderBOIsCourierDeliveryChanging(bool? value);
        
        partial void OnIsAdelaideWareHouseChanged()
        {
            OnOrderBOIsAdelaideWareHouseChanged();
        }
        
        partial void OnIsAdelaideWareHouseChanging(bool? value)
        {
            OnOrderBOIsAdelaideWareHouseChanging(value);
        }
        partial void OnIsAdelaideWareHouseChanged();
        partial void OnIsAdelaideWareHouseChanging(bool? value);
        partial void OnOrderBOIsAdelaideWareHouseChanged();
        partial void OnOrderBOIsAdelaideWareHouseChanging(bool? value);
        
        partial void OnIsMentionAddressChanged()
        {
            OnOrderBOIsMentionAddressChanged();
        }
        
        partial void OnIsMentionAddressChanging(bool? value)
        {
            OnOrderBOIsMentionAddressChanging(value);
        }
        partial void OnIsMentionAddressChanged();
        partial void OnIsMentionAddressChanging(bool? value);
        partial void OnOrderBOIsMentionAddressChanged();
        partial void OnOrderBOIsMentionAddressChanging(bool? value);
        
        partial void OnIsFollowingAddressChanged()
        {
            OnOrderBOIsFollowingAddressChanged();
        }
        
        partial void OnIsFollowingAddressChanging(bool? value)
        {
            OnOrderBOIsFollowingAddressChanging(value);
        }
        partial void OnIsFollowingAddressChanged();
        partial void OnIsFollowingAddressChanging(bool? value);
        partial void OnOrderBOIsFollowingAddressChanged();
        partial void OnOrderBOIsFollowingAddressChanging(bool? value);
        
        partial void OnReservationChanged()
        {
            OnOrderBOReservationChanged();
        }
        
        partial void OnReservationChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("OrderBO.Reservation must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderBOReservationChanging(value);
        }
        partial void OnReservationChanged();
        partial void OnReservationChanging(int? value);
        partial void OnOrderBOReservationChanged();
        partial void OnOrderBOReservationChanging(int? value);
        
        partial void OnIsShipToDistributorChanged()
        {
            OnOrderBOIsShipToDistributorChanged();
        }
        
        partial void OnIsShipToDistributorChanging(bool? value)
        {
            OnOrderBOIsShipToDistributorChanging(value);
        }
        partial void OnIsShipToDistributorChanged();
        partial void OnIsShipToDistributorChanging(bool? value);
        partial void OnOrderBOIsShipToDistributorChanged();
        partial void OnOrderBOIsShipToDistributorChanging(bool? value);
        
        partial void OnIsShipExistingDistributorChanged()
        {
            OnOrderBOIsShipExistingDistributorChanged();
        }
        
        partial void OnIsShipExistingDistributorChanging(bool? value)
        {
            OnOrderBOIsShipExistingDistributorChanging(value);
        }
        partial void OnIsShipExistingDistributorChanged();
        partial void OnIsShipExistingDistributorChanging(bool? value);
        partial void OnOrderBOIsShipExistingDistributorChanged();
        partial void OnOrderBOIsShipExistingDistributorChanging(bool? value);
        
        partial void OnIsShipNewClientChanged()
        {
            OnOrderBOIsShipNewClientChanged();
        }
        
        partial void OnIsShipNewClientChanging(bool? value)
        {
            OnOrderBOIsShipNewClientChanging(value);
        }
        partial void OnIsShipNewClientChanged();
        partial void OnIsShipNewClientChanging(bool? value);
        partial void OnOrderBOIsShipNewClientChanged();
        partial void OnOrderBOIsShipNewClientChanging(bool? value);
        
        partial void OnIsDespatchDistributorChanged()
        {
            OnOrderBOIsDespatchDistributorChanged();
        }
        
        partial void OnIsDespatchDistributorChanging(bool? value)
        {
            OnOrderBOIsDespatchDistributorChanging(value);
        }
        partial void OnIsDespatchDistributorChanged();
        partial void OnIsDespatchDistributorChanging(bool? value);
        partial void OnOrderBOIsDespatchDistributorChanged();
        partial void OnOrderBOIsDespatchDistributorChanging(bool? value);
        
        partial void OnIsDespatchExistingDistributorChanged()
        {
            OnOrderBOIsDespatchExistingDistributorChanged();
        }
        
        partial void OnIsDespatchExistingDistributorChanging(bool? value)
        {
            OnOrderBOIsDespatchExistingDistributorChanging(value);
        }
        partial void OnIsDespatchExistingDistributorChanged();
        partial void OnIsDespatchExistingDistributorChanging(bool? value);
        partial void OnOrderBOIsDespatchExistingDistributorChanged();
        partial void OnOrderBOIsDespatchExistingDistributorChanging(bool? value);
        
        partial void OnIsDespatchNewClientChanged()
        {
            OnOrderBOIsDespatchNewClientChanged();
        }
        
        partial void OnIsDespatchNewClientChanging(bool? value)
        {
            OnOrderBOIsDespatchNewClientChanging(value);
        }
        partial void OnIsDespatchNewClientChanged();
        partial void OnIsDespatchNewClientChanging(bool? value);
        partial void OnOrderBOIsDespatchNewClientChanged();
        partial void OnOrderBOIsDespatchNewClientChanging(bool? value);
        
        partial void OnDeliveryOptionChanged()
        {
            OnOrderBODeliveryOptionChanged();
        }
        
        partial void OnDeliveryOptionChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("OrderBO.DeliveryOption must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderBODeliveryOptionChanging(value);
        }
        partial void OnDeliveryOptionChanged();
        partial void OnDeliveryOptionChanging(int? value);
        partial void OnOrderBODeliveryOptionChanged();
        partial void OnOrderBODeliveryOptionChanging(int? value);
        
        partial void OnIsDateNegotiableChanged()
        {
            OnOrderBOIsDateNegotiableChanged();
        }
        
        partial void OnIsDateNegotiableChanging(bool value)
        {
            OnOrderBOIsDateNegotiableChanging(value);
        }
        partial void OnIsDateNegotiableChanged();
        partial void OnIsDateNegotiableChanging(bool value);
        partial void OnOrderBOIsDateNegotiableChanged();
        partial void OnOrderBOIsDateNegotiableChanging(bool value);
        
        partial void OnNotesChanged()
        {
            OnOrderBONotesChanged();
        }
        
        partial void OnNotesChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("OrderBO.Notes has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnOrderBONotesChanging(value);
        }
        partial void OnNotesChanged();
        partial void OnNotesChanging(string value);
        partial void OnOrderBONotesChanged();
        partial void OnOrderBONotesChanging(string value);
        
        partial void OnIsAcceptedTermsAndConditionsChanged()
        {
            OnOrderBOIsAcceptedTermsAndConditionsChanged();
        }
        
        partial void OnIsAcceptedTermsAndConditionsChanging(bool value)
        {
            OnOrderBOIsAcceptedTermsAndConditionsChanging(value);
        }
        partial void OnIsAcceptedTermsAndConditionsChanged();
        partial void OnIsAcceptedTermsAndConditionsChanging(bool value);
        partial void OnOrderBOIsAcceptedTermsAndConditionsChanged();
        partial void OnOrderBOIsAcceptedTermsAndConditionsChanging(bool value);
        
        partial void OnAddressTypeChanged()
        {
            OnOrderBOAddressTypeChanged();
        }
        
        partial void OnAddressTypeChanging(int? value)
        {
            OnOrderBOAddressTypeChanging(value);
        }
        partial void OnAddressTypeChanged();
        partial void OnAddressTypeChanging(int? value);
        partial void OnOrderBOAddressTypeChanged();
        partial void OnOrderBOAddressTypeChanging(int? value);
        
        partial void OnMYOBCardFileChanged()
        {
            OnOrderBOMYOBCardFileChanged();
        }
        
        partial void OnMYOBCardFileChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("OrderBO.MYOBCardFile must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderBOMYOBCardFileChanging(value);
        }
        partial void OnMYOBCardFileChanged();
        partial void OnMYOBCardFileChanging(int? value);
        partial void OnOrderBOMYOBCardFileChanged();
        partial void OnOrderBOMYOBCardFileChanging(int? value);
        
        partial void OnDeliveryChargesChanged()
        {
            OnOrderBODeliveryChargesChanged();
        }
        
        partial void OnDeliveryChargesChanging(decimal? value)
        {
            OnOrderBODeliveryChargesChanging(value);
        }
        partial void OnDeliveryChargesChanged();
        partial void OnDeliveryChargesChanging(decimal? value);
        partial void OnOrderBODeliveryChargesChanged();
        partial void OnOrderBODeliveryChargesChanging(decimal? value);
        
        partial void OnArtWorkChargesChanged()
        {
            OnOrderBOArtWorkChargesChanged();
        }
        
        partial void OnArtWorkChargesChanging(decimal? value)
        {
            OnOrderBOArtWorkChargesChanging(value);
        }
        partial void OnArtWorkChargesChanged();
        partial void OnArtWorkChargesChanging(decimal? value);
        partial void OnOrderBOArtWorkChargesChanged();
        partial void OnOrderBOArtWorkChargesChanging(decimal? value);
        
        partial void OnOtherChargesChanged()
        {
            OnOrderBOOtherChargesChanged();
        }
        
        partial void OnOtherChargesChanging(decimal? value)
        {
            OnOrderBOOtherChargesChanging(value);
        }
        partial void OnOtherChargesChanged();
        partial void OnOtherChargesChanging(decimal? value);
        partial void OnOrderBOOtherChargesChanged();
        partial void OnOrderBOOtherChargesChanging(decimal? value);
        
        partial void OnOtherChargesDescriptionChanged()
        {
            OnOrderBOOtherChargesDescriptionChanged();
        }
        
        partial void OnOtherChargesDescriptionChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("OrderBO.OtherChargesDescription has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnOrderBOOtherChargesDescriptionChanging(value);
        }
        partial void OnOtherChargesDescriptionChanged();
        partial void OnOtherChargesDescriptionChanging(string value);
        partial void OnOrderBOOtherChargesDescriptionChanged();
        partial void OnOrderBOOtherChargesDescriptionChanging(string value);
        
        partial void OnIsOtherDeliveryChanged()
        {
            OnOrderBOIsOtherDeliveryChanged();
        }
        
        partial void OnIsOtherDeliveryChanging(bool? value)
        {
            OnOrderBOIsOtherDeliveryChanging(value);
        }
        partial void OnIsOtherDeliveryChanged();
        partial void OnIsOtherDeliveryChanging(bool? value);
        partial void OnOrderBOIsOtherDeliveryChanged();
        partial void OnOrderBOIsOtherDeliveryChanging(bool? value);
        
        partial void OnOtherDeliveryDescriptionChanged()
        {
            OnOrderBOOtherDeliveryDescriptionChanged();
        }
        
        partial void OnOtherDeliveryDescriptionChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("OrderBO.OtherDeliveryDescription has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnOrderBOOtherDeliveryDescriptionChanging(value);
        }
        partial void OnOtherDeliveryDescriptionChanged();
        partial void OnOtherDeliveryDescriptionChanging(string value);
        partial void OnOrderBOOtherDeliveryDescriptionChanged();
        partial void OnOrderBOOtherDeliveryDescriptionChanging(string value);
        
        partial void OnBillingAddressChanged()
        {
            OnOrderBOBillingAddressChanged();
        }
        
        partial void OnBillingAddressChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("OrderBO.BillingAddress must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderBOBillingAddressChanging(value);
        }
        partial void OnBillingAddressChanged();
        partial void OnBillingAddressChanging(int? value);
        partial void OnOrderBOBillingAddressChanged();
        partial void OnOrderBOBillingAddressChanging(int? value);
        
        partial void OnDespatchToAddressChanged()
        {
            OnOrderBODespatchToAddressChanged();
        }
        
        partial void OnDespatchToAddressChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("OrderBO.DespatchToAddress must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnOrderBODespatchToAddressChanging(value);
        }
        partial void OnDespatchToAddressChanged();
        partial void OnDespatchToAddressChanging(int? value);
        partial void OnOrderBODespatchToAddressChanged();
        partial void OnOrderBODespatchToAddressChanging(int? value);
        
        partial void OnIsGSTExcludedChanged()
        {
            OnOrderBOIsGSTExcludedChanged();
        }
        
        partial void OnIsGSTExcludedChanging(bool value)
        {
            OnOrderBOIsGSTExcludedChanging(value);
        }
        partial void OnIsGSTExcludedChanged();
        partial void OnIsGSTExcludedChanging(bool value);
        partial void OnOrderBOIsGSTExcludedChanged();
        partial void OnOrderBOIsGSTExcludedChanging(bool value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.OrderBO))
                return 1;
            Indico.BusinessObjects.OrderBOComparer c = new Indico.BusinessObjects.OrderBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.OrderBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.Order)sender);
            }
        }
        
        void OrderDetailsWhereThisIsOrderList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.OrderDetail obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrderDetailsWhereThisIsOrder.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrderDetailsWhereThisIsOrder.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrderDetailsWhereThisIsOrderList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.OrderDetail obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrderDetailsWhereThisIsOrder.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrderDetailsWhereThisIsOrder.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
            this._orderDetailsWhereThisIsOrderLoaded = false;
            if (this.orderDetailsWhereThisIsOrderList != null)
            {
                this.orderDetailsWhereThisIsOrderList.OnBeforeRemove -= new EventHandler(OrderDetailsWhereThisIsOrderList_OnBeforeRemove);
                this.orderDetailsWhereThisIsOrderList.OnAfterAdd -= new EventHandler(OrderDetailsWhereThisIsOrderList_OnAfterAdd);
            }
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region OrderBOComparer
    public class OrderBOComparer : IComparer<Indico.BusinessObjects.OrderBO>
    {
        private string propertyToCompareName;
        public OrderBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.OrderBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.OrderBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public OrderBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.OrderBO> Members
        public int Compare(Indico.BusinessObjects.OrderBO x, Indico.BusinessObjects.OrderBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.OrderBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.OrderBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.OrderBO x, Indico.BusinessObjects.OrderBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
