// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class CostSheetBO : BusinessObject, IComparable
    {
        #region fields
        #region Scalar Fields
        private int id;
        private decimal? _actMgn;
        private decimal? _airFregiht;
        private decimal? _calculateCM;
        private decimal? _calMGN;
        private string _cF1;
        private string _cF2;
        private string _cF3;
        private decimal _cM;
        private decimal? _cONS1;
        private decimal? _cONS2;
        private decimal? _cONS3;
        private decimal? _cost1;
        private decimal? _cost2;
        private decimal? _cost3;
        private DateTime _createdDate = DateTime.MinValue;
        private int _creator;
        private decimal? _depr;
        private decimal? _duty;
        private decimal? _dutyRate;
        private decimal? _exchangeRate;
        private int _fabric;
        private decimal _finance;
        private decimal? _fOBAUD;
        private decimal _fOBExp;
        private decimal? _fobFactor;
        private decimal _hPCost;
        private decimal? _impCharges;
        private decimal? _indicoOH;
        private decimal? _indimanCIF;
        private decimal? _indimanFOB;
        private DateTime? _indimanModifiedDate;
        private int? _indimanModifier;
        private decimal? _inkCons;
        private decimal? _inkCost;
        private decimal? _inkRate;
        private decimal _jKFOBCost;
        private decimal _labelCost;
        private decimal? _landed;
        private decimal? _marginRate;
        private decimal? _mGTOH;
        private DateTime? _modifiedDate;
        private int? _modifier;
        private decimal? _mP;
        private decimal? _other;
        private decimal? _paperCons;
        private decimal? _paperCost;
        private decimal? _paperRate;
        private int _pattern;
        private decimal? _quotedCIF;
        private decimal? _quotedFOBCost;
        private decimal? _quotedMP;
        private decimal? _rate1;
        private decimal? _rate2;
        private decimal? _rate3;
        private decimal? _roundup;
        private bool _showToIndico;
        private decimal? _sMVRate;
        private decimal? _subCons;
        private decimal? _subFinance;
        private decimal? _subWastage;
        private decimal? _totalAccessoriesCost;
        private decimal? _totalFabricCost;
        private decimal _wastage;
        #endregion
        
        #region Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objCreator;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.FabricCodeBO _objFabric;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objIndimanModifier;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objModifier;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.PatternBO _objPattern;
        #endregion
        
        #region Foreign Table Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.CostSheetRemarksBO> costSheetRemarkssWhereThisIsCostSheetList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _costSheetRemarkssWhereThisIsCostSheetLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.IndimanCostSheetRemarksBO> indimanCostSheetRemarkssWhereThisIsCostSheetList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _indimanCostSheetRemarkssWhereThisIsCostSheetLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO> patternSupportAccessorysWhereThisIsCostSheetList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _patternSupportAccessorysWhereThisIsCostSheetLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.PatternSupportFabricBO> patternSupportFabricsWhereThisIsCostSheetList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _patternSupportFabricsWhereThisIsCostSheetLoaded;
        #endregion
        
        #region Other fields
        
        private Indico.DAL.CostSheet _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>.</summary>
        public decimal? ActMgn
        {   
            get {return _actMgn;}
            set 
            {
                OnActMgnChanging(value);
                _actMgn = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ActMgn = value;
                }
                OnActMgnChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? AirFregiht
        {   
            get {return _airFregiht;}
            set 
            {
                OnAirFregihtChanging(value);
                _airFregiht = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.AirFregiht = value;
                }
                OnAirFregihtChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? CalculateCM
        {   
            get {return _calculateCM;}
            set 
            {
                OnCalculateCMChanging(value);
                _calculateCM = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CalculateCM = value;
                }
                OnCalculateCMChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? CalMGN
        {   
            get {return _calMGN;}
            set 
            {
                OnCalMGNChanging(value);
                _calMGN = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CalMGN = value;
                }
                OnCalMGNChanged();
            }
        }
        /// <summary>. The maximum length of this property is 150.</summary>
        public string CF1
        {   
            get {return _cF1;}
            set 
            {
                OnCF1Changing(value);
                _cF1 = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CF1 = value;
                }
                OnCF1Changed();
            }
        }
        /// <summary>. The maximum length of this property is 150.</summary>
        public string CF2
        {   
            get {return _cF2;}
            set 
            {
                OnCF2Changing(value);
                _cF2 = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CF2 = value;
                }
                OnCF2Changed();
            }
        }
        /// <summary>. The maximum length of this property is 150.</summary>
        public string CF3
        {   
            get {return _cF3;}
            set 
            {
                OnCF3Changing(value);
                _cF3 = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CF3 = value;
                }
                OnCF3Changed();
            }
        }
        /// <summary>.</summary>
        public decimal CM
        {   
            get {return _cM;}
            set 
            {
                OnCMChanging(value);
                _cM = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CM = value;
                }
                OnCMChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? CONS1
        {   
            get {return _cONS1;}
            set 
            {
                OnCONS1Changing(value);
                _cONS1 = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CONS1 = value;
                }
                OnCONS1Changed();
            }
        }
        /// <summary>.</summary>
        public decimal? CONS2
        {   
            get {return _cONS2;}
            set 
            {
                OnCONS2Changing(value);
                _cONS2 = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CONS2 = value;
                }
                OnCONS2Changed();
            }
        }
        /// <summary>.</summary>
        public decimal? CONS3
        {   
            get {return _cONS3;}
            set 
            {
                OnCONS3Changing(value);
                _cONS3 = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CONS3 = value;
                }
                OnCONS3Changed();
            }
        }
        /// <summary>.</summary>
        public decimal? Cost1
        {   
            get {return _cost1;}
            set 
            {
                OnCost1Changing(value);
                _cost1 = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Cost1 = value;
                }
                OnCost1Changed();
            }
        }
        /// <summary>.</summary>
        public decimal? Cost2
        {   
            get {return _cost2;}
            set 
            {
                OnCost2Changing(value);
                _cost2 = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Cost2 = value;
                }
                OnCost2Changed();
            }
        }
        /// <summary>.</summary>
        public decimal? Cost3
        {   
            get {return _cost3;}
            set 
            {
                OnCost3Changing(value);
                _cost3 = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Cost3 = value;
                }
                OnCost3Changed();
            }
        }
        /// <summary>.</summary>
        public DateTime CreatedDate
        {   
            get {return _createdDate;}
            set 
            {
                OnCreatedDateChanging(value);
                _createdDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CreatedDate = value;
                }
                OnCreatedDateChanged();
            }
        }
        /// <summary>.</summary>
        public int Creator
        {   
            get {return _creator;}
            set 
            {
                OnCreatorChanging(value);
                _creator = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Creator = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Creator = null;
                OnCreatorChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? Depr
        {   
            get {return _depr;}
            set 
            {
                OnDeprChanging(value);
                _depr = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Depr = value;
                }
                OnDeprChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? Duty
        {   
            get {return _duty;}
            set 
            {
                OnDutyChanging(value);
                _duty = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Duty = value;
                }
                OnDutyChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? DutyRate
        {   
            get {return _dutyRate;}
            set 
            {
                OnDutyRateChanging(value);
                _dutyRate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.DutyRate = value;
                }
                OnDutyRateChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? ExchangeRate
        {   
            get {return _exchangeRate;}
            set 
            {
                OnExchangeRateChanging(value);
                _exchangeRate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ExchangeRate = value;
                }
                OnExchangeRateChanged();
            }
        }
        /// <summary>.</summary>
        public int Fabric
        {   
            get {return _fabric;}
            set 
            {
                OnFabricChanging(value);
                _fabric = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Fabric = (from o in this._context.Context.FabricCode
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.FabricCode>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Fabric = null;
                OnFabricChanged();
            }
        }
        /// <summary>.</summary>
        public decimal Finance
        {   
            get {return _finance;}
            set 
            {
                OnFinanceChanging(value);
                _finance = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Finance = value;
                }
                OnFinanceChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? FOBAUD
        {   
            get {return _fOBAUD;}
            set 
            {
                OnFOBAUDChanging(value);
                _fOBAUD = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.FOBAUD = value;
                }
                OnFOBAUDChanged();
            }
        }
        /// <summary>.</summary>
        public decimal FOBExp
        {   
            get {return _fOBExp;}
            set 
            {
                OnFOBExpChanging(value);
                _fOBExp = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.FOBExp = value;
                }
                OnFOBExpChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? FobFactor
        {   
            get {return _fobFactor;}
            set 
            {
                OnFobFactorChanging(value);
                _fobFactor = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.FobFactor = value;
                }
                OnFobFactorChanged();
            }
        }
        /// <summary>.</summary>
        public decimal HPCost
        {   
            get {return _hPCost;}
            set 
            {
                OnHPCostChanging(value);
                _hPCost = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.HPCost = value;
                }
                OnHPCostChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? ImpCharges
        {   
            get {return _impCharges;}
            set 
            {
                OnImpChargesChanging(value);
                _impCharges = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ImpCharges = value;
                }
                OnImpChargesChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? IndicoOH
        {   
            get {return _indicoOH;}
            set 
            {
                OnIndicoOHChanging(value);
                _indicoOH = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IndicoOH = value;
                }
                OnIndicoOHChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? IndimanCIF
        {   
            get {return _indimanCIF;}
            set 
            {
                OnIndimanCIFChanging(value);
                _indimanCIF = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IndimanCIF = value;
                }
                OnIndimanCIFChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? IndimanFOB
        {   
            get {return _indimanFOB;}
            set 
            {
                OnIndimanFOBChanging(value);
                _indimanFOB = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IndimanFOB = value;
                }
                OnIndimanFOBChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime? IndimanModifiedDate
        {   
            get {return _indimanModifiedDate;}
            set 
            {
                OnIndimanModifiedDateChanging(value);
                _indimanModifiedDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IndimanModifiedDate = value;
                }
                OnIndimanModifiedDateChanged();
            }
        }
        /// <summary>.</summary>
        public int? IndimanModifier
        {   
            get {return _indimanModifier;}
            set 
            {
                OnIndimanModifierChanging(value);
                _indimanModifier = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.IndimanModifier = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.IndimanModifier = null;
                OnIndimanModifierChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? InkCons
        {   
            get {return _inkCons;}
            set 
            {
                OnInkConsChanging(value);
                _inkCons = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.InkCons = value;
                }
                OnInkConsChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? InkCost
        {   
            get {return _inkCost;}
            set 
            {
                OnInkCostChanging(value);
                _inkCost = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.InkCost = value;
                }
                OnInkCostChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? InkRate
        {   
            get {return _inkRate;}
            set 
            {
                OnInkRateChanging(value);
                _inkRate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.InkRate = value;
                }
                OnInkRateChanged();
            }
        }
        /// <summary>.</summary>
        public decimal JKFOBCost
        {   
            get {return _jKFOBCost;}
            set 
            {
                OnJKFOBCostChanging(value);
                _jKFOBCost = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.JKFOBCost = value;
                }
                OnJKFOBCostChanged();
            }
        }
        /// <summary>.</summary>
        public decimal LabelCost
        {   
            get {return _labelCost;}
            set 
            {
                OnLabelCostChanging(value);
                _labelCost = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.LabelCost = value;
                }
                OnLabelCostChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? Landed
        {   
            get {return _landed;}
            set 
            {
                OnLandedChanging(value);
                _landed = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Landed = value;
                }
                OnLandedChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? MarginRate
        {   
            get {return _marginRate;}
            set 
            {
                OnMarginRateChanging(value);
                _marginRate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.MarginRate = value;
                }
                OnMarginRateChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? MGTOH
        {   
            get {return _mGTOH;}
            set 
            {
                OnMGTOHChanging(value);
                _mGTOH = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.MGTOH = value;
                }
                OnMGTOHChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime? ModifiedDate
        {   
            get {return _modifiedDate;}
            set 
            {
                OnModifiedDateChanging(value);
                _modifiedDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ModifiedDate = value;
                }
                OnModifiedDateChanged();
            }
        }
        /// <summary>.</summary>
        public int? Modifier
        {   
            get {return _modifier;}
            set 
            {
                OnModifierChanging(value);
                _modifier = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.Modifier = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Modifier = null;
                OnModifierChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? MP
        {   
            get {return _mP;}
            set 
            {
                OnMPChanging(value);
                _mP = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.MP = value;
                }
                OnMPChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? Other
        {   
            get {return _other;}
            set 
            {
                OnOtherChanging(value);
                _other = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Other = value;
                }
                OnOtherChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? PaperCons
        {   
            get {return _paperCons;}
            set 
            {
                OnPaperConsChanging(value);
                _paperCons = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.PaperCons = value;
                }
                OnPaperConsChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? PaperCost
        {   
            get {return _paperCost;}
            set 
            {
                OnPaperCostChanging(value);
                _paperCost = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.PaperCost = value;
                }
                OnPaperCostChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? PaperRate
        {   
            get {return _paperRate;}
            set 
            {
                OnPaperRateChanging(value);
                _paperRate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.PaperRate = value;
                }
                OnPaperRateChanged();
            }
        }
        /// <summary>.</summary>
        public int Pattern
        {   
            get {return _pattern;}
            set 
            {
                OnPatternChanging(value);
                _pattern = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Pattern = (from o in this._context.Context.Pattern
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Pattern>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Pattern = null;
                OnPatternChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? QuotedCIF
        {   
            get {return _quotedCIF;}
            set 
            {
                OnQuotedCIFChanging(value);
                _quotedCIF = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.QuotedCIF = value;
                }
                OnQuotedCIFChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? QuotedFOBCost
        {   
            get {return _quotedFOBCost;}
            set 
            {
                OnQuotedFOBCostChanging(value);
                _quotedFOBCost = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.QuotedFOBCost = value;
                }
                OnQuotedFOBCostChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? QuotedMP
        {   
            get {return _quotedMP;}
            set 
            {
                OnQuotedMPChanging(value);
                _quotedMP = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.QuotedMP = value;
                }
                OnQuotedMPChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? Rate1
        {   
            get {return _rate1;}
            set 
            {
                OnRate1Changing(value);
                _rate1 = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Rate1 = value;
                }
                OnRate1Changed();
            }
        }
        /// <summary>.</summary>
        public decimal? Rate2
        {   
            get {return _rate2;}
            set 
            {
                OnRate2Changing(value);
                _rate2 = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Rate2 = value;
                }
                OnRate2Changed();
            }
        }
        /// <summary>.</summary>
        public decimal? Rate3
        {   
            get {return _rate3;}
            set 
            {
                OnRate3Changing(value);
                _rate3 = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Rate3 = value;
                }
                OnRate3Changed();
            }
        }
        /// <summary>.</summary>
        public decimal? Roundup
        {   
            get {return _roundup;}
            set 
            {
                OnRoundupChanging(value);
                _roundup = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Roundup = value;
                }
                OnRoundupChanged();
            }
        }
        /// <summary>.</summary>
        public bool ShowToIndico
        {   
            get {return _showToIndico;}
            set 
            {
                OnShowToIndicoChanging(value);
                _showToIndico = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ShowToIndico = value;
                }
                OnShowToIndicoChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? SMVRate
        {   
            get {return _sMVRate;}
            set 
            {
                OnSMVRateChanging(value);
                _sMVRate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.SMVRate = value;
                }
                OnSMVRateChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? SubCons
        {   
            get {return _subCons;}
            set 
            {
                OnSubConsChanging(value);
                _subCons = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.SubCons = value;
                }
                OnSubConsChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? SubFinance
        {   
            get {return _subFinance;}
            set 
            {
                OnSubFinanceChanging(value);
                _subFinance = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.SubFinance = value;
                }
                OnSubFinanceChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? SubWastage
        {   
            get {return _subWastage;}
            set 
            {
                OnSubWastageChanging(value);
                _subWastage = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.SubWastage = value;
                }
                OnSubWastageChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? TotalAccessoriesCost
        {   
            get {return _totalAccessoriesCost;}
            set 
            {
                OnTotalAccessoriesCostChanging(value);
                _totalAccessoriesCost = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.TotalAccessoriesCost = value;
                }
                OnTotalAccessoriesCostChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? TotalFabricCost
        {   
            get {return _totalFabricCost;}
            set 
            {
                OnTotalFabricCostChanging(value);
                _totalFabricCost = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.TotalFabricCost = value;
                }
                OnTotalFabricCostChanged();
            }
        }
        /// <summary>.</summary>
        public decimal Wastage
        {   
            get {return _wastage;}
            set 
            {
                OnWastageChanging(value);
                _wastage = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Wastage = value;
                }
                OnWastageChanged();
            }
        }
        
        internal Indico.DAL.CostSheet ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        ///<summary>The UserBO object identified by the value of Creator</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objCreator
        {
            get
            {
                if ( _creator > 0 && _objCreator == null)
                {
                        if (this._context == null)
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objCreator.ID = _creator;
                        _objCreator.GetObject(); 
                }
                return _objCreator;
            }
            set
            { 
                _objCreator = value;
                _creator = _objCreator.ID;
            }
        }
        ///<summary>The FabricCodeBO object identified by the value of Fabric</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.FabricCodeBO objFabric
        {
            get
            {
                if ( _fabric > 0 && _objFabric == null)
                {
                        if (this._context == null)
                        {
                            _objFabric = new Indico.BusinessObjects.FabricCodeBO();
                        }
                        else
                        {
                            _objFabric = new Indico.BusinessObjects.FabricCodeBO(ref this._context);
                        }
                        _objFabric.ID = _fabric;
                        _objFabric.GetObject(); 
                }
                return _objFabric;
            }
            set
            { 
                _objFabric = value;
                _fabric = _objFabric.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of IndimanModifier</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objIndimanModifier
        {
            get
            {
                if (_indimanModifier != null && _indimanModifier > 0 && _objIndimanModifier == null)
                {
                        if (this._context == null)
                        {
                            _objIndimanModifier = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objIndimanModifier = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objIndimanModifier.ID = Convert.ToInt32(_indimanModifier);
                        _objIndimanModifier.GetObject(); 
                }
                return _objIndimanModifier;
            }
            set
            { 
                _objIndimanModifier = value;
                _indimanModifier = _objIndimanModifier.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Modifier</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objModifier
        {
            get
            {
                if (_modifier != null && _modifier > 0 && _objModifier == null)
                {
                        if (this._context == null)
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objModifier.ID = Convert.ToInt32(_modifier);
                        _objModifier.GetObject(); 
                }
                return _objModifier;
            }
            set
            { 
                _objModifier = value;
                _modifier = _objModifier.ID;
            }
        }
        ///<summary>The PatternBO object identified by the value of Pattern</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.PatternBO objPattern
        {
            get
            {
                if ( _pattern > 0 && _objPattern == null)
                {
                        if (this._context == null)
                        {
                            _objPattern = new Indico.BusinessObjects.PatternBO();
                        }
                        else
                        {
                            _objPattern = new Indico.BusinessObjects.PatternBO(ref this._context);
                        }
                        _objPattern.ID = _pattern;
                        _objPattern.GetObject(); 
                }
                return _objPattern;
            }
            set
            { 
                _objPattern = value;
                _pattern = _objPattern.ID;
            }
        }
        #endregion
        
        #region Foreign Object Foreign Key Collections
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.CostSheetRemarksBO> CostSheetRemarkssWhereThisIsCostSheet // FK_CostSheetRemarks_CostSheet
        {
            get
            {
                if (!_costSheetRemarkssWhereThisIsCostSheetLoaded)
                {
                    _costSheetRemarkssWhereThisIsCostSheetLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.CostSheet obj = (from o in context.CostSheet
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.CostSheetRemarkssWhereThisIsCostSheet.Load();
                        costSheetRemarkssWhereThisIsCostSheetList = new IndicoList<Indico.BusinessObjects.CostSheetRemarksBO>(obj.CostSheetRemarkssWhereThisIsCostSheet.Count);
                        
                        foreach (Indico.DAL.CostSheetRemarks o in obj.CostSheetRemarkssWhereThisIsCostSheet)
                        {
                            Indico.BusinessObjects.CostSheetRemarksBO fkObj = new Indico.BusinessObjects.CostSheetRemarksBO(o, ref this._context);
                            costSheetRemarkssWhereThisIsCostSheetList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        costSheetRemarkssWhereThisIsCostSheetList = new IndicoList<Indico.BusinessObjects.CostSheetRemarksBO>();
                    }
                    
                    costSheetRemarkssWhereThisIsCostSheetList.OnBeforeRemove += new EventHandler(CostSheetRemarkssWhereThisIsCostSheetList_OnBeforeRemove);
                    costSheetRemarkssWhereThisIsCostSheetList.OnAfterAdd += new EventHandler(CostSheetRemarkssWhereThisIsCostSheetList_OnAfterAdd);
                }
                
                return costSheetRemarkssWhereThisIsCostSheetList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.IndimanCostSheetRemarksBO> IndimanCostSheetRemarkssWhereThisIsCostSheet // FK_IndimanCostSheetRemarks_CostSheet
        {
            get
            {
                if (!_indimanCostSheetRemarkssWhereThisIsCostSheetLoaded)
                {
                    _indimanCostSheetRemarkssWhereThisIsCostSheetLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.CostSheet obj = (from o in context.CostSheet
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.IndimanCostSheetRemarkssWhereThisIsCostSheet.Load();
                        indimanCostSheetRemarkssWhereThisIsCostSheetList = new IndicoList<Indico.BusinessObjects.IndimanCostSheetRemarksBO>(obj.IndimanCostSheetRemarkssWhereThisIsCostSheet.Count);
                        
                        foreach (Indico.DAL.IndimanCostSheetRemarks o in obj.IndimanCostSheetRemarkssWhereThisIsCostSheet)
                        {
                            Indico.BusinessObjects.IndimanCostSheetRemarksBO fkObj = new Indico.BusinessObjects.IndimanCostSheetRemarksBO(o, ref this._context);
                            indimanCostSheetRemarkssWhereThisIsCostSheetList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        indimanCostSheetRemarkssWhereThisIsCostSheetList = new IndicoList<Indico.BusinessObjects.IndimanCostSheetRemarksBO>();
                    }
                    
                    indimanCostSheetRemarkssWhereThisIsCostSheetList.OnBeforeRemove += new EventHandler(IndimanCostSheetRemarkssWhereThisIsCostSheetList_OnBeforeRemove);
                    indimanCostSheetRemarkssWhereThisIsCostSheetList.OnAfterAdd += new EventHandler(IndimanCostSheetRemarkssWhereThisIsCostSheetList_OnAfterAdd);
                }
                
                return indimanCostSheetRemarkssWhereThisIsCostSheetList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO> PatternSupportAccessorysWhereThisIsCostSheet // FK_PatternSupportAccessory_CostSheet
        {
            get
            {
                if (!_patternSupportAccessorysWhereThisIsCostSheetLoaded)
                {
                    _patternSupportAccessorysWhereThisIsCostSheetLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.CostSheet obj = (from o in context.CostSheet
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.PatternSupportAccessorysWhereThisIsCostSheet.Load();
                        patternSupportAccessorysWhereThisIsCostSheetList = new IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>(obj.PatternSupportAccessorysWhereThisIsCostSheet.Count);
                        
                        foreach (Indico.DAL.PatternSupportAccessory o in obj.PatternSupportAccessorysWhereThisIsCostSheet)
                        {
                            Indico.BusinessObjects.PatternSupportAccessoryBO fkObj = new Indico.BusinessObjects.PatternSupportAccessoryBO(o, ref this._context);
                            patternSupportAccessorysWhereThisIsCostSheetList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        patternSupportAccessorysWhereThisIsCostSheetList = new IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>();
                    }
                    
                    patternSupportAccessorysWhereThisIsCostSheetList.OnBeforeRemove += new EventHandler(PatternSupportAccessorysWhereThisIsCostSheetList_OnBeforeRemove);
                    patternSupportAccessorysWhereThisIsCostSheetList.OnAfterAdd += new EventHandler(PatternSupportAccessorysWhereThisIsCostSheetList_OnAfterAdd);
                }
                
                return patternSupportAccessorysWhereThisIsCostSheetList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.PatternSupportFabricBO> PatternSupportFabricsWhereThisIsCostSheet // FK_PatternSupportFabric_CostSheet
        {
            get
            {
                if (!_patternSupportFabricsWhereThisIsCostSheetLoaded)
                {
                    _patternSupportFabricsWhereThisIsCostSheetLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.CostSheet obj = (from o in context.CostSheet
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.PatternSupportFabricsWhereThisIsCostSheet.Load();
                        patternSupportFabricsWhereThisIsCostSheetList = new IndicoList<Indico.BusinessObjects.PatternSupportFabricBO>(obj.PatternSupportFabricsWhereThisIsCostSheet.Count);
                        
                        foreach (Indico.DAL.PatternSupportFabric o in obj.PatternSupportFabricsWhereThisIsCostSheet)
                        {
                            Indico.BusinessObjects.PatternSupportFabricBO fkObj = new Indico.BusinessObjects.PatternSupportFabricBO(o, ref this._context);
                            patternSupportFabricsWhereThisIsCostSheetList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        patternSupportFabricsWhereThisIsCostSheetList = new IndicoList<Indico.BusinessObjects.PatternSupportFabricBO>();
                    }
                    
                    patternSupportFabricsWhereThisIsCostSheetList.OnBeforeRemove += new EventHandler(PatternSupportFabricsWhereThisIsCostSheetList_OnBeforeRemove);
                    patternSupportFabricsWhereThisIsCostSheetList.OnAfterAdd += new EventHandler(PatternSupportFabricsWhereThisIsCostSheetList_OnAfterAdd);
                }
                
                return patternSupportFabricsWhereThisIsCostSheetList;
            }
        }
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the CostSheetBO class using the supplied Indico.DAL.CostSheet. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.CostSheet whose properties will be used to initialise the CostSheetBO</param>
        internal CostSheetBO(Indico.DAL.CostSheet obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.CostSheet 
            this.ID = obj.ID;
            
            this.ActMgn = obj.ActMgn;
            this.AirFregiht = obj.AirFregiht;
            this.CalculateCM = obj.CalculateCM;
            this.CalMGN = obj.CalMGN;
            this.CF1 = obj.CF1;
            this.CF2 = obj.CF2;
            this.CF3 = obj.CF3;
            this.CM = obj.CM;
            this.CONS1 = obj.CONS1;
            this.CONS2 = obj.CONS2;
            this.CONS3 = obj.CONS3;
            this.Cost1 = obj.Cost1;
            this.Cost2 = obj.Cost2;
            this.Cost3 = obj.Cost3;
            this.CreatedDate = obj.CreatedDate;
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Depr = obj.Depr;
            this.Duty = obj.Duty;
            this.DutyRate = obj.DutyRate;
            this.ExchangeRate = obj.ExchangeRate;
            this.Fabric = (obj.FabricReference.EntityKey != null && obj.FabricReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.FabricReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Finance = obj.Finance;
            this.FOBAUD = obj.FOBAUD;
            this.FOBExp = obj.FOBExp;
            this.FobFactor = obj.FobFactor;
            this.HPCost = obj.HPCost;
            this.ImpCharges = obj.ImpCharges;
            this.IndicoOH = obj.IndicoOH;
            this.IndimanCIF = obj.IndimanCIF;
            this.IndimanFOB = obj.IndimanFOB;
            this.IndimanModifiedDate = obj.IndimanModifiedDate;
            this.IndimanModifier = (obj.IndimanModifierReference.EntityKey != null && obj.IndimanModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.IndimanModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.InkCons = obj.InkCons;
            this.InkCost = obj.InkCost;
            this.InkRate = obj.InkRate;
            this.JKFOBCost = obj.JKFOBCost;
            this.LabelCost = obj.LabelCost;
            this.Landed = obj.Landed;
            this.MarginRate = obj.MarginRate;
            this.MGTOH = obj.MGTOH;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.MP = obj.MP;
            this.Other = obj.Other;
            this.PaperCons = obj.PaperCons;
            this.PaperCost = obj.PaperCost;
            this.PaperRate = obj.PaperRate;
            this.Pattern = (obj.PatternReference.EntityKey != null && obj.PatternReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PatternReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.QuotedCIF = obj.QuotedCIF;
            this.QuotedFOBCost = obj.QuotedFOBCost;
            this.QuotedMP = obj.QuotedMP;
            this.Rate1 = obj.Rate1;
            this.Rate2 = obj.Rate2;
            this.Rate3 = obj.Rate3;
            this.Roundup = obj.Roundup;
            this.ShowToIndico = obj.ShowToIndico;
            this.SMVRate = obj.SMVRate;
            this.SubCons = obj.SubCons;
            this.SubFinance = obj.SubFinance;
            this.SubWastage = obj.SubWastage;
            this.TotalAccessoriesCost = obj.TotalAccessoriesCost;
            this.TotalFabricCost = obj.TotalFabricCost;
            this.Wastage = obj.Wastage;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.CostSheet SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.CostSheet properties
            Indico.DAL.CostSheet obj = new Indico.DAL.CostSheet();
            
            if (this.ID > 0)
            {
                obj = context.CostSheet.FirstOrDefault<CostSheet>(o => o.ID == this.ID);
            }
            
            obj.ActMgn = this.ActMgn;
            obj.AirFregiht = this.AirFregiht;
            obj.CalculateCM = this.CalculateCM;
            obj.CalMGN = this.CalMGN;
            obj.CF1 = this.CF1;
            obj.CF2 = this.CF2;
            obj.CF3 = this.CF3;
            obj.CM = this.CM;
            obj.CONS1 = this.CONS1;
            obj.CONS2 = this.CONS2;
            obj.CONS3 = this.CONS3;
            obj.Cost1 = this.Cost1;
            obj.Cost2 = this.Cost2;
            obj.Cost3 = this.Cost3;
            obj.CreatedDate = this.CreatedDate;
            obj.Depr = this.Depr;
            obj.Duty = this.Duty;
            obj.DutyRate = this.DutyRate;
            obj.ExchangeRate = this.ExchangeRate;
            obj.Finance = this.Finance;
            obj.FOBAUD = this.FOBAUD;
            obj.FOBExp = this.FOBExp;
            obj.FobFactor = this.FobFactor;
            obj.HPCost = this.HPCost;
            obj.ImpCharges = this.ImpCharges;
            obj.IndicoOH = this.IndicoOH;
            obj.IndimanCIF = this.IndimanCIF;
            obj.IndimanFOB = this.IndimanFOB;
            obj.IndimanModifiedDate = this.IndimanModifiedDate;
            obj.InkCons = this.InkCons;
            obj.InkCost = this.InkCost;
            obj.InkRate = this.InkRate;
            obj.JKFOBCost = this.JKFOBCost;
            obj.LabelCost = this.LabelCost;
            obj.Landed = this.Landed;
            obj.MarginRate = this.MarginRate;
            obj.MGTOH = this.MGTOH;
            obj.ModifiedDate = this.ModifiedDate;
            obj.MP = this.MP;
            obj.Other = this.Other;
            obj.PaperCons = this.PaperCons;
            obj.PaperCost = this.PaperCost;
            obj.PaperRate = this.PaperRate;
            obj.QuotedCIF = this.QuotedCIF;
            obj.QuotedFOBCost = this.QuotedFOBCost;
            obj.QuotedMP = this.QuotedMP;
            obj.Rate1 = this.Rate1;
            obj.Rate2 = this.Rate2;
            obj.Rate3 = this.Rate3;
            obj.Roundup = this.Roundup;
            obj.ShowToIndico = this.ShowToIndico;
            obj.SMVRate = this.SMVRate;
            obj.SubCons = this.SubCons;
            obj.SubFinance = this.SubFinance;
            obj.SubWastage = this.SubWastage;
            obj.TotalAccessoriesCost = this.TotalAccessoriesCost;
            obj.TotalFabricCost = this.TotalFabricCost;
            obj.Wastage = this.Wastage;
            
            if (this.Creator > 0) obj.Creator = context.User.FirstOrDefault(o => o.ID == this.Creator);
            if (this.Fabric > 0) obj.Fabric = context.FabricCode.FirstOrDefault(o => o.ID == this.Fabric);
            if (this.IndimanModifier != null && this.IndimanModifier > 0) obj.IndimanModifier = context.User.FirstOrDefault(o => o.ID == this.IndimanModifier);
            if (this.Modifier != null && this.Modifier > 0) obj.Modifier = context.User.FirstOrDefault(o => o.ID == this.Modifier);
            if (this.Pattern > 0) obj.Pattern = context.Pattern.FirstOrDefault(o => o.ID == this.Pattern);
            
            if (_costSheetRemarkssWhereThisIsCostSheetLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.CostSheetRemarksBO.ToEntityList(this.CostSheetRemarkssWhereThisIsCostSheet, context), 
                    obj.CostSheetRemarkssWhereThisIsCostSheet);
            if (_indimanCostSheetRemarkssWhereThisIsCostSheetLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.IndimanCostSheetRemarksBO.ToEntityList(this.IndimanCostSheetRemarkssWhereThisIsCostSheet, context), 
                    obj.IndimanCostSheetRemarkssWhereThisIsCostSheet);
            if (_patternSupportAccessorysWhereThisIsCostSheetLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.PatternSupportAccessoryBO.ToEntityList(this.PatternSupportAccessorysWhereThisIsCostSheet, context), 
                    obj.PatternSupportAccessorysWhereThisIsCostSheet);
            if (_patternSupportFabricsWhereThisIsCostSheetLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.PatternSupportFabricBO.ToEntityList(this.PatternSupportFabricsWhereThisIsCostSheet, context), 
                    obj.PatternSupportFabricsWhereThisIsCostSheet);
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.CostSheet))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.CostSheet obj = (Indico.DAL.CostSheet)eObj;
            
            // set the Indico.BusinessObjects.CostSheetBO properties
            this.ID = obj.ID;
            
            this.ActMgn = obj.ActMgn;
            this.AirFregiht = obj.AirFregiht;
            this.CalculateCM = obj.CalculateCM;
            this.CalMGN = obj.CalMGN;
            this.CF1 = obj.CF1;
            this.CF2 = obj.CF2;
            this.CF3 = obj.CF3;
            this.CM = obj.CM;
            this.CONS1 = obj.CONS1;
            this.CONS2 = obj.CONS2;
            this.CONS3 = obj.CONS3;
            this.Cost1 = obj.Cost1;
            this.Cost2 = obj.Cost2;
            this.Cost3 = obj.Cost3;
            this.CreatedDate = obj.CreatedDate;
            this.Depr = obj.Depr;
            this.Duty = obj.Duty;
            this.DutyRate = obj.DutyRate;
            this.ExchangeRate = obj.ExchangeRate;
            this.Finance = obj.Finance;
            this.FOBAUD = obj.FOBAUD;
            this.FOBExp = obj.FOBExp;
            this.FobFactor = obj.FobFactor;
            this.HPCost = obj.HPCost;
            this.ImpCharges = obj.ImpCharges;
            this.IndicoOH = obj.IndicoOH;
            this.IndimanCIF = obj.IndimanCIF;
            this.IndimanFOB = obj.IndimanFOB;
            this.IndimanModifiedDate = obj.IndimanModifiedDate;
            this.InkCons = obj.InkCons;
            this.InkCost = obj.InkCost;
            this.InkRate = obj.InkRate;
            this.JKFOBCost = obj.JKFOBCost;
            this.LabelCost = obj.LabelCost;
            this.Landed = obj.Landed;
            this.MarginRate = obj.MarginRate;
            this.MGTOH = obj.MGTOH;
            this.ModifiedDate = obj.ModifiedDate;
            this.MP = obj.MP;
            this.Other = obj.Other;
            this.PaperCons = obj.PaperCons;
            this.PaperCost = obj.PaperCost;
            this.PaperRate = obj.PaperRate;
            this.QuotedCIF = obj.QuotedCIF;
            this.QuotedFOBCost = obj.QuotedFOBCost;
            this.QuotedMP = obj.QuotedMP;
            this.Rate1 = obj.Rate1;
            this.Rate2 = obj.Rate2;
            this.Rate3 = obj.Rate3;
            this.Roundup = obj.Roundup;
            this.ShowToIndico = obj.ShowToIndico;
            this.SMVRate = obj.SMVRate;
            this.SubCons = obj.SubCons;
            this.SubFinance = obj.SubFinance;
            this.SubWastage = obj.SubWastage;
            this.TotalAccessoriesCost = obj.TotalAccessoriesCost;
            this.TotalFabricCost = obj.TotalFabricCost;
            this.Wastage = obj.Wastage;
            
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Fabric = (obj.FabricReference.EntityKey != null && obj.FabricReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.FabricReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.IndimanModifier = (obj.IndimanModifierReference.EntityKey != null && obj.IndimanModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.IndimanModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Pattern = (obj.PatternReference.EntityKey != null && obj.PatternReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PatternReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.CostSheetBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.CostSheetBO properties
            this.ID = obj.ID;
            
            this.ActMgn = obj.ActMgn;
            this.AirFregiht = obj.AirFregiht;
            this.CalculateCM = obj.CalculateCM;
            this.CalMGN = obj.CalMGN;
            this.CF1 = obj.CF1;
            this.CF2 = obj.CF2;
            this.CF3 = obj.CF3;
            this.CM = obj.CM;
            this.CONS1 = obj.CONS1;
            this.CONS2 = obj.CONS2;
            this.CONS3 = obj.CONS3;
            this.Cost1 = obj.Cost1;
            this.Cost2 = obj.Cost2;
            this.Cost3 = obj.Cost3;
            this.CreatedDate = obj.CreatedDate;
            this.Creator = obj.Creator;
            this.Depr = obj.Depr;
            this.Duty = obj.Duty;
            this.DutyRate = obj.DutyRate;
            this.ExchangeRate = obj.ExchangeRate;
            this.Fabric = obj.Fabric;
            this.Finance = obj.Finance;
            this.FOBAUD = obj.FOBAUD;
            this.FOBExp = obj.FOBExp;
            this.FobFactor = obj.FobFactor;
            this.HPCost = obj.HPCost;
            this.ImpCharges = obj.ImpCharges;
            this.IndicoOH = obj.IndicoOH;
            this.IndimanCIF = obj.IndimanCIF;
            this.IndimanFOB = obj.IndimanFOB;
            this.IndimanModifiedDate = obj.IndimanModifiedDate;
            this.IndimanModifier = obj.IndimanModifier;
            this.InkCons = obj.InkCons;
            this.InkCost = obj.InkCost;
            this.InkRate = obj.InkRate;
            this.JKFOBCost = obj.JKFOBCost;
            this.LabelCost = obj.LabelCost;
            this.Landed = obj.Landed;
            this.MarginRate = obj.MarginRate;
            this.MGTOH = obj.MGTOH;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = obj.Modifier;
            this.MP = obj.MP;
            this.Other = obj.Other;
            this.PaperCons = obj.PaperCons;
            this.PaperCost = obj.PaperCost;
            this.PaperRate = obj.PaperRate;
            this.Pattern = obj.Pattern;
            this.QuotedCIF = obj.QuotedCIF;
            this.QuotedFOBCost = obj.QuotedFOBCost;
            this.QuotedMP = obj.QuotedMP;
            this.Rate1 = obj.Rate1;
            this.Rate2 = obj.Rate2;
            this.Rate3 = obj.Rate3;
            this.Roundup = obj.Roundup;
            this.ShowToIndico = obj.ShowToIndico;
            this.SMVRate = obj.SMVRate;
            this.SubCons = obj.SubCons;
            this.SubFinance = obj.SubFinance;
            this.SubWastage = obj.SubWastage;
            this.TotalAccessoriesCost = obj.TotalAccessoriesCost;
            this.TotalFabricCost = obj.TotalFabricCost;
            this.Wastage = obj.Wastage;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.CostSheetBO> IQueryableToList(IQueryable<Indico.DAL.CostSheet> oQuery)
        {
            List<Indico.DAL.CostSheet> oList = oQuery.ToList();
            List<Indico.BusinessObjects.CostSheetBO> rList = new List<Indico.BusinessObjects.CostSheetBO>(oList.Count);
            foreach (Indico.DAL.CostSheet o in oList)
            {
                Indico.BusinessObjects.CostSheetBO obj = new Indico.BusinessObjects.CostSheetBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.CostSheetBO> ToList(IEnumerable<Indico.DAL.CostSheet> oQuery)
        {
            List<Indico.DAL.CostSheet> oList = oQuery.ToList();
            List<Indico.BusinessObjects.CostSheetBO> rList = new List<Indico.BusinessObjects.CostSheetBO>(oList.Count);
            foreach (Indico.DAL.CostSheet o in oList)
            {
                Indico.BusinessObjects.CostSheetBO obj = new Indico.BusinessObjects.CostSheetBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.CostSheet> ToEntityList(List<CostSheetBO> bos, IndicoEntities context)
        {
            // build a List of CostSheet entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.CostSheet.Count() == 0) ? new List<Indico.DAL.CostSheet>() : (context.CostSheet.Where(BuildContainsExpression<CostSheet, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.CostSheet>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.CostSheet> ToEntityCollection(List<CostSheetBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of CostSheet entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.CostSheet> el = (context.CostSheet.Count() == 0) ? new List<Indico.DAL.CostSheet>() : 
                context.CostSheet.Where(BuildContainsExpression<CostSheet, int>(e => e.ID, ids))
                .ToList<Indico.DAL.CostSheet>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.CostSheet> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.CostSheet>();
                
            foreach (Indico.DAL.CostSheet r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.CostSheet ToEntity(IndicoEntities context)
        {
            return (from o in context.CostSheet
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToCostSheet(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.CostSheet obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToCostSheet(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.CostSheet obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.CostSheet obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.CostSheetBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.CostSheetBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.CostSheet> oQuery =
                        from o in context.CostSheet
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.CostSheet> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.CostSheetBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.CostSheetBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.CostSheetBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.CostSheetBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.CostSheet> oQuery =
                (from o in context.CostSheet
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.CostSheetBO> costsheets = IQueryableToList(oQuery);
            context.Dispose();
            return costsheets;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.CostSheetBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.CostSheetBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.CostSheetBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.CostSheetBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.CostSheet> oQuery =
                (from o in context.CostSheet
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Pattern == 0 || this.Pattern == o.Pattern.ID) &&
                    (this.Fabric == 0 || this.Fabric == o.Fabric.ID) &&
                    (this.TotalFabricCost == null || this.TotalFabricCost == o.TotalFabricCost) &&
                    (this.TotalAccessoriesCost == null || this.TotalAccessoriesCost == o.TotalAccessoriesCost) &&
                    (this.HPCost == 0 || this.HPCost == o.HPCost) &&
                    (this.LabelCost == 0 || this.LabelCost == o.LabelCost) &&
                    (this.Other == null || this.Other == o.Other) &&
                    (this.Finance == 0 || this.Finance == o.Finance) &&
                    (this.Wastage == 0 || this.Wastage == o.Wastage) &&
                    (this.FOBExp == 0 || this.FOBExp == o.FOBExp) &&
                    (this.CM == 0 || this.CM == o.CM) &&
                    (this.JKFOBCost == 0 || this.JKFOBCost == o.JKFOBCost) &&
                    (this.QuotedFOBCost == null || this.QuotedFOBCost == o.QuotedFOBCost) &&
                    (this.Roundup == null || this.Roundup == o.Roundup) &&
                    (this.SMVRate == null || this.SMVRate == o.SMVRate) &&
                    (this.CalculateCM == null || this.CalculateCM == o.CalculateCM) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == null || this.Modifier == o.Modifier.ID) &&
                    (this.ModifiedDate == null || this.ModifiedDate == o.ModifiedDate) &&
                    (this.SubWastage == null || this.SubWastage == o.SubWastage) &&
                    (this.SubFinance == null || this.SubFinance == o.SubFinance) &&
                    (this.SubCons == null || this.SubCons == o.SubCons) &&
                    (this.DutyRate == null || this.DutyRate == o.DutyRate) &&
                    (this.CF1 == null || this.CF1 == o.CF1) &&
                    (this.CF2 == null || this.CF2 == o.CF2) &&
                    (this.CF3 == null || this.CF3 == o.CF3) &&
                    (this.CONS1 == null || this.CONS1 == o.CONS1) &&
                    (this.CONS2 == null || this.CONS2 == o.CONS2) &&
                    (this.CONS3 == null || this.CONS3 == o.CONS3) &&
                    (this.InkCons == null || this.InkCons == o.InkCons) &&
                    (this.PaperCons == null || this.PaperCons == o.PaperCons) &&
                    (this.Rate1 == null || this.Rate1 == o.Rate1) &&
                    (this.Rate2 == null || this.Rate2 == o.Rate2) &&
                    (this.Rate3 == null || this.Rate3 == o.Rate3) &&
                    (this.InkRate == null || this.InkRate == o.InkRate) &&
                    (this.PaperRate == null || this.PaperRate == o.PaperRate) &&
                    (this.MarginRate == null || this.MarginRate == o.MarginRate) &&
                    (this.FOBAUD == null || this.FOBAUD == o.FOBAUD) &&
                    (this.Duty == null || this.Duty == o.Duty) &&
                    (this.Cost1 == null || this.Cost1 == o.Cost1) &&
                    (this.Cost2 == null || this.Cost2 == o.Cost2) &&
                    (this.Cost3 == null || this.Cost3 == o.Cost3) &&
                    (this.InkCost == null || this.InkCost == o.InkCost) &&
                    (this.PaperCost == null || this.PaperCost == o.PaperCost) &&
                    (this.MGTOH == null || this.MGTOH == o.MGTOH) &&
                    (this.IndicoOH == null || this.IndicoOH == o.IndicoOH) &&
                    (this.Depr == null || this.Depr == o.Depr) &&
                    (this.Landed == null || this.Landed == o.Landed) &&
                    (this.IndimanCIF == null || this.IndimanCIF == o.IndimanCIF) &&
                    (this.QuotedCIF == null || this.QuotedCIF == o.QuotedCIF) &&
                    (this.FobFactor == null || this.FobFactor == o.FobFactor) &&
                    (this.IndimanFOB == null || this.IndimanFOB == o.IndimanFOB) &&
                    (this.CalMGN == null || this.CalMGN == o.CalMGN) &&
                    (this.ActMgn == null || this.ActMgn == o.ActMgn) &&
                    (this.MP == null || this.MP == o.MP) &&
                    (this.QuotedMP == null || this.QuotedMP == o.QuotedMP) &&
                    (this.ExchangeRate == null || this.ExchangeRate == o.ExchangeRate) &&
                    (this.AirFregiht == null || this.AirFregiht == o.AirFregiht) &&
                    (this.ImpCharges == null || this.ImpCharges == o.ImpCharges) &&
                    (this.IndimanModifier == null || this.IndimanModifier == o.IndimanModifier.ID) &&
                    (this.IndimanModifiedDate == null || this.IndimanModifiedDate == o.IndimanModifiedDate) &&
                    (this.ShowToIndico == false || this.ShowToIndico == o.ShowToIndico) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.CostSheetBO> costsheets = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return costsheets;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.CostSheet
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Pattern == 0 || this.Pattern == o.Pattern.ID) &&
                    (this.Fabric == 0 || this.Fabric == o.Fabric.ID) &&
                    (this.TotalFabricCost == null || this.TotalFabricCost == o.TotalFabricCost) &&
                    (this.TotalAccessoriesCost == null || this.TotalAccessoriesCost == o.TotalAccessoriesCost) &&
                    (this.HPCost == 0 || this.HPCost == o.HPCost) &&
                    (this.LabelCost == 0 || this.LabelCost == o.LabelCost) &&
                    (this.Other == null || this.Other == o.Other) &&
                    (this.Finance == 0 || this.Finance == o.Finance) &&
                    (this.Wastage == 0 || this.Wastage == o.Wastage) &&
                    (this.FOBExp == 0 || this.FOBExp == o.FOBExp) &&
                    (this.CM == 0 || this.CM == o.CM) &&
                    (this.JKFOBCost == 0 || this.JKFOBCost == o.JKFOBCost) &&
                    (this.QuotedFOBCost == null || this.QuotedFOBCost == o.QuotedFOBCost) &&
                    (this.Roundup == null || this.Roundup == o.Roundup) &&
                    (this.SMVRate == null || this.SMVRate == o.SMVRate) &&
                    (this.CalculateCM == null || this.CalculateCM == o.CalculateCM) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == null || this.Modifier == o.Modifier.ID) &&
                    (this.ModifiedDate == null || this.ModifiedDate == o.ModifiedDate) &&
                    (this.SubWastage == null || this.SubWastage == o.SubWastage) &&
                    (this.SubFinance == null || this.SubFinance == o.SubFinance) &&
                    (this.SubCons == null || this.SubCons == o.SubCons) &&
                    (this.DutyRate == null || this.DutyRate == o.DutyRate) &&
                    (this.CF1 == null || this.CF1 == o.CF1) &&
                    (this.CF2 == null || this.CF2 == o.CF2) &&
                    (this.CF3 == null || this.CF3 == o.CF3) &&
                    (this.CONS1 == null || this.CONS1 == o.CONS1) &&
                    (this.CONS2 == null || this.CONS2 == o.CONS2) &&
                    (this.CONS3 == null || this.CONS3 == o.CONS3) &&
                    (this.InkCons == null || this.InkCons == o.InkCons) &&
                    (this.PaperCons == null || this.PaperCons == o.PaperCons) &&
                    (this.Rate1 == null || this.Rate1 == o.Rate1) &&
                    (this.Rate2 == null || this.Rate2 == o.Rate2) &&
                    (this.Rate3 == null || this.Rate3 == o.Rate3) &&
                    (this.InkRate == null || this.InkRate == o.InkRate) &&
                    (this.PaperRate == null || this.PaperRate == o.PaperRate) &&
                    (this.MarginRate == null || this.MarginRate == o.MarginRate) &&
                    (this.FOBAUD == null || this.FOBAUD == o.FOBAUD) &&
                    (this.Duty == null || this.Duty == o.Duty) &&
                    (this.Cost1 == null || this.Cost1 == o.Cost1) &&
                    (this.Cost2 == null || this.Cost2 == o.Cost2) &&
                    (this.Cost3 == null || this.Cost3 == o.Cost3) &&
                    (this.InkCost == null || this.InkCost == o.InkCost) &&
                    (this.PaperCost == null || this.PaperCost == o.PaperCost) &&
                    (this.MGTOH == null || this.MGTOH == o.MGTOH) &&
                    (this.IndicoOH == null || this.IndicoOH == o.IndicoOH) &&
                    (this.Depr == null || this.Depr == o.Depr) &&
                    (this.Landed == null || this.Landed == o.Landed) &&
                    (this.IndimanCIF == null || this.IndimanCIF == o.IndimanCIF) &&
                    (this.QuotedCIF == null || this.QuotedCIF == o.QuotedCIF) &&
                    (this.FobFactor == null || this.FobFactor == o.FobFactor) &&
                    (this.IndimanFOB == null || this.IndimanFOB == o.IndimanFOB) &&
                    (this.CalMGN == null || this.CalMGN == o.CalMGN) &&
                    (this.ActMgn == null || this.ActMgn == o.ActMgn) &&
                    (this.MP == null || this.MP == o.MP) &&
                    (this.QuotedMP == null || this.QuotedMP == o.QuotedMP) &&
                    (this.ExchangeRate == null || this.ExchangeRate == o.ExchangeRate) &&
                    (this.AirFregiht == null || this.AirFregiht == o.AirFregiht) &&
                    (this.ImpCharges == null || this.ImpCharges == o.ImpCharges) &&
                    (this.IndimanModifier == null || this.IndimanModifier == o.IndimanModifier.ID) &&
                    (this.IndimanModifiedDate == null || this.IndimanModifiedDate == o.IndimanModifiedDate) &&
                    (this.ShowToIndico == false || this.ShowToIndico == o.ShowToIndico) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.CostSheetBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.CostSheetBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.CostSheetBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.CostSheetBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.CostSheet> oQuery =
                (from o in context.CostSheet
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Pattern == 0 || o.Pattern.ID == this.Pattern) &&
                    (this.Fabric == 0 || o.Fabric.ID == this.Fabric) &&
                    (this.TotalFabricCost == null || o.TotalFabricCost == this.TotalFabricCost) &&
                    (this.TotalAccessoriesCost == null || o.TotalAccessoriesCost == this.TotalAccessoriesCost) &&
                    (this.HPCost == 0 || o.HPCost == this.HPCost) &&
                    (this.LabelCost == 0 || o.LabelCost == this.LabelCost) &&
                    (this.Other == null || o.Other == this.Other) &&
                    (this.Finance == 0 || o.Finance == this.Finance) &&
                    (this.Wastage == 0 || o.Wastage == this.Wastage) &&
                    (this.FOBExp == 0 || o.FOBExp == this.FOBExp) &&
                    (this.CM == 0 || o.CM == this.CM) &&
                    (this.JKFOBCost == 0 || o.JKFOBCost == this.JKFOBCost) &&
                    (this.QuotedFOBCost == null || o.QuotedFOBCost == this.QuotedFOBCost) &&
                    (this.Roundup == null || o.Roundup == this.Roundup) &&
                    (this.SMVRate == null || o.SMVRate == this.SMVRate) &&
                    (this.CalculateCM == null || o.CalculateCM == this.CalculateCM) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == null || o.Modifier.ID == this.Modifier) &&
                    (this.ModifiedDate == null || o.ModifiedDate == this.ModifiedDate) &&
                    (this.SubWastage == null || o.SubWastage == this.SubWastage) &&
                    (this.SubFinance == null || o.SubFinance == this.SubFinance) &&
                    (this.SubCons == null || o.SubCons == this.SubCons) &&
                    (this.DutyRate == null || o.DutyRate == this.DutyRate) &&
                    (this.CF1 == null || o.CF1.Contains(this.CF1)) &&
                    (this.CF2 == null || o.CF2.Contains(this.CF2)) &&
                    (this.CF3 == null || o.CF3.Contains(this.CF3)) &&
                    (this.CONS1 == null || o.CONS1 == this.CONS1) &&
                    (this.CONS2 == null || o.CONS2 == this.CONS2) &&
                    (this.CONS3 == null || o.CONS3 == this.CONS3) &&
                    (this.InkCons == null || o.InkCons == this.InkCons) &&
                    (this.PaperCons == null || o.PaperCons == this.PaperCons) &&
                    (this.Rate1 == null || o.Rate1 == this.Rate1) &&
                    (this.Rate2 == null || o.Rate2 == this.Rate2) &&
                    (this.Rate3 == null || o.Rate3 == this.Rate3) &&
                    (this.InkRate == null || o.InkRate == this.InkRate) &&
                    (this.PaperRate == null || o.PaperRate == this.PaperRate) &&
                    (this.MarginRate == null || o.MarginRate == this.MarginRate) &&
                    (this.FOBAUD == null || o.FOBAUD == this.FOBAUD) &&
                    (this.Duty == null || o.Duty == this.Duty) &&
                    (this.Cost1 == null || o.Cost1 == this.Cost1) &&
                    (this.Cost2 == null || o.Cost2 == this.Cost2) &&
                    (this.Cost3 == null || o.Cost3 == this.Cost3) &&
                    (this.InkCost == null || o.InkCost == this.InkCost) &&
                    (this.PaperCost == null || o.PaperCost == this.PaperCost) &&
                    (this.MGTOH == null || o.MGTOH == this.MGTOH) &&
                    (this.IndicoOH == null || o.IndicoOH == this.IndicoOH) &&
                    (this.Depr == null || o.Depr == this.Depr) &&
                    (this.Landed == null || o.Landed == this.Landed) &&
                    (this.IndimanCIF == null || o.IndimanCIF == this.IndimanCIF) &&
                    (this.QuotedCIF == null || o.QuotedCIF == this.QuotedCIF) &&
                    (this.FobFactor == null || o.FobFactor == this.FobFactor) &&
                    (this.IndimanFOB == null || o.IndimanFOB == this.IndimanFOB) &&
                    (this.CalMGN == null || o.CalMGN == this.CalMGN) &&
                    (this.ActMgn == null || o.ActMgn == this.ActMgn) &&
                    (this.MP == null || o.MP == this.MP) &&
                    (this.QuotedMP == null || o.QuotedMP == this.QuotedMP) &&
                    (this.ExchangeRate == null || o.ExchangeRate == this.ExchangeRate) &&
                    (this.AirFregiht == null || o.AirFregiht == this.AirFregiht) &&
                    (this.ImpCharges == null || o.ImpCharges == this.ImpCharges) &&
                    (this.IndimanModifier == null || o.IndimanModifier.ID == this.IndimanModifier) &&
                    (this.IndimanModifiedDate == null || o.IndimanModifiedDate == this.IndimanModifiedDate) &&
                    (this.ShowToIndico == false || o.ShowToIndico == this.ShowToIndico) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.CostSheetBO> costsheets = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return costsheets;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.CostSheet
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Pattern == 0 || o.Pattern.ID == this.Pattern) &&
                    (this.Fabric == 0 || o.Fabric.ID == this.Fabric) &&
                    (this.TotalFabricCost == null || o.TotalFabricCost == this.TotalFabricCost) &&
                    (this.TotalAccessoriesCost == null || o.TotalAccessoriesCost == this.TotalAccessoriesCost) &&
                    (this.HPCost == 0 || o.HPCost == this.HPCost) &&
                    (this.LabelCost == 0 || o.LabelCost == this.LabelCost) &&
                    (this.Other == null || o.Other == this.Other) &&
                    (this.Finance == 0 || o.Finance == this.Finance) &&
                    (this.Wastage == 0 || o.Wastage == this.Wastage) &&
                    (this.FOBExp == 0 || o.FOBExp == this.FOBExp) &&
                    (this.CM == 0 || o.CM == this.CM) &&
                    (this.JKFOBCost == 0 || o.JKFOBCost == this.JKFOBCost) &&
                    (this.QuotedFOBCost == null || o.QuotedFOBCost == this.QuotedFOBCost) &&
                    (this.Roundup == null || o.Roundup == this.Roundup) &&
                    (this.SMVRate == null || o.SMVRate == this.SMVRate) &&
                    (this.CalculateCM == null || o.CalculateCM == this.CalculateCM) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == null || o.Modifier.ID == this.Modifier) &&
                    (this.ModifiedDate == null || o.ModifiedDate == this.ModifiedDate) &&
                    (this.SubWastage == null || o.SubWastage == this.SubWastage) &&
                    (this.SubFinance == null || o.SubFinance == this.SubFinance) &&
                    (this.SubCons == null || o.SubCons == this.SubCons) &&
                    (this.DutyRate == null || o.DutyRate == this.DutyRate) &&
                    (this.CF1 == null || o.CF1.Contains(this.CF1)) &&
                    (this.CF2 == null || o.CF2.Contains(this.CF2)) &&
                    (this.CF3 == null || o.CF3.Contains(this.CF3)) &&
                    (this.CONS1 == null || o.CONS1 == this.CONS1) &&
                    (this.CONS2 == null || o.CONS2 == this.CONS2) &&
                    (this.CONS3 == null || o.CONS3 == this.CONS3) &&
                    (this.InkCons == null || o.InkCons == this.InkCons) &&
                    (this.PaperCons == null || o.PaperCons == this.PaperCons) &&
                    (this.Rate1 == null || o.Rate1 == this.Rate1) &&
                    (this.Rate2 == null || o.Rate2 == this.Rate2) &&
                    (this.Rate3 == null || o.Rate3 == this.Rate3) &&
                    (this.InkRate == null || o.InkRate == this.InkRate) &&
                    (this.PaperRate == null || o.PaperRate == this.PaperRate) &&
                    (this.MarginRate == null || o.MarginRate == this.MarginRate) &&
                    (this.FOBAUD == null || o.FOBAUD == this.FOBAUD) &&
                    (this.Duty == null || o.Duty == this.Duty) &&
                    (this.Cost1 == null || o.Cost1 == this.Cost1) &&
                    (this.Cost2 == null || o.Cost2 == this.Cost2) &&
                    (this.Cost3 == null || o.Cost3 == this.Cost3) &&
                    (this.InkCost == null || o.InkCost == this.InkCost) &&
                    (this.PaperCost == null || o.PaperCost == this.PaperCost) &&
                    (this.MGTOH == null || o.MGTOH == this.MGTOH) &&
                    (this.IndicoOH == null || o.IndicoOH == this.IndicoOH) &&
                    (this.Depr == null || o.Depr == this.Depr) &&
                    (this.Landed == null || o.Landed == this.Landed) &&
                    (this.IndimanCIF == null || o.IndimanCIF == this.IndimanCIF) &&
                    (this.QuotedCIF == null || o.QuotedCIF == this.QuotedCIF) &&
                    (this.FobFactor == null || o.FobFactor == this.FobFactor) &&
                    (this.IndimanFOB == null || o.IndimanFOB == this.IndimanFOB) &&
                    (this.CalMGN == null || o.CalMGN == this.CalMGN) &&
                    (this.ActMgn == null || o.ActMgn == this.ActMgn) &&
                    (this.MP == null || o.MP == this.MP) &&
                    (this.QuotedMP == null || o.QuotedMP == this.QuotedMP) &&
                    (this.ExchangeRate == null || o.ExchangeRate == this.ExchangeRate) &&
                    (this.AirFregiht == null || o.AirFregiht == this.AirFregiht) &&
                    (this.ImpCharges == null || o.ImpCharges == this.ImpCharges) &&
                    (this.IndimanModifier == null || o.IndimanModifier.ID == this.IndimanModifier) &&
                    (this.IndimanModifiedDate == null || o.IndimanModifiedDate == this.IndimanModifiedDate) &&
                    (this.ShowToIndico == false || o.ShowToIndico == this.ShowToIndico) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.CostSheetBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.CostSheetBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.CostSheetBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.CostSheetBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.CostSheet> oQuery =
                (from o in context.CostSheet
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Pattern == 0 || this.Pattern == o.Pattern.ID) && 
                    (this.Fabric == 0 || this.Fabric == o.Fabric.ID) && 
                    (this.TotalFabricCost == null || this.TotalFabricCost == o.TotalFabricCost) && 
                    (this.TotalAccessoriesCost == null || this.TotalAccessoriesCost == o.TotalAccessoriesCost) && 
                    (this.HPCost == 0 || this.HPCost == o.HPCost) && 
                    (this.LabelCost == 0 || this.LabelCost == o.LabelCost) && 
                    (this.Other == null || this.Other == o.Other) && 
                    (this.Finance == 0 || this.Finance == o.Finance) && 
                    (this.Wastage == 0 || this.Wastage == o.Wastage) && 
                    (this.FOBExp == 0 || this.FOBExp == o.FOBExp) && 
                    (this.CM == 0 || this.CM == o.CM) && 
                    (this.JKFOBCost == 0 || this.JKFOBCost == o.JKFOBCost) && 
                    (this.QuotedFOBCost == null || this.QuotedFOBCost == o.QuotedFOBCost) && 
                    (this.Roundup == null || this.Roundup == o.Roundup) && 
                    (this.SMVRate == null || this.SMVRate == o.SMVRate) && 
                    (this.CalculateCM == null || this.CalculateCM == o.CalculateCM) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.Modifier == null || this.Modifier == o.Modifier.ID) && 
                    (this.ModifiedDate == null || this.ModifiedDate == o.ModifiedDate) && 
                    (this.SubWastage == null || this.SubWastage == o.SubWastage) && 
                    (this.SubFinance == null || this.SubFinance == o.SubFinance) && 
                    (this.SubCons == null || this.SubCons == o.SubCons) && 
                    (this.DutyRate == null || this.DutyRate == o.DutyRate) && 
                    (this.CONS1 == null || this.CONS1 == o.CONS1) && 
                    (this.CONS2 == null || this.CONS2 == o.CONS2) && 
                    (this.CONS3 == null || this.CONS3 == o.CONS3) && 
                    (this.InkCons == null || this.InkCons == o.InkCons) && 
                    (this.PaperCons == null || this.PaperCons == o.PaperCons) && 
                    (this.Rate1 == null || this.Rate1 == o.Rate1) && 
                    (this.Rate2 == null || this.Rate2 == o.Rate2) && 
                    (this.Rate3 == null || this.Rate3 == o.Rate3) && 
                    (this.InkRate == null || this.InkRate == o.InkRate) && 
                    (this.PaperRate == null || this.PaperRate == o.PaperRate) && 
                    (this.MarginRate == null || this.MarginRate == o.MarginRate) && 
                    (this.FOBAUD == null || this.FOBAUD == o.FOBAUD) && 
                    (this.Duty == null || this.Duty == o.Duty) && 
                    (this.Cost1 == null || this.Cost1 == o.Cost1) && 
                    (this.Cost2 == null || this.Cost2 == o.Cost2) && 
                    (this.Cost3 == null || this.Cost3 == o.Cost3) && 
                    (this.InkCost == null || this.InkCost == o.InkCost) && 
                    (this.PaperCost == null || this.PaperCost == o.PaperCost) && 
                    (this.MGTOH == null || this.MGTOH == o.MGTOH) && 
                    (this.IndicoOH == null || this.IndicoOH == o.IndicoOH) && 
                    (this.Depr == null || this.Depr == o.Depr) && 
                    (this.Landed == null || this.Landed == o.Landed) && 
                    (this.IndimanCIF == null || this.IndimanCIF == o.IndimanCIF) && 
                    (this.QuotedCIF == null || this.QuotedCIF == o.QuotedCIF) && 
                    (this.FobFactor == null || this.FobFactor == o.FobFactor) && 
                    (this.IndimanFOB == null || this.IndimanFOB == o.IndimanFOB) && 
                    (this.CalMGN == null || this.CalMGN == o.CalMGN) && 
                    (this.ActMgn == null || this.ActMgn == o.ActMgn) && 
                    (this.MP == null || this.MP == o.MP) && 
                    (this.QuotedMP == null || this.QuotedMP == o.QuotedMP) && 
                    (this.ExchangeRate == null || this.ExchangeRate == o.ExchangeRate) && 
                    (this.AirFregiht == null || this.AirFregiht == o.AirFregiht) && 
                    (this.ImpCharges == null || this.ImpCharges == o.ImpCharges) && 
                    (this.IndimanModifier == null || this.IndimanModifier == o.IndimanModifier.ID) && 
                    (this.IndimanModifiedDate == null || this.IndimanModifiedDate == o.IndimanModifiedDate) && 
                    (this.ShowToIndico == false || this.ShowToIndico == o.ShowToIndico) && 
                    ((o.CF1.Contains(this.CF1)) ||
                    (o.CF2.Contains(this.CF2)) ||
                    (o.CF3.Contains(this.CF3)) ||
                    (this.CF1 == null && this.CF2 == null && this.CF3 == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.CostSheetBO> costsheets = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return costsheets;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.CostSheet
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Pattern == 0 || this.Pattern == o.Pattern.ID) && 
                    (this.Fabric == 0 || this.Fabric == o.Fabric.ID) && 
                    (this.TotalFabricCost == null || this.TotalFabricCost == o.TotalFabricCost) && 
                    (this.TotalAccessoriesCost == null || this.TotalAccessoriesCost == o.TotalAccessoriesCost) && 
                    (this.HPCost == 0 || this.HPCost == o.HPCost) && 
                    (this.LabelCost == 0 || this.LabelCost == o.LabelCost) && 
                    (this.Other == null || this.Other == o.Other) && 
                    (this.Finance == 0 || this.Finance == o.Finance) && 
                    (this.Wastage == 0 || this.Wastage == o.Wastage) && 
                    (this.FOBExp == 0 || this.FOBExp == o.FOBExp) && 
                    (this.CM == 0 || this.CM == o.CM) && 
                    (this.JKFOBCost == 0 || this.JKFOBCost == o.JKFOBCost) && 
                    (this.QuotedFOBCost == null || this.QuotedFOBCost == o.QuotedFOBCost) && 
                    (this.Roundup == null || this.Roundup == o.Roundup) && 
                    (this.SMVRate == null || this.SMVRate == o.SMVRate) && 
                    (this.CalculateCM == null || this.CalculateCM == o.CalculateCM) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.Modifier == null || this.Modifier == o.Modifier.ID) && 
                    (this.ModifiedDate == null || this.ModifiedDate == o.ModifiedDate) && 
                    (this.SubWastage == null || this.SubWastage == o.SubWastage) && 
                    (this.SubFinance == null || this.SubFinance == o.SubFinance) && 
                    (this.SubCons == null || this.SubCons == o.SubCons) && 
                    (this.DutyRate == null || this.DutyRate == o.DutyRate) && 
                    (this.CONS1 == null || this.CONS1 == o.CONS1) && 
                    (this.CONS2 == null || this.CONS2 == o.CONS2) && 
                    (this.CONS3 == null || this.CONS3 == o.CONS3) && 
                    (this.InkCons == null || this.InkCons == o.InkCons) && 
                    (this.PaperCons == null || this.PaperCons == o.PaperCons) && 
                    (this.Rate1 == null || this.Rate1 == o.Rate1) && 
                    (this.Rate2 == null || this.Rate2 == o.Rate2) && 
                    (this.Rate3 == null || this.Rate3 == o.Rate3) && 
                    (this.InkRate == null || this.InkRate == o.InkRate) && 
                    (this.PaperRate == null || this.PaperRate == o.PaperRate) && 
                    (this.MarginRate == null || this.MarginRate == o.MarginRate) && 
                    (this.FOBAUD == null || this.FOBAUD == o.FOBAUD) && 
                    (this.Duty == null || this.Duty == o.Duty) && 
                    (this.Cost1 == null || this.Cost1 == o.Cost1) && 
                    (this.Cost2 == null || this.Cost2 == o.Cost2) && 
                    (this.Cost3 == null || this.Cost3 == o.Cost3) && 
                    (this.InkCost == null || this.InkCost == o.InkCost) && 
                    (this.PaperCost == null || this.PaperCost == o.PaperCost) && 
                    (this.MGTOH == null || this.MGTOH == o.MGTOH) && 
                    (this.IndicoOH == null || this.IndicoOH == o.IndicoOH) && 
                    (this.Depr == null || this.Depr == o.Depr) && 
                    (this.Landed == null || this.Landed == o.Landed) && 
                    (this.IndimanCIF == null || this.IndimanCIF == o.IndimanCIF) && 
                    (this.QuotedCIF == null || this.QuotedCIF == o.QuotedCIF) && 
                    (this.FobFactor == null || this.FobFactor == o.FobFactor) && 
                    (this.IndimanFOB == null || this.IndimanFOB == o.IndimanFOB) && 
                    (this.CalMGN == null || this.CalMGN == o.CalMGN) && 
                    (this.ActMgn == null || this.ActMgn == o.ActMgn) && 
                    (this.MP == null || this.MP == o.MP) && 
                    (this.QuotedMP == null || this.QuotedMP == o.QuotedMP) && 
                    (this.ExchangeRate == null || this.ExchangeRate == o.ExchangeRate) && 
                    (this.AirFregiht == null || this.AirFregiht == o.AirFregiht) && 
                    (this.ImpCharges == null || this.ImpCharges == o.ImpCharges) && 
                    (this.IndimanModifier == null || this.IndimanModifier == o.IndimanModifier.ID) && 
                    (this.IndimanModifiedDate == null || this.IndimanModifiedDate == o.IndimanModifiedDate) && 
                    (this.ShowToIndico == false || this.ShowToIndico == o.ShowToIndico) && 
                    ((o.CF1.Contains(this.CF1)) ||
                    (o.CF2.Contains(this.CF2)) ||
                    (o.CF3.Contains(this.CF3)) ||
                    (this.CF1 == null && this.CF2 == null && this.CF3 == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.CostSheetBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.CostSheetBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.CostSheetBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.CostSheetBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.CostSheetBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.CostSheetBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnCostSheetBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("CostSheetBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnCostSheetBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnCostSheetBOIDChanged();
        partial void OnCostSheetBOIDChanging(int value);
        
        partial void OnPatternChanged()
        {
            OnCostSheetBOPatternChanged();
        }
        
        partial void OnPatternChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("CostSheetBO.Pattern must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnCostSheetBOPatternChanging(value);
        }
        partial void OnPatternChanged();
        partial void OnPatternChanging(int value);
        partial void OnCostSheetBOPatternChanged();
        partial void OnCostSheetBOPatternChanging(int value);
        
        partial void OnFabricChanged()
        {
            OnCostSheetBOFabricChanged();
        }
        
        partial void OnFabricChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("CostSheetBO.Fabric must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnCostSheetBOFabricChanging(value);
        }
        partial void OnFabricChanged();
        partial void OnFabricChanging(int value);
        partial void OnCostSheetBOFabricChanged();
        partial void OnCostSheetBOFabricChanging(int value);
        
        partial void OnTotalFabricCostChanged()
        {
            OnCostSheetBOTotalFabricCostChanged();
        }
        
        partial void OnTotalFabricCostChanging(decimal? value)
        {
            OnCostSheetBOTotalFabricCostChanging(value);
        }
        partial void OnTotalFabricCostChanged();
        partial void OnTotalFabricCostChanging(decimal? value);
        partial void OnCostSheetBOTotalFabricCostChanged();
        partial void OnCostSheetBOTotalFabricCostChanging(decimal? value);
        
        partial void OnTotalAccessoriesCostChanged()
        {
            OnCostSheetBOTotalAccessoriesCostChanged();
        }
        
        partial void OnTotalAccessoriesCostChanging(decimal? value)
        {
            OnCostSheetBOTotalAccessoriesCostChanging(value);
        }
        partial void OnTotalAccessoriesCostChanged();
        partial void OnTotalAccessoriesCostChanging(decimal? value);
        partial void OnCostSheetBOTotalAccessoriesCostChanged();
        partial void OnCostSheetBOTotalAccessoriesCostChanging(decimal? value);
        
        partial void OnHPCostChanged()
        {
            OnCostSheetBOHPCostChanged();
        }
        
        partial void OnHPCostChanging(decimal value)
        {
            OnCostSheetBOHPCostChanging(value);
        }
        partial void OnHPCostChanged();
        partial void OnHPCostChanging(decimal value);
        partial void OnCostSheetBOHPCostChanged();
        partial void OnCostSheetBOHPCostChanging(decimal value);
        
        partial void OnLabelCostChanged()
        {
            OnCostSheetBOLabelCostChanged();
        }
        
        partial void OnLabelCostChanging(decimal value)
        {
            OnCostSheetBOLabelCostChanging(value);
        }
        partial void OnLabelCostChanged();
        partial void OnLabelCostChanging(decimal value);
        partial void OnCostSheetBOLabelCostChanged();
        partial void OnCostSheetBOLabelCostChanging(decimal value);
        
        partial void OnOtherChanged()
        {
            OnCostSheetBOOtherChanged();
        }
        
        partial void OnOtherChanging(decimal? value)
        {
            OnCostSheetBOOtherChanging(value);
        }
        partial void OnOtherChanged();
        partial void OnOtherChanging(decimal? value);
        partial void OnCostSheetBOOtherChanged();
        partial void OnCostSheetBOOtherChanging(decimal? value);
        
        partial void OnFinanceChanged()
        {
            OnCostSheetBOFinanceChanged();
        }
        
        partial void OnFinanceChanging(decimal value)
        {
            OnCostSheetBOFinanceChanging(value);
        }
        partial void OnFinanceChanged();
        partial void OnFinanceChanging(decimal value);
        partial void OnCostSheetBOFinanceChanged();
        partial void OnCostSheetBOFinanceChanging(decimal value);
        
        partial void OnWastageChanged()
        {
            OnCostSheetBOWastageChanged();
        }
        
        partial void OnWastageChanging(decimal value)
        {
            OnCostSheetBOWastageChanging(value);
        }
        partial void OnWastageChanged();
        partial void OnWastageChanging(decimal value);
        partial void OnCostSheetBOWastageChanged();
        partial void OnCostSheetBOWastageChanging(decimal value);
        
        partial void OnFOBExpChanged()
        {
            OnCostSheetBOFOBExpChanged();
        }
        
        partial void OnFOBExpChanging(decimal value)
        {
            OnCostSheetBOFOBExpChanging(value);
        }
        partial void OnFOBExpChanged();
        partial void OnFOBExpChanging(decimal value);
        partial void OnCostSheetBOFOBExpChanged();
        partial void OnCostSheetBOFOBExpChanging(decimal value);
        
        partial void OnCMChanged()
        {
            OnCostSheetBOCMChanged();
        }
        
        partial void OnCMChanging(decimal value)
        {
            OnCostSheetBOCMChanging(value);
        }
        partial void OnCMChanged();
        partial void OnCMChanging(decimal value);
        partial void OnCostSheetBOCMChanged();
        partial void OnCostSheetBOCMChanging(decimal value);
        
        partial void OnJKFOBCostChanged()
        {
            OnCostSheetBOJKFOBCostChanged();
        }
        
        partial void OnJKFOBCostChanging(decimal value)
        {
            OnCostSheetBOJKFOBCostChanging(value);
        }
        partial void OnJKFOBCostChanged();
        partial void OnJKFOBCostChanging(decimal value);
        partial void OnCostSheetBOJKFOBCostChanged();
        partial void OnCostSheetBOJKFOBCostChanging(decimal value);
        
        partial void OnQuotedFOBCostChanged()
        {
            OnCostSheetBOQuotedFOBCostChanged();
        }
        
        partial void OnQuotedFOBCostChanging(decimal? value)
        {
            OnCostSheetBOQuotedFOBCostChanging(value);
        }
        partial void OnQuotedFOBCostChanged();
        partial void OnQuotedFOBCostChanging(decimal? value);
        partial void OnCostSheetBOQuotedFOBCostChanged();
        partial void OnCostSheetBOQuotedFOBCostChanging(decimal? value);
        
        partial void OnRoundupChanged()
        {
            OnCostSheetBORoundupChanged();
        }
        
        partial void OnRoundupChanging(decimal? value)
        {
            OnCostSheetBORoundupChanging(value);
        }
        partial void OnRoundupChanged();
        partial void OnRoundupChanging(decimal? value);
        partial void OnCostSheetBORoundupChanged();
        partial void OnCostSheetBORoundupChanging(decimal? value);
        
        partial void OnSMVRateChanged()
        {
            OnCostSheetBOSMVRateChanged();
        }
        
        partial void OnSMVRateChanging(decimal? value)
        {
            OnCostSheetBOSMVRateChanging(value);
        }
        partial void OnSMVRateChanged();
        partial void OnSMVRateChanging(decimal? value);
        partial void OnCostSheetBOSMVRateChanged();
        partial void OnCostSheetBOSMVRateChanging(decimal? value);
        
        partial void OnCalculateCMChanged()
        {
            OnCostSheetBOCalculateCMChanged();
        }
        
        partial void OnCalculateCMChanging(decimal? value)
        {
            OnCostSheetBOCalculateCMChanging(value);
        }
        partial void OnCalculateCMChanged();
        partial void OnCalculateCMChanging(decimal? value);
        partial void OnCostSheetBOCalculateCMChanged();
        partial void OnCostSheetBOCalculateCMChanging(decimal? value);
        
        partial void OnCreatorChanged()
        {
            OnCostSheetBOCreatorChanged();
        }
        
        partial void OnCreatorChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("CostSheetBO.Creator must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnCostSheetBOCreatorChanging(value);
        }
        partial void OnCreatorChanged();
        partial void OnCreatorChanging(int value);
        partial void OnCostSheetBOCreatorChanged();
        partial void OnCostSheetBOCreatorChanging(int value);
        
        partial void OnCreatedDateChanged()
        {
            OnCostSheetBOCreatedDateChanged();
        }
        
        partial void OnCreatedDateChanging(DateTime value)
        {
            OnCostSheetBOCreatedDateChanging(value);
        }
        partial void OnCreatedDateChanged();
        partial void OnCreatedDateChanging(DateTime value);
        partial void OnCostSheetBOCreatedDateChanged();
        partial void OnCostSheetBOCreatedDateChanging(DateTime value);
        
        partial void OnModifierChanged()
        {
            OnCostSheetBOModifierChanged();
        }
        
        partial void OnModifierChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("CostSheetBO.Modifier must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnCostSheetBOModifierChanging(value);
        }
        partial void OnModifierChanged();
        partial void OnModifierChanging(int? value);
        partial void OnCostSheetBOModifierChanged();
        partial void OnCostSheetBOModifierChanging(int? value);
        
        partial void OnModifiedDateChanged()
        {
            OnCostSheetBOModifiedDateChanged();
        }
        
        partial void OnModifiedDateChanging(DateTime? value)
        {
            OnCostSheetBOModifiedDateChanging(value);
        }
        partial void OnModifiedDateChanged();
        partial void OnModifiedDateChanging(DateTime? value);
        partial void OnCostSheetBOModifiedDateChanged();
        partial void OnCostSheetBOModifiedDateChanging(DateTime? value);
        
        partial void OnSubWastageChanged()
        {
            OnCostSheetBOSubWastageChanged();
        }
        
        partial void OnSubWastageChanging(decimal? value)
        {
            OnCostSheetBOSubWastageChanging(value);
        }
        partial void OnSubWastageChanged();
        partial void OnSubWastageChanging(decimal? value);
        partial void OnCostSheetBOSubWastageChanged();
        partial void OnCostSheetBOSubWastageChanging(decimal? value);
        
        partial void OnSubFinanceChanged()
        {
            OnCostSheetBOSubFinanceChanged();
        }
        
        partial void OnSubFinanceChanging(decimal? value)
        {
            OnCostSheetBOSubFinanceChanging(value);
        }
        partial void OnSubFinanceChanged();
        partial void OnSubFinanceChanging(decimal? value);
        partial void OnCostSheetBOSubFinanceChanged();
        partial void OnCostSheetBOSubFinanceChanging(decimal? value);
        
        partial void OnSubConsChanged()
        {
            OnCostSheetBOSubConsChanged();
        }
        
        partial void OnSubConsChanging(decimal? value)
        {
            OnCostSheetBOSubConsChanging(value);
        }
        partial void OnSubConsChanged();
        partial void OnSubConsChanging(decimal? value);
        partial void OnCostSheetBOSubConsChanged();
        partial void OnCostSheetBOSubConsChanging(decimal? value);
        
        partial void OnDutyRateChanged()
        {
            OnCostSheetBODutyRateChanged();
        }
        
        partial void OnDutyRateChanging(decimal? value)
        {
            OnCostSheetBODutyRateChanging(value);
        }
        partial void OnDutyRateChanged();
        partial void OnDutyRateChanging(decimal? value);
        partial void OnCostSheetBODutyRateChanged();
        partial void OnCostSheetBODutyRateChanging(decimal? value);
        
        partial void OnCF1Changed()
        {
            OnCostSheetBOCF1Changed();
        }
        
        partial void OnCF1Changing(string value)
        {
            if (value != null && value.Length > 150)
            {
                throw new Exception(String.Format("CostSheetBO.CF1 has a maximum length of 150. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnCostSheetBOCF1Changing(value);
        }
        partial void OnCF1Changed();
        partial void OnCF1Changing(string value);
        partial void OnCostSheetBOCF1Changed();
        partial void OnCostSheetBOCF1Changing(string value);
        
        partial void OnCF2Changed()
        {
            OnCostSheetBOCF2Changed();
        }
        
        partial void OnCF2Changing(string value)
        {
            if (value != null && value.Length > 150)
            {
                throw new Exception(String.Format("CostSheetBO.CF2 has a maximum length of 150. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnCostSheetBOCF2Changing(value);
        }
        partial void OnCF2Changed();
        partial void OnCF2Changing(string value);
        partial void OnCostSheetBOCF2Changed();
        partial void OnCostSheetBOCF2Changing(string value);
        
        partial void OnCF3Changed()
        {
            OnCostSheetBOCF3Changed();
        }
        
        partial void OnCF3Changing(string value)
        {
            if (value != null && value.Length > 150)
            {
                throw new Exception(String.Format("CostSheetBO.CF3 has a maximum length of 150. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnCostSheetBOCF3Changing(value);
        }
        partial void OnCF3Changed();
        partial void OnCF3Changing(string value);
        partial void OnCostSheetBOCF3Changed();
        partial void OnCostSheetBOCF3Changing(string value);
        
        partial void OnCONS1Changed()
        {
            OnCostSheetBOCONS1Changed();
        }
        
        partial void OnCONS1Changing(decimal? value)
        {
            OnCostSheetBOCONS1Changing(value);
        }
        partial void OnCONS1Changed();
        partial void OnCONS1Changing(decimal? value);
        partial void OnCostSheetBOCONS1Changed();
        partial void OnCostSheetBOCONS1Changing(decimal? value);
        
        partial void OnCONS2Changed()
        {
            OnCostSheetBOCONS2Changed();
        }
        
        partial void OnCONS2Changing(decimal? value)
        {
            OnCostSheetBOCONS2Changing(value);
        }
        partial void OnCONS2Changed();
        partial void OnCONS2Changing(decimal? value);
        partial void OnCostSheetBOCONS2Changed();
        partial void OnCostSheetBOCONS2Changing(decimal? value);
        
        partial void OnCONS3Changed()
        {
            OnCostSheetBOCONS3Changed();
        }
        
        partial void OnCONS3Changing(decimal? value)
        {
            OnCostSheetBOCONS3Changing(value);
        }
        partial void OnCONS3Changed();
        partial void OnCONS3Changing(decimal? value);
        partial void OnCostSheetBOCONS3Changed();
        partial void OnCostSheetBOCONS3Changing(decimal? value);
        
        partial void OnInkConsChanged()
        {
            OnCostSheetBOInkConsChanged();
        }
        
        partial void OnInkConsChanging(decimal? value)
        {
            OnCostSheetBOInkConsChanging(value);
        }
        partial void OnInkConsChanged();
        partial void OnInkConsChanging(decimal? value);
        partial void OnCostSheetBOInkConsChanged();
        partial void OnCostSheetBOInkConsChanging(decimal? value);
        
        partial void OnPaperConsChanged()
        {
            OnCostSheetBOPaperConsChanged();
        }
        
        partial void OnPaperConsChanging(decimal? value)
        {
            OnCostSheetBOPaperConsChanging(value);
        }
        partial void OnPaperConsChanged();
        partial void OnPaperConsChanging(decimal? value);
        partial void OnCostSheetBOPaperConsChanged();
        partial void OnCostSheetBOPaperConsChanging(decimal? value);
        
        partial void OnRate1Changed()
        {
            OnCostSheetBORate1Changed();
        }
        
        partial void OnRate1Changing(decimal? value)
        {
            OnCostSheetBORate1Changing(value);
        }
        partial void OnRate1Changed();
        partial void OnRate1Changing(decimal? value);
        partial void OnCostSheetBORate1Changed();
        partial void OnCostSheetBORate1Changing(decimal? value);
        
        partial void OnRate2Changed()
        {
            OnCostSheetBORate2Changed();
        }
        
        partial void OnRate2Changing(decimal? value)
        {
            OnCostSheetBORate2Changing(value);
        }
        partial void OnRate2Changed();
        partial void OnRate2Changing(decimal? value);
        partial void OnCostSheetBORate2Changed();
        partial void OnCostSheetBORate2Changing(decimal? value);
        
        partial void OnRate3Changed()
        {
            OnCostSheetBORate3Changed();
        }
        
        partial void OnRate3Changing(decimal? value)
        {
            OnCostSheetBORate3Changing(value);
        }
        partial void OnRate3Changed();
        partial void OnRate3Changing(decimal? value);
        partial void OnCostSheetBORate3Changed();
        partial void OnCostSheetBORate3Changing(decimal? value);
        
        partial void OnInkRateChanged()
        {
            OnCostSheetBOInkRateChanged();
        }
        
        partial void OnInkRateChanging(decimal? value)
        {
            OnCostSheetBOInkRateChanging(value);
        }
        partial void OnInkRateChanged();
        partial void OnInkRateChanging(decimal? value);
        partial void OnCostSheetBOInkRateChanged();
        partial void OnCostSheetBOInkRateChanging(decimal? value);
        
        partial void OnPaperRateChanged()
        {
            OnCostSheetBOPaperRateChanged();
        }
        
        partial void OnPaperRateChanging(decimal? value)
        {
            OnCostSheetBOPaperRateChanging(value);
        }
        partial void OnPaperRateChanged();
        partial void OnPaperRateChanging(decimal? value);
        partial void OnCostSheetBOPaperRateChanged();
        partial void OnCostSheetBOPaperRateChanging(decimal? value);
        
        partial void OnMarginRateChanged()
        {
            OnCostSheetBOMarginRateChanged();
        }
        
        partial void OnMarginRateChanging(decimal? value)
        {
            OnCostSheetBOMarginRateChanging(value);
        }
        partial void OnMarginRateChanged();
        partial void OnMarginRateChanging(decimal? value);
        partial void OnCostSheetBOMarginRateChanged();
        partial void OnCostSheetBOMarginRateChanging(decimal? value);
        
        partial void OnFOBAUDChanged()
        {
            OnCostSheetBOFOBAUDChanged();
        }
        
        partial void OnFOBAUDChanging(decimal? value)
        {
            OnCostSheetBOFOBAUDChanging(value);
        }
        partial void OnFOBAUDChanged();
        partial void OnFOBAUDChanging(decimal? value);
        partial void OnCostSheetBOFOBAUDChanged();
        partial void OnCostSheetBOFOBAUDChanging(decimal? value);
        
        partial void OnDutyChanged()
        {
            OnCostSheetBODutyChanged();
        }
        
        partial void OnDutyChanging(decimal? value)
        {
            OnCostSheetBODutyChanging(value);
        }
        partial void OnDutyChanged();
        partial void OnDutyChanging(decimal? value);
        partial void OnCostSheetBODutyChanged();
        partial void OnCostSheetBODutyChanging(decimal? value);
        
        partial void OnCost1Changed()
        {
            OnCostSheetBOCost1Changed();
        }
        
        partial void OnCost1Changing(decimal? value)
        {
            OnCostSheetBOCost1Changing(value);
        }
        partial void OnCost1Changed();
        partial void OnCost1Changing(decimal? value);
        partial void OnCostSheetBOCost1Changed();
        partial void OnCostSheetBOCost1Changing(decimal? value);
        
        partial void OnCost2Changed()
        {
            OnCostSheetBOCost2Changed();
        }
        
        partial void OnCost2Changing(decimal? value)
        {
            OnCostSheetBOCost2Changing(value);
        }
        partial void OnCost2Changed();
        partial void OnCost2Changing(decimal? value);
        partial void OnCostSheetBOCost2Changed();
        partial void OnCostSheetBOCost2Changing(decimal? value);
        
        partial void OnCost3Changed()
        {
            OnCostSheetBOCost3Changed();
        }
        
        partial void OnCost3Changing(decimal? value)
        {
            OnCostSheetBOCost3Changing(value);
        }
        partial void OnCost3Changed();
        partial void OnCost3Changing(decimal? value);
        partial void OnCostSheetBOCost3Changed();
        partial void OnCostSheetBOCost3Changing(decimal? value);
        
        partial void OnInkCostChanged()
        {
            OnCostSheetBOInkCostChanged();
        }
        
        partial void OnInkCostChanging(decimal? value)
        {
            OnCostSheetBOInkCostChanging(value);
        }
        partial void OnInkCostChanged();
        partial void OnInkCostChanging(decimal? value);
        partial void OnCostSheetBOInkCostChanged();
        partial void OnCostSheetBOInkCostChanging(decimal? value);
        
        partial void OnPaperCostChanged()
        {
            OnCostSheetBOPaperCostChanged();
        }
        
        partial void OnPaperCostChanging(decimal? value)
        {
            OnCostSheetBOPaperCostChanging(value);
        }
        partial void OnPaperCostChanged();
        partial void OnPaperCostChanging(decimal? value);
        partial void OnCostSheetBOPaperCostChanged();
        partial void OnCostSheetBOPaperCostChanging(decimal? value);
        
        partial void OnMGTOHChanged()
        {
            OnCostSheetBOMGTOHChanged();
        }
        
        partial void OnMGTOHChanging(decimal? value)
        {
            OnCostSheetBOMGTOHChanging(value);
        }
        partial void OnMGTOHChanged();
        partial void OnMGTOHChanging(decimal? value);
        partial void OnCostSheetBOMGTOHChanged();
        partial void OnCostSheetBOMGTOHChanging(decimal? value);
        
        partial void OnIndicoOHChanged()
        {
            OnCostSheetBOIndicoOHChanged();
        }
        
        partial void OnIndicoOHChanging(decimal? value)
        {
            OnCostSheetBOIndicoOHChanging(value);
        }
        partial void OnIndicoOHChanged();
        partial void OnIndicoOHChanging(decimal? value);
        partial void OnCostSheetBOIndicoOHChanged();
        partial void OnCostSheetBOIndicoOHChanging(decimal? value);
        
        partial void OnDeprChanged()
        {
            OnCostSheetBODeprChanged();
        }
        
        partial void OnDeprChanging(decimal? value)
        {
            OnCostSheetBODeprChanging(value);
        }
        partial void OnDeprChanged();
        partial void OnDeprChanging(decimal? value);
        partial void OnCostSheetBODeprChanged();
        partial void OnCostSheetBODeprChanging(decimal? value);
        
        partial void OnLandedChanged()
        {
            OnCostSheetBOLandedChanged();
        }
        
        partial void OnLandedChanging(decimal? value)
        {
            OnCostSheetBOLandedChanging(value);
        }
        partial void OnLandedChanged();
        partial void OnLandedChanging(decimal? value);
        partial void OnCostSheetBOLandedChanged();
        partial void OnCostSheetBOLandedChanging(decimal? value);
        
        partial void OnIndimanCIFChanged()
        {
            OnCostSheetBOIndimanCIFChanged();
        }
        
        partial void OnIndimanCIFChanging(decimal? value)
        {
            OnCostSheetBOIndimanCIFChanging(value);
        }
        partial void OnIndimanCIFChanged();
        partial void OnIndimanCIFChanging(decimal? value);
        partial void OnCostSheetBOIndimanCIFChanged();
        partial void OnCostSheetBOIndimanCIFChanging(decimal? value);
        
        partial void OnQuotedCIFChanged()
        {
            OnCostSheetBOQuotedCIFChanged();
        }
        
        partial void OnQuotedCIFChanging(decimal? value)
        {
            OnCostSheetBOQuotedCIFChanging(value);
        }
        partial void OnQuotedCIFChanged();
        partial void OnQuotedCIFChanging(decimal? value);
        partial void OnCostSheetBOQuotedCIFChanged();
        partial void OnCostSheetBOQuotedCIFChanging(decimal? value);
        
        partial void OnFobFactorChanged()
        {
            OnCostSheetBOFobFactorChanged();
        }
        
        partial void OnFobFactorChanging(decimal? value)
        {
            OnCostSheetBOFobFactorChanging(value);
        }
        partial void OnFobFactorChanged();
        partial void OnFobFactorChanging(decimal? value);
        partial void OnCostSheetBOFobFactorChanged();
        partial void OnCostSheetBOFobFactorChanging(decimal? value);
        
        partial void OnIndimanFOBChanged()
        {
            OnCostSheetBOIndimanFOBChanged();
        }
        
        partial void OnIndimanFOBChanging(decimal? value)
        {
            OnCostSheetBOIndimanFOBChanging(value);
        }
        partial void OnIndimanFOBChanged();
        partial void OnIndimanFOBChanging(decimal? value);
        partial void OnCostSheetBOIndimanFOBChanged();
        partial void OnCostSheetBOIndimanFOBChanging(decimal? value);
        
        partial void OnCalMGNChanged()
        {
            OnCostSheetBOCalMGNChanged();
        }
        
        partial void OnCalMGNChanging(decimal? value)
        {
            OnCostSheetBOCalMGNChanging(value);
        }
        partial void OnCalMGNChanged();
        partial void OnCalMGNChanging(decimal? value);
        partial void OnCostSheetBOCalMGNChanged();
        partial void OnCostSheetBOCalMGNChanging(decimal? value);
        
        partial void OnActMgnChanged()
        {
            OnCostSheetBOActMgnChanged();
        }
        
        partial void OnActMgnChanging(decimal? value)
        {
            OnCostSheetBOActMgnChanging(value);
        }
        partial void OnActMgnChanged();
        partial void OnActMgnChanging(decimal? value);
        partial void OnCostSheetBOActMgnChanged();
        partial void OnCostSheetBOActMgnChanging(decimal? value);
        
        partial void OnMPChanged()
        {
            OnCostSheetBOMPChanged();
        }
        
        partial void OnMPChanging(decimal? value)
        {
            OnCostSheetBOMPChanging(value);
        }
        partial void OnMPChanged();
        partial void OnMPChanging(decimal? value);
        partial void OnCostSheetBOMPChanged();
        partial void OnCostSheetBOMPChanging(decimal? value);
        
        partial void OnQuotedMPChanged()
        {
            OnCostSheetBOQuotedMPChanged();
        }
        
        partial void OnQuotedMPChanging(decimal? value)
        {
            OnCostSheetBOQuotedMPChanging(value);
        }
        partial void OnQuotedMPChanged();
        partial void OnQuotedMPChanging(decimal? value);
        partial void OnCostSheetBOQuotedMPChanged();
        partial void OnCostSheetBOQuotedMPChanging(decimal? value);
        
        partial void OnExchangeRateChanged()
        {
            OnCostSheetBOExchangeRateChanged();
        }
        
        partial void OnExchangeRateChanging(decimal? value)
        {
            OnCostSheetBOExchangeRateChanging(value);
        }
        partial void OnExchangeRateChanged();
        partial void OnExchangeRateChanging(decimal? value);
        partial void OnCostSheetBOExchangeRateChanged();
        partial void OnCostSheetBOExchangeRateChanging(decimal? value);
        
        partial void OnAirFregihtChanged()
        {
            OnCostSheetBOAirFregihtChanged();
        }
        
        partial void OnAirFregihtChanging(decimal? value)
        {
            OnCostSheetBOAirFregihtChanging(value);
        }
        partial void OnAirFregihtChanged();
        partial void OnAirFregihtChanging(decimal? value);
        partial void OnCostSheetBOAirFregihtChanged();
        partial void OnCostSheetBOAirFregihtChanging(decimal? value);
        
        partial void OnImpChargesChanged()
        {
            OnCostSheetBOImpChargesChanged();
        }
        
        partial void OnImpChargesChanging(decimal? value)
        {
            OnCostSheetBOImpChargesChanging(value);
        }
        partial void OnImpChargesChanged();
        partial void OnImpChargesChanging(decimal? value);
        partial void OnCostSheetBOImpChargesChanged();
        partial void OnCostSheetBOImpChargesChanging(decimal? value);
        
        partial void OnIndimanModifierChanged()
        {
            OnCostSheetBOIndimanModifierChanged();
        }
        
        partial void OnIndimanModifierChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("CostSheetBO.IndimanModifier must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnCostSheetBOIndimanModifierChanging(value);
        }
        partial void OnIndimanModifierChanged();
        partial void OnIndimanModifierChanging(int? value);
        partial void OnCostSheetBOIndimanModifierChanged();
        partial void OnCostSheetBOIndimanModifierChanging(int? value);
        
        partial void OnIndimanModifiedDateChanged()
        {
            OnCostSheetBOIndimanModifiedDateChanged();
        }
        
        partial void OnIndimanModifiedDateChanging(DateTime? value)
        {
            OnCostSheetBOIndimanModifiedDateChanging(value);
        }
        partial void OnIndimanModifiedDateChanged();
        partial void OnIndimanModifiedDateChanging(DateTime? value);
        partial void OnCostSheetBOIndimanModifiedDateChanged();
        partial void OnCostSheetBOIndimanModifiedDateChanging(DateTime? value);
        
        partial void OnShowToIndicoChanged()
        {
            OnCostSheetBOShowToIndicoChanged();
        }
        
        partial void OnShowToIndicoChanging(bool value)
        {
            OnCostSheetBOShowToIndicoChanging(value);
        }
        partial void OnShowToIndicoChanged();
        partial void OnShowToIndicoChanging(bool value);
        partial void OnCostSheetBOShowToIndicoChanged();
        partial void OnCostSheetBOShowToIndicoChanging(bool value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.CostSheetBO))
                return 1;
            Indico.BusinessObjects.CostSheetBOComparer c = new Indico.BusinessObjects.CostSheetBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.CostSheetBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.CostSheet)sender);
            }
        }
        
        void CostSheetRemarkssWhereThisIsCostSheetList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.CostSheetRemarks obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.CostSheetRemarksBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.CostSheetRemarksBO>)sender)[((IndicoList<Indico.BusinessObjects.CostSheetRemarksBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.CostSheetRemarkssWhereThisIsCostSheet.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.CostSheetRemarksBO>)sender)[((IndicoList<Indico.BusinessObjects.CostSheetRemarksBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.CostSheetRemarkssWhereThisIsCostSheet.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void CostSheetRemarkssWhereThisIsCostSheetList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.CostSheetRemarks obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.CostSheetRemarksBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.CostSheetRemarksBO>)sender)[((IndicoList<Indico.BusinessObjects.CostSheetRemarksBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.CostSheetRemarkssWhereThisIsCostSheet.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.CostSheetRemarksBO>)sender)[((IndicoList<Indico.BusinessObjects.CostSheetRemarksBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.CostSheetRemarkssWhereThisIsCostSheet.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void IndimanCostSheetRemarkssWhereThisIsCostSheetList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.IndimanCostSheetRemarks obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.IndimanCostSheetRemarksBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.IndimanCostSheetRemarksBO>)sender)[((IndicoList<Indico.BusinessObjects.IndimanCostSheetRemarksBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.IndimanCostSheetRemarkssWhereThisIsCostSheet.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.IndimanCostSheetRemarksBO>)sender)[((IndicoList<Indico.BusinessObjects.IndimanCostSheetRemarksBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.IndimanCostSheetRemarkssWhereThisIsCostSheet.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void IndimanCostSheetRemarkssWhereThisIsCostSheetList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.IndimanCostSheetRemarks obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.IndimanCostSheetRemarksBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.IndimanCostSheetRemarksBO>)sender)[((IndicoList<Indico.BusinessObjects.IndimanCostSheetRemarksBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.IndimanCostSheetRemarkssWhereThisIsCostSheet.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.IndimanCostSheetRemarksBO>)sender)[((IndicoList<Indico.BusinessObjects.IndimanCostSheetRemarksBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.IndimanCostSheetRemarkssWhereThisIsCostSheet.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PatternSupportAccessorysWhereThisIsCostSheetList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.PatternSupportAccessory obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternSupportAccessorysWhereThisIsCostSheet.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternSupportAccessorysWhereThisIsCostSheet.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PatternSupportAccessorysWhereThisIsCostSheetList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.PatternSupportAccessory obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternSupportAccessorysWhereThisIsCostSheet.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternSupportAccessoryBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternSupportAccessorysWhereThisIsCostSheet.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PatternSupportFabricsWhereThisIsCostSheetList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.PatternSupportFabric obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PatternSupportFabricBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PatternSupportFabricBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternSupportFabricBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternSupportFabricsWhereThisIsCostSheet.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PatternSupportFabricBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternSupportFabricBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternSupportFabricsWhereThisIsCostSheet.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PatternSupportFabricsWhereThisIsCostSheetList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.PatternSupportFabric obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PatternSupportFabricBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PatternSupportFabricBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternSupportFabricBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternSupportFabricsWhereThisIsCostSheet.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PatternSupportFabricBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternSupportFabricBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternSupportFabricsWhereThisIsCostSheet.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
            this._costSheetRemarkssWhereThisIsCostSheetLoaded = false;
            if (this.costSheetRemarkssWhereThisIsCostSheetList != null)
            {
                this.costSheetRemarkssWhereThisIsCostSheetList.OnBeforeRemove -= new EventHandler(CostSheetRemarkssWhereThisIsCostSheetList_OnBeforeRemove);
                this.costSheetRemarkssWhereThisIsCostSheetList.OnAfterAdd -= new EventHandler(CostSheetRemarkssWhereThisIsCostSheetList_OnAfterAdd);
            }
            this._indimanCostSheetRemarkssWhereThisIsCostSheetLoaded = false;
            if (this.indimanCostSheetRemarkssWhereThisIsCostSheetList != null)
            {
                this.indimanCostSheetRemarkssWhereThisIsCostSheetList.OnBeforeRemove -= new EventHandler(IndimanCostSheetRemarkssWhereThisIsCostSheetList_OnBeforeRemove);
                this.indimanCostSheetRemarkssWhereThisIsCostSheetList.OnAfterAdd -= new EventHandler(IndimanCostSheetRemarkssWhereThisIsCostSheetList_OnAfterAdd);
            }
            this._patternSupportAccessorysWhereThisIsCostSheetLoaded = false;
            if (this.patternSupportAccessorysWhereThisIsCostSheetList != null)
            {
                this.patternSupportAccessorysWhereThisIsCostSheetList.OnBeforeRemove -= new EventHandler(PatternSupportAccessorysWhereThisIsCostSheetList_OnBeforeRemove);
                this.patternSupportAccessorysWhereThisIsCostSheetList.OnAfterAdd -= new EventHandler(PatternSupportAccessorysWhereThisIsCostSheetList_OnAfterAdd);
            }
            this._patternSupportFabricsWhereThisIsCostSheetLoaded = false;
            if (this.patternSupportFabricsWhereThisIsCostSheetList != null)
            {
                this.patternSupportFabricsWhereThisIsCostSheetList.OnBeforeRemove -= new EventHandler(PatternSupportFabricsWhereThisIsCostSheetList_OnBeforeRemove);
                this.patternSupportFabricsWhereThisIsCostSheetList.OnAfterAdd -= new EventHandler(PatternSupportFabricsWhereThisIsCostSheetList_OnAfterAdd);
            }
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region CostSheetBOComparer
    public class CostSheetBOComparer : IComparer<Indico.BusinessObjects.CostSheetBO>
    {
        private string propertyToCompareName;
        public CostSheetBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.CostSheetBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.CostSheetBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public CostSheetBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.CostSheetBO> Members
        public int Compare(Indico.BusinessObjects.CostSheetBO x, Indico.BusinessObjects.CostSheetBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.CostSheetBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.CostSheetBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.CostSheetBO x, Indico.BusinessObjects.CostSheetBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
