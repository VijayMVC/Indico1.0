// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class EmbroideryDetailsBO : BusinessObject, IComparable
    {
        #region fields
        #region Scalar Fields
        private int id;
        private int _embroidery;
        private int _fabricColor;
        private int _fabricType;
        private decimal? _height;
        private string _location = string.Empty;
        private string _notes;
        private int _status;
        private decimal? _width;
        #endregion
        
        #region Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.EmbroideryBO _objEmbroidery;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.AccessoryColorBO _objFabricColor;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.FabricTypeBO _objFabricType;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.EmbroideryStatusBO _objStatus;
        #endregion
        
        #region Foreign Table Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.EmbroideryImageBO> embroideryImagesWhereThisIsEmbroideryDetailsList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _embroideryImagesWhereThisIsEmbroideryDetailsLoaded;
        #endregion
        
        #region Other fields
        
        private Indico.DAL.EmbroideryDetails _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>.</summary>
        public int Embroidery
        {   
            get {return _embroidery;}
            set 
            {
                OnEmbroideryChanging(value);
                _embroidery = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Embroidery = (from o in this._context.Context.Embroidery
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Embroidery>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Embroidery = null;
                OnEmbroideryChanged();
            }
        }
        /// <summary>.</summary>
        public int FabricColor
        {   
            get {return _fabricColor;}
            set 
            {
                OnFabricColorChanging(value);
                _fabricColor = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.FabricColor = (from o in this._context.Context.AccessoryColor
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.AccessoryColor>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.FabricColor = null;
                OnFabricColorChanged();
            }
        }
        /// <summary>.</summary>
        public int FabricType
        {   
            get {return _fabricType;}
            set 
            {
                OnFabricTypeChanging(value);
                _fabricType = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.FabricType = (from o in this._context.Context.FabricType
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.FabricType>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.FabricType = null;
                OnFabricTypeChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? Height
        {   
            get {return _height;}
            set 
            {
                OnHeightChanging(value);
                _height = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Height = value;
                }
                OnHeightChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string Location
        {   
            get {return _location;}
            set 
            {
                OnLocationChanging(value);
                _location = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Location = value;
                }
                OnLocationChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string Notes
        {   
            get {return _notes;}
            set 
            {
                OnNotesChanging(value);
                _notes = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Notes = value;
                }
                OnNotesChanged();
            }
        }
        /// <summary>.</summary>
        public int Status
        {   
            get {return _status;}
            set 
            {
                OnStatusChanging(value);
                _status = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Status = (from o in this._context.Context.EmbroideryStatus
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.EmbroideryStatus>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Status = null;
                OnStatusChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? Width
        {   
            get {return _width;}
            set 
            {
                OnWidthChanging(value);
                _width = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Width = value;
                }
                OnWidthChanged();
            }
        }
        
        internal Indico.DAL.EmbroideryDetails ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        ///<summary>The EmbroideryBO object identified by the value of Embroidery</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.EmbroideryBO objEmbroidery
        {
            get
            {
                if ( _embroidery > 0 && _objEmbroidery == null)
                {
                        if (this._context == null)
                        {
                            _objEmbroidery = new Indico.BusinessObjects.EmbroideryBO();
                        }
                        else
                        {
                            _objEmbroidery = new Indico.BusinessObjects.EmbroideryBO(ref this._context);
                        }
                        _objEmbroidery.ID = _embroidery;
                        _objEmbroidery.GetObject(); 
                }
                return _objEmbroidery;
            }
            set
            { 
                _objEmbroidery = value;
                _embroidery = _objEmbroidery.ID;
            }
        }
        ///<summary>The AccessoryColorBO object identified by the value of FabricColor</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.AccessoryColorBO objFabricColor
        {
            get
            {
                if ( _fabricColor > 0 && _objFabricColor == null)
                {
                        if (this._context == null)
                        {
                            _objFabricColor = new Indico.BusinessObjects.AccessoryColorBO();
                        }
                        else
                        {
                            _objFabricColor = new Indico.BusinessObjects.AccessoryColorBO(ref this._context);
                        }
                        _objFabricColor.ID = _fabricColor;
                        _objFabricColor.GetObject(); 
                }
                return _objFabricColor;
            }
            set
            { 
                _objFabricColor = value;
                _fabricColor = _objFabricColor.ID;
            }
        }
        ///<summary>The FabricTypeBO object identified by the value of FabricType</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.FabricTypeBO objFabricType
        {
            get
            {
                if ( _fabricType > 0 && _objFabricType == null)
                {
                        if (this._context == null)
                        {
                            _objFabricType = new Indico.BusinessObjects.FabricTypeBO();
                        }
                        else
                        {
                            _objFabricType = new Indico.BusinessObjects.FabricTypeBO(ref this._context);
                        }
                        _objFabricType.ID = _fabricType;
                        _objFabricType.GetObject(); 
                }
                return _objFabricType;
            }
            set
            { 
                _objFabricType = value;
                _fabricType = _objFabricType.ID;
            }
        }
        ///<summary>The EmbroideryStatusBO object identified by the value of Status</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.EmbroideryStatusBO objStatus
        {
            get
            {
                if ( _status > 0 && _objStatus == null)
                {
                        if (this._context == null)
                        {
                            _objStatus = new Indico.BusinessObjects.EmbroideryStatusBO();
                        }
                        else
                        {
                            _objStatus = new Indico.BusinessObjects.EmbroideryStatusBO(ref this._context);
                        }
                        _objStatus.ID = _status;
                        _objStatus.GetObject(); 
                }
                return _objStatus;
            }
            set
            { 
                _objStatus = value;
                _status = _objStatus.ID;
            }
        }
        #endregion
        
        #region Foreign Object Foreign Key Collections
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.EmbroideryImageBO> EmbroideryImagesWhereThisIsEmbroideryDetails // FK_EmbroideryImage_EmbroideryDetails
        {
            get
            {
                if (!_embroideryImagesWhereThisIsEmbroideryDetailsLoaded)
                {
                    _embroideryImagesWhereThisIsEmbroideryDetailsLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.EmbroideryDetails obj = (from o in context.EmbroideryDetails
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.EmbroideryImagesWhereThisIsEmbroideryDetails.Load();
                        embroideryImagesWhereThisIsEmbroideryDetailsList = new IndicoList<Indico.BusinessObjects.EmbroideryImageBO>(obj.EmbroideryImagesWhereThisIsEmbroideryDetails.Count);
                        
                        foreach (Indico.DAL.EmbroideryImage o in obj.EmbroideryImagesWhereThisIsEmbroideryDetails)
                        {
                            Indico.BusinessObjects.EmbroideryImageBO fkObj = new Indico.BusinessObjects.EmbroideryImageBO(o, ref this._context);
                            embroideryImagesWhereThisIsEmbroideryDetailsList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        embroideryImagesWhereThisIsEmbroideryDetailsList = new IndicoList<Indico.BusinessObjects.EmbroideryImageBO>();
                    }
                    
                    embroideryImagesWhereThisIsEmbroideryDetailsList.OnBeforeRemove += new EventHandler(EmbroideryImagesWhereThisIsEmbroideryDetailsList_OnBeforeRemove);
                    embroideryImagesWhereThisIsEmbroideryDetailsList.OnAfterAdd += new EventHandler(EmbroideryImagesWhereThisIsEmbroideryDetailsList_OnAfterAdd);
                }
                
                return embroideryImagesWhereThisIsEmbroideryDetailsList;
            }
        }
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the EmbroideryDetailsBO class using the supplied Indico.DAL.EmbroideryDetails. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.EmbroideryDetails whose properties will be used to initialise the EmbroideryDetailsBO</param>
        internal EmbroideryDetailsBO(Indico.DAL.EmbroideryDetails obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.EmbroideryDetails 
            this.ID = obj.ID;
            
            this.Embroidery = (obj.EmbroideryReference.EntityKey != null && obj.EmbroideryReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.EmbroideryReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.FabricColor = (obj.FabricColorReference.EntityKey != null && obj.FabricColorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.FabricColorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.FabricType = (obj.FabricTypeReference.EntityKey != null && obj.FabricTypeReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.FabricTypeReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Height = obj.Height;
            this.Location = obj.Location;
            this.Notes = obj.Notes;
            this.Status = (obj.StatusReference.EntityKey != null && obj.StatusReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.StatusReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Width = obj.Width;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.EmbroideryDetails SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.EmbroideryDetails properties
            Indico.DAL.EmbroideryDetails obj = new Indico.DAL.EmbroideryDetails();
            
            if (this.ID > 0)
            {
                obj = context.EmbroideryDetails.FirstOrDefault<EmbroideryDetails>(o => o.ID == this.ID);
            }
            
            obj.Height = this.Height;
            obj.Location = this.Location;
            obj.Notes = this.Notes;
            obj.Width = this.Width;
            
            if (this.Embroidery > 0) obj.Embroidery = context.Embroidery.FirstOrDefault(o => o.ID == this.Embroidery);
            if (this.FabricColor > 0) obj.FabricColor = context.AccessoryColor.FirstOrDefault(o => o.ID == this.FabricColor);
            if (this.FabricType > 0) obj.FabricType = context.FabricType.FirstOrDefault(o => o.ID == this.FabricType);
            if (this.Status > 0) obj.Status = context.EmbroideryStatus.FirstOrDefault(o => o.ID == this.Status);
            
            if (_embroideryImagesWhereThisIsEmbroideryDetailsLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.EmbroideryImageBO.ToEntityList(this.EmbroideryImagesWhereThisIsEmbroideryDetails, context), 
                    obj.EmbroideryImagesWhereThisIsEmbroideryDetails);
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.EmbroideryDetails))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.EmbroideryDetails obj = (Indico.DAL.EmbroideryDetails)eObj;
            
            // set the Indico.BusinessObjects.EmbroideryDetailsBO properties
            this.ID = obj.ID;
            
            this.Height = obj.Height;
            this.Location = obj.Location;
            this.Notes = obj.Notes;
            this.Width = obj.Width;
            
            this.Embroidery = (obj.EmbroideryReference.EntityKey != null && obj.EmbroideryReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.EmbroideryReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.FabricColor = (obj.FabricColorReference.EntityKey != null && obj.FabricColorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.FabricColorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.FabricType = (obj.FabricTypeReference.EntityKey != null && obj.FabricTypeReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.FabricTypeReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Status = (obj.StatusReference.EntityKey != null && obj.StatusReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.StatusReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.EmbroideryDetailsBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.EmbroideryDetailsBO properties
            this.ID = obj.ID;
            
            this.Embroidery = obj.Embroidery;
            this.FabricColor = obj.FabricColor;
            this.FabricType = obj.FabricType;
            this.Height = obj.Height;
            this.Location = obj.Location;
            this.Notes = obj.Notes;
            this.Status = obj.Status;
            this.Width = obj.Width;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.EmbroideryDetailsBO> IQueryableToList(IQueryable<Indico.DAL.EmbroideryDetails> oQuery)
        {
            List<Indico.DAL.EmbroideryDetails> oList = oQuery.ToList();
            List<Indico.BusinessObjects.EmbroideryDetailsBO> rList = new List<Indico.BusinessObjects.EmbroideryDetailsBO>(oList.Count);
            foreach (Indico.DAL.EmbroideryDetails o in oList)
            {
                Indico.BusinessObjects.EmbroideryDetailsBO obj = new Indico.BusinessObjects.EmbroideryDetailsBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.EmbroideryDetailsBO> ToList(IEnumerable<Indico.DAL.EmbroideryDetails> oQuery)
        {
            List<Indico.DAL.EmbroideryDetails> oList = oQuery.ToList();
            List<Indico.BusinessObjects.EmbroideryDetailsBO> rList = new List<Indico.BusinessObjects.EmbroideryDetailsBO>(oList.Count);
            foreach (Indico.DAL.EmbroideryDetails o in oList)
            {
                Indico.BusinessObjects.EmbroideryDetailsBO obj = new Indico.BusinessObjects.EmbroideryDetailsBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.EmbroideryDetails> ToEntityList(List<EmbroideryDetailsBO> bos, IndicoEntities context)
        {
            // build a List of EmbroideryDetails entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.EmbroideryDetails.Count() == 0) ? new List<Indico.DAL.EmbroideryDetails>() : (context.EmbroideryDetails.Where(BuildContainsExpression<EmbroideryDetails, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.EmbroideryDetails>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.EmbroideryDetails> ToEntityCollection(List<EmbroideryDetailsBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of EmbroideryDetails entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.EmbroideryDetails> el = (context.EmbroideryDetails.Count() == 0) ? new List<Indico.DAL.EmbroideryDetails>() : 
                context.EmbroideryDetails.Where(BuildContainsExpression<EmbroideryDetails, int>(e => e.ID, ids))
                .ToList<Indico.DAL.EmbroideryDetails>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.EmbroideryDetails> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.EmbroideryDetails>();
                
            foreach (Indico.DAL.EmbroideryDetails r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.EmbroideryDetails ToEntity(IndicoEntities context)
        {
            return (from o in context.EmbroideryDetails
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToEmbroideryDetails(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.EmbroideryDetails obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToEmbroideryDetails(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.EmbroideryDetails obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.EmbroideryDetails obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.EmbroideryDetailsBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.EmbroideryDetailsBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.EmbroideryDetails> oQuery =
                        from o in context.EmbroideryDetails
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.EmbroideryDetails> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.EmbroideryDetailsBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.EmbroideryDetailsBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.EmbroideryDetailsBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.EmbroideryDetailsBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.EmbroideryDetails> oQuery =
                (from o in context.EmbroideryDetails
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.EmbroideryDetailsBO> embroiderydetailss = IQueryableToList(oQuery);
            context.Dispose();
            return embroiderydetailss;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.EmbroideryDetailsBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.EmbroideryDetailsBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.EmbroideryDetailsBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.EmbroideryDetailsBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.EmbroideryDetails> oQuery =
                (from o in context.EmbroideryDetails
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Location == string.Empty || this.Location == o.Location) &&
                    (this.FabricColor == 0 || this.FabricColor == o.FabricColor.ID) &&
                    (this.FabricType == 0 || this.FabricType == o.FabricType.ID) &&
                    (this.Width == null || this.Width == o.Width) &&
                    (this.Height == null || this.Height == o.Height) &&
                    (this.Status == 0 || this.Status == o.Status.ID) &&
                    (this.Notes == null || this.Notes == o.Notes) &&
                    (this.Embroidery == 0 || this.Embroidery == o.Embroidery.ID) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.EmbroideryDetailsBO> embroiderydetailss = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return embroiderydetailss;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.EmbroideryDetails
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Location == string.Empty || this.Location == o.Location) &&
                    (this.FabricColor == 0 || this.FabricColor == o.FabricColor.ID) &&
                    (this.FabricType == 0 || this.FabricType == o.FabricType.ID) &&
                    (this.Width == null || this.Width == o.Width) &&
                    (this.Height == null || this.Height == o.Height) &&
                    (this.Status == 0 || this.Status == o.Status.ID) &&
                    (this.Notes == null || this.Notes == o.Notes) &&
                    (this.Embroidery == 0 || this.Embroidery == o.Embroidery.ID) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.EmbroideryDetailsBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.EmbroideryDetailsBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.EmbroideryDetailsBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.EmbroideryDetailsBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.EmbroideryDetails> oQuery =
                (from o in context.EmbroideryDetails
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Location == string.Empty || o.Location.Contains(this.Location)) &&
                    (this.FabricColor == 0 || o.FabricColor.ID == this.FabricColor) &&
                    (this.FabricType == 0 || o.FabricType.ID == this.FabricType) &&
                    (this.Width == null || o.Width == this.Width) &&
                    (this.Height == null || o.Height == this.Height) &&
                    (this.Status == 0 || o.Status.ID == this.Status) &&
                    (this.Notes == null || o.Notes.Contains(this.Notes)) &&
                    (this.Embroidery == 0 || o.Embroidery.ID == this.Embroidery) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.EmbroideryDetailsBO> embroiderydetailss = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return embroiderydetailss;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.EmbroideryDetails
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Location == string.Empty || o.Location.Contains(this.Location)) &&
                    (this.FabricColor == 0 || o.FabricColor.ID == this.FabricColor) &&
                    (this.FabricType == 0 || o.FabricType.ID == this.FabricType) &&
                    (this.Width == null || o.Width == this.Width) &&
                    (this.Height == null || o.Height == this.Height) &&
                    (this.Status == 0 || o.Status.ID == this.Status) &&
                    (this.Notes == null || o.Notes.Contains(this.Notes)) &&
                    (this.Embroidery == 0 || o.Embroidery.ID == this.Embroidery) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.EmbroideryDetailsBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.EmbroideryDetailsBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.EmbroideryDetailsBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.EmbroideryDetailsBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.EmbroideryDetails> oQuery =
                (from o in context.EmbroideryDetails
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.FabricColor == 0 || this.FabricColor == o.FabricColor.ID) && 
                    (this.FabricType == 0 || this.FabricType == o.FabricType.ID) && 
                    (this.Width == null || this.Width == o.Width) && 
                    (this.Height == null || this.Height == o.Height) && 
                    (this.Status == 0 || this.Status == o.Status.ID) && 
                    (this.Embroidery == 0 || this.Embroidery == o.Embroidery.ID) && 
                    ((o.Location.Contains(this.Location)) ||
                    (o.Notes.Contains(this.Notes)) ||
                    (this.Location == null && this.Notes == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.EmbroideryDetailsBO> embroiderydetailss = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return embroiderydetailss;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.EmbroideryDetails
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.FabricColor == 0 || this.FabricColor == o.FabricColor.ID) && 
                    (this.FabricType == 0 || this.FabricType == o.FabricType.ID) && 
                    (this.Width == null || this.Width == o.Width) && 
                    (this.Height == null || this.Height == o.Height) && 
                    (this.Status == 0 || this.Status == o.Status.ID) && 
                    (this.Embroidery == 0 || this.Embroidery == o.Embroidery.ID) && 
                    ((o.Location.Contains(this.Location)) ||
                    (o.Notes.Contains(this.Notes)) ||
                    (this.Location == null && this.Notes == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.EmbroideryDetailsBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.EmbroideryDetailsBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.EmbroideryDetailsBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.EmbroideryDetailsBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.EmbroideryDetailsBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.EmbroideryDetailsBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnEmbroideryDetailsBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("EmbroideryDetailsBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnEmbroideryDetailsBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnEmbroideryDetailsBOIDChanged();
        partial void OnEmbroideryDetailsBOIDChanging(int value);
        
        partial void OnLocationChanged()
        {
            OnEmbroideryDetailsBOLocationChanged();
        }
        
        partial void OnLocationChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("EmbroideryDetailsBO.Location has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnEmbroideryDetailsBOLocationChanging(value);
        }
        partial void OnLocationChanged();
        partial void OnLocationChanging(string value);
        partial void OnEmbroideryDetailsBOLocationChanged();
        partial void OnEmbroideryDetailsBOLocationChanging(string value);
        
        partial void OnFabricColorChanged()
        {
            OnEmbroideryDetailsBOFabricColorChanged();
        }
        
        partial void OnFabricColorChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("EmbroideryDetailsBO.FabricColor must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnEmbroideryDetailsBOFabricColorChanging(value);
        }
        partial void OnFabricColorChanged();
        partial void OnFabricColorChanging(int value);
        partial void OnEmbroideryDetailsBOFabricColorChanged();
        partial void OnEmbroideryDetailsBOFabricColorChanging(int value);
        
        partial void OnFabricTypeChanged()
        {
            OnEmbroideryDetailsBOFabricTypeChanged();
        }
        
        partial void OnFabricTypeChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("EmbroideryDetailsBO.FabricType must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnEmbroideryDetailsBOFabricTypeChanging(value);
        }
        partial void OnFabricTypeChanged();
        partial void OnFabricTypeChanging(int value);
        partial void OnEmbroideryDetailsBOFabricTypeChanged();
        partial void OnEmbroideryDetailsBOFabricTypeChanging(int value);
        
        partial void OnWidthChanged()
        {
            OnEmbroideryDetailsBOWidthChanged();
        }
        
        partial void OnWidthChanging(decimal? value)
        {
            OnEmbroideryDetailsBOWidthChanging(value);
        }
        partial void OnWidthChanged();
        partial void OnWidthChanging(decimal? value);
        partial void OnEmbroideryDetailsBOWidthChanged();
        partial void OnEmbroideryDetailsBOWidthChanging(decimal? value);
        
        partial void OnHeightChanged()
        {
            OnEmbroideryDetailsBOHeightChanged();
        }
        
        partial void OnHeightChanging(decimal? value)
        {
            OnEmbroideryDetailsBOHeightChanging(value);
        }
        partial void OnHeightChanged();
        partial void OnHeightChanging(decimal? value);
        partial void OnEmbroideryDetailsBOHeightChanged();
        partial void OnEmbroideryDetailsBOHeightChanging(decimal? value);
        
        partial void OnStatusChanged()
        {
            OnEmbroideryDetailsBOStatusChanged();
        }
        
        partial void OnStatusChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("EmbroideryDetailsBO.Status must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnEmbroideryDetailsBOStatusChanging(value);
        }
        partial void OnStatusChanged();
        partial void OnStatusChanging(int value);
        partial void OnEmbroideryDetailsBOStatusChanged();
        partial void OnEmbroideryDetailsBOStatusChanging(int value);
        
        partial void OnNotesChanged()
        {
            OnEmbroideryDetailsBONotesChanged();
        }
        
        partial void OnNotesChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("EmbroideryDetailsBO.Notes has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnEmbroideryDetailsBONotesChanging(value);
        }
        partial void OnNotesChanged();
        partial void OnNotesChanging(string value);
        partial void OnEmbroideryDetailsBONotesChanged();
        partial void OnEmbroideryDetailsBONotesChanging(string value);
        
        partial void OnEmbroideryChanged()
        {
            OnEmbroideryDetailsBOEmbroideryChanged();
        }
        
        partial void OnEmbroideryChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("EmbroideryDetailsBO.Embroidery must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnEmbroideryDetailsBOEmbroideryChanging(value);
        }
        partial void OnEmbroideryChanged();
        partial void OnEmbroideryChanging(int value);
        partial void OnEmbroideryDetailsBOEmbroideryChanged();
        partial void OnEmbroideryDetailsBOEmbroideryChanging(int value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.EmbroideryDetailsBO))
                return 1;
            Indico.BusinessObjects.EmbroideryDetailsBOComparer c = new Indico.BusinessObjects.EmbroideryDetailsBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.EmbroideryDetailsBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.EmbroideryDetails)sender);
            }
        }
        
        void EmbroideryImagesWhereThisIsEmbroideryDetailsList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.EmbroideryImage obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.EmbroideryImageBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.EmbroideryImageBO>)sender)[((IndicoList<Indico.BusinessObjects.EmbroideryImageBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.EmbroideryImagesWhereThisIsEmbroideryDetails.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.EmbroideryImageBO>)sender)[((IndicoList<Indico.BusinessObjects.EmbroideryImageBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.EmbroideryImagesWhereThisIsEmbroideryDetails.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void EmbroideryImagesWhereThisIsEmbroideryDetailsList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.EmbroideryImage obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.EmbroideryImageBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.EmbroideryImageBO>)sender)[((IndicoList<Indico.BusinessObjects.EmbroideryImageBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.EmbroideryImagesWhereThisIsEmbroideryDetails.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.EmbroideryImageBO>)sender)[((IndicoList<Indico.BusinessObjects.EmbroideryImageBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.EmbroideryImagesWhereThisIsEmbroideryDetails.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
            this._embroideryImagesWhereThisIsEmbroideryDetailsLoaded = false;
            if (this.embroideryImagesWhereThisIsEmbroideryDetailsList != null)
            {
                this.embroideryImagesWhereThisIsEmbroideryDetailsList.OnBeforeRemove -= new EventHandler(EmbroideryImagesWhereThisIsEmbroideryDetailsList_OnBeforeRemove);
                this.embroideryImagesWhereThisIsEmbroideryDetailsList.OnAfterAdd -= new EventHandler(EmbroideryImagesWhereThisIsEmbroideryDetailsList_OnAfterAdd);
            }
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region EmbroideryDetailsBOComparer
    public class EmbroideryDetailsBOComparer : IComparer<Indico.BusinessObjects.EmbroideryDetailsBO>
    {
        private string propertyToCompareName;
        public EmbroideryDetailsBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.EmbroideryDetailsBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.EmbroideryDetailsBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public EmbroideryDetailsBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.EmbroideryDetailsBO> Members
        public int Compare(Indico.BusinessObjects.EmbroideryDetailsBO x, Indico.BusinessObjects.EmbroideryDetailsBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.EmbroideryDetailsBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.EmbroideryDetailsBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.EmbroideryDetailsBO x, Indico.BusinessObjects.EmbroideryDetailsBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
