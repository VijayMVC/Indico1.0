// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class JobNameBO : BusinessObject, IComparable
    {
        #region fields
        #region Scalar Fields
        private int id;
        private string _address;
        private string _city;
        private int? _client;
        private string _country;
        private DateTime _createdDate = DateTime.MinValue;
        private int _creator;
        private string _email;
        private DateTime _modifiedDate = DateTime.MinValue;
        private int _modifier;
        private string _name = string.Empty;
        private string _phone;
        private string _postalCode;
        private string _state;
        #endregion
        
        #region Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.ClientBO _objClient;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objCreator;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objModifier;
        #endregion
        
        #region Foreign Table Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.ArtWorkBO> artWorksWhereThisIsClientList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _artWorksWhereThisIsClientLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.DistributorClientAddressBO> distributorClientAddresssWhereThisIsClientList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _distributorClientAddresssWhereThisIsClientLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.OrderBO> ordersWhereThisIsClientList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _ordersWhereThisIsClientLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.ProductBO> productsWhereThisIsClientList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _productsWhereThisIsClientLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.VisualLayoutBO> visualLayoutsWhereThisIsClientList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _visualLayoutsWhereThisIsClientLoaded;
        #endregion
        
        #region Other fields
        
        private Indico.DAL.JobName _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>Address line 1. The maximum length of this property is 255.</summary>
        public string Address
        {   
            get {return _address;}
            set 
            {
                OnAddressChanging(value);
                _address = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Address = value;
                }
                OnAddressChanged();
            }
        }
        /// <summary>City. The maximum length of this property is 255.</summary>
        public string City
        {   
            get {return _city;}
            set 
            {
                OnCityChanging(value);
                _city = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.City = value;
                }
                OnCityChanged();
            }
        }
        /// <summary>.</summary>
        public int? Client
        {   
            get {return _client;}
            set 
            {
                OnClientChanging(value);
                _client = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.Client = (from o in this._context.Context.Client
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Client>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Client = null;
                OnClientChanged();
            }
        }
        /// <summary>Country. The maximum length of this property is 255.</summary>
        public string Country
        {   
            get {return _country;}
            set 
            {
                OnCountryChanging(value);
                _country = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Country = value;
                }
                OnCountryChanged();
            }
        }
        /// <summary>the DateTime this client was created.</summary>
        public DateTime CreatedDate
        {   
            get {return _createdDate;}
            set 
            {
                OnCreatedDateChanging(value);
                _createdDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CreatedDate = value;
                }
                OnCreatedDateChanged();
            }
        }
        /// <summary>The ID of the user who created this client.</summary>
        public int Creator
        {   
            get {return _creator;}
            set 
            {
                OnCreatorChanging(value);
                _creator = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Creator = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Creator = null;
                OnCreatorChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string Email
        {   
            get {return _email;}
            set 
            {
                OnEmailChanging(value);
                _email = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Email = value;
                }
                OnEmailChanged();
            }
        }
        /// <summary>The DateTime this client was last updated.</summary>
        public DateTime ModifiedDate
        {   
            get {return _modifiedDate;}
            set 
            {
                OnModifiedDateChanging(value);
                _modifiedDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ModifiedDate = value;
                }
                OnModifiedDateChanged();
            }
        }
        /// <summary>The ID of the user who last modified this client.</summary>
        public int Modifier
        {   
            get {return _modifier;}
            set 
            {
                OnModifierChanging(value);
                _modifier = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Modifier = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Modifier = null;
                OnModifierChanged();
            }
        }
        /// <summary>Name of this client. The maximum length of this property is 255.</summary>
        public string Name
        {   
            get {return _name;}
            set 
            {
                OnNameChanging(value);
                _name = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Name = value;
                }
                OnNameChanged();
            }
        }
        /// <summary>Telephone1. The maximum length of this property is 255.</summary>
        public string Phone
        {   
            get {return _phone;}
            set 
            {
                OnPhoneChanging(value);
                _phone = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Phone = value;
                }
                OnPhoneChanged();
            }
        }
        /// <summary>Postal code. The maximum length of this property is 255.</summary>
        public string PostalCode
        {   
            get {return _postalCode;}
            set 
            {
                OnPostalCodeChanging(value);
                _postalCode = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.PostalCode = value;
                }
                OnPostalCodeChanged();
            }
        }
        /// <summary>State. The maximum length of this property is 255.</summary>
        public string State
        {   
            get {return _state;}
            set 
            {
                OnStateChanging(value);
                _state = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.State = value;
                }
                OnStateChanged();
            }
        }
        
        internal Indico.DAL.JobName ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        ///<summary>The ClientBO object identified by the value of Client</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.ClientBO objClient
        {
            get
            {
                if (_client != null && _client > 0 && _objClient == null)
                {
                        if (this._context == null)
                        {
                            _objClient = new Indico.BusinessObjects.ClientBO();
                        }
                        else
                        {
                            _objClient = new Indico.BusinessObjects.ClientBO(ref this._context);
                        }
                        _objClient.ID = Convert.ToInt32(_client);
                        _objClient.GetObject(); 
                }
                return _objClient;
            }
            set
            { 
                _objClient = value;
                _client = _objClient.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Creator</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objCreator
        {
            get
            {
                if ( _creator > 0 && _objCreator == null)
                {
                        if (this._context == null)
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objCreator.ID = _creator;
                        _objCreator.GetObject(); 
                }
                return _objCreator;
            }
            set
            { 
                _objCreator = value;
                _creator = _objCreator.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Modifier</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objModifier
        {
            get
            {
                if ( _modifier > 0 && _objModifier == null)
                {
                        if (this._context == null)
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objModifier.ID = _modifier;
                        _objModifier.GetObject(); 
                }
                return _objModifier;
            }
            set
            { 
                _objModifier = value;
                _modifier = _objModifier.ID;
            }
        }
        #endregion
        
        #region Foreign Object Foreign Key Collections
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.ArtWorkBO> ArtWorksWhereThisIsClient // FK_ArtWork_Client
        {
            get
            {
                if (!_artWorksWhereThisIsClientLoaded)
                {
                    _artWorksWhereThisIsClientLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.JobName obj = (from o in context.JobName
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.ArtWorksWhereThisIsClient.Load();
                        artWorksWhereThisIsClientList = new IndicoList<Indico.BusinessObjects.ArtWorkBO>(obj.ArtWorksWhereThisIsClient.Count);
                        
                        foreach (Indico.DAL.ArtWork o in obj.ArtWorksWhereThisIsClient)
                        {
                            Indico.BusinessObjects.ArtWorkBO fkObj = new Indico.BusinessObjects.ArtWorkBO(o, ref this._context);
                            artWorksWhereThisIsClientList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        artWorksWhereThisIsClientList = new IndicoList<Indico.BusinessObjects.ArtWorkBO>();
                    }
                    
                    artWorksWhereThisIsClientList.OnBeforeRemove += new EventHandler(ArtWorksWhereThisIsClientList_OnBeforeRemove);
                    artWorksWhereThisIsClientList.OnAfterAdd += new EventHandler(ArtWorksWhereThisIsClientList_OnAfterAdd);
                }
                
                return artWorksWhereThisIsClientList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.DistributorClientAddressBO> DistributorClientAddresssWhereThisIsClient // FK_DistributorClientAddress_Client
        {
            get
            {
                if (!_distributorClientAddresssWhereThisIsClientLoaded)
                {
                    _distributorClientAddresssWhereThisIsClientLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.JobName obj = (from o in context.JobName
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.DistributorClientAddresssWhereThisIsClient.Load();
                        distributorClientAddresssWhereThisIsClientList = new IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>(obj.DistributorClientAddresssWhereThisIsClient.Count);
                        
                        foreach (Indico.DAL.DistributorClientAddress o in obj.DistributorClientAddresssWhereThisIsClient)
                        {
                            Indico.BusinessObjects.DistributorClientAddressBO fkObj = new Indico.BusinessObjects.DistributorClientAddressBO(o, ref this._context);
                            distributorClientAddresssWhereThisIsClientList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        distributorClientAddresssWhereThisIsClientList = new IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>();
                    }
                    
                    distributorClientAddresssWhereThisIsClientList.OnBeforeRemove += new EventHandler(DistributorClientAddresssWhereThisIsClientList_OnBeforeRemove);
                    distributorClientAddresssWhereThisIsClientList.OnAfterAdd += new EventHandler(DistributorClientAddresssWhereThisIsClientList_OnAfterAdd);
                }
                
                return distributorClientAddresssWhereThisIsClientList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.OrderBO> OrdersWhereThisIsClient // FK_Order_Client
        {
            get
            {
                if (!_ordersWhereThisIsClientLoaded)
                {
                    _ordersWhereThisIsClientLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.JobName obj = (from o in context.JobName
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.OrdersWhereThisIsClient.Load();
                        ordersWhereThisIsClientList = new IndicoList<Indico.BusinessObjects.OrderBO>(obj.OrdersWhereThisIsClient.Count);
                        
                        foreach (Indico.DAL.Order o in obj.OrdersWhereThisIsClient)
                        {
                            Indico.BusinessObjects.OrderBO fkObj = new Indico.BusinessObjects.OrderBO(o, ref this._context);
                            ordersWhereThisIsClientList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        ordersWhereThisIsClientList = new IndicoList<Indico.BusinessObjects.OrderBO>();
                    }
                    
                    ordersWhereThisIsClientList.OnBeforeRemove += new EventHandler(OrdersWhereThisIsClientList_OnBeforeRemove);
                    ordersWhereThisIsClientList.OnAfterAdd += new EventHandler(OrdersWhereThisIsClientList_OnAfterAdd);
                }
                
                return ordersWhereThisIsClientList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.ProductBO> ProductsWhereThisIsClient // FK_Product_Contact
        {
            get
            {
                if (!_productsWhereThisIsClientLoaded)
                {
                    _productsWhereThisIsClientLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.JobName obj = (from o in context.JobName
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.ProductsWhereThisIsClient.Load();
                        productsWhereThisIsClientList = new IndicoList<Indico.BusinessObjects.ProductBO>(obj.ProductsWhereThisIsClient.Count);
                        
                        foreach (Indico.DAL.Product o in obj.ProductsWhereThisIsClient)
                        {
                            Indico.BusinessObjects.ProductBO fkObj = new Indico.BusinessObjects.ProductBO(o, ref this._context);
                            productsWhereThisIsClientList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        productsWhereThisIsClientList = new IndicoList<Indico.BusinessObjects.ProductBO>();
                    }
                    
                    productsWhereThisIsClientList.OnBeforeRemove += new EventHandler(ProductsWhereThisIsClientList_OnBeforeRemove);
                    productsWhereThisIsClientList.OnAfterAdd += new EventHandler(ProductsWhereThisIsClientList_OnAfterAdd);
                }
                
                return productsWhereThisIsClientList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.VisualLayoutBO> VisualLayoutsWhereThisIsClient // FK_VisualLayout_Client
        {
            get
            {
                if (!_visualLayoutsWhereThisIsClientLoaded)
                {
                    _visualLayoutsWhereThisIsClientLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.JobName obj = (from o in context.JobName
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.VisualLayoutsWhereThisIsClient.Load();
                        visualLayoutsWhereThisIsClientList = new IndicoList<Indico.BusinessObjects.VisualLayoutBO>(obj.VisualLayoutsWhereThisIsClient.Count);
                        
                        foreach (Indico.DAL.VisualLayout o in obj.VisualLayoutsWhereThisIsClient)
                        {
                            Indico.BusinessObjects.VisualLayoutBO fkObj = new Indico.BusinessObjects.VisualLayoutBO(o, ref this._context);
                            visualLayoutsWhereThisIsClientList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        visualLayoutsWhereThisIsClientList = new IndicoList<Indico.BusinessObjects.VisualLayoutBO>();
                    }
                    
                    visualLayoutsWhereThisIsClientList.OnBeforeRemove += new EventHandler(VisualLayoutsWhereThisIsClientList_OnBeforeRemove);
                    visualLayoutsWhereThisIsClientList.OnAfterAdd += new EventHandler(VisualLayoutsWhereThisIsClientList_OnAfterAdd);
                }
                
                return visualLayoutsWhereThisIsClientList;
            }
        }
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the JobNameBO class using the supplied Indico.DAL.JobName. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.JobName whose properties will be used to initialise the JobNameBO</param>
        internal JobNameBO(Indico.DAL.JobName obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.JobName 
            this.ID = obj.ID;
            
            this.Address = obj.Address;
            this.City = obj.City;
            this.Client = (obj.ClientReference.EntityKey != null && obj.ClientReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ClientReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Country = obj.Country;
            this.CreatedDate = obj.CreatedDate;
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Email = obj.Email;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Name = obj.Name;
            this.Phone = obj.Phone;
            this.PostalCode = obj.PostalCode;
            this.State = obj.State;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.JobName SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.JobName properties
            Indico.DAL.JobName obj = new Indico.DAL.JobName();
            
            if (this.ID > 0)
            {
                obj = context.JobName.FirstOrDefault<JobName>(o => o.ID == this.ID);
            }
            
            obj.Address = this.Address;
            obj.City = this.City;
            obj.Country = this.Country;
            obj.CreatedDate = this.CreatedDate;
            obj.Email = this.Email;
            obj.ModifiedDate = this.ModifiedDate;
            obj.Name = this.Name;
            obj.Phone = this.Phone;
            obj.PostalCode = this.PostalCode;
            obj.State = this.State;
            
            if (this.Client != null && this.Client > 0) obj.Client = context.Client.FirstOrDefault(o => o.ID == this.Client);
            if (this.Creator > 0) obj.Creator = context.User.FirstOrDefault(o => o.ID == this.Creator);
            if (this.Modifier > 0) obj.Modifier = context.User.FirstOrDefault(o => o.ID == this.Modifier);
            
            if (_artWorksWhereThisIsClientLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.ArtWorkBO.ToEntityList(this.ArtWorksWhereThisIsClient, context), 
                    obj.ArtWorksWhereThisIsClient);
            if (_distributorClientAddresssWhereThisIsClientLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.DistributorClientAddressBO.ToEntityList(this.DistributorClientAddresssWhereThisIsClient, context), 
                    obj.DistributorClientAddresssWhereThisIsClient);
            if (_ordersWhereThisIsClientLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.OrderBO.ToEntityList(this.OrdersWhereThisIsClient, context), 
                    obj.OrdersWhereThisIsClient);
            if (_productsWhereThisIsClientLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.ProductBO.ToEntityList(this.ProductsWhereThisIsClient, context), 
                    obj.ProductsWhereThisIsClient);
            if (_visualLayoutsWhereThisIsClientLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.VisualLayoutBO.ToEntityList(this.VisualLayoutsWhereThisIsClient, context), 
                    obj.VisualLayoutsWhereThisIsClient);
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.JobName))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.JobName obj = (Indico.DAL.JobName)eObj;
            
            // set the Indico.BusinessObjects.JobNameBO properties
            this.ID = obj.ID;
            
            this.Address = obj.Address;
            this.City = obj.City;
            this.Country = obj.Country;
            this.CreatedDate = obj.CreatedDate;
            this.Email = obj.Email;
            this.ModifiedDate = obj.ModifiedDate;
            this.Name = obj.Name;
            this.Phone = obj.Phone;
            this.PostalCode = obj.PostalCode;
            this.State = obj.State;
            
            this.Client = (obj.ClientReference.EntityKey != null && obj.ClientReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ClientReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.JobNameBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.JobNameBO properties
            this.ID = obj.ID;
            
            this.Address = obj.Address;
            this.City = obj.City;
            this.Client = obj.Client;
            this.Country = obj.Country;
            this.CreatedDate = obj.CreatedDate;
            this.Creator = obj.Creator;
            this.Email = obj.Email;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = obj.Modifier;
            this.Name = obj.Name;
            this.Phone = obj.Phone;
            this.PostalCode = obj.PostalCode;
            this.State = obj.State;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.JobNameBO> IQueryableToList(IQueryable<Indico.DAL.JobName> oQuery)
        {
            List<Indico.DAL.JobName> oList = oQuery.ToList();
            List<Indico.BusinessObjects.JobNameBO> rList = new List<Indico.BusinessObjects.JobNameBO>(oList.Count);
            foreach (Indico.DAL.JobName o in oList)
            {
                Indico.BusinessObjects.JobNameBO obj = new Indico.BusinessObjects.JobNameBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.JobNameBO> ToList(IEnumerable<Indico.DAL.JobName> oQuery)
        {
            List<Indico.DAL.JobName> oList = oQuery.ToList();
            List<Indico.BusinessObjects.JobNameBO> rList = new List<Indico.BusinessObjects.JobNameBO>(oList.Count);
            foreach (Indico.DAL.JobName o in oList)
            {
                Indico.BusinessObjects.JobNameBO obj = new Indico.BusinessObjects.JobNameBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.JobName> ToEntityList(List<JobNameBO> bos, IndicoEntities context)
        {
            // build a List of JobName entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.JobName.Count() == 0) ? new List<Indico.DAL.JobName>() : (context.JobName.Where(BuildContainsExpression<JobName, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.JobName>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.JobName> ToEntityCollection(List<JobNameBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of JobName entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.JobName> el = (context.JobName.Count() == 0) ? new List<Indico.DAL.JobName>() : 
                context.JobName.Where(BuildContainsExpression<JobName, int>(e => e.ID, ids))
                .ToList<Indico.DAL.JobName>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.JobName> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.JobName>();
                
            foreach (Indico.DAL.JobName r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.JobName ToEntity(IndicoEntities context)
        {
            return (from o in context.JobName
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToJobName(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.JobName obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToJobName(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.JobName obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.JobName obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.JobNameBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.JobNameBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.JobName> oQuery =
                        from o in context.JobName
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.JobName> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.JobNameBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.JobNameBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.JobNameBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.JobNameBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.JobName> oQuery =
                (from o in context.JobName
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.JobNameBO> jobnames = IQueryableToList(oQuery);
            context.Dispose();
            return jobnames;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.JobNameBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.JobNameBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.JobNameBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.JobNameBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.JobName> oQuery =
                (from o in context.JobName
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Name == string.Empty || this.Name == o.Name) &&
                    (this.Address == null || this.Address == o.Address) &&
                    (this.City == null || this.City == o.City) &&
                    (this.State == null || this.State == o.State) &&
                    (this.PostalCode == null || this.PostalCode == o.PostalCode) &&
                    (this.Country == null || this.Country == o.Country) &&
                    (this.Phone == null || this.Phone == o.Phone) &&
                    (this.Email == null || this.Email == o.Email) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) &&
                    (this.Client == null || this.Client == o.Client.ID) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.JobNameBO> jobnames = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return jobnames;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.JobName
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Name == string.Empty || this.Name == o.Name) &&
                    (this.Address == null || this.Address == o.Address) &&
                    (this.City == null || this.City == o.City) &&
                    (this.State == null || this.State == o.State) &&
                    (this.PostalCode == null || this.PostalCode == o.PostalCode) &&
                    (this.Country == null || this.Country == o.Country) &&
                    (this.Phone == null || this.Phone == o.Phone) &&
                    (this.Email == null || this.Email == o.Email) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) &&
                    (this.Client == null || this.Client == o.Client.ID) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.JobNameBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.JobNameBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.JobNameBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.JobNameBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.JobName> oQuery =
                (from o in context.JobName
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Name == string.Empty || o.Name.Contains(this.Name)) &&
                    (this.Address == null || o.Address.Contains(this.Address)) &&
                    (this.City == null || o.City.Contains(this.City)) &&
                    (this.State == null || o.State.Contains(this.State)) &&
                    (this.PostalCode == null || o.PostalCode.Contains(this.PostalCode)) &&
                    (this.Country == null || o.Country.Contains(this.Country)) &&
                    (this.Phone == null || o.Phone.Contains(this.Phone)) &&
                    (this.Email == null || o.Email.Contains(this.Email)) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.ModifiedDate == DateTime.MinValue || o.ModifiedDate == this.ModifiedDate) &&
                    (this.Client == null || o.Client.ID == this.Client) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.JobNameBO> jobnames = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return jobnames;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.JobName
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Name == string.Empty || o.Name.Contains(this.Name)) &&
                    (this.Address == null || o.Address.Contains(this.Address)) &&
                    (this.City == null || o.City.Contains(this.City)) &&
                    (this.State == null || o.State.Contains(this.State)) &&
                    (this.PostalCode == null || o.PostalCode.Contains(this.PostalCode)) &&
                    (this.Country == null || o.Country.Contains(this.Country)) &&
                    (this.Phone == null || o.Phone.Contains(this.Phone)) &&
                    (this.Email == null || o.Email.Contains(this.Email)) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.ModifiedDate == DateTime.MinValue || o.ModifiedDate == this.ModifiedDate) &&
                    (this.Client == null || o.Client.ID == this.Client) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.JobNameBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.JobNameBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.JobNameBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.JobNameBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.JobName> oQuery =
                (from o in context.JobName
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) && 
                    (this.Client == null || this.Client == o.Client.ID) && 
                    ((o.Name.Contains(this.Name)) ||
                    (o.Address.Contains(this.Address)) ||
                    (o.City.Contains(this.City)) ||
                    (o.State.Contains(this.State)) ||
                    (o.PostalCode.Contains(this.PostalCode)) ||
                    (o.Country.Contains(this.Country)) ||
                    (o.Phone.Contains(this.Phone)) ||
                    (o.Email.Contains(this.Email)) ||
                    (this.Name == null && this.Address == null && this.City == null && this.State == null && this.PostalCode == null && this.Country == null && this.Phone == null && this.Email == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.JobNameBO> jobnames = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return jobnames;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.JobName
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) && 
                    (this.Client == null || this.Client == o.Client.ID) && 
                    ((o.Name.Contains(this.Name)) ||
                    (o.Address.Contains(this.Address)) ||
                    (o.City.Contains(this.City)) ||
                    (o.State.Contains(this.State)) ||
                    (o.PostalCode.Contains(this.PostalCode)) ||
                    (o.Country.Contains(this.Country)) ||
                    (o.Phone.Contains(this.Phone)) ||
                    (o.Email.Contains(this.Email)) ||
                    (this.Name == null && this.Address == null && this.City == null && this.State == null && this.PostalCode == null && this.Country == null && this.Phone == null && this.Email == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.JobNameBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.JobNameBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.JobNameBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.JobNameBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.JobNameBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.JobNameBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnJobNameBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("JobNameBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnJobNameBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnJobNameBOIDChanged();
        partial void OnJobNameBOIDChanging(int value);
        
        partial void OnNameChanged()
        {
            OnJobNameBONameChanged();
        }
        
        partial void OnNameChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("JobNameBO.Name has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnJobNameBONameChanging(value);
        }
        partial void OnNameChanged();
        partial void OnNameChanging(string value);
        partial void OnJobNameBONameChanged();
        partial void OnJobNameBONameChanging(string value);
        
        partial void OnAddressChanged()
        {
            OnJobNameBOAddressChanged();
        }
        
        partial void OnAddressChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("JobNameBO.Address has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnJobNameBOAddressChanging(value);
        }
        partial void OnAddressChanged();
        partial void OnAddressChanging(string value);
        partial void OnJobNameBOAddressChanged();
        partial void OnJobNameBOAddressChanging(string value);
        
        partial void OnCityChanged()
        {
            OnJobNameBOCityChanged();
        }
        
        partial void OnCityChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("JobNameBO.City has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnJobNameBOCityChanging(value);
        }
        partial void OnCityChanged();
        partial void OnCityChanging(string value);
        partial void OnJobNameBOCityChanged();
        partial void OnJobNameBOCityChanging(string value);
        
        partial void OnStateChanged()
        {
            OnJobNameBOStateChanged();
        }
        
        partial void OnStateChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("JobNameBO.State has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnJobNameBOStateChanging(value);
        }
        partial void OnStateChanged();
        partial void OnStateChanging(string value);
        partial void OnJobNameBOStateChanged();
        partial void OnJobNameBOStateChanging(string value);
        
        partial void OnPostalCodeChanged()
        {
            OnJobNameBOPostalCodeChanged();
        }
        
        partial void OnPostalCodeChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("JobNameBO.PostalCode has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnJobNameBOPostalCodeChanging(value);
        }
        partial void OnPostalCodeChanged();
        partial void OnPostalCodeChanging(string value);
        partial void OnJobNameBOPostalCodeChanged();
        partial void OnJobNameBOPostalCodeChanging(string value);
        
        partial void OnCountryChanged()
        {
            OnJobNameBOCountryChanged();
        }
        
        partial void OnCountryChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("JobNameBO.Country has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnJobNameBOCountryChanging(value);
        }
        partial void OnCountryChanged();
        partial void OnCountryChanging(string value);
        partial void OnJobNameBOCountryChanged();
        partial void OnJobNameBOCountryChanging(string value);
        
        partial void OnPhoneChanged()
        {
            OnJobNameBOPhoneChanged();
        }
        
        partial void OnPhoneChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("JobNameBO.Phone has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnJobNameBOPhoneChanging(value);
        }
        partial void OnPhoneChanged();
        partial void OnPhoneChanging(string value);
        partial void OnJobNameBOPhoneChanged();
        partial void OnJobNameBOPhoneChanging(string value);
        
        partial void OnEmailChanged()
        {
            OnJobNameBOEmailChanged();
        }
        
        partial void OnEmailChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("JobNameBO.Email has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnJobNameBOEmailChanging(value);
        }
        partial void OnEmailChanged();
        partial void OnEmailChanging(string value);
        partial void OnJobNameBOEmailChanged();
        partial void OnJobNameBOEmailChanging(string value);
        
        partial void OnCreatorChanged()
        {
            OnJobNameBOCreatorChanged();
        }
        
        partial void OnCreatorChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("JobNameBO.Creator must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnJobNameBOCreatorChanging(value);
        }
        partial void OnCreatorChanged();
        partial void OnCreatorChanging(int value);
        partial void OnJobNameBOCreatorChanged();
        partial void OnJobNameBOCreatorChanging(int value);
        
        partial void OnCreatedDateChanged()
        {
            OnJobNameBOCreatedDateChanged();
        }
        
        partial void OnCreatedDateChanging(DateTime value)
        {
            OnJobNameBOCreatedDateChanging(value);
        }
        partial void OnCreatedDateChanged();
        partial void OnCreatedDateChanging(DateTime value);
        partial void OnJobNameBOCreatedDateChanged();
        partial void OnJobNameBOCreatedDateChanging(DateTime value);
        
        partial void OnModifierChanged()
        {
            OnJobNameBOModifierChanged();
        }
        
        partial void OnModifierChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("JobNameBO.Modifier must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnJobNameBOModifierChanging(value);
        }
        partial void OnModifierChanged();
        partial void OnModifierChanging(int value);
        partial void OnJobNameBOModifierChanged();
        partial void OnJobNameBOModifierChanging(int value);
        
        partial void OnModifiedDateChanged()
        {
            OnJobNameBOModifiedDateChanged();
        }
        
        partial void OnModifiedDateChanging(DateTime value)
        {
            OnJobNameBOModifiedDateChanging(value);
        }
        partial void OnModifiedDateChanged();
        partial void OnModifiedDateChanging(DateTime value);
        partial void OnJobNameBOModifiedDateChanged();
        partial void OnJobNameBOModifiedDateChanging(DateTime value);
        
        partial void OnClientChanged()
        {
            OnJobNameBOClientChanged();
        }
        
        partial void OnClientChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("JobNameBO.Client must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnJobNameBOClientChanging(value);
        }
        partial void OnClientChanged();
        partial void OnClientChanging(int? value);
        partial void OnJobNameBOClientChanged();
        partial void OnJobNameBOClientChanging(int? value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.JobNameBO))
                return 1;
            Indico.BusinessObjects.JobNameBOComparer c = new Indico.BusinessObjects.JobNameBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.JobNameBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.JobName)sender);
            }
        }
        
        void ArtWorksWhereThisIsClientList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.ArtWork obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.ArtWorkBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.ArtWorkBO>)sender)[((IndicoList<Indico.BusinessObjects.ArtWorkBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.ArtWorksWhereThisIsClient.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.ArtWorkBO>)sender)[((IndicoList<Indico.BusinessObjects.ArtWorkBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.ArtWorksWhereThisIsClient.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void ArtWorksWhereThisIsClientList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.ArtWork obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.ArtWorkBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.ArtWorkBO>)sender)[((IndicoList<Indico.BusinessObjects.ArtWorkBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.ArtWorksWhereThisIsClient.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.ArtWorkBO>)sender)[((IndicoList<Indico.BusinessObjects.ArtWorkBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.ArtWorksWhereThisIsClient.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void DistributorClientAddresssWhereThisIsClientList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.DistributorClientAddress obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.DistributorClientAddresssWhereThisIsClient.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.DistributorClientAddresssWhereThisIsClient.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void DistributorClientAddresssWhereThisIsClientList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.DistributorClientAddress obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.DistributorClientAddresssWhereThisIsClient.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.DistributorClientAddresssWhereThisIsClient.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrdersWhereThisIsClientList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Order obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrdersWhereThisIsClient.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrdersWhereThisIsClient.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrdersWhereThisIsClientList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Order obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrdersWhereThisIsClient.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrdersWhereThisIsClient.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void ProductsWhereThisIsClientList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Product obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.ProductBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.ProductBO>)sender)[((IndicoList<Indico.BusinessObjects.ProductBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.ProductsWhereThisIsClient.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.ProductBO>)sender)[((IndicoList<Indico.BusinessObjects.ProductBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.ProductsWhereThisIsClient.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void ProductsWhereThisIsClientList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Product obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.ProductBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.ProductBO>)sender)[((IndicoList<Indico.BusinessObjects.ProductBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.ProductsWhereThisIsClient.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.ProductBO>)sender)[((IndicoList<Indico.BusinessObjects.ProductBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.ProductsWhereThisIsClient.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void VisualLayoutsWhereThisIsClientList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.VisualLayout obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.VisualLayoutBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.VisualLayoutBO>)sender)[((IndicoList<Indico.BusinessObjects.VisualLayoutBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.VisualLayoutsWhereThisIsClient.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.VisualLayoutBO>)sender)[((IndicoList<Indico.BusinessObjects.VisualLayoutBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.VisualLayoutsWhereThisIsClient.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void VisualLayoutsWhereThisIsClientList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.VisualLayout obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.VisualLayoutBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.VisualLayoutBO>)sender)[((IndicoList<Indico.BusinessObjects.VisualLayoutBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.VisualLayoutsWhereThisIsClient.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.VisualLayoutBO>)sender)[((IndicoList<Indico.BusinessObjects.VisualLayoutBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.VisualLayoutsWhereThisIsClient.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
            this._artWorksWhereThisIsClientLoaded = false;
            if (this.artWorksWhereThisIsClientList != null)
            {
                this.artWorksWhereThisIsClientList.OnBeforeRemove -= new EventHandler(ArtWorksWhereThisIsClientList_OnBeforeRemove);
                this.artWorksWhereThisIsClientList.OnAfterAdd -= new EventHandler(ArtWorksWhereThisIsClientList_OnAfterAdd);
            }
            this._distributorClientAddresssWhereThisIsClientLoaded = false;
            if (this.distributorClientAddresssWhereThisIsClientList != null)
            {
                this.distributorClientAddresssWhereThisIsClientList.OnBeforeRemove -= new EventHandler(DistributorClientAddresssWhereThisIsClientList_OnBeforeRemove);
                this.distributorClientAddresssWhereThisIsClientList.OnAfterAdd -= new EventHandler(DistributorClientAddresssWhereThisIsClientList_OnAfterAdd);
            }
            this._ordersWhereThisIsClientLoaded = false;
            if (this.ordersWhereThisIsClientList != null)
            {
                this.ordersWhereThisIsClientList.OnBeforeRemove -= new EventHandler(OrdersWhereThisIsClientList_OnBeforeRemove);
                this.ordersWhereThisIsClientList.OnAfterAdd -= new EventHandler(OrdersWhereThisIsClientList_OnAfterAdd);
            }
            this._productsWhereThisIsClientLoaded = false;
            if (this.productsWhereThisIsClientList != null)
            {
                this.productsWhereThisIsClientList.OnBeforeRemove -= new EventHandler(ProductsWhereThisIsClientList_OnBeforeRemove);
                this.productsWhereThisIsClientList.OnAfterAdd -= new EventHandler(ProductsWhereThisIsClientList_OnAfterAdd);
            }
            this._visualLayoutsWhereThisIsClientLoaded = false;
            if (this.visualLayoutsWhereThisIsClientList != null)
            {
                this.visualLayoutsWhereThisIsClientList.OnBeforeRemove -= new EventHandler(VisualLayoutsWhereThisIsClientList_OnBeforeRemove);
                this.visualLayoutsWhereThisIsClientList.OnAfterAdd -= new EventHandler(VisualLayoutsWhereThisIsClientList_OnAfterAdd);
            }
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region JobNameBOComparer
    public class JobNameBOComparer : IComparer<Indico.BusinessObjects.JobNameBO>
    {
        private string propertyToCompareName;
        public JobNameBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.JobNameBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.JobNameBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public JobNameBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.JobNameBO> Members
        public int Compare(Indico.BusinessObjects.JobNameBO x, Indico.BusinessObjects.JobNameBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.JobNameBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.JobNameBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.JobNameBO x, Indico.BusinessObjects.JobNameBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
