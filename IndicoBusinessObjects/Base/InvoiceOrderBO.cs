// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class InvoiceOrderBO : BusinessObject, IComparable
    {
        #region fields
        #region Scalar Fields
        private int id;
        private decimal? _factoryPrice;
        private decimal? _indimanPrice;
        private int _invoice;
        private int _orderDetail;
        #endregion
        
        #region Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.InvoiceBO _objInvoice;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.OrderDetailBO _objOrderDetail;
        #endregion
        
        #region Foreign Table Foreign Key fields
        #endregion
        
        #region Other fields
        
        private Indico.DAL.InvoiceOrder _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>.</summary>
        public decimal? FactoryPrice
        {   
            get {return _factoryPrice;}
            set 
            {
                OnFactoryPriceChanging(value);
                _factoryPrice = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.FactoryPrice = value;
                }
                OnFactoryPriceChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? IndimanPrice
        {   
            get {return _indimanPrice;}
            set 
            {
                OnIndimanPriceChanging(value);
                _indimanPrice = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IndimanPrice = value;
                }
                OnIndimanPriceChanged();
            }
        }
        /// <summary>The ID of the menu item.</summary>
        public int Invoice
        {   
            get {return _invoice;}
            set 
            {
                OnInvoiceChanging(value);
                _invoice = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Invoice = (from o in this._context.Context.Invoice
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Invoice>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Invoice = null;
                OnInvoiceChanged();
            }
        }
        /// <summary>The ID of the Role.</summary>
        public int OrderDetail
        {   
            get {return _orderDetail;}
            set 
            {
                OnOrderDetailChanging(value);
                _orderDetail = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.OrderDetail = (from o in this._context.Context.OrderDetail
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.OrderDetail>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.OrderDetail = null;
                OnOrderDetailChanged();
            }
        }
        
        internal Indico.DAL.InvoiceOrder ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        ///<summary>The InvoiceBO object identified by the value of Invoice</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.InvoiceBO objInvoice
        {
            get
            {
                if ( _invoice > 0 && _objInvoice == null)
                {
                        if (this._context == null)
                        {
                            _objInvoice = new Indico.BusinessObjects.InvoiceBO();
                        }
                        else
                        {
                            _objInvoice = new Indico.BusinessObjects.InvoiceBO(ref this._context);
                        }
                        _objInvoice.ID = _invoice;
                        _objInvoice.GetObject(); 
                }
                return _objInvoice;
            }
            set
            { 
                _objInvoice = value;
                _invoice = _objInvoice.ID;
            }
        }
        ///<summary>The OrderDetailBO object identified by the value of OrderDetail</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.OrderDetailBO objOrderDetail
        {
            get
            {
                if ( _orderDetail > 0 && _objOrderDetail == null)
                {
                        if (this._context == null)
                        {
                            _objOrderDetail = new Indico.BusinessObjects.OrderDetailBO();
                        }
                        else
                        {
                            _objOrderDetail = new Indico.BusinessObjects.OrderDetailBO(ref this._context);
                        }
                        _objOrderDetail.ID = _orderDetail;
                        _objOrderDetail.GetObject(); 
                }
                return _objOrderDetail;
            }
            set
            { 
                _objOrderDetail = value;
                _orderDetail = _objOrderDetail.ID;
            }
        }
        #endregion
        
        #region Foreign Object Foreign Key Collections
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the InvoiceOrderBO class using the supplied Indico.DAL.InvoiceOrder. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.InvoiceOrder whose properties will be used to initialise the InvoiceOrderBO</param>
        internal InvoiceOrderBO(Indico.DAL.InvoiceOrder obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.InvoiceOrder 
            this.ID = obj.ID;
            
            this.FactoryPrice = obj.FactoryPrice;
            this.IndimanPrice = obj.IndimanPrice;
            this.Invoice = (obj.InvoiceReference.EntityKey != null && obj.InvoiceReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.InvoiceReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.OrderDetail = (obj.OrderDetailReference.EntityKey != null && obj.OrderDetailReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.OrderDetailReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.InvoiceOrder SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.InvoiceOrder properties
            Indico.DAL.InvoiceOrder obj = new Indico.DAL.InvoiceOrder();
            
            if (this.ID > 0)
            {
                obj = context.InvoiceOrder.FirstOrDefault<InvoiceOrder>(o => o.ID == this.ID);
            }
            
            obj.FactoryPrice = this.FactoryPrice;
            obj.IndimanPrice = this.IndimanPrice;
            
            if (this.Invoice > 0) obj.Invoice = context.Invoice.FirstOrDefault(o => o.ID == this.Invoice);
            if (this.OrderDetail > 0) obj.OrderDetail = context.OrderDetail.FirstOrDefault(o => o.ID == this.OrderDetail);
            
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.InvoiceOrder))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.InvoiceOrder obj = (Indico.DAL.InvoiceOrder)eObj;
            
            // set the Indico.BusinessObjects.InvoiceOrderBO properties
            this.ID = obj.ID;
            
            this.FactoryPrice = obj.FactoryPrice;
            this.IndimanPrice = obj.IndimanPrice;
            
            this.Invoice = (obj.InvoiceReference.EntityKey != null && obj.InvoiceReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.InvoiceReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.OrderDetail = (obj.OrderDetailReference.EntityKey != null && obj.OrderDetailReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.OrderDetailReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.InvoiceOrderBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.InvoiceOrderBO properties
            this.ID = obj.ID;
            
            this.FactoryPrice = obj.FactoryPrice;
            this.IndimanPrice = obj.IndimanPrice;
            this.Invoice = obj.Invoice;
            this.OrderDetail = obj.OrderDetail;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.InvoiceOrderBO> IQueryableToList(IQueryable<Indico.DAL.InvoiceOrder> oQuery)
        {
            List<Indico.DAL.InvoiceOrder> oList = oQuery.ToList();
            List<Indico.BusinessObjects.InvoiceOrderBO> rList = new List<Indico.BusinessObjects.InvoiceOrderBO>(oList.Count);
            foreach (Indico.DAL.InvoiceOrder o in oList)
            {
                Indico.BusinessObjects.InvoiceOrderBO obj = new Indico.BusinessObjects.InvoiceOrderBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.InvoiceOrderBO> ToList(IEnumerable<Indico.DAL.InvoiceOrder> oQuery)
        {
            List<Indico.DAL.InvoiceOrder> oList = oQuery.ToList();
            List<Indico.BusinessObjects.InvoiceOrderBO> rList = new List<Indico.BusinessObjects.InvoiceOrderBO>(oList.Count);
            foreach (Indico.DAL.InvoiceOrder o in oList)
            {
                Indico.BusinessObjects.InvoiceOrderBO obj = new Indico.BusinessObjects.InvoiceOrderBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.InvoiceOrder> ToEntityList(List<InvoiceOrderBO> bos, IndicoEntities context)
        {
            // build a List of InvoiceOrder entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.InvoiceOrder.Count() == 0) ? new List<Indico.DAL.InvoiceOrder>() : (context.InvoiceOrder.Where(BuildContainsExpression<InvoiceOrder, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.InvoiceOrder>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.InvoiceOrder> ToEntityCollection(List<InvoiceOrderBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of InvoiceOrder entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.InvoiceOrder> el = (context.InvoiceOrder.Count() == 0) ? new List<Indico.DAL.InvoiceOrder>() : 
                context.InvoiceOrder.Where(BuildContainsExpression<InvoiceOrder, int>(e => e.ID, ids))
                .ToList<Indico.DAL.InvoiceOrder>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.InvoiceOrder> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.InvoiceOrder>();
                
            foreach (Indico.DAL.InvoiceOrder r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.InvoiceOrder ToEntity(IndicoEntities context)
        {
            return (from o in context.InvoiceOrder
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToInvoiceOrder(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.InvoiceOrder obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToInvoiceOrder(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.InvoiceOrder obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.InvoiceOrder obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.InvoiceOrderBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.InvoiceOrderBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.InvoiceOrder> oQuery =
                        from o in context.InvoiceOrder
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.InvoiceOrder> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.InvoiceOrderBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.InvoiceOrderBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.InvoiceOrderBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.InvoiceOrderBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.InvoiceOrder> oQuery =
                (from o in context.InvoiceOrder
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.InvoiceOrderBO> invoiceorders = IQueryableToList(oQuery);
            context.Dispose();
            return invoiceorders;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.InvoiceOrderBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.InvoiceOrderBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.InvoiceOrderBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.InvoiceOrderBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.InvoiceOrder> oQuery =
                (from o in context.InvoiceOrder
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Invoice == 0 || this.Invoice == o.Invoice.ID) &&
                    (this.OrderDetail == 0 || this.OrderDetail == o.OrderDetail.ID) &&
                    (this.FactoryPrice == null || this.FactoryPrice == o.FactoryPrice) &&
                    (this.IndimanPrice == null || this.IndimanPrice == o.IndimanPrice) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.InvoiceOrderBO> invoiceorders = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return invoiceorders;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.InvoiceOrder
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Invoice == 0 || this.Invoice == o.Invoice.ID) &&
                    (this.OrderDetail == 0 || this.OrderDetail == o.OrderDetail.ID) &&
                    (this.FactoryPrice == null || this.FactoryPrice == o.FactoryPrice) &&
                    (this.IndimanPrice == null || this.IndimanPrice == o.IndimanPrice) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.InvoiceOrderBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.InvoiceOrderBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.InvoiceOrderBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.InvoiceOrderBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.InvoiceOrder> oQuery =
                (from o in context.InvoiceOrder
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Invoice == 0 || o.Invoice.ID == this.Invoice) &&
                    (this.OrderDetail == 0 || o.OrderDetail.ID == this.OrderDetail) &&
                    (this.FactoryPrice == null || o.FactoryPrice == this.FactoryPrice) &&
                    (this.IndimanPrice == null || o.IndimanPrice == this.IndimanPrice) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.InvoiceOrderBO> invoiceorders = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return invoiceorders;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.InvoiceOrder
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Invoice == 0 || o.Invoice.ID == this.Invoice) &&
                    (this.OrderDetail == 0 || o.OrderDetail.ID == this.OrderDetail) &&
                    (this.FactoryPrice == null || o.FactoryPrice == this.FactoryPrice) &&
                    (this.IndimanPrice == null || o.IndimanPrice == this.IndimanPrice) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.InvoiceOrderBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.InvoiceOrderBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.InvoiceOrderBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.InvoiceOrderBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.InvoiceOrder> oQuery =
                (from o in context.InvoiceOrder
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Invoice == 0 || this.Invoice == o.Invoice.ID) && 
                    (this.OrderDetail == 0 || this.OrderDetail == o.OrderDetail.ID) && 
                    (this.FactoryPrice == null || this.FactoryPrice == o.FactoryPrice) && 
                    (this.IndimanPrice == null || this.IndimanPrice == o.IndimanPrice) 

                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.InvoiceOrderBO> invoiceorders = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return invoiceorders;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.InvoiceOrder
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Invoice == 0 || this.Invoice == o.Invoice.ID) && 
                    (this.OrderDetail == 0 || this.OrderDetail == o.OrderDetail.ID) && 
                    (this.FactoryPrice == null || this.FactoryPrice == o.FactoryPrice) && 
                    (this.IndimanPrice == null || this.IndimanPrice == o.IndimanPrice) 

                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.InvoiceOrderBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.InvoiceOrderBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.InvoiceOrderBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.InvoiceOrderBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.InvoiceOrderBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.InvoiceOrderBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnInvoiceOrderBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("InvoiceOrderBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnInvoiceOrderBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnInvoiceOrderBOIDChanged();
        partial void OnInvoiceOrderBOIDChanging(int value);
        
        partial void OnInvoiceChanged()
        {
            OnInvoiceOrderBOInvoiceChanged();
        }
        
        partial void OnInvoiceChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("InvoiceOrderBO.Invoice must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnInvoiceOrderBOInvoiceChanging(value);
        }
        partial void OnInvoiceChanged();
        partial void OnInvoiceChanging(int value);
        partial void OnInvoiceOrderBOInvoiceChanged();
        partial void OnInvoiceOrderBOInvoiceChanging(int value);
        
        partial void OnOrderDetailChanged()
        {
            OnInvoiceOrderBOOrderDetailChanged();
        }
        
        partial void OnOrderDetailChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("InvoiceOrderBO.OrderDetail must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnInvoiceOrderBOOrderDetailChanging(value);
        }
        partial void OnOrderDetailChanged();
        partial void OnOrderDetailChanging(int value);
        partial void OnInvoiceOrderBOOrderDetailChanged();
        partial void OnInvoiceOrderBOOrderDetailChanging(int value);
        
        partial void OnFactoryPriceChanged()
        {
            OnInvoiceOrderBOFactoryPriceChanged();
        }
        
        partial void OnFactoryPriceChanging(decimal? value)
        {
            OnInvoiceOrderBOFactoryPriceChanging(value);
        }
        partial void OnFactoryPriceChanged();
        partial void OnFactoryPriceChanging(decimal? value);
        partial void OnInvoiceOrderBOFactoryPriceChanged();
        partial void OnInvoiceOrderBOFactoryPriceChanging(decimal? value);
        
        partial void OnIndimanPriceChanged()
        {
            OnInvoiceOrderBOIndimanPriceChanged();
        }
        
        partial void OnIndimanPriceChanging(decimal? value)
        {
            OnInvoiceOrderBOIndimanPriceChanging(value);
        }
        partial void OnIndimanPriceChanged();
        partial void OnIndimanPriceChanging(decimal? value);
        partial void OnInvoiceOrderBOIndimanPriceChanged();
        partial void OnInvoiceOrderBOIndimanPriceChanging(decimal? value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.InvoiceOrderBO))
                return 1;
            Indico.BusinessObjects.InvoiceOrderBOComparer c = new Indico.BusinessObjects.InvoiceOrderBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.InvoiceOrderBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.InvoiceOrder)sender);
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region InvoiceOrderBOComparer
    public class InvoiceOrderBOComparer : IComparer<Indico.BusinessObjects.InvoiceOrderBO>
    {
        private string propertyToCompareName;
        public InvoiceOrderBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.InvoiceOrderBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.InvoiceOrderBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public InvoiceOrderBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.InvoiceOrderBO> Members
        public int Compare(Indico.BusinessObjects.InvoiceOrderBO x, Indico.BusinessObjects.InvoiceOrderBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.InvoiceOrderBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.InvoiceOrderBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.InvoiceOrderBO x, Indico.BusinessObjects.InvoiceOrderBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
