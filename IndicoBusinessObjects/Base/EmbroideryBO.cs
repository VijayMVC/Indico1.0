// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class EmbroideryBO : BusinessObject, IComparable
    {
        #region fields
        #region Scalar Fields
        private int id;
        private int _assigned;
        private string _client = string.Empty;
        private int _coordinator;
        private DateTime _createdDate = DateTime.MinValue;
        private int _creator;
        private int _distributor;
        private DateTime _embStrikeOffDate = DateTime.MinValue;
        private string _jobName = string.Empty;
        private DateTime _modifiedDate = DateTime.MinValue;
        private int _modifier;
        private DateTime _photoRequiredBy = DateTime.MinValue;
        private string _product;
        #endregion
        
        #region Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objAssigned;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objCoordinator;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objCreator;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.CompanyBO _objDistributor;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objModifier;
        #endregion
        
        #region Foreign Table Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.EmbroideryDetailsBO> embroideryDetailssWhereThisIsEmbroideryList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _embroideryDetailssWhereThisIsEmbroideryLoaded;
        #endregion
        
        #region Other fields
        
        private Indico.DAL.Embroidery _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>.</summary>
        public int Assigned
        {   
            get {return _assigned;}
            set 
            {
                OnAssignedChanging(value);
                _assigned = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Assigned = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Assigned = null;
                OnAssignedChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string Client
        {   
            get {return _client;}
            set 
            {
                OnClientChanging(value);
                _client = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Client = value;
                }
                OnClientChanged();
            }
        }
        /// <summary>.</summary>
        public int Coordinator
        {   
            get {return _coordinator;}
            set 
            {
                OnCoordinatorChanging(value);
                _coordinator = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Coordinator = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Coordinator = null;
                OnCoordinatorChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime CreatedDate
        {   
            get {return _createdDate;}
            set 
            {
                OnCreatedDateChanging(value);
                _createdDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CreatedDate = value;
                }
                OnCreatedDateChanged();
            }
        }
        /// <summary>.</summary>
        public int Creator
        {   
            get {return _creator;}
            set 
            {
                OnCreatorChanging(value);
                _creator = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Creator = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Creator = null;
                OnCreatorChanged();
            }
        }
        /// <summary>.</summary>
        public int Distributor
        {   
            get {return _distributor;}
            set 
            {
                OnDistributorChanging(value);
                _distributor = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Distributor = (from o in this._context.Context.Company
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Company>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Distributor = null;
                OnDistributorChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime EmbStrikeOffDate
        {   
            get {return _embStrikeOffDate;}
            set 
            {
                OnEmbStrikeOffDateChanging(value);
                _embStrikeOffDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.EmbStrikeOffDate = value;
                }
                OnEmbStrikeOffDateChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string JobName
        {   
            get {return _jobName;}
            set 
            {
                OnJobNameChanging(value);
                _jobName = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.JobName = value;
                }
                OnJobNameChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime ModifiedDate
        {   
            get {return _modifiedDate;}
            set 
            {
                OnModifiedDateChanging(value);
                _modifiedDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ModifiedDate = value;
                }
                OnModifiedDateChanged();
            }
        }
        /// <summary>.</summary>
        public int Modifier
        {   
            get {return _modifier;}
            set 
            {
                OnModifierChanging(value);
                _modifier = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Modifier = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Modifier = null;
                OnModifierChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime PhotoRequiredBy
        {   
            get {return _photoRequiredBy;}
            set 
            {
                OnPhotoRequiredByChanging(value);
                _photoRequiredBy = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.PhotoRequiredBy = value;
                }
                OnPhotoRequiredByChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string Product
        {   
            get {return _product;}
            set 
            {
                OnProductChanging(value);
                _product = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Product = value;
                }
                OnProductChanged();
            }
        }
        
        internal Indico.DAL.Embroidery ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        ///<summary>The UserBO object identified by the value of Assigned</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objAssigned
        {
            get
            {
                if ( _assigned > 0 && _objAssigned == null)
                {
                        if (this._context == null)
                        {
                            _objAssigned = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objAssigned = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objAssigned.ID = _assigned;
                        _objAssigned.GetObject(); 
                }
                return _objAssigned;
            }
            set
            { 
                _objAssigned = value;
                _assigned = _objAssigned.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Coordinator</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objCoordinator
        {
            get
            {
                if ( _coordinator > 0 && _objCoordinator == null)
                {
                        if (this._context == null)
                        {
                            _objCoordinator = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objCoordinator = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objCoordinator.ID = _coordinator;
                        _objCoordinator.GetObject(); 
                }
                return _objCoordinator;
            }
            set
            { 
                _objCoordinator = value;
                _coordinator = _objCoordinator.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Creator</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objCreator
        {
            get
            {
                if ( _creator > 0 && _objCreator == null)
                {
                        if (this._context == null)
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objCreator.ID = _creator;
                        _objCreator.GetObject(); 
                }
                return _objCreator;
            }
            set
            { 
                _objCreator = value;
                _creator = _objCreator.ID;
            }
        }
        ///<summary>The CompanyBO object identified by the value of Distributor</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.CompanyBO objDistributor
        {
            get
            {
                if ( _distributor > 0 && _objDistributor == null)
                {
                        if (this._context == null)
                        {
                            _objDistributor = new Indico.BusinessObjects.CompanyBO();
                        }
                        else
                        {
                            _objDistributor = new Indico.BusinessObjects.CompanyBO(ref this._context);
                        }
                        _objDistributor.ID = _distributor;
                        _objDistributor.GetObject(); 
                }
                return _objDistributor;
            }
            set
            { 
                _objDistributor = value;
                _distributor = _objDistributor.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Modifier</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objModifier
        {
            get
            {
                if ( _modifier > 0 && _objModifier == null)
                {
                        if (this._context == null)
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objModifier.ID = _modifier;
                        _objModifier.GetObject(); 
                }
                return _objModifier;
            }
            set
            { 
                _objModifier = value;
                _modifier = _objModifier.ID;
            }
        }
        #endregion
        
        #region Foreign Object Foreign Key Collections
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.EmbroideryDetailsBO> EmbroideryDetailssWhereThisIsEmbroidery // FK_EmbroideryDetails_Embroidery
        {
            get
            {
                if (!_embroideryDetailssWhereThisIsEmbroideryLoaded)
                {
                    _embroideryDetailssWhereThisIsEmbroideryLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Embroidery obj = (from o in context.Embroidery
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.EmbroideryDetailssWhereThisIsEmbroidery.Load();
                        embroideryDetailssWhereThisIsEmbroideryList = new IndicoList<Indico.BusinessObjects.EmbroideryDetailsBO>(obj.EmbroideryDetailssWhereThisIsEmbroidery.Count);
                        
                        foreach (Indico.DAL.EmbroideryDetails o in obj.EmbroideryDetailssWhereThisIsEmbroidery)
                        {
                            Indico.BusinessObjects.EmbroideryDetailsBO fkObj = new Indico.BusinessObjects.EmbroideryDetailsBO(o, ref this._context);
                            embroideryDetailssWhereThisIsEmbroideryList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        embroideryDetailssWhereThisIsEmbroideryList = new IndicoList<Indico.BusinessObjects.EmbroideryDetailsBO>();
                    }
                    
                    embroideryDetailssWhereThisIsEmbroideryList.OnBeforeRemove += new EventHandler(EmbroideryDetailssWhereThisIsEmbroideryList_OnBeforeRemove);
                    embroideryDetailssWhereThisIsEmbroideryList.OnAfterAdd += new EventHandler(EmbroideryDetailssWhereThisIsEmbroideryList_OnAfterAdd);
                }
                
                return embroideryDetailssWhereThisIsEmbroideryList;
            }
        }
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the EmbroideryBO class using the supplied Indico.DAL.Embroidery. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.Embroidery whose properties will be used to initialise the EmbroideryBO</param>
        internal EmbroideryBO(Indico.DAL.Embroidery obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.Embroidery 
            this.ID = obj.ID;
            
            this.Assigned = (obj.AssignedReference.EntityKey != null && obj.AssignedReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.AssignedReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Client = obj.Client;
            this.Coordinator = (obj.CoordinatorReference.EntityKey != null && obj.CoordinatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CoordinatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.CreatedDate = obj.CreatedDate;
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Distributor = (obj.DistributorReference.EntityKey != null && obj.DistributorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.DistributorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.EmbStrikeOffDate = obj.EmbStrikeOffDate;
            this.JobName = obj.JobName;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.PhotoRequiredBy = obj.PhotoRequiredBy;
            this.Product = obj.Product;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.Embroidery SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.Embroidery properties
            Indico.DAL.Embroidery obj = new Indico.DAL.Embroidery();
            
            if (this.ID > 0)
            {
                obj = context.Embroidery.FirstOrDefault<Embroidery>(o => o.ID == this.ID);
            }
            
            obj.Client = this.Client;
            obj.CreatedDate = this.CreatedDate;
            obj.EmbStrikeOffDate = this.EmbStrikeOffDate;
            obj.JobName = this.JobName;
            obj.ModifiedDate = this.ModifiedDate;
            obj.PhotoRequiredBy = this.PhotoRequiredBy;
            obj.Product = this.Product;
            
            if (this.Assigned > 0) obj.Assigned = context.User.FirstOrDefault(o => o.ID == this.Assigned);
            if (this.Coordinator > 0) obj.Coordinator = context.User.FirstOrDefault(o => o.ID == this.Coordinator);
            if (this.Creator > 0) obj.Creator = context.User.FirstOrDefault(o => o.ID == this.Creator);
            if (this.Distributor > 0) obj.Distributor = context.Company.FirstOrDefault(o => o.ID == this.Distributor);
            if (this.Modifier > 0) obj.Modifier = context.User.FirstOrDefault(o => o.ID == this.Modifier);
            
            if (_embroideryDetailssWhereThisIsEmbroideryLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.EmbroideryDetailsBO.ToEntityList(this.EmbroideryDetailssWhereThisIsEmbroidery, context), 
                    obj.EmbroideryDetailssWhereThisIsEmbroidery);
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.Embroidery))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.Embroidery obj = (Indico.DAL.Embroidery)eObj;
            
            // set the Indico.BusinessObjects.EmbroideryBO properties
            this.ID = obj.ID;
            
            this.Client = obj.Client;
            this.CreatedDate = obj.CreatedDate;
            this.EmbStrikeOffDate = obj.EmbStrikeOffDate;
            this.JobName = obj.JobName;
            this.ModifiedDate = obj.ModifiedDate;
            this.PhotoRequiredBy = obj.PhotoRequiredBy;
            this.Product = obj.Product;
            
            this.Assigned = (obj.AssignedReference.EntityKey != null && obj.AssignedReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.AssignedReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Coordinator = (obj.CoordinatorReference.EntityKey != null && obj.CoordinatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CoordinatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Distributor = (obj.DistributorReference.EntityKey != null && obj.DistributorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.DistributorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.EmbroideryBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.EmbroideryBO properties
            this.ID = obj.ID;
            
            this.Assigned = obj.Assigned;
            this.Client = obj.Client;
            this.Coordinator = obj.Coordinator;
            this.CreatedDate = obj.CreatedDate;
            this.Creator = obj.Creator;
            this.Distributor = obj.Distributor;
            this.EmbStrikeOffDate = obj.EmbStrikeOffDate;
            this.JobName = obj.JobName;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = obj.Modifier;
            this.PhotoRequiredBy = obj.PhotoRequiredBy;
            this.Product = obj.Product;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.EmbroideryBO> IQueryableToList(IQueryable<Indico.DAL.Embroidery> oQuery)
        {
            List<Indico.DAL.Embroidery> oList = oQuery.ToList();
            List<Indico.BusinessObjects.EmbroideryBO> rList = new List<Indico.BusinessObjects.EmbroideryBO>(oList.Count);
            foreach (Indico.DAL.Embroidery o in oList)
            {
                Indico.BusinessObjects.EmbroideryBO obj = new Indico.BusinessObjects.EmbroideryBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.EmbroideryBO> ToList(IEnumerable<Indico.DAL.Embroidery> oQuery)
        {
            List<Indico.DAL.Embroidery> oList = oQuery.ToList();
            List<Indico.BusinessObjects.EmbroideryBO> rList = new List<Indico.BusinessObjects.EmbroideryBO>(oList.Count);
            foreach (Indico.DAL.Embroidery o in oList)
            {
                Indico.BusinessObjects.EmbroideryBO obj = new Indico.BusinessObjects.EmbroideryBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.Embroidery> ToEntityList(List<EmbroideryBO> bos, IndicoEntities context)
        {
            // build a List of Embroidery entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.Embroidery.Count() == 0) ? new List<Indico.DAL.Embroidery>() : (context.Embroidery.Where(BuildContainsExpression<Embroidery, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.Embroidery>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Embroidery> ToEntityCollection(List<EmbroideryBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of Embroidery entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.Embroidery> el = (context.Embroidery.Count() == 0) ? new List<Indico.DAL.Embroidery>() : 
                context.Embroidery.Where(BuildContainsExpression<Embroidery, int>(e => e.ID, ids))
                .ToList<Indico.DAL.Embroidery>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Embroidery> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Embroidery>();
                
            foreach (Indico.DAL.Embroidery r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.Embroidery ToEntity(IndicoEntities context)
        {
            return (from o in context.Embroidery
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToEmbroidery(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Embroidery obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToEmbroidery(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.Embroidery obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Embroidery obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.EmbroideryBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.EmbroideryBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.Embroidery> oQuery =
                        from o in context.Embroidery
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.Embroidery> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.EmbroideryBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.EmbroideryBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.EmbroideryBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.EmbroideryBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.Embroidery> oQuery =
                (from o in context.Embroidery
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.EmbroideryBO> embroiderys = IQueryableToList(oQuery);
            context.Dispose();
            return embroiderys;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.EmbroideryBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.EmbroideryBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.EmbroideryBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.EmbroideryBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Embroidery> oQuery =
                (from o in context.Embroidery
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.EmbStrikeOffDate == DateTime.MinValue || this.EmbStrikeOffDate == o.EmbStrikeOffDate) &&
                    (this.JobName == string.Empty || this.JobName == o.JobName) &&
                    (this.Distributor == 0 || this.Distributor == o.Distributor.ID) &&
                    (this.Client == string.Empty || this.Client == o.Client) &&
                    (this.Coordinator == 0 || this.Coordinator == o.Coordinator.ID) &&
                    (this.Product == null || this.Product == o.Product) &&
                    (this.PhotoRequiredBy == DateTime.MinValue || this.PhotoRequiredBy == o.PhotoRequiredBy) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) &&
                    (this.Assigned == 0 || this.Assigned == o.Assigned.ID) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.EmbroideryBO> embroiderys = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return embroiderys;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Embroidery
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.EmbStrikeOffDate == DateTime.MinValue || this.EmbStrikeOffDate == o.EmbStrikeOffDate) &&
                    (this.JobName == string.Empty || this.JobName == o.JobName) &&
                    (this.Distributor == 0 || this.Distributor == o.Distributor.ID) &&
                    (this.Client == string.Empty || this.Client == o.Client) &&
                    (this.Coordinator == 0 || this.Coordinator == o.Coordinator.ID) &&
                    (this.Product == null || this.Product == o.Product) &&
                    (this.PhotoRequiredBy == DateTime.MinValue || this.PhotoRequiredBy == o.PhotoRequiredBy) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) &&
                    (this.Assigned == 0 || this.Assigned == o.Assigned.ID) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.EmbroideryBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.EmbroideryBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.EmbroideryBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.EmbroideryBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Embroidery> oQuery =
                (from o in context.Embroidery
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.EmbStrikeOffDate == DateTime.MinValue || o.EmbStrikeOffDate == this.EmbStrikeOffDate) &&
                    (this.JobName == string.Empty || o.JobName.Contains(this.JobName)) &&
                    (this.Distributor == 0 || o.Distributor.ID == this.Distributor) &&
                    (this.Client == string.Empty || o.Client.Contains(this.Client)) &&
                    (this.Coordinator == 0 || o.Coordinator.ID == this.Coordinator) &&
                    (this.Product == null || o.Product.Contains(this.Product)) &&
                    (this.PhotoRequiredBy == DateTime.MinValue || o.PhotoRequiredBy == this.PhotoRequiredBy) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.ModifiedDate == DateTime.MinValue || o.ModifiedDate == this.ModifiedDate) &&
                    (this.Assigned == 0 || o.Assigned.ID == this.Assigned) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.EmbroideryBO> embroiderys = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return embroiderys;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Embroidery
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.EmbStrikeOffDate == DateTime.MinValue || o.EmbStrikeOffDate == this.EmbStrikeOffDate) &&
                    (this.JobName == string.Empty || o.JobName.Contains(this.JobName)) &&
                    (this.Distributor == 0 || o.Distributor.ID == this.Distributor) &&
                    (this.Client == string.Empty || o.Client.Contains(this.Client)) &&
                    (this.Coordinator == 0 || o.Coordinator.ID == this.Coordinator) &&
                    (this.Product == null || o.Product.Contains(this.Product)) &&
                    (this.PhotoRequiredBy == DateTime.MinValue || o.PhotoRequiredBy == this.PhotoRequiredBy) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.ModifiedDate == DateTime.MinValue || o.ModifiedDate == this.ModifiedDate) &&
                    (this.Assigned == 0 || o.Assigned.ID == this.Assigned) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.EmbroideryBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.EmbroideryBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.EmbroideryBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.EmbroideryBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Embroidery> oQuery =
                (from o in context.Embroidery
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.EmbStrikeOffDate == DateTime.MinValue || this.EmbStrikeOffDate == o.EmbStrikeOffDate) && 
                    (this.Distributor == 0 || this.Distributor == o.Distributor.ID) && 
                    (this.Coordinator == 0 || this.Coordinator == o.Coordinator.ID) && 
                    (this.PhotoRequiredBy == DateTime.MinValue || this.PhotoRequiredBy == o.PhotoRequiredBy) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) && 
                    (this.Assigned == 0 || this.Assigned == o.Assigned.ID) && 
                    ((o.JobName.Contains(this.JobName)) ||
                    (o.Client.Contains(this.Client)) ||
                    (o.Product.Contains(this.Product)) ||
                    (this.JobName == null && this.Client == null && this.Product == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.EmbroideryBO> embroiderys = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return embroiderys;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Embroidery
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.EmbStrikeOffDate == DateTime.MinValue || this.EmbStrikeOffDate == o.EmbStrikeOffDate) && 
                    (this.Distributor == 0 || this.Distributor == o.Distributor.ID) && 
                    (this.Coordinator == 0 || this.Coordinator == o.Coordinator.ID) && 
                    (this.PhotoRequiredBy == DateTime.MinValue || this.PhotoRequiredBy == o.PhotoRequiredBy) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) && 
                    (this.Assigned == 0 || this.Assigned == o.Assigned.ID) && 
                    ((o.JobName.Contains(this.JobName)) ||
                    (o.Client.Contains(this.Client)) ||
                    (o.Product.Contains(this.Product)) ||
                    (this.JobName == null && this.Client == null && this.Product == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.EmbroideryBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.EmbroideryBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.EmbroideryBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.EmbroideryBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.EmbroideryBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.EmbroideryBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnEmbroideryBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("EmbroideryBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnEmbroideryBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnEmbroideryBOIDChanged();
        partial void OnEmbroideryBOIDChanging(int value);
        
        partial void OnEmbStrikeOffDateChanged()
        {
            OnEmbroideryBOEmbStrikeOffDateChanged();
        }
        
        partial void OnEmbStrikeOffDateChanging(DateTime value)
        {
            OnEmbroideryBOEmbStrikeOffDateChanging(value);
        }
        partial void OnEmbStrikeOffDateChanged();
        partial void OnEmbStrikeOffDateChanging(DateTime value);
        partial void OnEmbroideryBOEmbStrikeOffDateChanged();
        partial void OnEmbroideryBOEmbStrikeOffDateChanging(DateTime value);
        
        partial void OnJobNameChanged()
        {
            OnEmbroideryBOJobNameChanged();
        }
        
        partial void OnJobNameChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("EmbroideryBO.JobName has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnEmbroideryBOJobNameChanging(value);
        }
        partial void OnJobNameChanged();
        partial void OnJobNameChanging(string value);
        partial void OnEmbroideryBOJobNameChanged();
        partial void OnEmbroideryBOJobNameChanging(string value);
        
        partial void OnDistributorChanged()
        {
            OnEmbroideryBODistributorChanged();
        }
        
        partial void OnDistributorChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("EmbroideryBO.Distributor must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnEmbroideryBODistributorChanging(value);
        }
        partial void OnDistributorChanged();
        partial void OnDistributorChanging(int value);
        partial void OnEmbroideryBODistributorChanged();
        partial void OnEmbroideryBODistributorChanging(int value);
        
        partial void OnClientChanged()
        {
            OnEmbroideryBOClientChanged();
        }
        
        partial void OnClientChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("EmbroideryBO.Client has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnEmbroideryBOClientChanging(value);
        }
        partial void OnClientChanged();
        partial void OnClientChanging(string value);
        partial void OnEmbroideryBOClientChanged();
        partial void OnEmbroideryBOClientChanging(string value);
        
        partial void OnCoordinatorChanged()
        {
            OnEmbroideryBOCoordinatorChanged();
        }
        
        partial void OnCoordinatorChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("EmbroideryBO.Coordinator must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnEmbroideryBOCoordinatorChanging(value);
        }
        partial void OnCoordinatorChanged();
        partial void OnCoordinatorChanging(int value);
        partial void OnEmbroideryBOCoordinatorChanged();
        partial void OnEmbroideryBOCoordinatorChanging(int value);
        
        partial void OnProductChanged()
        {
            OnEmbroideryBOProductChanged();
        }
        
        partial void OnProductChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("EmbroideryBO.Product has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnEmbroideryBOProductChanging(value);
        }
        partial void OnProductChanged();
        partial void OnProductChanging(string value);
        partial void OnEmbroideryBOProductChanged();
        partial void OnEmbroideryBOProductChanging(string value);
        
        partial void OnPhotoRequiredByChanged()
        {
            OnEmbroideryBOPhotoRequiredByChanged();
        }
        
        partial void OnPhotoRequiredByChanging(DateTime value)
        {
            OnEmbroideryBOPhotoRequiredByChanging(value);
        }
        partial void OnPhotoRequiredByChanged();
        partial void OnPhotoRequiredByChanging(DateTime value);
        partial void OnEmbroideryBOPhotoRequiredByChanged();
        partial void OnEmbroideryBOPhotoRequiredByChanging(DateTime value);
        
        partial void OnCreatorChanged()
        {
            OnEmbroideryBOCreatorChanged();
        }
        
        partial void OnCreatorChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("EmbroideryBO.Creator must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnEmbroideryBOCreatorChanging(value);
        }
        partial void OnCreatorChanged();
        partial void OnCreatorChanging(int value);
        partial void OnEmbroideryBOCreatorChanged();
        partial void OnEmbroideryBOCreatorChanging(int value);
        
        partial void OnCreatedDateChanged()
        {
            OnEmbroideryBOCreatedDateChanged();
        }
        
        partial void OnCreatedDateChanging(DateTime value)
        {
            OnEmbroideryBOCreatedDateChanging(value);
        }
        partial void OnCreatedDateChanged();
        partial void OnCreatedDateChanging(DateTime value);
        partial void OnEmbroideryBOCreatedDateChanged();
        partial void OnEmbroideryBOCreatedDateChanging(DateTime value);
        
        partial void OnModifierChanged()
        {
            OnEmbroideryBOModifierChanged();
        }
        
        partial void OnModifierChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("EmbroideryBO.Modifier must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnEmbroideryBOModifierChanging(value);
        }
        partial void OnModifierChanged();
        partial void OnModifierChanging(int value);
        partial void OnEmbroideryBOModifierChanged();
        partial void OnEmbroideryBOModifierChanging(int value);
        
        partial void OnModifiedDateChanged()
        {
            OnEmbroideryBOModifiedDateChanged();
        }
        
        partial void OnModifiedDateChanging(DateTime value)
        {
            OnEmbroideryBOModifiedDateChanging(value);
        }
        partial void OnModifiedDateChanged();
        partial void OnModifiedDateChanging(DateTime value);
        partial void OnEmbroideryBOModifiedDateChanged();
        partial void OnEmbroideryBOModifiedDateChanging(DateTime value);
        
        partial void OnAssignedChanged()
        {
            OnEmbroideryBOAssignedChanged();
        }
        
        partial void OnAssignedChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("EmbroideryBO.Assigned must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnEmbroideryBOAssignedChanging(value);
        }
        partial void OnAssignedChanged();
        partial void OnAssignedChanging(int value);
        partial void OnEmbroideryBOAssignedChanged();
        partial void OnEmbroideryBOAssignedChanging(int value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.EmbroideryBO))
                return 1;
            Indico.BusinessObjects.EmbroideryBOComparer c = new Indico.BusinessObjects.EmbroideryBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.EmbroideryBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.Embroidery)sender);
            }
        }
        
        void EmbroideryDetailssWhereThisIsEmbroideryList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.EmbroideryDetails obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.EmbroideryDetailsBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.EmbroideryDetailsBO>)sender)[((IndicoList<Indico.BusinessObjects.EmbroideryDetailsBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.EmbroideryDetailssWhereThisIsEmbroidery.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.EmbroideryDetailsBO>)sender)[((IndicoList<Indico.BusinessObjects.EmbroideryDetailsBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.EmbroideryDetailssWhereThisIsEmbroidery.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void EmbroideryDetailssWhereThisIsEmbroideryList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.EmbroideryDetails obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.EmbroideryDetailsBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.EmbroideryDetailsBO>)sender)[((IndicoList<Indico.BusinessObjects.EmbroideryDetailsBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.EmbroideryDetailssWhereThisIsEmbroidery.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.EmbroideryDetailsBO>)sender)[((IndicoList<Indico.BusinessObjects.EmbroideryDetailsBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.EmbroideryDetailssWhereThisIsEmbroidery.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
            this._embroideryDetailssWhereThisIsEmbroideryLoaded = false;
            if (this.embroideryDetailssWhereThisIsEmbroideryList != null)
            {
                this.embroideryDetailssWhereThisIsEmbroideryList.OnBeforeRemove -= new EventHandler(EmbroideryDetailssWhereThisIsEmbroideryList_OnBeforeRemove);
                this.embroideryDetailssWhereThisIsEmbroideryList.OnAfterAdd -= new EventHandler(EmbroideryDetailssWhereThisIsEmbroideryList_OnAfterAdd);
            }
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region EmbroideryBOComparer
    public class EmbroideryBOComparer : IComparer<Indico.BusinessObjects.EmbroideryBO>
    {
        private string propertyToCompareName;
        public EmbroideryBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.EmbroideryBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.EmbroideryBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public EmbroideryBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.EmbroideryBO> Members
        public int Compare(Indico.BusinessObjects.EmbroideryBO x, Indico.BusinessObjects.EmbroideryBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.EmbroideryBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.EmbroideryBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.EmbroideryBO x, Indico.BusinessObjects.EmbroideryBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
