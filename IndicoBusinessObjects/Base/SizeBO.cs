// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class SizeBO : BusinessObject, IComparable
    {
        #region fields
        #region Scalar Fields
        private int id;
        private bool _isDefault;
        private int _seqNo;
        private string _sizeName = string.Empty;
        private int _sizeSet;
        #endregion
        
        #region Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.SizeSetBO _objSizeSet;
        #endregion
        
        #region Foreign Table Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO> factoryOrderDetialsWhereThisIsSizeList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _factoryOrderDetialsWhereThisIsSizeLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.OrderDetailQtyBO> orderDetailQtysWhereThisIsSizeList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _orderDetailQtysWhereThisIsSizeLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.PackingListCartonItemBO> packingListCartonItemsWhereThisIsSizeList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _packingListCartonItemsWhereThisIsSizeLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO> packingListSizeQtysWhereThisIsSizeList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _packingListSizeQtysWhereThisIsSizeLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.SizeChartBO> sizeChartsWhereThisIsSizeList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _sizeChartsWhereThisIsSizeLoaded;
        #endregion
        
        #region Other fields
        
        private Indico.DAL.Size _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>.</summary>
        public bool IsDefault
        {   
            get {return _isDefault;}
            set 
            {
                OnIsDefaultChanging(value);
                _isDefault = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsDefault = value;
                }
                OnIsDefaultChanged();
            }
        }
        /// <summary>.</summary>
        public int SeqNo
        {   
            get {return _seqNo;}
            set 
            {
                OnSeqNoChanging(value);
                _seqNo = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.SeqNo = value;
                }
                OnSeqNoChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string SizeName
        {   
            get {return _sizeName;}
            set 
            {
                OnSizeNameChanging(value);
                _sizeName = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.SizeName = value;
                }
                OnSizeNameChanged();
            }
        }
        /// <summary>.</summary>
        public int SizeSet
        {   
            get {return _sizeSet;}
            set 
            {
                OnSizeSetChanging(value);
                _sizeSet = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.SizeSet = (from o in this._context.Context.SizeSet
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.SizeSet>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.SizeSet = null;
                OnSizeSetChanged();
            }
        }
        
        internal Indico.DAL.Size ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        ///<summary>The SizeSetBO object identified by the value of SizeSet</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.SizeSetBO objSizeSet
        {
            get
            {
                if ( _sizeSet > 0 && _objSizeSet == null)
                {
                        if (this._context == null)
                        {
                            _objSizeSet = new Indico.BusinessObjects.SizeSetBO();
                        }
                        else
                        {
                            _objSizeSet = new Indico.BusinessObjects.SizeSetBO(ref this._context);
                        }
                        _objSizeSet.ID = _sizeSet;
                        _objSizeSet.GetObject(); 
                }
                return _objSizeSet;
            }
            set
            { 
                _objSizeSet = value;
                _sizeSet = _objSizeSet.ID;
            }
        }
        #endregion
        
        #region Foreign Object Foreign Key Collections
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO> FactoryOrderDetialsWhereThisIsSize // FK_FactoryOrderDetial_Size
        {
            get
            {
                if (!_factoryOrderDetialsWhereThisIsSizeLoaded)
                {
                    _factoryOrderDetialsWhereThisIsSizeLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Size obj = (from o in context.Size
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.FactoryOrderDetialsWhereThisIsSize.Load();
                        factoryOrderDetialsWhereThisIsSizeList = new IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO>(obj.FactoryOrderDetialsWhereThisIsSize.Count);
                        
                        foreach (Indico.DAL.FactoryOrderDetial o in obj.FactoryOrderDetialsWhereThisIsSize)
                        {
                            Indico.BusinessObjects.FactoryOrderDetialBO fkObj = new Indico.BusinessObjects.FactoryOrderDetialBO(o, ref this._context);
                            factoryOrderDetialsWhereThisIsSizeList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        factoryOrderDetialsWhereThisIsSizeList = new IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO>();
                    }
                    
                    factoryOrderDetialsWhereThisIsSizeList.OnBeforeRemove += new EventHandler(FactoryOrderDetialsWhereThisIsSizeList_OnBeforeRemove);
                    factoryOrderDetialsWhereThisIsSizeList.OnAfterAdd += new EventHandler(FactoryOrderDetialsWhereThisIsSizeList_OnAfterAdd);
                }
                
                return factoryOrderDetialsWhereThisIsSizeList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.OrderDetailQtyBO> OrderDetailQtysWhereThisIsSize // FK_OrderDetailQty_Size
        {
            get
            {
                if (!_orderDetailQtysWhereThisIsSizeLoaded)
                {
                    _orderDetailQtysWhereThisIsSizeLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Size obj = (from o in context.Size
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.OrderDetailQtysWhereThisIsSize.Load();
                        orderDetailQtysWhereThisIsSizeList = new IndicoList<Indico.BusinessObjects.OrderDetailQtyBO>(obj.OrderDetailQtysWhereThisIsSize.Count);
                        
                        foreach (Indico.DAL.OrderDetailQty o in obj.OrderDetailQtysWhereThisIsSize)
                        {
                            Indico.BusinessObjects.OrderDetailQtyBO fkObj = new Indico.BusinessObjects.OrderDetailQtyBO(o, ref this._context);
                            orderDetailQtysWhereThisIsSizeList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        orderDetailQtysWhereThisIsSizeList = new IndicoList<Indico.BusinessObjects.OrderDetailQtyBO>();
                    }
                    
                    orderDetailQtysWhereThisIsSizeList.OnBeforeRemove += new EventHandler(OrderDetailQtysWhereThisIsSizeList_OnBeforeRemove);
                    orderDetailQtysWhereThisIsSizeList.OnAfterAdd += new EventHandler(OrderDetailQtysWhereThisIsSizeList_OnAfterAdd);
                }
                
                return orderDetailQtysWhereThisIsSizeList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.PackingListCartonItemBO> PackingListCartonItemsWhereThisIsSize // FK_PackingListCartonItem_Size
        {
            get
            {
                if (!_packingListCartonItemsWhereThisIsSizeLoaded)
                {
                    _packingListCartonItemsWhereThisIsSizeLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Size obj = (from o in context.Size
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.PackingListCartonItemsWhereThisIsSize.Load();
                        packingListCartonItemsWhereThisIsSizeList = new IndicoList<Indico.BusinessObjects.PackingListCartonItemBO>(obj.PackingListCartonItemsWhereThisIsSize.Count);
                        
                        foreach (Indico.DAL.PackingListCartonItem o in obj.PackingListCartonItemsWhereThisIsSize)
                        {
                            Indico.BusinessObjects.PackingListCartonItemBO fkObj = new Indico.BusinessObjects.PackingListCartonItemBO(o, ref this._context);
                            packingListCartonItemsWhereThisIsSizeList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        packingListCartonItemsWhereThisIsSizeList = new IndicoList<Indico.BusinessObjects.PackingListCartonItemBO>();
                    }
                    
                    packingListCartonItemsWhereThisIsSizeList.OnBeforeRemove += new EventHandler(PackingListCartonItemsWhereThisIsSizeList_OnBeforeRemove);
                    packingListCartonItemsWhereThisIsSizeList.OnAfterAdd += new EventHandler(PackingListCartonItemsWhereThisIsSizeList_OnAfterAdd);
                }
                
                return packingListCartonItemsWhereThisIsSizeList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO> PackingListSizeQtysWhereThisIsSize // FK_PackingListSizeQty_Size1
        {
            get
            {
                if (!_packingListSizeQtysWhereThisIsSizeLoaded)
                {
                    _packingListSizeQtysWhereThisIsSizeLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Size obj = (from o in context.Size
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.PackingListSizeQtysWhereThisIsSize.Load();
                        packingListSizeQtysWhereThisIsSizeList = new IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO>(obj.PackingListSizeQtysWhereThisIsSize.Count);
                        
                        foreach (Indico.DAL.PackingListSizeQty o in obj.PackingListSizeQtysWhereThisIsSize)
                        {
                            Indico.BusinessObjects.PackingListSizeQtyBO fkObj = new Indico.BusinessObjects.PackingListSizeQtyBO(o, ref this._context);
                            packingListSizeQtysWhereThisIsSizeList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        packingListSizeQtysWhereThisIsSizeList = new IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO>();
                    }
                    
                    packingListSizeQtysWhereThisIsSizeList.OnBeforeRemove += new EventHandler(PackingListSizeQtysWhereThisIsSizeList_OnBeforeRemove);
                    packingListSizeQtysWhereThisIsSizeList.OnAfterAdd += new EventHandler(PackingListSizeQtysWhereThisIsSizeList_OnAfterAdd);
                }
                
                return packingListSizeQtysWhereThisIsSizeList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.SizeChartBO> SizeChartsWhereThisIsSize // FK_SizeChart_Size
        {
            get
            {
                if (!_sizeChartsWhereThisIsSizeLoaded)
                {
                    _sizeChartsWhereThisIsSizeLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Size obj = (from o in context.Size
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.SizeChartsWhereThisIsSize.Load();
                        sizeChartsWhereThisIsSizeList = new IndicoList<Indico.BusinessObjects.SizeChartBO>(obj.SizeChartsWhereThisIsSize.Count);
                        
                        foreach (Indico.DAL.SizeChart o in obj.SizeChartsWhereThisIsSize)
                        {
                            Indico.BusinessObjects.SizeChartBO fkObj = new Indico.BusinessObjects.SizeChartBO(o, ref this._context);
                            sizeChartsWhereThisIsSizeList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        sizeChartsWhereThisIsSizeList = new IndicoList<Indico.BusinessObjects.SizeChartBO>();
                    }
                    
                    sizeChartsWhereThisIsSizeList.OnBeforeRemove += new EventHandler(SizeChartsWhereThisIsSizeList_OnBeforeRemove);
                    sizeChartsWhereThisIsSizeList.OnAfterAdd += new EventHandler(SizeChartsWhereThisIsSizeList_OnAfterAdd);
                }
                
                return sizeChartsWhereThisIsSizeList;
            }
        }
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the SizeBO class using the supplied Indico.DAL.Size. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.Size whose properties will be used to initialise the SizeBO</param>
        internal SizeBO(Indico.DAL.Size obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.Size 
            this.ID = obj.ID;
            
            this.IsDefault = obj.IsDefault;
            this.SeqNo = obj.SeqNo;
            this.SizeName = obj.SizeName;
            this.SizeSet = (obj.SizeSetReference.EntityKey != null && obj.SizeSetReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.SizeSetReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.Size SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.Size properties
            Indico.DAL.Size obj = new Indico.DAL.Size();
            
            if (this.ID > 0)
            {
                obj = context.Size.FirstOrDefault<Size>(o => o.ID == this.ID);
            }
            
            obj.IsDefault = this.IsDefault;
            obj.SeqNo = this.SeqNo;
            obj.SizeName = this.SizeName;
            
            if (this.SizeSet > 0) obj.SizeSet = context.SizeSet.FirstOrDefault(o => o.ID == this.SizeSet);
            
            if (_factoryOrderDetialsWhereThisIsSizeLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.FactoryOrderDetialBO.ToEntityList(this.FactoryOrderDetialsWhereThisIsSize, context), 
                    obj.FactoryOrderDetialsWhereThisIsSize);
            if (_orderDetailQtysWhereThisIsSizeLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.OrderDetailQtyBO.ToEntityList(this.OrderDetailQtysWhereThisIsSize, context), 
                    obj.OrderDetailQtysWhereThisIsSize);
            if (_packingListCartonItemsWhereThisIsSizeLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.PackingListCartonItemBO.ToEntityList(this.PackingListCartonItemsWhereThisIsSize, context), 
                    obj.PackingListCartonItemsWhereThisIsSize);
            if (_packingListSizeQtysWhereThisIsSizeLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.PackingListSizeQtyBO.ToEntityList(this.PackingListSizeQtysWhereThisIsSize, context), 
                    obj.PackingListSizeQtysWhereThisIsSize);
            if (_sizeChartsWhereThisIsSizeLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.SizeChartBO.ToEntityList(this.SizeChartsWhereThisIsSize, context), 
                    obj.SizeChartsWhereThisIsSize);
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.Size))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.Size obj = (Indico.DAL.Size)eObj;
            
            // set the Indico.BusinessObjects.SizeBO properties
            this.ID = obj.ID;
            
            this.IsDefault = obj.IsDefault;
            this.SeqNo = obj.SeqNo;
            this.SizeName = obj.SizeName;
            
            this.SizeSet = (obj.SizeSetReference.EntityKey != null && obj.SizeSetReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.SizeSetReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.SizeBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.SizeBO properties
            this.ID = obj.ID;
            
            this.IsDefault = obj.IsDefault;
            this.SeqNo = obj.SeqNo;
            this.SizeName = obj.SizeName;
            this.SizeSet = obj.SizeSet;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.SizeBO> IQueryableToList(IQueryable<Indico.DAL.Size> oQuery)
        {
            List<Indico.DAL.Size> oList = oQuery.ToList();
            List<Indico.BusinessObjects.SizeBO> rList = new List<Indico.BusinessObjects.SizeBO>(oList.Count);
            foreach (Indico.DAL.Size o in oList)
            {
                Indico.BusinessObjects.SizeBO obj = new Indico.BusinessObjects.SizeBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.SizeBO> ToList(IEnumerable<Indico.DAL.Size> oQuery)
        {
            List<Indico.DAL.Size> oList = oQuery.ToList();
            List<Indico.BusinessObjects.SizeBO> rList = new List<Indico.BusinessObjects.SizeBO>(oList.Count);
            foreach (Indico.DAL.Size o in oList)
            {
                Indico.BusinessObjects.SizeBO obj = new Indico.BusinessObjects.SizeBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.Size> ToEntityList(List<SizeBO> bos, IndicoEntities context)
        {
            // build a List of Size entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.Size.Count() == 0) ? new List<Indico.DAL.Size>() : (context.Size.Where(BuildContainsExpression<Size, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.Size>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Size> ToEntityCollection(List<SizeBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of Size entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.Size> el = (context.Size.Count() == 0) ? new List<Indico.DAL.Size>() : 
                context.Size.Where(BuildContainsExpression<Size, int>(e => e.ID, ids))
                .ToList<Indico.DAL.Size>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Size> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Size>();
                
            foreach (Indico.DAL.Size r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.Size ToEntity(IndicoEntities context)
        {
            return (from o in context.Size
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToSize(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Size obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToSize(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.Size obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Size obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.SizeBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.SizeBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.Size> oQuery =
                        from o in context.Size
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.Size> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.SizeBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.SizeBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.SizeBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.SizeBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.Size> oQuery =
                (from o in context.Size
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.SizeBO> sizes = IQueryableToList(oQuery);
            context.Dispose();
            return sizes;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.SizeBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.SizeBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.SizeBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.SizeBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Size> oQuery =
                (from o in context.Size
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.SizeSet == 0 || this.SizeSet == o.SizeSet.ID) &&
                    (this.SizeName == string.Empty || this.SizeName == o.SizeName) &&
                    (this.SeqNo == 0 || this.SeqNo == o.SeqNo) &&
                    (this.IsDefault == false || this.IsDefault == o.IsDefault) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.SizeBO> sizes = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return sizes;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Size
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.SizeSet == 0 || this.SizeSet == o.SizeSet.ID) &&
                    (this.SizeName == string.Empty || this.SizeName == o.SizeName) &&
                    (this.SeqNo == 0 || this.SeqNo == o.SeqNo) &&
                    (this.IsDefault == false || this.IsDefault == o.IsDefault) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.SizeBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.SizeBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.SizeBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.SizeBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Size> oQuery =
                (from o in context.Size
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.SizeSet == 0 || o.SizeSet.ID == this.SizeSet) &&
                    (this.SizeName == string.Empty || o.SizeName.Contains(this.SizeName)) &&
                    (this.SeqNo == 0 || o.SeqNo == this.SeqNo) &&
                    (this.IsDefault == false || o.IsDefault == this.IsDefault) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.SizeBO> sizes = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return sizes;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Size
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.SizeSet == 0 || o.SizeSet.ID == this.SizeSet) &&
                    (this.SizeName == string.Empty || o.SizeName.Contains(this.SizeName)) &&
                    (this.SeqNo == 0 || o.SeqNo == this.SeqNo) &&
                    (this.IsDefault == false || o.IsDefault == this.IsDefault) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.SizeBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.SizeBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.SizeBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.SizeBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Size> oQuery =
                (from o in context.Size
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.SizeSet == 0 || this.SizeSet == o.SizeSet.ID) && 
                    (this.SeqNo == 0 || this.SeqNo == o.SeqNo) && 
                    (this.IsDefault == false || this.IsDefault == o.IsDefault) && 
                    ((o.SizeName.Contains(this.SizeName)) ||
                    (this.SizeName == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.SizeBO> sizes = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return sizes;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Size
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.SizeSet == 0 || this.SizeSet == o.SizeSet.ID) && 
                    (this.SeqNo == 0 || this.SeqNo == o.SeqNo) && 
                    (this.IsDefault == false || this.IsDefault == o.IsDefault) && 
                    ((o.SizeName.Contains(this.SizeName)) ||
                    (this.SizeName == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.SizeBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.SizeBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.SizeBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.SizeBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.SizeBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.SizeBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnSizeBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("SizeBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnSizeBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnSizeBOIDChanged();
        partial void OnSizeBOIDChanging(int value);
        
        partial void OnSizeSetChanged()
        {
            OnSizeBOSizeSetChanged();
        }
        
        partial void OnSizeSetChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("SizeBO.SizeSet must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnSizeBOSizeSetChanging(value);
        }
        partial void OnSizeSetChanged();
        partial void OnSizeSetChanging(int value);
        partial void OnSizeBOSizeSetChanged();
        partial void OnSizeBOSizeSetChanging(int value);
        
        partial void OnSizeNameChanged()
        {
            OnSizeBOSizeNameChanged();
        }
        
        partial void OnSizeNameChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("SizeBO.SizeName has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnSizeBOSizeNameChanging(value);
        }
        partial void OnSizeNameChanged();
        partial void OnSizeNameChanging(string value);
        partial void OnSizeBOSizeNameChanged();
        partial void OnSizeBOSizeNameChanging(string value);
        
        partial void OnSeqNoChanged()
        {
            OnSizeBOSeqNoChanged();
        }
        
        partial void OnSeqNoChanging(int value)
        {
            OnSizeBOSeqNoChanging(value);
        }
        partial void OnSeqNoChanged();
        partial void OnSeqNoChanging(int value);
        partial void OnSizeBOSeqNoChanged();
        partial void OnSizeBOSeqNoChanging(int value);
        
        partial void OnIsDefaultChanged()
        {
            OnSizeBOIsDefaultChanged();
        }
        
        partial void OnIsDefaultChanging(bool value)
        {
            OnSizeBOIsDefaultChanging(value);
        }
        partial void OnIsDefaultChanged();
        partial void OnIsDefaultChanging(bool value);
        partial void OnSizeBOIsDefaultChanged();
        partial void OnSizeBOIsDefaultChanging(bool value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.SizeBO))
                return 1;
            Indico.BusinessObjects.SizeBOComparer c = new Indico.BusinessObjects.SizeBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.SizeBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.Size)sender);
            }
        }
        
        void FactoryOrderDetialsWhereThisIsSizeList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.FactoryOrderDetial obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO>)sender)[((IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.FactoryOrderDetialsWhereThisIsSize.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO>)sender)[((IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.FactoryOrderDetialsWhereThisIsSize.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void FactoryOrderDetialsWhereThisIsSizeList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.FactoryOrderDetial obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO>)sender)[((IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.FactoryOrderDetialsWhereThisIsSize.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO>)sender)[((IndicoList<Indico.BusinessObjects.FactoryOrderDetialBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.FactoryOrderDetialsWhereThisIsSize.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrderDetailQtysWhereThisIsSizeList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.OrderDetailQty obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderDetailQtyBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderDetailQtyBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailQtyBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrderDetailQtysWhereThisIsSize.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderDetailQtyBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailQtyBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrderDetailQtysWhereThisIsSize.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrderDetailQtysWhereThisIsSizeList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.OrderDetailQty obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderDetailQtyBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderDetailQtyBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailQtyBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrderDetailQtysWhereThisIsSize.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderDetailQtyBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailQtyBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrderDetailQtysWhereThisIsSize.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PackingListCartonItemsWhereThisIsSizeList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.PackingListCartonItem obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PackingListCartonItemBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PackingListCartonItemBO>)sender)[((IndicoList<Indico.BusinessObjects.PackingListCartonItemBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PackingListCartonItemsWhereThisIsSize.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PackingListCartonItemBO>)sender)[((IndicoList<Indico.BusinessObjects.PackingListCartonItemBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PackingListCartonItemsWhereThisIsSize.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PackingListCartonItemsWhereThisIsSizeList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.PackingListCartonItem obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PackingListCartonItemBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PackingListCartonItemBO>)sender)[((IndicoList<Indico.BusinessObjects.PackingListCartonItemBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PackingListCartonItemsWhereThisIsSize.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PackingListCartonItemBO>)sender)[((IndicoList<Indico.BusinessObjects.PackingListCartonItemBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PackingListCartonItemsWhereThisIsSize.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PackingListSizeQtysWhereThisIsSizeList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.PackingListSizeQty obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO>)sender)[((IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PackingListSizeQtysWhereThisIsSize.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO>)sender)[((IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PackingListSizeQtysWhereThisIsSize.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PackingListSizeQtysWhereThisIsSizeList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.PackingListSizeQty obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO>)sender)[((IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PackingListSizeQtysWhereThisIsSize.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO>)sender)[((IndicoList<Indico.BusinessObjects.PackingListSizeQtyBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PackingListSizeQtysWhereThisIsSize.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void SizeChartsWhereThisIsSizeList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.SizeChart obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.SizeChartBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.SizeChartBO>)sender)[((IndicoList<Indico.BusinessObjects.SizeChartBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.SizeChartsWhereThisIsSize.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.SizeChartBO>)sender)[((IndicoList<Indico.BusinessObjects.SizeChartBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.SizeChartsWhereThisIsSize.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void SizeChartsWhereThisIsSizeList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.SizeChart obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.SizeChartBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.SizeChartBO>)sender)[((IndicoList<Indico.BusinessObjects.SizeChartBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.SizeChartsWhereThisIsSize.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.SizeChartBO>)sender)[((IndicoList<Indico.BusinessObjects.SizeChartBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.SizeChartsWhereThisIsSize.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
            this._factoryOrderDetialsWhereThisIsSizeLoaded = false;
            if (this.factoryOrderDetialsWhereThisIsSizeList != null)
            {
                this.factoryOrderDetialsWhereThisIsSizeList.OnBeforeRemove -= new EventHandler(FactoryOrderDetialsWhereThisIsSizeList_OnBeforeRemove);
                this.factoryOrderDetialsWhereThisIsSizeList.OnAfterAdd -= new EventHandler(FactoryOrderDetialsWhereThisIsSizeList_OnAfterAdd);
            }
            this._orderDetailQtysWhereThisIsSizeLoaded = false;
            if (this.orderDetailQtysWhereThisIsSizeList != null)
            {
                this.orderDetailQtysWhereThisIsSizeList.OnBeforeRemove -= new EventHandler(OrderDetailQtysWhereThisIsSizeList_OnBeforeRemove);
                this.orderDetailQtysWhereThisIsSizeList.OnAfterAdd -= new EventHandler(OrderDetailQtysWhereThisIsSizeList_OnAfterAdd);
            }
            this._packingListCartonItemsWhereThisIsSizeLoaded = false;
            if (this.packingListCartonItemsWhereThisIsSizeList != null)
            {
                this.packingListCartonItemsWhereThisIsSizeList.OnBeforeRemove -= new EventHandler(PackingListCartonItemsWhereThisIsSizeList_OnBeforeRemove);
                this.packingListCartonItemsWhereThisIsSizeList.OnAfterAdd -= new EventHandler(PackingListCartonItemsWhereThisIsSizeList_OnAfterAdd);
            }
            this._packingListSizeQtysWhereThisIsSizeLoaded = false;
            if (this.packingListSizeQtysWhereThisIsSizeList != null)
            {
                this.packingListSizeQtysWhereThisIsSizeList.OnBeforeRemove -= new EventHandler(PackingListSizeQtysWhereThisIsSizeList_OnBeforeRemove);
                this.packingListSizeQtysWhereThisIsSizeList.OnAfterAdd -= new EventHandler(PackingListSizeQtysWhereThisIsSizeList_OnAfterAdd);
            }
            this._sizeChartsWhereThisIsSizeLoaded = false;
            if (this.sizeChartsWhereThisIsSizeList != null)
            {
                this.sizeChartsWhereThisIsSizeList.OnBeforeRemove -= new EventHandler(SizeChartsWhereThisIsSizeList_OnBeforeRemove);
                this.sizeChartsWhereThisIsSizeList.OnAfterAdd -= new EventHandler(SizeChartsWhereThisIsSizeList_OnAfterAdd);
            }
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region SizeBOComparer
    public class SizeBOComparer : IComparer<Indico.BusinessObjects.SizeBO>
    {
        private string propertyToCompareName;
        public SizeBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.SizeBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.SizeBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public SizeBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.SizeBO> Members
        public int Compare(Indico.BusinessObjects.SizeBO x, Indico.BusinessObjects.SizeBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.SizeBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.SizeBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.SizeBO x, Indico.BusinessObjects.SizeBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
