// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

//using Indico.BusinessObjects.Util;
//using Indico.BusinessObjects;
using Indico.DAL;


namespace Indico.BusinessObjects
{
    /// <summary>
    /// UserMenuItemRoleViewBO provides the business logic for maintaining Indico.DAL.UserMenuItemRoleView records in the data store.
    /// </summary>
    /// <remarks>
    /// UserMenuItemRoleViewBO provides the business logic for maintaining Indico.DAL.UserMenuItemRoleView records in the data store. 
    /// By default it provides basic Search methods for retrieving Indico.DAL.UserMenuItemRoleView
    /// records using the UserMenuItemRoleView DAL class. Other methods implement atomic chunks of Business Logic according to
    /// the business rules.
    /// </remarks>
    public partial class UserMenuItemRoleViewBO : BusinessObject, IComparable
    {
        #region fields
        private int? _user;
        private int? _page;
        private int? _menuItem;
        private string _menuName;
        private int? _parent;
        private int? _position;
        private bool? _isVisible;
        private string _pageName;
        private string _title;
        private string _heading;
        #endregion
        
        #region Properties
        /// <summary></summary>
        public int? User
        {   get {return _user;}
            set 
            {
                _user = value;
            }
        }
        /// <summary></summary>
        public int? Page
        {   get {return _page;}
            set 
            {
                _page = value;
            }
        }
        /// <summary></summary>
        public int? MenuItem
        {   get {return _menuItem;}
            set 
            {
                _menuItem = value;
            }
        }
        /// <summary></summary>
        public string MenuName
        {   get {return _menuName;}
            set 
            {
                _menuName = value;
            }
        }
        /// <summary></summary>
        public int? Parent
        {   get {return _parent;}
            set 
            {
                _parent = value;
            }
        }
        /// <summary></summary>
        public int? Position
        {   get {return _position;}
            set 
            {
                _position = value;
            }
        }
        /// <summary></summary>
        public bool? IsVisible
        {   get {return _isVisible;}
            set 
            {
                _isVisible = value;
            }
        }
        /// <summary></summary>
        public string PageName
        {   get {return _pageName;}
            set 
            {
                _pageName = value;
            }
        }
        /// <summary></summary>
        public string Title
        {   get {return _title;}
            set 
            {
                _title = value;
            }
        }
        /// <summary></summary>
        public string Heading
        {   get {return _heading;}
            set 
            {
                _heading = value;
            }
        }
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the UserMenuItemRoleViewBO class using the supplied Indico.DAL.UserMenuItemRoleView. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.UserMenuItemRoleView whose properties will be used to initialise the UserMenuItemRoleViewBO</param>
        internal UserMenuItemRoleViewBO(Indico.DAL.UserMenuItemRoleView obj)
        {
            // set the properties from the Indico.DAL.UserMenuItemRoleView 
            this.User = obj.User;
            this.Page = obj.Page;
            this.MenuItem = obj.MenuItem;
            this.MenuName = obj.MenuName;
            this.Parent = obj.Parent;
            this.Position = obj.Position;
            this.IsVisible = obj.IsVisible;
            this.PageName = obj.PageName;
            this.Title = obj.Title;
            this.Heading = obj.Heading;
        }
        #endregion
        
        #region Internal utility methods
        internal void SetDAL(Indico.DAL.UserMenuItemRoleView obj, IndicoEntities context)
        {
            // set the Indico.DAL.UserMenuItemRoleView properties
            obj.User = Convert.ToInt32(User);
            obj.Page = Convert.ToInt32(Page);
            obj.MenuItem = Convert.ToInt32(MenuItem);
            obj.MenuName = MenuName;
            obj.Parent = Convert.ToInt32(Parent);
            obj.Position = Convert.ToInt32(Position);
            obj.IsVisible = Convert.ToBoolean(IsVisible);
            obj.PageName = PageName;
            obj.Title = Title;
            obj.Heading = Heading;
        }
        
        internal void SetBO(Indico.DAL.UserMenuItemRoleView obj)
        {
            // set the Indico.BusinessObjects.UserMenuItemRoleViewBO properties    
            this.User = obj.User;
            this.Page = obj.Page;
            this.MenuItem = obj.MenuItem;
            this.MenuName = obj.MenuName;
            this.Parent = obj.Parent;
            this.Position = obj.Position;
            this.IsVisible = obj.IsVisible;
            this.PageName = obj.PageName;
            this.Title = obj.Title;
            this.Heading = obj.Heading;
        }
        
        internal void SetBO(Indico.BusinessObjects.UserMenuItemRoleViewBO obj)
        {
            // set this Indico.BusinessObjects.UserMenuItemRoleViewBO properties
            this.User = obj.User;
            this.Page = obj.Page;
            this.MenuItem = obj.MenuItem;
            this.MenuName = obj.MenuName;
            this.Parent = obj.Parent;
            this.Position = obj.Position;
            this.IsVisible = obj.IsVisible;
            this.PageName = obj.PageName;
            this.Title = obj.Title;
            this.Heading = obj.Heading;
        }
        
        private static List<Indico.BusinessObjects.UserMenuItemRoleViewBO> IQueryableToList(IQueryable<Indico.DAL.UserMenuItemRoleView> oQuery)
        {
            List<Indico.DAL.UserMenuItemRoleView> oList = oQuery.ToList();
            List<Indico.BusinessObjects.UserMenuItemRoleViewBO> rList = new List<Indico.BusinessObjects.UserMenuItemRoleViewBO>(oList.Count);
            foreach (Indico.DAL.UserMenuItemRoleView o in oList)
            {
                Indico.BusinessObjects.UserMenuItemRoleViewBO obj = new Indico.BusinessObjects.UserMenuItemRoleViewBO(o);
                rList.Add(obj);
            }
            return rList;
        }
        #endregion
        
        #region BusinessObject methods
        
        #region GetAllObject
        public static List<Indico.BusinessObjects.UserMenuItemRoleViewBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public static List<Indico.BusinessObjects.UserMenuItemRoleViewBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public static List<Indico.BusinessObjects.UserMenuItemRoleViewBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public static List<Indico.BusinessObjects.UserMenuItemRoleViewBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.UserMenuItemRoleView> oQuery =
                (from o in context.UserMenuItemRoleView
                 orderby o.User
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.User).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.UserMenuItemRoleViewBO> usermenuitemroleviews = IQueryableToList(oQuery);
            context.Dispose();
            return usermenuitemroleviews;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.UserMenuItemRoleViewBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.UserMenuItemRoleViewBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.UserMenuItemRoleViewBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.UserMenuItemRoleViewBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.UserMenuItemRoleView> oQuery =
                (from o in context.UserMenuItemRoleView
                 where
                    (this.User == null || this.User == o.User) &&
                    (this.Page == null || this.Page == o.Page) &&
                    (this.MenuItem == null || this.MenuItem == o.MenuItem) &&
                    (this.MenuName == null || this.MenuName == o.MenuName) &&
                    (this.Parent == null || this.Parent == o.Parent) &&
                    (this.Position == null || this.Position == o.Position) &&
                    (this.IsVisible == null || this.IsVisible == o.IsVisible) &&
                    (this.PageName == null || this.PageName == o.PageName) &&
                    (this.Title == null || this.Title == o.Title) &&
                    (this.Heading == null || this.Heading == o.Heading) 
                 orderby o.User
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.User).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.UserMenuItemRoleViewBO> usermenuitemroleviews = IQueryableToList(oQuery);
            context.Dispose();
            return usermenuitemroleviews;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.UserMenuItemRoleView
                 where
                    (this.User == null || this.User == o.User) &&
                    (this.Page == null || this.Page == o.Page) &&
                    (this.MenuItem == null || this.MenuItem == o.MenuItem) &&
                    (this.MenuName == null || this.MenuName == o.MenuName) &&
                    (this.Parent == null || this.Parent == o.Parent) &&
                    (this.Position == null || this.Position == o.Position) &&
                    (this.IsVisible == null || this.IsVisible == o.IsVisible) &&
                    (this.PageName == null || this.PageName == o.PageName) &&
                    (this.Title == null || this.Title == o.Title) &&
                    (this.Heading == null || this.Heading == o.Heading) 
                 orderby o.User
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.UserMenuItemRoleViewBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.UserMenuItemRoleViewBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.UserMenuItemRoleViewBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.UserMenuItemRoleViewBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.UserMenuItemRoleView> oQuery =
                (from o in context.UserMenuItemRoleView
                 where
                    (this.User == null || o.User == this.User) &&
                    (this.Page == null || o.Page == this.Page) &&
                    (this.MenuItem == null || o.MenuItem == this.MenuItem) &&
                    (this.MenuName == null || o.MenuName.Contains(this.MenuName)) &&
                    (this.Parent == null || o.Parent == this.Parent) &&
                    (this.Position == null || o.Position == this.Position) &&
                    (this.IsVisible == null || o.IsVisible == this.IsVisible) &&
                    (this.PageName == null || o.PageName.Contains(this.PageName)) &&
                    (this.Title == null || o.Title.Contains(this.Title)) &&
                    (this.Heading == null || o.Heading.Contains(this.Heading)) 
                 orderby o.User
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.User).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.UserMenuItemRoleViewBO> usermenuitemroleviews = IQueryableToList(oQuery);
            context.Dispose();
            return usermenuitemroleviews;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.UserMenuItemRoleView
                 where
                    (this.User == null || o.User == this.User) &&
                    (this.Page == null || o.Page == this.Page) &&
                    (this.MenuItem == null || o.MenuItem == this.MenuItem) &&
                    (this.MenuName == null || o.MenuName.Contains(this.MenuName)) &&
                    (this.Parent == null || o.Parent == this.Parent) &&
                    (this.Position == null || o.Position == this.Position) &&
                    (this.IsVisible == null || o.IsVisible == this.IsVisible) &&
                    (this.PageName == null || o.PageName.Contains(this.PageName)) &&
                    (this.Title == null || o.Title.Contains(this.Title)) &&
                    (this.Heading == null || o.Heading.Contains(this.Heading)) 
                 orderby o.User
                 select o).Count();
            
        }
        
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.UserMenuItemRoleViewBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.UserMenuItemRoleViewBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.UserMenuItemRoleViewBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.UserMenuItemRoleViewBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.UserMenuItemRoleView> oQuery =
                (from o in context.UserMenuItemRoleView
                 where
                    (this.User == null || this.User == o.User) && 
                    (this.Page == null || this.Page == o.Page) && 
                    (this.MenuItem == null || this.MenuItem == o.MenuItem) && 
                    (this.Parent == null || this.Parent == o.Parent) && 
                    (this.Position == null || this.Position == o.Position) && 
                    (this.IsVisible == null || this.IsVisible == o.IsVisible) && 
                    ((o.MenuName.Contains(this.MenuName)) ||
                    (o.PageName.Contains(this.PageName)) ||
                    (o.Title.Contains(this.Title)) ||
                    (o.Heading.Contains(this.Heading)) ||
                    (this.MenuName == null && this.PageName == null && this.Title == null && this.Heading == null ))
                 orderby o.User
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.User).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.UserMenuItemRoleViewBO> usermenuitemroleviews = IQueryableToList(oQuery);
            context.Dispose();
            return usermenuitemroleviews;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.UserMenuItemRoleView
                 where
                    (this.User == null || this.User == o.User) && 
                    (this.Page == null || this.Page == o.Page) && 
                    (this.MenuItem == null || this.MenuItem == o.MenuItem) && 
                    (this.Parent == null || this.Parent == o.Parent) && 
                    (this.Position == null || this.Position == o.Position) && 
                    (this.IsVisible == null || this.IsVisible == o.IsVisible) && 
                    ((o.MenuName.Contains(this.MenuName)) ||
                    (o.PageName.Contains(this.PageName)) ||
                    (o.Title.Contains(this.Title)) ||
                    (o.Heading.Contains(this.Heading)) ||
                    (this.MenuName == null && this.PageName == null && this.Title == null && this.Heading == null ))
                 orderby o.User
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.UserMenuItemRoleViewBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.UserMenuItemRoleViewBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.UserMenuItemRoleViewBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.UserMenuItemRoleViewBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.UserMenuItemRoleViewBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.UserMenuItemRoleViewBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.UserMenuItemRoleViewBO))
                return 1;
            Indico.BusinessObjects.UserMenuItemRoleViewBOComparer c = new Indico.BusinessObjects.UserMenuItemRoleViewBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.UserMenuItemRoleViewBO);
        }

        #endregion
        #endregion
    }
    
    #region UserMenuItemRoleViewBOComparer
    public class UserMenuItemRoleViewBOComparer : IComparer<Indico.BusinessObjects.UserMenuItemRoleViewBO>
    {
        private string propertyToCompareName;
        public UserMenuItemRoleViewBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.UserMenuItemRoleViewBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.UserMenuItemRoleViewBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public UserMenuItemRoleViewBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.UserMenuItemRoleViewBO> Members
        public int Compare(Indico.BusinessObjects.UserMenuItemRoleViewBO x, Indico.BusinessObjects.UserMenuItemRoleViewBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.UserMenuItemRoleViewBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.UserMenuItemRoleViewBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.UserMenuItemRoleViewBO x, Indico.BusinessObjects.UserMenuItemRoleViewBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
