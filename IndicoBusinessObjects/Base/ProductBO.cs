// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class ProductBO : BusinessObject, IComparable
    {
        #region fields
        #region Scalar Fields
        private int id;
        private int _client;
        private int _colourProfile;
        private DateTime _dateCreated = DateTime.MinValue;
        private int _distributorLabel;
        private string _fabricCodes = string.Empty;
        private string _label = string.Empty;
        private string _notes = string.Empty;
        private int _pattern;
        private int _printer;
        private string _productNumber = string.Empty;
        private int _resolutionProfile;
        #endregion
        
        #region Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.JobNameBO _objClient;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.ColourProfileBO _objColourProfile;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.PatternBO _objPattern;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.PrinterBO _objPrinter;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.ResolutionProfileBO _objResolutionProfile;
        #endregion
        
        #region Foreign Table Foreign Key fields
        #endregion
        
        #region Other fields
        
        private Indico.DAL.Product _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>.</summary>
        public int Client
        {   
            get {return _client;}
            set 
            {
                OnClientChanging(value);
                _client = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Client = (from o in this._context.Context.JobName
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.JobName>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Client = null;
                OnClientChanged();
            }
        }
        /// <summary>.</summary>
        public int ColourProfile
        {   
            get {return _colourProfile;}
            set 
            {
                OnColourProfileChanging(value);
                _colourProfile = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.ColourProfile = (from o in this._context.Context.ColourProfile
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.ColourProfile>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.ColourProfile = null;
                OnColourProfileChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime DateCreated
        {   
            get {return _dateCreated;}
            set 
            {
                OnDateCreatedChanging(value);
                _dateCreated = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.DateCreated = value;
                }
                OnDateCreatedChanged();
            }
        }
        /// <summary>.</summary>
        public int DistributorLabel
        {   
            get {return _distributorLabel;}
            set 
            {
                OnDistributorLabelChanging(value);
                _distributorLabel = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.DistributorLabel = value;
                }
                OnDistributorLabelChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string FabricCodes
        {   
            get {return _fabricCodes;}
            set 
            {
                OnFabricCodesChanging(value);
                _fabricCodes = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.FabricCodes = value;
                }
                OnFabricCodesChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string Label
        {   
            get {return _label;}
            set 
            {
                OnLabelChanging(value);
                _label = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Label = value;
                }
                OnLabelChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string Notes
        {   
            get {return _notes;}
            set 
            {
                OnNotesChanging(value);
                _notes = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Notes = value;
                }
                OnNotesChanged();
            }
        }
        /// <summary>.</summary>
        public int Pattern
        {   
            get {return _pattern;}
            set 
            {
                OnPatternChanging(value);
                _pattern = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Pattern = (from o in this._context.Context.Pattern
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Pattern>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Pattern = null;
                OnPatternChanged();
            }
        }
        /// <summary>.</summary>
        public int Printer
        {   
            get {return _printer;}
            set 
            {
                OnPrinterChanging(value);
                _printer = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Printer = (from o in this._context.Context.Printer
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Printer>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Printer = null;
                OnPrinterChanged();
            }
        }
        /// <summary>. The maximum length of this property is 64.</summary>
        public string ProductNumber
        {   
            get {return _productNumber;}
            set 
            {
                OnProductNumberChanging(value);
                _productNumber = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ProductNumber = value;
                }
                OnProductNumberChanged();
            }
        }
        /// <summary>.</summary>
        public int ResolutionProfile
        {   
            get {return _resolutionProfile;}
            set 
            {
                OnResolutionProfileChanging(value);
                _resolutionProfile = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.ResolutionProfile = (from o in this._context.Context.ResolutionProfile
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.ResolutionProfile>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.ResolutionProfile = null;
                OnResolutionProfileChanged();
            }
        }
        
        internal Indico.DAL.Product ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        ///<summary>The JobNameBO object identified by the value of Client</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.JobNameBO objClient
        {
            get
            {
                if ( _client > 0 && _objClient == null)
                {
                        if (this._context == null)
                        {
                            _objClient = new Indico.BusinessObjects.JobNameBO();
                        }
                        else
                        {
                            _objClient = new Indico.BusinessObjects.JobNameBO(ref this._context);
                        }
                        _objClient.ID = _client;
                        _objClient.GetObject(); 
                }
                return _objClient;
            }
            set
            { 
                _objClient = value;
                _client = _objClient.ID;
            }
        }
        ///<summary>The ColourProfileBO object identified by the value of ColourProfile</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.ColourProfileBO objColourProfile
        {
            get
            {
                if ( _colourProfile > 0 && _objColourProfile == null)
                {
                        if (this._context == null)
                        {
                            _objColourProfile = new Indico.BusinessObjects.ColourProfileBO();
                        }
                        else
                        {
                            _objColourProfile = new Indico.BusinessObjects.ColourProfileBO(ref this._context);
                        }
                        _objColourProfile.ID = _colourProfile;
                        _objColourProfile.GetObject(); 
                }
                return _objColourProfile;
            }
            set
            { 
                _objColourProfile = value;
                _colourProfile = _objColourProfile.ID;
            }
        }
        ///<summary>The PatternBO object identified by the value of Pattern</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.PatternBO objPattern
        {
            get
            {
                if ( _pattern > 0 && _objPattern == null)
                {
                        if (this._context == null)
                        {
                            _objPattern = new Indico.BusinessObjects.PatternBO();
                        }
                        else
                        {
                            _objPattern = new Indico.BusinessObjects.PatternBO(ref this._context);
                        }
                        _objPattern.ID = _pattern;
                        _objPattern.GetObject(); 
                }
                return _objPattern;
            }
            set
            { 
                _objPattern = value;
                _pattern = _objPattern.ID;
            }
        }
        ///<summary>The PrinterBO object identified by the value of Printer</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.PrinterBO objPrinter
        {
            get
            {
                if ( _printer > 0 && _objPrinter == null)
                {
                        if (this._context == null)
                        {
                            _objPrinter = new Indico.BusinessObjects.PrinterBO();
                        }
                        else
                        {
                            _objPrinter = new Indico.BusinessObjects.PrinterBO(ref this._context);
                        }
                        _objPrinter.ID = _printer;
                        _objPrinter.GetObject(); 
                }
                return _objPrinter;
            }
            set
            { 
                _objPrinter = value;
                _printer = _objPrinter.ID;
            }
        }
        ///<summary>The ResolutionProfileBO object identified by the value of ResolutionProfile</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.ResolutionProfileBO objResolutionProfile
        {
            get
            {
                if ( _resolutionProfile > 0 && _objResolutionProfile == null)
                {
                        if (this._context == null)
                        {
                            _objResolutionProfile = new Indico.BusinessObjects.ResolutionProfileBO();
                        }
                        else
                        {
                            _objResolutionProfile = new Indico.BusinessObjects.ResolutionProfileBO(ref this._context);
                        }
                        _objResolutionProfile.ID = _resolutionProfile;
                        _objResolutionProfile.GetObject(); 
                }
                return _objResolutionProfile;
            }
            set
            { 
                _objResolutionProfile = value;
                _resolutionProfile = _objResolutionProfile.ID;
            }
        }
        #endregion
        
        #region Foreign Object Foreign Key Collections
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the ProductBO class using the supplied Indico.DAL.Product. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.Product whose properties will be used to initialise the ProductBO</param>
        internal ProductBO(Indico.DAL.Product obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.Product 
            this.ID = obj.ID;
            
            this.Client = (obj.ClientReference.EntityKey != null && obj.ClientReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ClientReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.ColourProfile = (obj.ColourProfileReference.EntityKey != null && obj.ColourProfileReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ColourProfileReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.DateCreated = obj.DateCreated;
            this.DistributorLabel = obj.DistributorLabel;
            this.FabricCodes = obj.FabricCodes;
            this.Label = obj.Label;
            this.Notes = obj.Notes;
            this.Pattern = (obj.PatternReference.EntityKey != null && obj.PatternReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PatternReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Printer = (obj.PrinterReference.EntityKey != null && obj.PrinterReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PrinterReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.ProductNumber = obj.ProductNumber;
            this.ResolutionProfile = (obj.ResolutionProfileReference.EntityKey != null && obj.ResolutionProfileReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ResolutionProfileReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.Product SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.Product properties
            Indico.DAL.Product obj = new Indico.DAL.Product();
            
            if (this.ID > 0)
            {
                obj = context.Product.FirstOrDefault<Product>(o => o.ID == this.ID);
            }
            
            obj.DateCreated = this.DateCreated;
            obj.DistributorLabel = this.DistributorLabel;
            obj.FabricCodes = this.FabricCodes;
            obj.Label = this.Label;
            obj.Notes = this.Notes;
            obj.ProductNumber = this.ProductNumber;
            
            if (this.Client > 0) obj.Client = context.JobName.FirstOrDefault(o => o.ID == this.Client);
            if (this.ColourProfile > 0) obj.ColourProfile = context.ColourProfile.FirstOrDefault(o => o.ID == this.ColourProfile);
            if (this.Pattern > 0) obj.Pattern = context.Pattern.FirstOrDefault(o => o.ID == this.Pattern);
            if (this.Printer > 0) obj.Printer = context.Printer.FirstOrDefault(o => o.ID == this.Printer);
            if (this.ResolutionProfile > 0) obj.ResolutionProfile = context.ResolutionProfile.FirstOrDefault(o => o.ID == this.ResolutionProfile);
            
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.Product))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.Product obj = (Indico.DAL.Product)eObj;
            
            // set the Indico.BusinessObjects.ProductBO properties
            this.ID = obj.ID;
            
            this.DateCreated = obj.DateCreated;
            this.DistributorLabel = obj.DistributorLabel;
            this.FabricCodes = obj.FabricCodes;
            this.Label = obj.Label;
            this.Notes = obj.Notes;
            this.ProductNumber = obj.ProductNumber;
            
            this.Client = (obj.ClientReference.EntityKey != null && obj.ClientReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ClientReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.ColourProfile = (obj.ColourProfileReference.EntityKey != null && obj.ColourProfileReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ColourProfileReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Pattern = (obj.PatternReference.EntityKey != null && obj.PatternReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PatternReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Printer = (obj.PrinterReference.EntityKey != null && obj.PrinterReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PrinterReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.ResolutionProfile = (obj.ResolutionProfileReference.EntityKey != null && obj.ResolutionProfileReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ResolutionProfileReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.ProductBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.ProductBO properties
            this.ID = obj.ID;
            
            this.Client = obj.Client;
            this.ColourProfile = obj.ColourProfile;
            this.DateCreated = obj.DateCreated;
            this.DistributorLabel = obj.DistributorLabel;
            this.FabricCodes = obj.FabricCodes;
            this.Label = obj.Label;
            this.Notes = obj.Notes;
            this.Pattern = obj.Pattern;
            this.Printer = obj.Printer;
            this.ProductNumber = obj.ProductNumber;
            this.ResolutionProfile = obj.ResolutionProfile;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.ProductBO> IQueryableToList(IQueryable<Indico.DAL.Product> oQuery)
        {
            List<Indico.DAL.Product> oList = oQuery.ToList();
            List<Indico.BusinessObjects.ProductBO> rList = new List<Indico.BusinessObjects.ProductBO>(oList.Count);
            foreach (Indico.DAL.Product o in oList)
            {
                Indico.BusinessObjects.ProductBO obj = new Indico.BusinessObjects.ProductBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.ProductBO> ToList(IEnumerable<Indico.DAL.Product> oQuery)
        {
            List<Indico.DAL.Product> oList = oQuery.ToList();
            List<Indico.BusinessObjects.ProductBO> rList = new List<Indico.BusinessObjects.ProductBO>(oList.Count);
            foreach (Indico.DAL.Product o in oList)
            {
                Indico.BusinessObjects.ProductBO obj = new Indico.BusinessObjects.ProductBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.Product> ToEntityList(List<ProductBO> bos, IndicoEntities context)
        {
            // build a List of Product entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.Product.Count() == 0) ? new List<Indico.DAL.Product>() : (context.Product.Where(BuildContainsExpression<Product, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.Product>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Product> ToEntityCollection(List<ProductBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of Product entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.Product> el = (context.Product.Count() == 0) ? new List<Indico.DAL.Product>() : 
                context.Product.Where(BuildContainsExpression<Product, int>(e => e.ID, ids))
                .ToList<Indico.DAL.Product>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Product> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Product>();
                
            foreach (Indico.DAL.Product r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.Product ToEntity(IndicoEntities context)
        {
            return (from o in context.Product
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToProduct(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Product obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToProduct(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.Product obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Product obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.ProductBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.ProductBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.Product> oQuery =
                        from o in context.Product
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.Product> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.ProductBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.ProductBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ProductBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ProductBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.Product> oQuery =
                (from o in context.Product
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ProductBO> products = IQueryableToList(oQuery);
            context.Dispose();
            return products;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.ProductBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.ProductBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ProductBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ProductBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Product> oQuery =
                (from o in context.Product
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.ProductNumber == string.Empty || this.ProductNumber == o.ProductNumber) &&
                    (this.Pattern == 0 || this.Pattern == o.Pattern.ID) &&
                    (this.ResolutionProfile == 0 || this.ResolutionProfile == o.ResolutionProfile.ID) &&
                    (this.ColourProfile == 0 || this.ColourProfile == o.ColourProfile.ID) &&
                    (this.Client == 0 || this.Client == o.Client.ID) &&
                    (this.Notes == string.Empty || this.Notes == o.Notes) &&
                    (this.DateCreated == DateTime.MinValue || this.DateCreated == o.DateCreated) &&
                    (this.FabricCodes == string.Empty || this.FabricCodes == o.FabricCodes) &&
                    (this.DistributorLabel == 0 || this.DistributorLabel == o.DistributorLabel) &&
                    (this.Label == string.Empty || this.Label == o.Label) &&
                    (this.Printer == 0 || this.Printer == o.Printer.ID) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ProductBO> products = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return products;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Product
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.ProductNumber == string.Empty || this.ProductNumber == o.ProductNumber) &&
                    (this.Pattern == 0 || this.Pattern == o.Pattern.ID) &&
                    (this.ResolutionProfile == 0 || this.ResolutionProfile == o.ResolutionProfile.ID) &&
                    (this.ColourProfile == 0 || this.ColourProfile == o.ColourProfile.ID) &&
                    (this.Client == 0 || this.Client == o.Client.ID) &&
                    (this.Notes == string.Empty || this.Notes == o.Notes) &&
                    (this.DateCreated == DateTime.MinValue || this.DateCreated == o.DateCreated) &&
                    (this.FabricCodes == string.Empty || this.FabricCodes == o.FabricCodes) &&
                    (this.DistributorLabel == 0 || this.DistributorLabel == o.DistributorLabel) &&
                    (this.Label == string.Empty || this.Label == o.Label) &&
                    (this.Printer == 0 || this.Printer == o.Printer.ID) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.ProductBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.ProductBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ProductBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ProductBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Product> oQuery =
                (from o in context.Product
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.ProductNumber == string.Empty || o.ProductNumber.Contains(this.ProductNumber)) &&
                    (this.Pattern == 0 || o.Pattern.ID == this.Pattern) &&
                    (this.ResolutionProfile == 0 || o.ResolutionProfile.ID == this.ResolutionProfile) &&
                    (this.ColourProfile == 0 || o.ColourProfile.ID == this.ColourProfile) &&
                    (this.Client == 0 || o.Client.ID == this.Client) &&
                    (this.Notes == string.Empty || o.Notes.Contains(this.Notes)) &&
                    (this.DateCreated == DateTime.MinValue || o.DateCreated == this.DateCreated) &&
                    (this.FabricCodes == string.Empty || o.FabricCodes.Contains(this.FabricCodes)) &&
                    (this.DistributorLabel == 0 || o.DistributorLabel == this.DistributorLabel) &&
                    (this.Label == string.Empty || o.Label.Contains(this.Label)) &&
                    (this.Printer == 0 || o.Printer.ID == this.Printer) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ProductBO> products = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return products;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Product
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.ProductNumber == string.Empty || o.ProductNumber.Contains(this.ProductNumber)) &&
                    (this.Pattern == 0 || o.Pattern.ID == this.Pattern) &&
                    (this.ResolutionProfile == 0 || o.ResolutionProfile.ID == this.ResolutionProfile) &&
                    (this.ColourProfile == 0 || o.ColourProfile.ID == this.ColourProfile) &&
                    (this.Client == 0 || o.Client.ID == this.Client) &&
                    (this.Notes == string.Empty || o.Notes.Contains(this.Notes)) &&
                    (this.DateCreated == DateTime.MinValue || o.DateCreated == this.DateCreated) &&
                    (this.FabricCodes == string.Empty || o.FabricCodes.Contains(this.FabricCodes)) &&
                    (this.DistributorLabel == 0 || o.DistributorLabel == this.DistributorLabel) &&
                    (this.Label == string.Empty || o.Label.Contains(this.Label)) &&
                    (this.Printer == 0 || o.Printer.ID == this.Printer) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.ProductBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.ProductBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ProductBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ProductBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Product> oQuery =
                (from o in context.Product
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Pattern == 0 || this.Pattern == o.Pattern.ID) && 
                    (this.ResolutionProfile == 0 || this.ResolutionProfile == o.ResolutionProfile.ID) && 
                    (this.ColourProfile == 0 || this.ColourProfile == o.ColourProfile.ID) && 
                    (this.Client == 0 || this.Client == o.Client.ID) && 
                    (this.DateCreated == DateTime.MinValue || this.DateCreated == o.DateCreated) && 
                    (this.DistributorLabel == 0 || this.DistributorLabel == o.DistributorLabel) && 
                    (this.Printer == 0 || this.Printer == o.Printer.ID) && 
                    ((o.ProductNumber.Contains(this.ProductNumber)) ||
                    (o.Notes.Contains(this.Notes)) ||
                    (o.FabricCodes.Contains(this.FabricCodes)) ||
                    (o.Label.Contains(this.Label)) ||
                    (this.ProductNumber == null && this.Notes == null && this.FabricCodes == null && this.Label == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ProductBO> products = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return products;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Product
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Pattern == 0 || this.Pattern == o.Pattern.ID) && 
                    (this.ResolutionProfile == 0 || this.ResolutionProfile == o.ResolutionProfile.ID) && 
                    (this.ColourProfile == 0 || this.ColourProfile == o.ColourProfile.ID) && 
                    (this.Client == 0 || this.Client == o.Client.ID) && 
                    (this.DateCreated == DateTime.MinValue || this.DateCreated == o.DateCreated) && 
                    (this.DistributorLabel == 0 || this.DistributorLabel == o.DistributorLabel) && 
                    (this.Printer == 0 || this.Printer == o.Printer.ID) && 
                    ((o.ProductNumber.Contains(this.ProductNumber)) ||
                    (o.Notes.Contains(this.Notes)) ||
                    (o.FabricCodes.Contains(this.FabricCodes)) ||
                    (o.Label.Contains(this.Label)) ||
                    (this.ProductNumber == null && this.Notes == null && this.FabricCodes == null && this.Label == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.ProductBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.ProductBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.ProductBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.ProductBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.ProductBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.ProductBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnProductBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("ProductBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnProductBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnProductBOIDChanged();
        partial void OnProductBOIDChanging(int value);
        
        partial void OnProductNumberChanged()
        {
            OnProductBOProductNumberChanged();
        }
        
        partial void OnProductNumberChanging(string value)
        {
            if (value != null && value.Length > 64)
            {
                throw new Exception(String.Format("ProductBO.ProductNumber has a maximum length of 64. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnProductBOProductNumberChanging(value);
        }
        partial void OnProductNumberChanged();
        partial void OnProductNumberChanging(string value);
        partial void OnProductBOProductNumberChanged();
        partial void OnProductBOProductNumberChanging(string value);
        
        partial void OnPatternChanged()
        {
            OnProductBOPatternChanged();
        }
        
        partial void OnPatternChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("ProductBO.Pattern must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnProductBOPatternChanging(value);
        }
        partial void OnPatternChanged();
        partial void OnPatternChanging(int value);
        partial void OnProductBOPatternChanged();
        partial void OnProductBOPatternChanging(int value);
        
        partial void OnResolutionProfileChanged()
        {
            OnProductBOResolutionProfileChanged();
        }
        
        partial void OnResolutionProfileChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("ProductBO.ResolutionProfile must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnProductBOResolutionProfileChanging(value);
        }
        partial void OnResolutionProfileChanged();
        partial void OnResolutionProfileChanging(int value);
        partial void OnProductBOResolutionProfileChanged();
        partial void OnProductBOResolutionProfileChanging(int value);
        
        partial void OnColourProfileChanged()
        {
            OnProductBOColourProfileChanged();
        }
        
        partial void OnColourProfileChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("ProductBO.ColourProfile must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnProductBOColourProfileChanging(value);
        }
        partial void OnColourProfileChanged();
        partial void OnColourProfileChanging(int value);
        partial void OnProductBOColourProfileChanged();
        partial void OnProductBOColourProfileChanging(int value);
        
        partial void OnClientChanged()
        {
            OnProductBOClientChanged();
        }
        
        partial void OnClientChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("ProductBO.Client must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnProductBOClientChanging(value);
        }
        partial void OnClientChanged();
        partial void OnClientChanging(int value);
        partial void OnProductBOClientChanged();
        partial void OnProductBOClientChanging(int value);
        
        partial void OnNotesChanged()
        {
            OnProductBONotesChanged();
        }
        
        partial void OnNotesChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("ProductBO.Notes has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnProductBONotesChanging(value);
        }
        partial void OnNotesChanged();
        partial void OnNotesChanging(string value);
        partial void OnProductBONotesChanged();
        partial void OnProductBONotesChanging(string value);
        
        partial void OnDateCreatedChanged()
        {
            OnProductBODateCreatedChanged();
        }
        
        partial void OnDateCreatedChanging(DateTime value)
        {
            OnProductBODateCreatedChanging(value);
        }
        partial void OnDateCreatedChanged();
        partial void OnDateCreatedChanging(DateTime value);
        partial void OnProductBODateCreatedChanged();
        partial void OnProductBODateCreatedChanging(DateTime value);
        
        partial void OnFabricCodesChanged()
        {
            OnProductBOFabricCodesChanged();
        }
        
        partial void OnFabricCodesChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("ProductBO.FabricCodes has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnProductBOFabricCodesChanging(value);
        }
        partial void OnFabricCodesChanged();
        partial void OnFabricCodesChanging(string value);
        partial void OnProductBOFabricCodesChanged();
        partial void OnProductBOFabricCodesChanging(string value);
        
        partial void OnDistributorLabelChanged()
        {
            OnProductBODistributorLabelChanged();
        }
        
        partial void OnDistributorLabelChanging(int value)
        {
            OnProductBODistributorLabelChanging(value);
        }
        partial void OnDistributorLabelChanged();
        partial void OnDistributorLabelChanging(int value);
        partial void OnProductBODistributorLabelChanged();
        partial void OnProductBODistributorLabelChanging(int value);
        
        partial void OnLabelChanged()
        {
            OnProductBOLabelChanged();
        }
        
        partial void OnLabelChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("ProductBO.Label has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnProductBOLabelChanging(value);
        }
        partial void OnLabelChanged();
        partial void OnLabelChanging(string value);
        partial void OnProductBOLabelChanged();
        partial void OnProductBOLabelChanging(string value);
        
        partial void OnPrinterChanged()
        {
            OnProductBOPrinterChanged();
        }
        
        partial void OnPrinterChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("ProductBO.Printer must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnProductBOPrinterChanging(value);
        }
        partial void OnPrinterChanged();
        partial void OnPrinterChanging(int value);
        partial void OnProductBOPrinterChanged();
        partial void OnProductBOPrinterChanging(int value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.ProductBO))
                return 1;
            Indico.BusinessObjects.ProductBOComparer c = new Indico.BusinessObjects.ProductBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.ProductBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.Product)sender);
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region ProductBOComparer
    public class ProductBOComparer : IComparer<Indico.BusinessObjects.ProductBO>
    {
        private string propertyToCompareName;
        public ProductBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.ProductBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.ProductBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public ProductBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.ProductBO> Members
        public int Compare(Indico.BusinessObjects.ProductBO x, Indico.BusinessObjects.ProductBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.ProductBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.ProductBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.ProductBO x, Indico.BusinessObjects.ProductBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
