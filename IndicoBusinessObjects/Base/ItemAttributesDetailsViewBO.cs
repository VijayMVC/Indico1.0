// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

//using Indico.BusinessObjects.Util;
//using Indico.BusinessObjects;
using Indico.DAL;


namespace Indico.BusinessObjects
{
    /// <summary>
    /// ItemAttributesDetailsViewBO provides the business logic for maintaining Indico.DAL.ItemAttributesDetailsView records in the data store.
    /// </summary>
    /// <remarks>
    /// ItemAttributesDetailsViewBO provides the business logic for maintaining Indico.DAL.ItemAttributesDetailsView records in the data store. 
    /// By default it provides basic Search methods for retrieving Indico.DAL.ItemAttributesDetailsView
    /// records using the ItemAttributesDetailsView DAL class. Other methods implement atomic chunks of Business Logic according to
    /// the business rules.
    /// </remarks>
    public partial class ItemAttributesDetailsViewBO : BusinessObject, IComparable
    {
        #region fields
        private int? _attribute;
        private string _name;
        private string _description;
        private int? _itemID;
        private string _item;
        private bool? _isItemAttributesSubWherethisFabricCode;
        #endregion
        
        #region Properties
        /// <summary></summary>
        public int? Attribute
        {   get {return _attribute;}
            set 
            {
                _attribute = value;
            }
        }
        /// <summary></summary>
        public string Name
        {   get {return _name;}
            set 
            {
                _name = value;
            }
        }
        /// <summary></summary>
        public string Description
        {   get {return _description;}
            set 
            {
                _description = value;
            }
        }
        /// <summary></summary>
        public int? ItemID
        {   get {return _itemID;}
            set 
            {
                _itemID = value;
            }
        }
        /// <summary></summary>
        public string Item
        {   get {return _item;}
            set 
            {
                _item = value;
            }
        }
        /// <summary></summary>
        public bool? IsItemAttributesSubWherethisFabricCode
        {   get {return _isItemAttributesSubWherethisFabricCode;}
            set 
            {
                _isItemAttributesSubWherethisFabricCode = value;
            }
        }
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the ItemAttributesDetailsViewBO class using the supplied Indico.DAL.ItemAttributesDetailsView. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.ItemAttributesDetailsView whose properties will be used to initialise the ItemAttributesDetailsViewBO</param>
        internal ItemAttributesDetailsViewBO(Indico.DAL.ItemAttributesDetailsView obj)
        {
            // set the properties from the Indico.DAL.ItemAttributesDetailsView 
            this.Attribute = obj.Attribute;
            this.Name = obj.Name;
            this.Description = obj.Description;
            this.ItemID = obj.ItemID;
            this.Item = obj.Item;
            this.IsItemAttributesSubWherethisFabricCode = obj.IsItemAttributesSubWherethisFabricCode;
        }
        #endregion
        
        #region Internal utility methods
        internal void SetDAL(Indico.DAL.ItemAttributesDetailsView obj, IndicoEntities context)
        {
            // set the Indico.DAL.ItemAttributesDetailsView properties
            obj.Attribute = Convert.ToInt32(Attribute);
            obj.Name = Name;
            obj.Description = Description;
            obj.ItemID = Convert.ToInt32(ItemID);
            obj.Item = Item;
            obj.IsItemAttributesSubWherethisFabricCode = Convert.ToBoolean(IsItemAttributesSubWherethisFabricCode);
        }
        
        internal void SetBO(Indico.DAL.ItemAttributesDetailsView obj)
        {
            // set the Indico.BusinessObjects.ItemAttributesDetailsViewBO properties    
            this.Attribute = obj.Attribute;
            this.Name = obj.Name;
            this.Description = obj.Description;
            this.ItemID = obj.ItemID;
            this.Item = obj.Item;
            this.IsItemAttributesSubWherethisFabricCode = obj.IsItemAttributesSubWherethisFabricCode;
        }
        
        internal void SetBO(Indico.BusinessObjects.ItemAttributesDetailsViewBO obj)
        {
            // set this Indico.BusinessObjects.ItemAttributesDetailsViewBO properties
            this.Attribute = obj.Attribute;
            this.Name = obj.Name;
            this.Description = obj.Description;
            this.ItemID = obj.ItemID;
            this.Item = obj.Item;
            this.IsItemAttributesSubWherethisFabricCode = obj.IsItemAttributesSubWherethisFabricCode;
        }
        
        private static List<Indico.BusinessObjects.ItemAttributesDetailsViewBO> IQueryableToList(IQueryable<Indico.DAL.ItemAttributesDetailsView> oQuery)
        {
            List<Indico.DAL.ItemAttributesDetailsView> oList = oQuery.ToList();
            List<Indico.BusinessObjects.ItemAttributesDetailsViewBO> rList = new List<Indico.BusinessObjects.ItemAttributesDetailsViewBO>(oList.Count);
            foreach (Indico.DAL.ItemAttributesDetailsView o in oList)
            {
                Indico.BusinessObjects.ItemAttributesDetailsViewBO obj = new Indico.BusinessObjects.ItemAttributesDetailsViewBO(o);
                rList.Add(obj);
            }
            return rList;
        }
        #endregion
        
        #region BusinessObject methods
        
        #region GetAllObject
        public static List<Indico.BusinessObjects.ItemAttributesDetailsViewBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public static List<Indico.BusinessObjects.ItemAttributesDetailsViewBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public static List<Indico.BusinessObjects.ItemAttributesDetailsViewBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public static List<Indico.BusinessObjects.ItemAttributesDetailsViewBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ItemAttributesDetailsView> oQuery =
                (from o in context.ItemAttributesDetailsView
                 orderby o.Attribute
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.Attribute).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ItemAttributesDetailsViewBO> itemattributesdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return itemattributesdetailsviews;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.ItemAttributesDetailsViewBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.ItemAttributesDetailsViewBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ItemAttributesDetailsViewBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ItemAttributesDetailsViewBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ItemAttributesDetailsView> oQuery =
                (from o in context.ItemAttributesDetailsView
                 where
                    (this.Attribute == null || this.Attribute == o.Attribute) &&
                    (this.Name == null || this.Name == o.Name) &&
                    (this.Description == null || this.Description == o.Description) &&
                    (this.ItemID == null || this.ItemID == o.ItemID) &&
                    (this.Item == null || this.Item == o.Item) &&
                    (this.IsItemAttributesSubWherethisFabricCode == null || this.IsItemAttributesSubWherethisFabricCode == o.IsItemAttributesSubWherethisFabricCode) 
                 orderby o.Attribute
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.Attribute).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ItemAttributesDetailsViewBO> itemattributesdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return itemattributesdetailsviews;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ItemAttributesDetailsView
                 where
                    (this.Attribute == null || this.Attribute == o.Attribute) &&
                    (this.Name == null || this.Name == o.Name) &&
                    (this.Description == null || this.Description == o.Description) &&
                    (this.ItemID == null || this.ItemID == o.ItemID) &&
                    (this.Item == null || this.Item == o.Item) &&
                    (this.IsItemAttributesSubWherethisFabricCode == null || this.IsItemAttributesSubWherethisFabricCode == o.IsItemAttributesSubWherethisFabricCode) 
                 orderby o.Attribute
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.ItemAttributesDetailsViewBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.ItemAttributesDetailsViewBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ItemAttributesDetailsViewBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ItemAttributesDetailsViewBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ItemAttributesDetailsView> oQuery =
                (from o in context.ItemAttributesDetailsView
                 where
                    (this.Attribute == null || o.Attribute == this.Attribute) &&
                    (this.Name == null || o.Name.Contains(this.Name)) &&
                    (this.Description == null || o.Description.Contains(this.Description)) &&
                    (this.ItemID == null || o.ItemID == this.ItemID) &&
                    (this.Item == null || o.Item.Contains(this.Item)) &&
                    (this.IsItemAttributesSubWherethisFabricCode == null || o.IsItemAttributesSubWherethisFabricCode == this.IsItemAttributesSubWherethisFabricCode) 
                 orderby o.Attribute
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.Attribute).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ItemAttributesDetailsViewBO> itemattributesdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return itemattributesdetailsviews;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ItemAttributesDetailsView
                 where
                    (this.Attribute == null || o.Attribute == this.Attribute) &&
                    (this.Name == null || o.Name.Contains(this.Name)) &&
                    (this.Description == null || o.Description.Contains(this.Description)) &&
                    (this.ItemID == null || o.ItemID == this.ItemID) &&
                    (this.Item == null || o.Item.Contains(this.Item)) &&
                    (this.IsItemAttributesSubWherethisFabricCode == null || o.IsItemAttributesSubWherethisFabricCode == this.IsItemAttributesSubWherethisFabricCode) 
                 orderby o.Attribute
                 select o).Count();
            
        }
        
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.ItemAttributesDetailsViewBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.ItemAttributesDetailsViewBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ItemAttributesDetailsViewBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ItemAttributesDetailsViewBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ItemAttributesDetailsView> oQuery =
                (from o in context.ItemAttributesDetailsView
                 where
                    (this.Attribute == null || this.Attribute == o.Attribute) && 
                    (this.ItemID == null || this.ItemID == o.ItemID) && 
                    (this.IsItemAttributesSubWherethisFabricCode == null || this.IsItemAttributesSubWherethisFabricCode == o.IsItemAttributesSubWherethisFabricCode) && 
                    ((o.Name.Contains(this.Name)) ||
                    (o.Description.Contains(this.Description)) ||
                    (o.Item.Contains(this.Item)) ||
                    (this.Name == null && this.Description == null && this.Item == null ))
                 orderby o.Attribute
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.Attribute).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ItemAttributesDetailsViewBO> itemattributesdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return itemattributesdetailsviews;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ItemAttributesDetailsView
                 where
                    (this.Attribute == null || this.Attribute == o.Attribute) && 
                    (this.ItemID == null || this.ItemID == o.ItemID) && 
                    (this.IsItemAttributesSubWherethisFabricCode == null || this.IsItemAttributesSubWherethisFabricCode == o.IsItemAttributesSubWherethisFabricCode) && 
                    ((o.Name.Contains(this.Name)) ||
                    (o.Description.Contains(this.Description)) ||
                    (o.Item.Contains(this.Item)) ||
                    (this.Name == null && this.Description == null && this.Item == null ))
                 orderby o.Attribute
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.ItemAttributesDetailsViewBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.ItemAttributesDetailsViewBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.ItemAttributesDetailsViewBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.ItemAttributesDetailsViewBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.ItemAttributesDetailsViewBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.ItemAttributesDetailsViewBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.ItemAttributesDetailsViewBO))
                return 1;
            Indico.BusinessObjects.ItemAttributesDetailsViewBOComparer c = new Indico.BusinessObjects.ItemAttributesDetailsViewBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.ItemAttributesDetailsViewBO);
        }

        #endregion
        #endregion
    }
    
    #region ItemAttributesDetailsViewBOComparer
    public class ItemAttributesDetailsViewBOComparer : IComparer<Indico.BusinessObjects.ItemAttributesDetailsViewBO>
    {
        private string propertyToCompareName;
        public ItemAttributesDetailsViewBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.ItemAttributesDetailsViewBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.ItemAttributesDetailsViewBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public ItemAttributesDetailsViewBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.ItemAttributesDetailsViewBO> Members
        public int Compare(Indico.BusinessObjects.ItemAttributesDetailsViewBO x, Indico.BusinessObjects.ItemAttributesDetailsViewBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.ItemAttributesDetailsViewBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.ItemAttributesDetailsViewBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.ItemAttributesDetailsViewBO x, Indico.BusinessObjects.ItemAttributesDetailsViewBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
