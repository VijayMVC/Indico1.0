// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

//using Indico.BusinessObjects.Util;
//using Indico.BusinessObjects;
using Indico.DAL;


namespace Indico.BusinessObjects
{
    /// <summary>
    /// ClientOrderDetailsViewBO provides the business logic for maintaining Indico.DAL.ClientOrderDetailsView records in the data store.
    /// </summary>
    /// <remarks>
    /// ClientOrderDetailsViewBO provides the business logic for maintaining Indico.DAL.ClientOrderDetailsView records in the data store. 
    /// By default it provides basic Search methods for retrieving Indico.DAL.ClientOrderDetailsView
    /// records using the ClientOrderDetailsView DAL class. Other methods implement atomic chunks of Business Logic according to
    /// the business rules.
    /// </remarks>
    public partial class ClientOrderDetailsViewBO : BusinessObject, IComparable
    {
        #region fields
        private int? _orderDetailId;
        private int? _companyId;
        private string _companyName;
        private int? _orderId;
        private DateTime? _date;
        private DateTime? _desiredDeliveryDate;
        private string _orderNumber;
        private bool? _isTemporary;
        private int? _clientId;
        private string _clientName;
        private int? _orderTypeId;
        private string _orderType;
        private int? _visualLayoutId;
        private string _namePrefix;
        private int? _nameSuffix;
        private int? _patternId;
        private string _patternNumber;
        private int? _fabricId;
        private string _fabric;
        private string _fabricNickName;
        private int? _statusId;
        private string _status;
        #endregion
        
        #region Properties
        /// <summary></summary>
        public int? OrderDetailId
        {   get {return _orderDetailId;}
            set 
            {
                _orderDetailId = value;
            }
        }
        /// <summary></summary>
        public int? CompanyId
        {   get {return _companyId;}
            set 
            {
                _companyId = value;
            }
        }
        /// <summary></summary>
        public string CompanyName
        {   get {return _companyName;}
            set 
            {
                _companyName = value;
            }
        }
        /// <summary></summary>
        public int? OrderId
        {   get {return _orderId;}
            set 
            {
                _orderId = value;
            }
        }
        /// <summary></summary>
        public DateTime? Date
        {   get {return _date;}
            set 
            {
                _date = value;
            }
        }
        /// <summary></summary>
        public DateTime? DesiredDeliveryDate
        {   get {return _desiredDeliveryDate;}
            set 
            {
                _desiredDeliveryDate = value;
            }
        }
        /// <summary></summary>
        public string OrderNumber
        {   get {return _orderNumber;}
            set 
            {
                _orderNumber = value;
            }
        }
        /// <summary></summary>
        public bool? IsTemporary
        {   get {return _isTemporary;}
            set 
            {
                _isTemporary = value;
            }
        }
        /// <summary></summary>
        public int? ClientId
        {   get {return _clientId;}
            set 
            {
                _clientId = value;
            }
        }
        /// <summary></summary>
        public string ClientName
        {   get {return _clientName;}
            set 
            {
                _clientName = value;
            }
        }
        /// <summary></summary>
        public int? OrderTypeId
        {   get {return _orderTypeId;}
            set 
            {
                _orderTypeId = value;
            }
        }
        /// <summary></summary>
        public string OrderType
        {   get {return _orderType;}
            set 
            {
                _orderType = value;
            }
        }
        /// <summary></summary>
        public int? VisualLayoutId
        {   get {return _visualLayoutId;}
            set 
            {
                _visualLayoutId = value;
            }
        }
        /// <summary></summary>
        public string NamePrefix
        {   get {return _namePrefix;}
            set 
            {
                _namePrefix = value;
            }
        }
        /// <summary></summary>
        public int? NameSuffix
        {   get {return _nameSuffix;}
            set 
            {
                _nameSuffix = value;
            }
        }
        /// <summary></summary>
        public int? PatternId
        {   get {return _patternId;}
            set 
            {
                _patternId = value;
            }
        }
        /// <summary></summary>
        public string PatternNumber
        {   get {return _patternNumber;}
            set 
            {
                _patternNumber = value;
            }
        }
        /// <summary></summary>
        public int? FabricId
        {   get {return _fabricId;}
            set 
            {
                _fabricId = value;
            }
        }
        /// <summary></summary>
        public string Fabric
        {   get {return _fabric;}
            set 
            {
                _fabric = value;
            }
        }
        /// <summary></summary>
        public string FabricNickName
        {   get {return _fabricNickName;}
            set 
            {
                _fabricNickName = value;
            }
        }
        /// <summary></summary>
        public int? StatusId
        {   get {return _statusId;}
            set 
            {
                _statusId = value;
            }
        }
        /// <summary></summary>
        public string Status
        {   get {return _status;}
            set 
            {
                _status = value;
            }
        }
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the ClientOrderDetailsViewBO class using the supplied Indico.DAL.ClientOrderDetailsView. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.ClientOrderDetailsView whose properties will be used to initialise the ClientOrderDetailsViewBO</param>
        internal ClientOrderDetailsViewBO(Indico.DAL.ClientOrderDetailsView obj)
        {
            // set the properties from the Indico.DAL.ClientOrderDetailsView 
            this.OrderDetailId = obj.OrderDetailId;
            this.CompanyId = obj.CompanyId;
            this.CompanyName = obj.CompanyName;
            this.OrderId = obj.OrderId;
            this.Date = obj.Date;
            this.DesiredDeliveryDate = obj.DesiredDeliveryDate;
            this.OrderNumber = obj.OrderNumber;
            this.IsTemporary = obj.IsTemporary;
            this.ClientId = obj.ClientId;
            this.ClientName = obj.ClientName;
            this.OrderTypeId = obj.OrderTypeId;
            this.OrderType = obj.OrderType;
            this.VisualLayoutId = obj.VisualLayoutId;
            this.NamePrefix = obj.NamePrefix;
            this.NameSuffix = obj.NameSuffix;
            this.PatternId = obj.PatternId;
            this.PatternNumber = obj.PatternNumber;
            this.FabricId = obj.FabricId;
            this.Fabric = obj.Fabric;
            this.FabricNickName = obj.FabricNickName;
            this.StatusId = obj.StatusId;
            this.Status = obj.Status;
        }
        #endregion
        
        #region Internal utility methods
        internal void SetDAL(Indico.DAL.ClientOrderDetailsView obj, IndicoEntities context)
        {
            // set the Indico.DAL.ClientOrderDetailsView properties
            obj.OrderDetailId = Convert.ToInt32(OrderDetailId);
            obj.CompanyId = Convert.ToInt32(CompanyId);
            obj.CompanyName = CompanyName;
            obj.OrderId = Convert.ToInt32(OrderId);
            obj.Date = Convert.ToDateTime(Date);
            obj.DesiredDeliveryDate = Convert.ToDateTime(DesiredDeliveryDate);
            obj.OrderNumber = OrderNumber;
            obj.IsTemporary = Convert.ToBoolean(IsTemporary);
            obj.ClientId = Convert.ToInt32(ClientId);
            obj.ClientName = ClientName;
            obj.OrderTypeId = Convert.ToInt32(OrderTypeId);
            obj.OrderType = OrderType;
            obj.VisualLayoutId = Convert.ToInt32(VisualLayoutId);
            obj.NamePrefix = NamePrefix;
            obj.NameSuffix = Convert.ToInt32(NameSuffix);
            obj.PatternId = Convert.ToInt32(PatternId);
            obj.PatternNumber = PatternNumber;
            obj.FabricId = Convert.ToInt32(FabricId);
            obj.Fabric = Fabric;
            obj.FabricNickName = FabricNickName;
            obj.StatusId = Convert.ToInt32(StatusId);
            obj.Status = Status;
        }
        
        internal void SetBO(Indico.DAL.ClientOrderDetailsView obj)
        {
            // set the Indico.BusinessObjects.ClientOrderDetailsViewBO properties    
            this.OrderDetailId = obj.OrderDetailId;
            this.CompanyId = obj.CompanyId;
            this.CompanyName = obj.CompanyName;
            this.OrderId = obj.OrderId;
            this.Date = obj.Date;
            this.DesiredDeliveryDate = obj.DesiredDeliveryDate;
            this.OrderNumber = obj.OrderNumber;
            this.IsTemporary = obj.IsTemporary;
            this.ClientId = obj.ClientId;
            this.ClientName = obj.ClientName;
            this.OrderTypeId = obj.OrderTypeId;
            this.OrderType = obj.OrderType;
            this.VisualLayoutId = obj.VisualLayoutId;
            this.NamePrefix = obj.NamePrefix;
            this.NameSuffix = obj.NameSuffix;
            this.PatternId = obj.PatternId;
            this.PatternNumber = obj.PatternNumber;
            this.FabricId = obj.FabricId;
            this.Fabric = obj.Fabric;
            this.FabricNickName = obj.FabricNickName;
            this.StatusId = obj.StatusId;
            this.Status = obj.Status;
        }
        
        internal void SetBO(Indico.BusinessObjects.ClientOrderDetailsViewBO obj)
        {
            // set this Indico.BusinessObjects.ClientOrderDetailsViewBO properties
            this.OrderDetailId = obj.OrderDetailId;
            this.CompanyId = obj.CompanyId;
            this.CompanyName = obj.CompanyName;
            this.OrderId = obj.OrderId;
            this.Date = obj.Date;
            this.DesiredDeliveryDate = obj.DesiredDeliveryDate;
            this.OrderNumber = obj.OrderNumber;
            this.IsTemporary = obj.IsTemporary;
            this.ClientId = obj.ClientId;
            this.ClientName = obj.ClientName;
            this.OrderTypeId = obj.OrderTypeId;
            this.OrderType = obj.OrderType;
            this.VisualLayoutId = obj.VisualLayoutId;
            this.NamePrefix = obj.NamePrefix;
            this.NameSuffix = obj.NameSuffix;
            this.PatternId = obj.PatternId;
            this.PatternNumber = obj.PatternNumber;
            this.FabricId = obj.FabricId;
            this.Fabric = obj.Fabric;
            this.FabricNickName = obj.FabricNickName;
            this.StatusId = obj.StatusId;
            this.Status = obj.Status;
        }
        
        private static List<Indico.BusinessObjects.ClientOrderDetailsViewBO> IQueryableToList(IQueryable<Indico.DAL.ClientOrderDetailsView> oQuery)
        {
            List<Indico.DAL.ClientOrderDetailsView> oList = oQuery.ToList();
            List<Indico.BusinessObjects.ClientOrderDetailsViewBO> rList = new List<Indico.BusinessObjects.ClientOrderDetailsViewBO>(oList.Count);
            foreach (Indico.DAL.ClientOrderDetailsView o in oList)
            {
                Indico.BusinessObjects.ClientOrderDetailsViewBO obj = new Indico.BusinessObjects.ClientOrderDetailsViewBO(o);
                rList.Add(obj);
            }
            return rList;
        }
        #endregion
        
        #region BusinessObject methods
        
        #region GetAllObject
        public static List<Indico.BusinessObjects.ClientOrderDetailsViewBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public static List<Indico.BusinessObjects.ClientOrderDetailsViewBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public static List<Indico.BusinessObjects.ClientOrderDetailsViewBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public static List<Indico.BusinessObjects.ClientOrderDetailsViewBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ClientOrderDetailsView> oQuery =
                (from o in context.ClientOrderDetailsView
                 orderby o.OrderDetailId
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.OrderDetailId).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ClientOrderDetailsViewBO> clientorderdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return clientorderdetailsviews;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.ClientOrderDetailsViewBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.ClientOrderDetailsViewBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ClientOrderDetailsViewBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ClientOrderDetailsViewBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ClientOrderDetailsView> oQuery =
                (from o in context.ClientOrderDetailsView
                 where
                    (this.OrderDetailId == null || this.OrderDetailId == o.OrderDetailId) &&
                    (this.CompanyId == null || this.CompanyId == o.CompanyId) &&
                    (this.CompanyName == null || this.CompanyName == o.CompanyName) &&
                    (this.OrderId == null || this.OrderId == o.OrderId) &&
                    (this.Date == null || this.Date == o.Date) &&
                    (this.DesiredDeliveryDate == null || this.DesiredDeliveryDate == o.DesiredDeliveryDate) &&
                    (this.OrderNumber == null || this.OrderNumber == o.OrderNumber) &&
                    (this.IsTemporary == null || this.IsTemporary == o.IsTemporary) &&
                    (this.ClientId == null || this.ClientId == o.ClientId) &&
                    (this.ClientName == null || this.ClientName == o.ClientName) &&
                    (this.OrderTypeId == null || this.OrderTypeId == o.OrderTypeId) &&
                    (this.OrderType == null || this.OrderType == o.OrderType) &&
                    (this.VisualLayoutId == null || this.VisualLayoutId == o.VisualLayoutId) &&
                    (this.NamePrefix == null || this.NamePrefix == o.NamePrefix) &&
                    (this.NameSuffix == null || this.NameSuffix == o.NameSuffix) &&
                    (this.PatternId == null || this.PatternId == o.PatternId) &&
                    (this.PatternNumber == null || this.PatternNumber == o.PatternNumber) &&
                    (this.FabricId == null || this.FabricId == o.FabricId) &&
                    (this.Fabric == null || this.Fabric == o.Fabric) &&
                    (this.FabricNickName == null || this.FabricNickName == o.FabricNickName) &&
                    (this.StatusId == null || this.StatusId == o.StatusId) &&
                    (this.Status == null || this.Status == o.Status) 
                 orderby o.OrderDetailId
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.OrderDetailId).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ClientOrderDetailsViewBO> clientorderdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return clientorderdetailsviews;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ClientOrderDetailsView
                 where
                    (this.OrderDetailId == null || this.OrderDetailId == o.OrderDetailId) &&
                    (this.CompanyId == null || this.CompanyId == o.CompanyId) &&
                    (this.CompanyName == null || this.CompanyName == o.CompanyName) &&
                    (this.OrderId == null || this.OrderId == o.OrderId) &&
                    (this.Date == null || this.Date == o.Date) &&
                    (this.DesiredDeliveryDate == null || this.DesiredDeliveryDate == o.DesiredDeliveryDate) &&
                    (this.OrderNumber == null || this.OrderNumber == o.OrderNumber) &&
                    (this.IsTemporary == null || this.IsTemporary == o.IsTemporary) &&
                    (this.ClientId == null || this.ClientId == o.ClientId) &&
                    (this.ClientName == null || this.ClientName == o.ClientName) &&
                    (this.OrderTypeId == null || this.OrderTypeId == o.OrderTypeId) &&
                    (this.OrderType == null || this.OrderType == o.OrderType) &&
                    (this.VisualLayoutId == null || this.VisualLayoutId == o.VisualLayoutId) &&
                    (this.NamePrefix == null || this.NamePrefix == o.NamePrefix) &&
                    (this.NameSuffix == null || this.NameSuffix == o.NameSuffix) &&
                    (this.PatternId == null || this.PatternId == o.PatternId) &&
                    (this.PatternNumber == null || this.PatternNumber == o.PatternNumber) &&
                    (this.FabricId == null || this.FabricId == o.FabricId) &&
                    (this.Fabric == null || this.Fabric == o.Fabric) &&
                    (this.FabricNickName == null || this.FabricNickName == o.FabricNickName) &&
                    (this.StatusId == null || this.StatusId == o.StatusId) &&
                    (this.Status == null || this.Status == o.Status) 
                 orderby o.OrderDetailId
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.ClientOrderDetailsViewBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.ClientOrderDetailsViewBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ClientOrderDetailsViewBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ClientOrderDetailsViewBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ClientOrderDetailsView> oQuery =
                (from o in context.ClientOrderDetailsView
                 where
                    (this.OrderDetailId == null || o.OrderDetailId == this.OrderDetailId) &&
                    (this.CompanyId == null || o.CompanyId == this.CompanyId) &&
                    (this.CompanyName == null || o.CompanyName.Contains(this.CompanyName)) &&
                    (this.OrderId == null || o.OrderId == this.OrderId) &&
                    (this.Date == null || o.Date == this.Date) &&
                    (this.DesiredDeliveryDate == null || o.DesiredDeliveryDate == this.DesiredDeliveryDate) &&
                    (this.OrderNumber == null || o.OrderNumber.Contains(this.OrderNumber)) &&
                    (this.IsTemporary == null || o.IsTemporary == this.IsTemporary) &&
                    (this.ClientId == null || o.ClientId == this.ClientId) &&
                    (this.ClientName == null || o.ClientName.Contains(this.ClientName)) &&
                    (this.OrderTypeId == null || o.OrderTypeId == this.OrderTypeId) &&
                    (this.OrderType == null || o.OrderType.Contains(this.OrderType)) &&
                    (this.VisualLayoutId == null || o.VisualLayoutId == this.VisualLayoutId) &&
                    (this.NamePrefix == null || o.NamePrefix.Contains(this.NamePrefix)) &&
                    (this.NameSuffix == null || o.NameSuffix == this.NameSuffix) &&
                    (this.PatternId == null || o.PatternId == this.PatternId) &&
                    (this.PatternNumber == null || o.PatternNumber.Contains(this.PatternNumber)) &&
                    (this.FabricId == null || o.FabricId == this.FabricId) &&
                    (this.Fabric == null || o.Fabric.Contains(this.Fabric)) &&
                    (this.FabricNickName == null || o.FabricNickName.Contains(this.FabricNickName)) &&
                    (this.StatusId == null || o.StatusId == this.StatusId) &&
                    (this.Status == null || o.Status.Contains(this.Status)) 
                 orderby o.OrderDetailId
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.OrderDetailId).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ClientOrderDetailsViewBO> clientorderdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return clientorderdetailsviews;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ClientOrderDetailsView
                 where
                    (this.OrderDetailId == null || o.OrderDetailId == this.OrderDetailId) &&
                    (this.CompanyId == null || o.CompanyId == this.CompanyId) &&
                    (this.CompanyName == null || o.CompanyName.Contains(this.CompanyName)) &&
                    (this.OrderId == null || o.OrderId == this.OrderId) &&
                    (this.Date == null || o.Date == this.Date) &&
                    (this.DesiredDeliveryDate == null || o.DesiredDeliveryDate == this.DesiredDeliveryDate) &&
                    (this.OrderNumber == null || o.OrderNumber.Contains(this.OrderNumber)) &&
                    (this.IsTemporary == null || o.IsTemporary == this.IsTemporary) &&
                    (this.ClientId == null || o.ClientId == this.ClientId) &&
                    (this.ClientName == null || o.ClientName.Contains(this.ClientName)) &&
                    (this.OrderTypeId == null || o.OrderTypeId == this.OrderTypeId) &&
                    (this.OrderType == null || o.OrderType.Contains(this.OrderType)) &&
                    (this.VisualLayoutId == null || o.VisualLayoutId == this.VisualLayoutId) &&
                    (this.NamePrefix == null || o.NamePrefix.Contains(this.NamePrefix)) &&
                    (this.NameSuffix == null || o.NameSuffix == this.NameSuffix) &&
                    (this.PatternId == null || o.PatternId == this.PatternId) &&
                    (this.PatternNumber == null || o.PatternNumber.Contains(this.PatternNumber)) &&
                    (this.FabricId == null || o.FabricId == this.FabricId) &&
                    (this.Fabric == null || o.Fabric.Contains(this.Fabric)) &&
                    (this.FabricNickName == null || o.FabricNickName.Contains(this.FabricNickName)) &&
                    (this.StatusId == null || o.StatusId == this.StatusId) &&
                    (this.Status == null || o.Status.Contains(this.Status)) 
                 orderby o.OrderDetailId
                 select o).Count();
            
        }
        
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.ClientOrderDetailsViewBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.ClientOrderDetailsViewBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ClientOrderDetailsViewBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ClientOrderDetailsViewBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ClientOrderDetailsView> oQuery =
                (from o in context.ClientOrderDetailsView
                 where
                    (this.OrderDetailId == null || this.OrderDetailId == o.OrderDetailId) && 
                    (this.CompanyId == null || this.CompanyId == o.CompanyId) && 
                    (this.OrderId == null || this.OrderId == o.OrderId) && 
                    (this.Date == null || this.Date == o.Date) && 
                    (this.DesiredDeliveryDate == null || this.DesiredDeliveryDate == o.DesiredDeliveryDate) && 
                    (this.IsTemporary == null || this.IsTemporary == o.IsTemporary) && 
                    (this.ClientId == null || this.ClientId == o.ClientId) && 
                    (this.OrderTypeId == null || this.OrderTypeId == o.OrderTypeId) && 
                    (this.VisualLayoutId == null || this.VisualLayoutId == o.VisualLayoutId) && 
                    (this.NameSuffix == null || this.NameSuffix == o.NameSuffix) && 
                    (this.PatternId == null || this.PatternId == o.PatternId) && 
                    (this.FabricId == null || this.FabricId == o.FabricId) && 
                    (this.StatusId == null || this.StatusId == o.StatusId) && 
                    ((o.CompanyName.Contains(this.CompanyName)) ||
                    (o.OrderNumber.Contains(this.OrderNumber)) ||
                    (o.ClientName.Contains(this.ClientName)) ||
                    (o.OrderType.Contains(this.OrderType)) ||
                    (o.NamePrefix.Contains(this.NamePrefix)) ||
                    (o.PatternNumber.Contains(this.PatternNumber)) ||
                    (o.Fabric.Contains(this.Fabric)) ||
                    (o.FabricNickName.Contains(this.FabricNickName)) ||
                    (o.Status.Contains(this.Status)) ||
                    (this.CompanyName == null && this.OrderNumber == null && this.ClientName == null && this.OrderType == null && this.NamePrefix == null && this.PatternNumber == null && this.Fabric == null && this.FabricNickName == null && this.Status == null ))
                 orderby o.OrderDetailId
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.OrderDetailId).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ClientOrderDetailsViewBO> clientorderdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return clientorderdetailsviews;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ClientOrderDetailsView
                 where
                    (this.OrderDetailId == null || this.OrderDetailId == o.OrderDetailId) && 
                    (this.CompanyId == null || this.CompanyId == o.CompanyId) && 
                    (this.OrderId == null || this.OrderId == o.OrderId) && 
                    (this.Date == null || this.Date == o.Date) && 
                    (this.DesiredDeliveryDate == null || this.DesiredDeliveryDate == o.DesiredDeliveryDate) && 
                    (this.IsTemporary == null || this.IsTemporary == o.IsTemporary) && 
                    (this.ClientId == null || this.ClientId == o.ClientId) && 
                    (this.OrderTypeId == null || this.OrderTypeId == o.OrderTypeId) && 
                    (this.VisualLayoutId == null || this.VisualLayoutId == o.VisualLayoutId) && 
                    (this.NameSuffix == null || this.NameSuffix == o.NameSuffix) && 
                    (this.PatternId == null || this.PatternId == o.PatternId) && 
                    (this.FabricId == null || this.FabricId == o.FabricId) && 
                    (this.StatusId == null || this.StatusId == o.StatusId) && 
                    ((o.CompanyName.Contains(this.CompanyName)) ||
                    (o.OrderNumber.Contains(this.OrderNumber)) ||
                    (o.ClientName.Contains(this.ClientName)) ||
                    (o.OrderType.Contains(this.OrderType)) ||
                    (o.NamePrefix.Contains(this.NamePrefix)) ||
                    (o.PatternNumber.Contains(this.PatternNumber)) ||
                    (o.Fabric.Contains(this.Fabric)) ||
                    (o.FabricNickName.Contains(this.FabricNickName)) ||
                    (o.Status.Contains(this.Status)) ||
                    (this.CompanyName == null && this.OrderNumber == null && this.ClientName == null && this.OrderType == null && this.NamePrefix == null && this.PatternNumber == null && this.Fabric == null && this.FabricNickName == null && this.Status == null ))
                 orderby o.OrderDetailId
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.ClientOrderDetailsViewBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.ClientOrderDetailsViewBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.ClientOrderDetailsViewBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.ClientOrderDetailsViewBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.ClientOrderDetailsViewBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.ClientOrderDetailsViewBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.ClientOrderDetailsViewBO))
                return 1;
            Indico.BusinessObjects.ClientOrderDetailsViewBOComparer c = new Indico.BusinessObjects.ClientOrderDetailsViewBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.ClientOrderDetailsViewBO);
        }

        #endregion
        #endregion
    }
    
    #region ClientOrderDetailsViewBOComparer
    public class ClientOrderDetailsViewBOComparer : IComparer<Indico.BusinessObjects.ClientOrderDetailsViewBO>
    {
        private string propertyToCompareName;
        public ClientOrderDetailsViewBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.ClientOrderDetailsViewBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.ClientOrderDetailsViewBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public ClientOrderDetailsViewBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.ClientOrderDetailsViewBO> Members
        public int Compare(Indico.BusinessObjects.ClientOrderDetailsViewBO x, Indico.BusinessObjects.ClientOrderDetailsViewBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.ClientOrderDetailsViewBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.ClientOrderDetailsViewBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.ClientOrderDetailsViewBO x, Indico.BusinessObjects.ClientOrderDetailsViewBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
