// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class QuoteBO : BusinessObject, IComparable
    {
        #region fields
        #region Scalar Fields
        private int id;
        private string _clientEmail = string.Empty;
        private string _contactName = string.Empty;
        private DateTime _createdDate = DateTime.MinValue;
        private int _creator;
        private int? _currency;
        private DateTime _dateQuoted = DateTime.MinValue;
        private int? _distributor;
        private string _jobName;
        private DateTime _modifiedDate = DateTime.MinValue;
        private int _modifier;
        private DateTime _quoteExpiryDate = DateTime.MinValue;
        private int _status;
        #endregion
        
        #region Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objCreator;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.CurrencyBO _objCurrency;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.CompanyBO _objDistributor;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objModifier;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.QuoteStatusBO _objStatus;
        #endregion
        
        #region Foreign Table Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.QuoteDetailBO> quoteDetailsWhereThisIsQuoteList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _quoteDetailsWhereThisIsQuoteLoaded;
        #endregion
        
        #region Other fields
        
        private Indico.DAL.Quote _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>. The maximum length of this property is 255.</summary>
        public string ClientEmail
        {   
            get {return _clientEmail;}
            set 
            {
                OnClientEmailChanging(value);
                _clientEmail = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ClientEmail = value;
                }
                OnClientEmailChanged();
            }
        }
        /// <summary>. The maximum length of this property is 128.</summary>
        public string ContactName
        {   
            get {return _contactName;}
            set 
            {
                OnContactNameChanging(value);
                _contactName = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ContactName = value;
                }
                OnContactNameChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime CreatedDate
        {   
            get {return _createdDate;}
            set 
            {
                OnCreatedDateChanging(value);
                _createdDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CreatedDate = value;
                }
                OnCreatedDateChanged();
            }
        }
        /// <summary>.</summary>
        public int Creator
        {   
            get {return _creator;}
            set 
            {
                OnCreatorChanging(value);
                _creator = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Creator = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Creator = null;
                OnCreatorChanged();
            }
        }
        /// <summary>.</summary>
        public int? Currency
        {   
            get {return _currency;}
            set 
            {
                OnCurrencyChanging(value);
                _currency = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.Currency = (from o in this._context.Context.Currency
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Currency>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Currency = null;
                OnCurrencyChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime DateQuoted
        {   
            get {return _dateQuoted;}
            set 
            {
                OnDateQuotedChanging(value);
                _dateQuoted = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.DateQuoted = value;
                }
                OnDateQuotedChanged();
            }
        }
        /// <summary>.</summary>
        public int? Distributor
        {   
            get {return _distributor;}
            set 
            {
                OnDistributorChanging(value);
                _distributor = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.Distributor = (from o in this._context.Context.Company
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Company>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Distributor = null;
                OnDistributorChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string JobName
        {   
            get {return _jobName;}
            set 
            {
                OnJobNameChanging(value);
                _jobName = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.JobName = value;
                }
                OnJobNameChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime ModifiedDate
        {   
            get {return _modifiedDate;}
            set 
            {
                OnModifiedDateChanging(value);
                _modifiedDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ModifiedDate = value;
                }
                OnModifiedDateChanged();
            }
        }
        /// <summary>.</summary>
        public int Modifier
        {   
            get {return _modifier;}
            set 
            {
                OnModifierChanging(value);
                _modifier = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Modifier = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Modifier = null;
                OnModifierChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime QuoteExpiryDate
        {   
            get {return _quoteExpiryDate;}
            set 
            {
                OnQuoteExpiryDateChanging(value);
                _quoteExpiryDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.QuoteExpiryDate = value;
                }
                OnQuoteExpiryDateChanged();
            }
        }
        /// <summary>.</summary>
        public int Status
        {   
            get {return _status;}
            set 
            {
                OnStatusChanging(value);
                _status = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Status = (from o in this._context.Context.QuoteStatus
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.QuoteStatus>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Status = null;
                OnStatusChanged();
            }
        }
        
        internal Indico.DAL.Quote ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        ///<summary>The UserBO object identified by the value of Creator</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objCreator
        {
            get
            {
                if ( _creator > 0 && _objCreator == null)
                {
                        if (this._context == null)
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objCreator.ID = _creator;
                        _objCreator.GetObject(); 
                }
                return _objCreator;
            }
            set
            { 
                _objCreator = value;
                _creator = _objCreator.ID;
            }
        }
        ///<summary>The CurrencyBO object identified by the value of Currency</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.CurrencyBO objCurrency
        {
            get
            {
                if (_currency != null && _currency > 0 && _objCurrency == null)
                {
                        if (this._context == null)
                        {
                            _objCurrency = new Indico.BusinessObjects.CurrencyBO();
                        }
                        else
                        {
                            _objCurrency = new Indico.BusinessObjects.CurrencyBO(ref this._context);
                        }
                        _objCurrency.ID = Convert.ToInt32(_currency);
                        _objCurrency.GetObject(); 
                }
                return _objCurrency;
            }
            set
            { 
                _objCurrency = value;
                _currency = _objCurrency.ID;
            }
        }
        ///<summary>The CompanyBO object identified by the value of Distributor</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.CompanyBO objDistributor
        {
            get
            {
                if (_distributor != null && _distributor > 0 && _objDistributor == null)
                {
                        if (this._context == null)
                        {
                            _objDistributor = new Indico.BusinessObjects.CompanyBO();
                        }
                        else
                        {
                            _objDistributor = new Indico.BusinessObjects.CompanyBO(ref this._context);
                        }
                        _objDistributor.ID = Convert.ToInt32(_distributor);
                        _objDistributor.GetObject(); 
                }
                return _objDistributor;
            }
            set
            { 
                _objDistributor = value;
                _distributor = _objDistributor.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Modifier</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objModifier
        {
            get
            {
                if ( _modifier > 0 && _objModifier == null)
                {
                        if (this._context == null)
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objModifier.ID = _modifier;
                        _objModifier.GetObject(); 
                }
                return _objModifier;
            }
            set
            { 
                _objModifier = value;
                _modifier = _objModifier.ID;
            }
        }
        ///<summary>The QuoteStatusBO object identified by the value of Status</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.QuoteStatusBO objStatus
        {
            get
            {
                if ( _status > 0 && _objStatus == null)
                {
                        if (this._context == null)
                        {
                            _objStatus = new Indico.BusinessObjects.QuoteStatusBO();
                        }
                        else
                        {
                            _objStatus = new Indico.BusinessObjects.QuoteStatusBO(ref this._context);
                        }
                        _objStatus.ID = _status;
                        _objStatus.GetObject(); 
                }
                return _objStatus;
            }
            set
            { 
                _objStatus = value;
                _status = _objStatus.ID;
            }
        }
        #endregion
        
        #region Foreign Object Foreign Key Collections
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.QuoteDetailBO> QuoteDetailsWhereThisIsQuote // FK_QuoteDetail_Quote
        {
            get
            {
                if (!_quoteDetailsWhereThisIsQuoteLoaded)
                {
                    _quoteDetailsWhereThisIsQuoteLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Quote obj = (from o in context.Quote
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.QuoteDetailsWhereThisIsQuote.Load();
                        quoteDetailsWhereThisIsQuoteList = new IndicoList<Indico.BusinessObjects.QuoteDetailBO>(obj.QuoteDetailsWhereThisIsQuote.Count);
                        
                        foreach (Indico.DAL.QuoteDetail o in obj.QuoteDetailsWhereThisIsQuote)
                        {
                            Indico.BusinessObjects.QuoteDetailBO fkObj = new Indico.BusinessObjects.QuoteDetailBO(o, ref this._context);
                            quoteDetailsWhereThisIsQuoteList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        quoteDetailsWhereThisIsQuoteList = new IndicoList<Indico.BusinessObjects.QuoteDetailBO>();
                    }
                    
                    quoteDetailsWhereThisIsQuoteList.OnBeforeRemove += new EventHandler(QuoteDetailsWhereThisIsQuoteList_OnBeforeRemove);
                    quoteDetailsWhereThisIsQuoteList.OnAfterAdd += new EventHandler(QuoteDetailsWhereThisIsQuoteList_OnAfterAdd);
                }
                
                return quoteDetailsWhereThisIsQuoteList;
            }
        }
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the QuoteBO class using the supplied Indico.DAL.Quote. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.Quote whose properties will be used to initialise the QuoteBO</param>
        internal QuoteBO(Indico.DAL.Quote obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.Quote 
            this.ID = obj.ID;
            
            this.ClientEmail = obj.ClientEmail;
            this.ContactName = obj.ContactName;
            this.CreatedDate = obj.CreatedDate;
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Currency = (obj.CurrencyReference.EntityKey != null && obj.CurrencyReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CurrencyReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.DateQuoted = obj.DateQuoted;
            this.Distributor = (obj.DistributorReference.EntityKey != null && obj.DistributorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.DistributorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.JobName = obj.JobName;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.QuoteExpiryDate = obj.QuoteExpiryDate;
            this.Status = (obj.StatusReference.EntityKey != null && obj.StatusReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.StatusReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.Quote SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.Quote properties
            Indico.DAL.Quote obj = new Indico.DAL.Quote();
            
            if (this.ID > 0)
            {
                obj = context.Quote.FirstOrDefault<Quote>(o => o.ID == this.ID);
            }
            
            obj.ClientEmail = this.ClientEmail;
            obj.ContactName = this.ContactName;
            obj.CreatedDate = this.CreatedDate;
            obj.DateQuoted = this.DateQuoted;
            obj.JobName = this.JobName;
            obj.ModifiedDate = this.ModifiedDate;
            obj.QuoteExpiryDate = this.QuoteExpiryDate;
            
            if (this.Creator > 0) obj.Creator = context.User.FirstOrDefault(o => o.ID == this.Creator);
            if (this.Currency != null && this.Currency > 0) obj.Currency = context.Currency.FirstOrDefault(o => o.ID == this.Currency);
            if (this.Distributor != null && this.Distributor > 0) obj.Distributor = context.Company.FirstOrDefault(o => o.ID == this.Distributor);
            if (this.Modifier > 0) obj.Modifier = context.User.FirstOrDefault(o => o.ID == this.Modifier);
            if (this.Status > 0) obj.Status = context.QuoteStatus.FirstOrDefault(o => o.ID == this.Status);
            
            if (_quoteDetailsWhereThisIsQuoteLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.QuoteDetailBO.ToEntityList(this.QuoteDetailsWhereThisIsQuote, context), 
                    obj.QuoteDetailsWhereThisIsQuote);
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.Quote))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.Quote obj = (Indico.DAL.Quote)eObj;
            
            // set the Indico.BusinessObjects.QuoteBO properties
            this.ID = obj.ID;
            
            this.ClientEmail = obj.ClientEmail;
            this.ContactName = obj.ContactName;
            this.CreatedDate = obj.CreatedDate;
            this.DateQuoted = obj.DateQuoted;
            this.JobName = obj.JobName;
            this.ModifiedDate = obj.ModifiedDate;
            this.QuoteExpiryDate = obj.QuoteExpiryDate;
            
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Currency = (obj.CurrencyReference.EntityKey != null && obj.CurrencyReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CurrencyReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Distributor = (obj.DistributorReference.EntityKey != null && obj.DistributorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.DistributorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Status = (obj.StatusReference.EntityKey != null && obj.StatusReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.StatusReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.QuoteBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.QuoteBO properties
            this.ID = obj.ID;
            
            this.ClientEmail = obj.ClientEmail;
            this.ContactName = obj.ContactName;
            this.CreatedDate = obj.CreatedDate;
            this.Creator = obj.Creator;
            this.Currency = obj.Currency;
            this.DateQuoted = obj.DateQuoted;
            this.Distributor = obj.Distributor;
            this.JobName = obj.JobName;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = obj.Modifier;
            this.QuoteExpiryDate = obj.QuoteExpiryDate;
            this.Status = obj.Status;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.QuoteBO> IQueryableToList(IQueryable<Indico.DAL.Quote> oQuery)
        {
            List<Indico.DAL.Quote> oList = oQuery.ToList();
            List<Indico.BusinessObjects.QuoteBO> rList = new List<Indico.BusinessObjects.QuoteBO>(oList.Count);
            foreach (Indico.DAL.Quote o in oList)
            {
                Indico.BusinessObjects.QuoteBO obj = new Indico.BusinessObjects.QuoteBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.QuoteBO> ToList(IEnumerable<Indico.DAL.Quote> oQuery)
        {
            List<Indico.DAL.Quote> oList = oQuery.ToList();
            List<Indico.BusinessObjects.QuoteBO> rList = new List<Indico.BusinessObjects.QuoteBO>(oList.Count);
            foreach (Indico.DAL.Quote o in oList)
            {
                Indico.BusinessObjects.QuoteBO obj = new Indico.BusinessObjects.QuoteBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.Quote> ToEntityList(List<QuoteBO> bos, IndicoEntities context)
        {
            // build a List of Quote entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.Quote.Count() == 0) ? new List<Indico.DAL.Quote>() : (context.Quote.Where(BuildContainsExpression<Quote, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.Quote>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Quote> ToEntityCollection(List<QuoteBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of Quote entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.Quote> el = (context.Quote.Count() == 0) ? new List<Indico.DAL.Quote>() : 
                context.Quote.Where(BuildContainsExpression<Quote, int>(e => e.ID, ids))
                .ToList<Indico.DAL.Quote>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Quote> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Quote>();
                
            foreach (Indico.DAL.Quote r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.Quote ToEntity(IndicoEntities context)
        {
            return (from o in context.Quote
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToQuote(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Quote obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToQuote(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.Quote obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Quote obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.QuoteBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.QuoteBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.Quote> oQuery =
                        from o in context.Quote
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.Quote> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.QuoteBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.QuoteBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.QuoteBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.QuoteBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.Quote> oQuery =
                (from o in context.Quote
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.QuoteBO> quotes = IQueryableToList(oQuery);
            context.Dispose();
            return quotes;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.QuoteBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.QuoteBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.QuoteBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.QuoteBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Quote> oQuery =
                (from o in context.Quote
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.DateQuoted == DateTime.MinValue || this.DateQuoted == o.DateQuoted) &&
                    (this.QuoteExpiryDate == DateTime.MinValue || this.QuoteExpiryDate == o.QuoteExpiryDate) &&
                    (this.ClientEmail == string.Empty || this.ClientEmail == o.ClientEmail) &&
                    (this.JobName == null || this.JobName == o.JobName) &&
                    (this.Status == 0 || this.Status == o.Status.ID) &&
                    (this.ContactName == string.Empty || this.ContactName == o.ContactName) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) &&
                    (this.Currency == null || this.Currency == o.Currency.ID) &&
                    (this.Distributor == null || this.Distributor == o.Distributor.ID) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.QuoteBO> quotes = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return quotes;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Quote
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.DateQuoted == DateTime.MinValue || this.DateQuoted == o.DateQuoted) &&
                    (this.QuoteExpiryDate == DateTime.MinValue || this.QuoteExpiryDate == o.QuoteExpiryDate) &&
                    (this.ClientEmail == string.Empty || this.ClientEmail == o.ClientEmail) &&
                    (this.JobName == null || this.JobName == o.JobName) &&
                    (this.Status == 0 || this.Status == o.Status.ID) &&
                    (this.ContactName == string.Empty || this.ContactName == o.ContactName) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) &&
                    (this.Currency == null || this.Currency == o.Currency.ID) &&
                    (this.Distributor == null || this.Distributor == o.Distributor.ID) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.QuoteBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.QuoteBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.QuoteBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.QuoteBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Quote> oQuery =
                (from o in context.Quote
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.DateQuoted == DateTime.MinValue || o.DateQuoted == this.DateQuoted) &&
                    (this.QuoteExpiryDate == DateTime.MinValue || o.QuoteExpiryDate == this.QuoteExpiryDate) &&
                    (this.ClientEmail == string.Empty || o.ClientEmail.Contains(this.ClientEmail)) &&
                    (this.JobName == null || o.JobName.Contains(this.JobName)) &&
                    (this.Status == 0 || o.Status.ID == this.Status) &&
                    (this.ContactName == string.Empty || o.ContactName.Contains(this.ContactName)) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.ModifiedDate == DateTime.MinValue || o.ModifiedDate == this.ModifiedDate) &&
                    (this.Currency == null || o.Currency.ID == this.Currency) &&
                    (this.Distributor == null || o.Distributor.ID == this.Distributor) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.QuoteBO> quotes = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return quotes;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Quote
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.DateQuoted == DateTime.MinValue || o.DateQuoted == this.DateQuoted) &&
                    (this.QuoteExpiryDate == DateTime.MinValue || o.QuoteExpiryDate == this.QuoteExpiryDate) &&
                    (this.ClientEmail == string.Empty || o.ClientEmail.Contains(this.ClientEmail)) &&
                    (this.JobName == null || o.JobName.Contains(this.JobName)) &&
                    (this.Status == 0 || o.Status.ID == this.Status) &&
                    (this.ContactName == string.Empty || o.ContactName.Contains(this.ContactName)) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.ModifiedDate == DateTime.MinValue || o.ModifiedDate == this.ModifiedDate) &&
                    (this.Currency == null || o.Currency.ID == this.Currency) &&
                    (this.Distributor == null || o.Distributor.ID == this.Distributor) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.QuoteBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.QuoteBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.QuoteBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.QuoteBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Quote> oQuery =
                (from o in context.Quote
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.DateQuoted == DateTime.MinValue || this.DateQuoted == o.DateQuoted) && 
                    (this.QuoteExpiryDate == DateTime.MinValue || this.QuoteExpiryDate == o.QuoteExpiryDate) && 
                    (this.Status == 0 || this.Status == o.Status.ID) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) && 
                    (this.Currency == null || this.Currency == o.Currency.ID) && 
                    (this.Distributor == null || this.Distributor == o.Distributor.ID) && 
                    ((o.ClientEmail.Contains(this.ClientEmail)) ||
                    (o.JobName.Contains(this.JobName)) ||
                    (o.ContactName.Contains(this.ContactName)) ||
                    (this.ClientEmail == null && this.JobName == null && this.ContactName == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.QuoteBO> quotes = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return quotes;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Quote
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.DateQuoted == DateTime.MinValue || this.DateQuoted == o.DateQuoted) && 
                    (this.QuoteExpiryDate == DateTime.MinValue || this.QuoteExpiryDate == o.QuoteExpiryDate) && 
                    (this.Status == 0 || this.Status == o.Status.ID) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) && 
                    (this.Currency == null || this.Currency == o.Currency.ID) && 
                    (this.Distributor == null || this.Distributor == o.Distributor.ID) && 
                    ((o.ClientEmail.Contains(this.ClientEmail)) ||
                    (o.JobName.Contains(this.JobName)) ||
                    (o.ContactName.Contains(this.ContactName)) ||
                    (this.ClientEmail == null && this.JobName == null && this.ContactName == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.QuoteBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.QuoteBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.QuoteBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.QuoteBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.QuoteBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.QuoteBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnQuoteBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("QuoteBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnQuoteBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnQuoteBOIDChanged();
        partial void OnQuoteBOIDChanging(int value);
        
        partial void OnDateQuotedChanged()
        {
            OnQuoteBODateQuotedChanged();
        }
        
        partial void OnDateQuotedChanging(DateTime value)
        {
            OnQuoteBODateQuotedChanging(value);
        }
        partial void OnDateQuotedChanged();
        partial void OnDateQuotedChanging(DateTime value);
        partial void OnQuoteBODateQuotedChanged();
        partial void OnQuoteBODateQuotedChanging(DateTime value);
        
        partial void OnQuoteExpiryDateChanged()
        {
            OnQuoteBOQuoteExpiryDateChanged();
        }
        
        partial void OnQuoteExpiryDateChanging(DateTime value)
        {
            OnQuoteBOQuoteExpiryDateChanging(value);
        }
        partial void OnQuoteExpiryDateChanged();
        partial void OnQuoteExpiryDateChanging(DateTime value);
        partial void OnQuoteBOQuoteExpiryDateChanged();
        partial void OnQuoteBOQuoteExpiryDateChanging(DateTime value);
        
        partial void OnClientEmailChanged()
        {
            OnQuoteBOClientEmailChanged();
        }
        
        partial void OnClientEmailChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("QuoteBO.ClientEmail has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnQuoteBOClientEmailChanging(value);
        }
        partial void OnClientEmailChanged();
        partial void OnClientEmailChanging(string value);
        partial void OnQuoteBOClientEmailChanged();
        partial void OnQuoteBOClientEmailChanging(string value);
        
        partial void OnJobNameChanged()
        {
            OnQuoteBOJobNameChanged();
        }
        
        partial void OnJobNameChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("QuoteBO.JobName has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnQuoteBOJobNameChanging(value);
        }
        partial void OnJobNameChanged();
        partial void OnJobNameChanging(string value);
        partial void OnQuoteBOJobNameChanged();
        partial void OnQuoteBOJobNameChanging(string value);
        
        partial void OnStatusChanged()
        {
            OnQuoteBOStatusChanged();
        }
        
        partial void OnStatusChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("QuoteBO.Status must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnQuoteBOStatusChanging(value);
        }
        partial void OnStatusChanged();
        partial void OnStatusChanging(int value);
        partial void OnQuoteBOStatusChanged();
        partial void OnQuoteBOStatusChanging(int value);
        
        partial void OnContactNameChanged()
        {
            OnQuoteBOContactNameChanged();
        }
        
        partial void OnContactNameChanging(string value)
        {
            if (value != null && value.Length > 128)
            {
                throw new Exception(String.Format("QuoteBO.ContactName has a maximum length of 128. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnQuoteBOContactNameChanging(value);
        }
        partial void OnContactNameChanged();
        partial void OnContactNameChanging(string value);
        partial void OnQuoteBOContactNameChanged();
        partial void OnQuoteBOContactNameChanging(string value);
        
        partial void OnCreatorChanged()
        {
            OnQuoteBOCreatorChanged();
        }
        
        partial void OnCreatorChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("QuoteBO.Creator must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnQuoteBOCreatorChanging(value);
        }
        partial void OnCreatorChanged();
        partial void OnCreatorChanging(int value);
        partial void OnQuoteBOCreatorChanged();
        partial void OnQuoteBOCreatorChanging(int value);
        
        partial void OnCreatedDateChanged()
        {
            OnQuoteBOCreatedDateChanged();
        }
        
        partial void OnCreatedDateChanging(DateTime value)
        {
            OnQuoteBOCreatedDateChanging(value);
        }
        partial void OnCreatedDateChanged();
        partial void OnCreatedDateChanging(DateTime value);
        partial void OnQuoteBOCreatedDateChanged();
        partial void OnQuoteBOCreatedDateChanging(DateTime value);
        
        partial void OnModifierChanged()
        {
            OnQuoteBOModifierChanged();
        }
        
        partial void OnModifierChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("QuoteBO.Modifier must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnQuoteBOModifierChanging(value);
        }
        partial void OnModifierChanged();
        partial void OnModifierChanging(int value);
        partial void OnQuoteBOModifierChanged();
        partial void OnQuoteBOModifierChanging(int value);
        
        partial void OnModifiedDateChanged()
        {
            OnQuoteBOModifiedDateChanged();
        }
        
        partial void OnModifiedDateChanging(DateTime value)
        {
            OnQuoteBOModifiedDateChanging(value);
        }
        partial void OnModifiedDateChanged();
        partial void OnModifiedDateChanging(DateTime value);
        partial void OnQuoteBOModifiedDateChanged();
        partial void OnQuoteBOModifiedDateChanging(DateTime value);
        
        partial void OnCurrencyChanged()
        {
            OnQuoteBOCurrencyChanged();
        }
        
        partial void OnCurrencyChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("QuoteBO.Currency must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnQuoteBOCurrencyChanging(value);
        }
        partial void OnCurrencyChanged();
        partial void OnCurrencyChanging(int? value);
        partial void OnQuoteBOCurrencyChanged();
        partial void OnQuoteBOCurrencyChanging(int? value);
        
        partial void OnDistributorChanged()
        {
            OnQuoteBODistributorChanged();
        }
        
        partial void OnDistributorChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("QuoteBO.Distributor must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnQuoteBODistributorChanging(value);
        }
        partial void OnDistributorChanged();
        partial void OnDistributorChanging(int? value);
        partial void OnQuoteBODistributorChanged();
        partial void OnQuoteBODistributorChanging(int? value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.QuoteBO))
                return 1;
            Indico.BusinessObjects.QuoteBOComparer c = new Indico.BusinessObjects.QuoteBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.QuoteBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.Quote)sender);
            }
        }
        
        void QuoteDetailsWhereThisIsQuoteList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.QuoteDetail obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.QuoteDetailBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.QuoteDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.QuoteDetailBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.QuoteDetailsWhereThisIsQuote.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.QuoteDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.QuoteDetailBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.QuoteDetailsWhereThisIsQuote.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void QuoteDetailsWhereThisIsQuoteList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.QuoteDetail obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.QuoteDetailBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.QuoteDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.QuoteDetailBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.QuoteDetailsWhereThisIsQuote.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.QuoteDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.QuoteDetailBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.QuoteDetailsWhereThisIsQuote.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
            this._quoteDetailsWhereThisIsQuoteLoaded = false;
            if (this.quoteDetailsWhereThisIsQuoteList != null)
            {
                this.quoteDetailsWhereThisIsQuoteList.OnBeforeRemove -= new EventHandler(QuoteDetailsWhereThisIsQuoteList_OnBeforeRemove);
                this.quoteDetailsWhereThisIsQuoteList.OnAfterAdd -= new EventHandler(QuoteDetailsWhereThisIsQuoteList_OnAfterAdd);
            }
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region QuoteBOComparer
    public class QuoteBOComparer : IComparer<Indico.BusinessObjects.QuoteBO>
    {
        private string propertyToCompareName;
        public QuoteBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.QuoteBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.QuoteBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public QuoteBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.QuoteBO> Members
        public int Compare(Indico.BusinessObjects.QuoteBO x, Indico.BusinessObjects.QuoteBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.QuoteBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.QuoteBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.QuoteBO x, Indico.BusinessObjects.QuoteBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
