// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class ReservationBO : BusinessObject, IComparable
    {
        #region fields
        #region Scalar Fields
        private int id;
        private string _client;
        private int _coordinator;
        private int _creator;
        private DateTime _dateCreated = DateTime.MinValue;
        private DateTime _dateModified = DateTime.MinValue;
        private int _distributor;
        private int _modifier;
        private string _notes;
        private DateTime _orderDate = DateTime.MinValue;
        private int? _pattern;
        private int _qty;
        private int _reservationNo;
        private DateTime _shipmentDate = DateTime.MinValue;
        private int? _shipmentMode;
        private int? _shipTo;
        private int _status;
        #endregion
        
        #region Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objCoordinator;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objCreator;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.CompanyBO _objDistributor;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objModifier;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.PatternBO _objPattern;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.ShipmentModeBO _objShipmentMode;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.DistributorClientAddressBO _objShipTo;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.ReservationStatusBO _objStatus;
        #endregion
        
        #region Foreign Table Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.OrderBO> ordersWhereThisIsReservationList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _ordersWhereThisIsReservationLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.OrderDetailBO> orderDetailsWhereThisIsReservationList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _orderDetailsWhereThisIsReservationLoaded;
        #endregion
        
        #region Other fields
        
        private Indico.DAL.Reservation _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>. The maximum length of this property is 255.</summary>
        public string Client
        {   
            get {return _client;}
            set 
            {
                OnClientChanging(value);
                _client = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Client = value;
                }
                OnClientChanged();
            }
        }
        /// <summary>.</summary>
        public int Coordinator
        {   
            get {return _coordinator;}
            set 
            {
                OnCoordinatorChanging(value);
                _coordinator = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Coordinator = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Coordinator = null;
                OnCoordinatorChanged();
            }
        }
        /// <summary>.</summary>
        public int Creator
        {   
            get {return _creator;}
            set 
            {
                OnCreatorChanging(value);
                _creator = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Creator = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Creator = null;
                OnCreatorChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime DateCreated
        {   
            get {return _dateCreated;}
            set 
            {
                OnDateCreatedChanging(value);
                _dateCreated = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.DateCreated = value;
                }
                OnDateCreatedChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime DateModified
        {   
            get {return _dateModified;}
            set 
            {
                OnDateModifiedChanging(value);
                _dateModified = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.DateModified = value;
                }
                OnDateModifiedChanged();
            }
        }
        /// <summary>.</summary>
        public int Distributor
        {   
            get {return _distributor;}
            set 
            {
                OnDistributorChanging(value);
                _distributor = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Distributor = (from o in this._context.Context.Company
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Company>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Distributor = null;
                OnDistributorChanged();
            }
        }
        /// <summary>.</summary>
        public int Modifier
        {   
            get {return _modifier;}
            set 
            {
                OnModifierChanging(value);
                _modifier = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Modifier = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Modifier = null;
                OnModifierChanged();
            }
        }
        /// <summary>. The maximum length of this property is 255.</summary>
        public string Notes
        {   
            get {return _notes;}
            set 
            {
                OnNotesChanging(value);
                _notes = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Notes = value;
                }
                OnNotesChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime OrderDate
        {   
            get {return _orderDate;}
            set 
            {
                OnOrderDateChanging(value);
                _orderDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.OrderDate = value;
                }
                OnOrderDateChanged();
            }
        }
        /// <summary>.</summary>
        public int? Pattern
        {   
            get {return _pattern;}
            set 
            {
                OnPatternChanging(value);
                _pattern = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.Pattern = (from o in this._context.Context.Pattern
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Pattern>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Pattern = null;
                OnPatternChanged();
            }
        }
        /// <summary>.</summary>
        public int Qty
        {   
            get {return _qty;}
            set 
            {
                OnQtyChanging(value);
                _qty = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Qty = value;
                }
                OnQtyChanged();
            }
        }
        /// <summary>.</summary>
        public int ReservationNo
        {   
            get {return _reservationNo;}
            set 
            {
                OnReservationNoChanging(value);
                _reservationNo = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ReservationNo = value;
                }
                OnReservationNoChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime ShipmentDate
        {   
            get {return _shipmentDate;}
            set 
            {
                OnShipmentDateChanging(value);
                _shipmentDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ShipmentDate = value;
                }
                OnShipmentDateChanged();
            }
        }
        /// <summary>.</summary>
        public int? ShipmentMode
        {   
            get {return _shipmentMode;}
            set 
            {
                OnShipmentModeChanging(value);
                _shipmentMode = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.ShipmentMode = (from o in this._context.Context.ShipmentMode
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.ShipmentMode>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.ShipmentMode = null;
                OnShipmentModeChanged();
            }
        }
        /// <summary>.</summary>
        public int? ShipTo
        {   
            get {return _shipTo;}
            set 
            {
                OnShipToChanging(value);
                _shipTo = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.ShipTo = (from o in this._context.Context.DistributorClientAddress
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.DistributorClientAddress>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.ShipTo = null;
                OnShipToChanged();
            }
        }
        /// <summary>.</summary>
        public int Status
        {   
            get {return _status;}
            set 
            {
                OnStatusChanging(value);
                _status = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Status = (from o in this._context.Context.ReservationStatus
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.ReservationStatus>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Status = null;
                OnStatusChanged();
            }
        }
        
        internal Indico.DAL.Reservation ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        ///<summary>The UserBO object identified by the value of Coordinator</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objCoordinator
        {
            get
            {
                if ( _coordinator > 0 && _objCoordinator == null)
                {
                        if (this._context == null)
                        {
                            _objCoordinator = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objCoordinator = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objCoordinator.ID = _coordinator;
                        _objCoordinator.GetObject(); 
                }
                return _objCoordinator;
            }
            set
            { 
                _objCoordinator = value;
                _coordinator = _objCoordinator.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Creator</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objCreator
        {
            get
            {
                if ( _creator > 0 && _objCreator == null)
                {
                        if (this._context == null)
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objCreator.ID = _creator;
                        _objCreator.GetObject(); 
                }
                return _objCreator;
            }
            set
            { 
                _objCreator = value;
                _creator = _objCreator.ID;
            }
        }
        ///<summary>The CompanyBO object identified by the value of Distributor</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.CompanyBO objDistributor
        {
            get
            {
                if ( _distributor > 0 && _objDistributor == null)
                {
                        if (this._context == null)
                        {
                            _objDistributor = new Indico.BusinessObjects.CompanyBO();
                        }
                        else
                        {
                            _objDistributor = new Indico.BusinessObjects.CompanyBO(ref this._context);
                        }
                        _objDistributor.ID = _distributor;
                        _objDistributor.GetObject(); 
                }
                return _objDistributor;
            }
            set
            { 
                _objDistributor = value;
                _distributor = _objDistributor.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Modifier</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objModifier
        {
            get
            {
                if ( _modifier > 0 && _objModifier == null)
                {
                        if (this._context == null)
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objModifier.ID = _modifier;
                        _objModifier.GetObject(); 
                }
                return _objModifier;
            }
            set
            { 
                _objModifier = value;
                _modifier = _objModifier.ID;
            }
        }
        ///<summary>The PatternBO object identified by the value of Pattern</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.PatternBO objPattern
        {
            get
            {
                if (_pattern != null && _pattern > 0 && _objPattern == null)
                {
                        if (this._context == null)
                        {
                            _objPattern = new Indico.BusinessObjects.PatternBO();
                        }
                        else
                        {
                            _objPattern = new Indico.BusinessObjects.PatternBO(ref this._context);
                        }
                        _objPattern.ID = Convert.ToInt32(_pattern);
                        _objPattern.GetObject(); 
                }
                return _objPattern;
            }
            set
            { 
                _objPattern = value;
                _pattern = _objPattern.ID;
            }
        }
        ///<summary>The ShipmentModeBO object identified by the value of ShipmentMode</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.ShipmentModeBO objShipmentMode
        {
            get
            {
                if (_shipmentMode != null && _shipmentMode > 0 && _objShipmentMode == null)
                {
                        if (this._context == null)
                        {
                            _objShipmentMode = new Indico.BusinessObjects.ShipmentModeBO();
                        }
                        else
                        {
                            _objShipmentMode = new Indico.BusinessObjects.ShipmentModeBO(ref this._context);
                        }
                        _objShipmentMode.ID = Convert.ToInt32(_shipmentMode);
                        _objShipmentMode.GetObject(); 
                }
                return _objShipmentMode;
            }
            set
            { 
                _objShipmentMode = value;
                _shipmentMode = _objShipmentMode.ID;
            }
        }
        ///<summary>The DistributorClientAddressBO object identified by the value of ShipTo</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.DistributorClientAddressBO objShipTo
        {
            get
            {
                if (_shipTo != null && _shipTo > 0 && _objShipTo == null)
                {
                        if (this._context == null)
                        {
                            _objShipTo = new Indico.BusinessObjects.DistributorClientAddressBO();
                        }
                        else
                        {
                            _objShipTo = new Indico.BusinessObjects.DistributorClientAddressBO(ref this._context);
                        }
                        _objShipTo.ID = Convert.ToInt32(_shipTo);
                        _objShipTo.GetObject(); 
                }
                return _objShipTo;
            }
            set
            { 
                _objShipTo = value;
                _shipTo = _objShipTo.ID;
            }
        }
        ///<summary>The ReservationStatusBO object identified by the value of Status</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.ReservationStatusBO objStatus
        {
            get
            {
                if ( _status > 0 && _objStatus == null)
                {
                        if (this._context == null)
                        {
                            _objStatus = new Indico.BusinessObjects.ReservationStatusBO();
                        }
                        else
                        {
                            _objStatus = new Indico.BusinessObjects.ReservationStatusBO(ref this._context);
                        }
                        _objStatus.ID = _status;
                        _objStatus.GetObject(); 
                }
                return _objStatus;
            }
            set
            { 
                _objStatus = value;
                _status = _objStatus.ID;
            }
        }
        #endregion
        
        #region Foreign Object Foreign Key Collections
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.OrderBO> OrdersWhereThisIsReservation // FK_Order_Reservation
        {
            get
            {
                if (!_ordersWhereThisIsReservationLoaded)
                {
                    _ordersWhereThisIsReservationLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Reservation obj = (from o in context.Reservation
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.OrdersWhereThisIsReservation.Load();
                        ordersWhereThisIsReservationList = new IndicoList<Indico.BusinessObjects.OrderBO>(obj.OrdersWhereThisIsReservation.Count);
                        
                        foreach (Indico.DAL.Order o in obj.OrdersWhereThisIsReservation)
                        {
                            Indico.BusinessObjects.OrderBO fkObj = new Indico.BusinessObjects.OrderBO(o, ref this._context);
                            ordersWhereThisIsReservationList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        ordersWhereThisIsReservationList = new IndicoList<Indico.BusinessObjects.OrderBO>();
                    }
                    
                    ordersWhereThisIsReservationList.OnBeforeRemove += new EventHandler(OrdersWhereThisIsReservationList_OnBeforeRemove);
                    ordersWhereThisIsReservationList.OnAfterAdd += new EventHandler(OrdersWhereThisIsReservationList_OnAfterAdd);
                }
                
                return ordersWhereThisIsReservationList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.OrderDetailBO> OrderDetailsWhereThisIsReservation // FK_OrderDetail_Reservation
        {
            get
            {
                if (!_orderDetailsWhereThisIsReservationLoaded)
                {
                    _orderDetailsWhereThisIsReservationLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Reservation obj = (from o in context.Reservation
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.OrderDetailsWhereThisIsReservation.Load();
                        orderDetailsWhereThisIsReservationList = new IndicoList<Indico.BusinessObjects.OrderDetailBO>(obj.OrderDetailsWhereThisIsReservation.Count);
                        
                        foreach (Indico.DAL.OrderDetail o in obj.OrderDetailsWhereThisIsReservation)
                        {
                            Indico.BusinessObjects.OrderDetailBO fkObj = new Indico.BusinessObjects.OrderDetailBO(o, ref this._context);
                            orderDetailsWhereThisIsReservationList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        orderDetailsWhereThisIsReservationList = new IndicoList<Indico.BusinessObjects.OrderDetailBO>();
                    }
                    
                    orderDetailsWhereThisIsReservationList.OnBeforeRemove += new EventHandler(OrderDetailsWhereThisIsReservationList_OnBeforeRemove);
                    orderDetailsWhereThisIsReservationList.OnAfterAdd += new EventHandler(OrderDetailsWhereThisIsReservationList_OnAfterAdd);
                }
                
                return orderDetailsWhereThisIsReservationList;
            }
        }
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the ReservationBO class using the supplied Indico.DAL.Reservation. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.Reservation whose properties will be used to initialise the ReservationBO</param>
        internal ReservationBO(Indico.DAL.Reservation obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.Reservation 
            this.ID = obj.ID;
            
            this.Client = obj.Client;
            this.Coordinator = (obj.CoordinatorReference.EntityKey != null && obj.CoordinatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CoordinatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.DateCreated = obj.DateCreated;
            this.DateModified = obj.DateModified;
            this.Distributor = (obj.DistributorReference.EntityKey != null && obj.DistributorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.DistributorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Notes = obj.Notes;
            this.OrderDate = obj.OrderDate;
            this.Pattern = (obj.PatternReference.EntityKey != null && obj.PatternReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PatternReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Qty = obj.Qty;
            this.ReservationNo = obj.ReservationNo;
            this.ShipmentDate = obj.ShipmentDate;
            this.ShipmentMode = (obj.ShipmentModeReference.EntityKey != null && obj.ShipmentModeReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ShipmentModeReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.ShipTo = (obj.ShipToReference.EntityKey != null && obj.ShipToReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ShipToReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Status = (obj.StatusReference.EntityKey != null && obj.StatusReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.StatusReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.Reservation SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.Reservation properties
            Indico.DAL.Reservation obj = new Indico.DAL.Reservation();
            
            if (this.ID > 0)
            {
                obj = context.Reservation.FirstOrDefault<Reservation>(o => o.ID == this.ID);
            }
            
            obj.Client = this.Client;
            obj.DateCreated = this.DateCreated;
            obj.DateModified = this.DateModified;
            obj.Notes = this.Notes;
            obj.OrderDate = this.OrderDate;
            obj.Qty = this.Qty;
            obj.ReservationNo = this.ReservationNo;
            obj.ShipmentDate = this.ShipmentDate;
            
            if (this.Coordinator > 0) obj.Coordinator = context.User.FirstOrDefault(o => o.ID == this.Coordinator);
            if (this.Creator > 0) obj.Creator = context.User.FirstOrDefault(o => o.ID == this.Creator);
            if (this.Distributor > 0) obj.Distributor = context.Company.FirstOrDefault(o => o.ID == this.Distributor);
            if (this.Modifier > 0) obj.Modifier = context.User.FirstOrDefault(o => o.ID == this.Modifier);
            if (this.Pattern != null && this.Pattern > 0) obj.Pattern = context.Pattern.FirstOrDefault(o => o.ID == this.Pattern);
            if (this.ShipmentMode != null && this.ShipmentMode > 0) obj.ShipmentMode = context.ShipmentMode.FirstOrDefault(o => o.ID == this.ShipmentMode);
            if (this.ShipTo != null && this.ShipTo > 0) obj.ShipTo = context.DistributorClientAddress.FirstOrDefault(o => o.ID == this.ShipTo);
            if (this.Status > 0) obj.Status = context.ReservationStatus.FirstOrDefault(o => o.ID == this.Status);
            
            if (_ordersWhereThisIsReservationLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.OrderBO.ToEntityList(this.OrdersWhereThisIsReservation, context), 
                    obj.OrdersWhereThisIsReservation);
            if (_orderDetailsWhereThisIsReservationLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.OrderDetailBO.ToEntityList(this.OrderDetailsWhereThisIsReservation, context), 
                    obj.OrderDetailsWhereThisIsReservation);
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.Reservation))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.Reservation obj = (Indico.DAL.Reservation)eObj;
            
            // set the Indico.BusinessObjects.ReservationBO properties
            this.ID = obj.ID;
            
            this.Client = obj.Client;
            this.DateCreated = obj.DateCreated;
            this.DateModified = obj.DateModified;
            this.Notes = obj.Notes;
            this.OrderDate = obj.OrderDate;
            this.Qty = obj.Qty;
            this.ReservationNo = obj.ReservationNo;
            this.ShipmentDate = obj.ShipmentDate;
            
            this.Coordinator = (obj.CoordinatorReference.EntityKey != null && obj.CoordinatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CoordinatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Distributor = (obj.DistributorReference.EntityKey != null && obj.DistributorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.DistributorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Pattern = (obj.PatternReference.EntityKey != null && obj.PatternReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PatternReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.ShipmentMode = (obj.ShipmentModeReference.EntityKey != null && obj.ShipmentModeReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ShipmentModeReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.ShipTo = (obj.ShipToReference.EntityKey != null && obj.ShipToReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ShipToReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Status = (obj.StatusReference.EntityKey != null && obj.StatusReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.StatusReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.ReservationBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.ReservationBO properties
            this.ID = obj.ID;
            
            this.Client = obj.Client;
            this.Coordinator = obj.Coordinator;
            this.Creator = obj.Creator;
            this.DateCreated = obj.DateCreated;
            this.DateModified = obj.DateModified;
            this.Distributor = obj.Distributor;
            this.Modifier = obj.Modifier;
            this.Notes = obj.Notes;
            this.OrderDate = obj.OrderDate;
            this.Pattern = obj.Pattern;
            this.Qty = obj.Qty;
            this.ReservationNo = obj.ReservationNo;
            this.ShipmentDate = obj.ShipmentDate;
            this.ShipmentMode = obj.ShipmentMode;
            this.ShipTo = obj.ShipTo;
            this.Status = obj.Status;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.ReservationBO> IQueryableToList(IQueryable<Indico.DAL.Reservation> oQuery)
        {
            List<Indico.DAL.Reservation> oList = oQuery.ToList();
            List<Indico.BusinessObjects.ReservationBO> rList = new List<Indico.BusinessObjects.ReservationBO>(oList.Count);
            foreach (Indico.DAL.Reservation o in oList)
            {
                Indico.BusinessObjects.ReservationBO obj = new Indico.BusinessObjects.ReservationBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.ReservationBO> ToList(IEnumerable<Indico.DAL.Reservation> oQuery)
        {
            List<Indico.DAL.Reservation> oList = oQuery.ToList();
            List<Indico.BusinessObjects.ReservationBO> rList = new List<Indico.BusinessObjects.ReservationBO>(oList.Count);
            foreach (Indico.DAL.Reservation o in oList)
            {
                Indico.BusinessObjects.ReservationBO obj = new Indico.BusinessObjects.ReservationBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.Reservation> ToEntityList(List<ReservationBO> bos, IndicoEntities context)
        {
            // build a List of Reservation entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.Reservation.Count() == 0) ? new List<Indico.DAL.Reservation>() : (context.Reservation.Where(BuildContainsExpression<Reservation, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.Reservation>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Reservation> ToEntityCollection(List<ReservationBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of Reservation entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.Reservation> el = (context.Reservation.Count() == 0) ? new List<Indico.DAL.Reservation>() : 
                context.Reservation.Where(BuildContainsExpression<Reservation, int>(e => e.ID, ids))
                .ToList<Indico.DAL.Reservation>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Reservation> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Reservation>();
                
            foreach (Indico.DAL.Reservation r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.Reservation ToEntity(IndicoEntities context)
        {
            return (from o in context.Reservation
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToReservation(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Reservation obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToReservation(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.Reservation obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Reservation obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.ReservationBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.ReservationBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.Reservation> oQuery =
                        from o in context.Reservation
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.Reservation> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.ReservationBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.ReservationBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReservationBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReservationBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.Reservation> oQuery =
                (from o in context.Reservation
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReservationBO> reservations = IQueryableToList(oQuery);
            context.Dispose();
            return reservations;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.ReservationBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.ReservationBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReservationBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReservationBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Reservation> oQuery =
                (from o in context.Reservation
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.ReservationNo == 0 || this.ReservationNo == o.ReservationNo) &&
                    (this.OrderDate == DateTime.MinValue || this.OrderDate == o.OrderDate) &&
                    (this.Pattern == null || this.Pattern == o.Pattern.ID) &&
                    (this.Coordinator == 0 || this.Coordinator == o.Coordinator.ID) &&
                    (this.Distributor == 0 || this.Distributor == o.Distributor.ID) &&
                    (this.Client == null || this.Client == o.Client) &&
                    (this.ShipTo == null || this.ShipTo == o.ShipTo.ID) &&
                    (this.ShipmentMode == null || this.ShipmentMode == o.ShipmentMode.ID) &&
                    (this.ShipmentDate == DateTime.MinValue || this.ShipmentDate == o.ShipmentDate) &&
                    (this.Qty == 0 || this.Qty == o.Qty) &&
                    (this.Notes == null || this.Notes == o.Notes) &&
                    (this.DateCreated == DateTime.MinValue || this.DateCreated == o.DateCreated) &&
                    (this.DateModified == DateTime.MinValue || this.DateModified == o.DateModified) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.Status == 0 || this.Status == o.Status.ID) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReservationBO> reservations = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return reservations;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Reservation
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.ReservationNo == 0 || this.ReservationNo == o.ReservationNo) &&
                    (this.OrderDate == DateTime.MinValue || this.OrderDate == o.OrderDate) &&
                    (this.Pattern == null || this.Pattern == o.Pattern.ID) &&
                    (this.Coordinator == 0 || this.Coordinator == o.Coordinator.ID) &&
                    (this.Distributor == 0 || this.Distributor == o.Distributor.ID) &&
                    (this.Client == null || this.Client == o.Client) &&
                    (this.ShipTo == null || this.ShipTo == o.ShipTo.ID) &&
                    (this.ShipmentMode == null || this.ShipmentMode == o.ShipmentMode.ID) &&
                    (this.ShipmentDate == DateTime.MinValue || this.ShipmentDate == o.ShipmentDate) &&
                    (this.Qty == 0 || this.Qty == o.Qty) &&
                    (this.Notes == null || this.Notes == o.Notes) &&
                    (this.DateCreated == DateTime.MinValue || this.DateCreated == o.DateCreated) &&
                    (this.DateModified == DateTime.MinValue || this.DateModified == o.DateModified) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.Status == 0 || this.Status == o.Status.ID) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.ReservationBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.ReservationBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReservationBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReservationBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Reservation> oQuery =
                (from o in context.Reservation
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.ReservationNo == 0 || o.ReservationNo == this.ReservationNo) &&
                    (this.OrderDate == DateTime.MinValue || o.OrderDate == this.OrderDate) &&
                    (this.Pattern == null || o.Pattern.ID == this.Pattern) &&
                    (this.Coordinator == 0 || o.Coordinator.ID == this.Coordinator) &&
                    (this.Distributor == 0 || o.Distributor.ID == this.Distributor) &&
                    (this.Client == null || o.Client.Contains(this.Client)) &&
                    (this.ShipTo == null || o.ShipTo.ID == this.ShipTo) &&
                    (this.ShipmentMode == null || o.ShipmentMode.ID == this.ShipmentMode) &&
                    (this.ShipmentDate == DateTime.MinValue || o.ShipmentDate == this.ShipmentDate) &&
                    (this.Qty == 0 || o.Qty == this.Qty) &&
                    (this.Notes == null || o.Notes.Contains(this.Notes)) &&
                    (this.DateCreated == DateTime.MinValue || o.DateCreated == this.DateCreated) &&
                    (this.DateModified == DateTime.MinValue || o.DateModified == this.DateModified) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.Status == 0 || o.Status.ID == this.Status) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReservationBO> reservations = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return reservations;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Reservation
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.ReservationNo == 0 || o.ReservationNo == this.ReservationNo) &&
                    (this.OrderDate == DateTime.MinValue || o.OrderDate == this.OrderDate) &&
                    (this.Pattern == null || o.Pattern.ID == this.Pattern) &&
                    (this.Coordinator == 0 || o.Coordinator.ID == this.Coordinator) &&
                    (this.Distributor == 0 || o.Distributor.ID == this.Distributor) &&
                    (this.Client == null || o.Client.Contains(this.Client)) &&
                    (this.ShipTo == null || o.ShipTo.ID == this.ShipTo) &&
                    (this.ShipmentMode == null || o.ShipmentMode.ID == this.ShipmentMode) &&
                    (this.ShipmentDate == DateTime.MinValue || o.ShipmentDate == this.ShipmentDate) &&
                    (this.Qty == 0 || o.Qty == this.Qty) &&
                    (this.Notes == null || o.Notes.Contains(this.Notes)) &&
                    (this.DateCreated == DateTime.MinValue || o.DateCreated == this.DateCreated) &&
                    (this.DateModified == DateTime.MinValue || o.DateModified == this.DateModified) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.Status == 0 || o.Status.ID == this.Status) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.ReservationBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.ReservationBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReservationBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReservationBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Reservation> oQuery =
                (from o in context.Reservation
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.ReservationNo == 0 || this.ReservationNo == o.ReservationNo) && 
                    (this.OrderDate == DateTime.MinValue || this.OrderDate == o.OrderDate) && 
                    (this.Pattern == null || this.Pattern == o.Pattern.ID) && 
                    (this.Coordinator == 0 || this.Coordinator == o.Coordinator.ID) && 
                    (this.Distributor == 0 || this.Distributor == o.Distributor.ID) && 
                    (this.ShipTo == null || this.ShipTo == o.ShipTo.ID) && 
                    (this.ShipmentMode == null || this.ShipmentMode == o.ShipmentMode.ID) && 
                    (this.ShipmentDate == DateTime.MinValue || this.ShipmentDate == o.ShipmentDate) && 
                    (this.Qty == 0 || this.Qty == o.Qty) && 
                    (this.DateCreated == DateTime.MinValue || this.DateCreated == o.DateCreated) && 
                    (this.DateModified == DateTime.MinValue || this.DateModified == o.DateModified) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.Status == 0 || this.Status == o.Status.ID) && 
                    ((o.Client.Contains(this.Client)) ||
                    (o.Notes.Contains(this.Notes)) ||
                    (this.Client == null && this.Notes == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReservationBO> reservations = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return reservations;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Reservation
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.ReservationNo == 0 || this.ReservationNo == o.ReservationNo) && 
                    (this.OrderDate == DateTime.MinValue || this.OrderDate == o.OrderDate) && 
                    (this.Pattern == null || this.Pattern == o.Pattern.ID) && 
                    (this.Coordinator == 0 || this.Coordinator == o.Coordinator.ID) && 
                    (this.Distributor == 0 || this.Distributor == o.Distributor.ID) && 
                    (this.ShipTo == null || this.ShipTo == o.ShipTo.ID) && 
                    (this.ShipmentMode == null || this.ShipmentMode == o.ShipmentMode.ID) && 
                    (this.ShipmentDate == DateTime.MinValue || this.ShipmentDate == o.ShipmentDate) && 
                    (this.Qty == 0 || this.Qty == o.Qty) && 
                    (this.DateCreated == DateTime.MinValue || this.DateCreated == o.DateCreated) && 
                    (this.DateModified == DateTime.MinValue || this.DateModified == o.DateModified) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.Status == 0 || this.Status == o.Status.ID) && 
                    ((o.Client.Contains(this.Client)) ||
                    (o.Notes.Contains(this.Notes)) ||
                    (this.Client == null && this.Notes == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.ReservationBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.ReservationBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.ReservationBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.ReservationBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.ReservationBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.ReservationBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnReservationBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("ReservationBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnReservationBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnReservationBOIDChanged();
        partial void OnReservationBOIDChanging(int value);
        
        partial void OnReservationNoChanged()
        {
            OnReservationBOReservationNoChanged();
        }
        
        partial void OnReservationNoChanging(int value)
        {
            OnReservationBOReservationNoChanging(value);
        }
        partial void OnReservationNoChanged();
        partial void OnReservationNoChanging(int value);
        partial void OnReservationBOReservationNoChanged();
        partial void OnReservationBOReservationNoChanging(int value);
        
        partial void OnOrderDateChanged()
        {
            OnReservationBOOrderDateChanged();
        }
        
        partial void OnOrderDateChanging(DateTime value)
        {
            OnReservationBOOrderDateChanging(value);
        }
        partial void OnOrderDateChanged();
        partial void OnOrderDateChanging(DateTime value);
        partial void OnReservationBOOrderDateChanged();
        partial void OnReservationBOOrderDateChanging(DateTime value);
        
        partial void OnPatternChanged()
        {
            OnReservationBOPatternChanged();
        }
        
        partial void OnPatternChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("ReservationBO.Pattern must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnReservationBOPatternChanging(value);
        }
        partial void OnPatternChanged();
        partial void OnPatternChanging(int? value);
        partial void OnReservationBOPatternChanged();
        partial void OnReservationBOPatternChanging(int? value);
        
        partial void OnCoordinatorChanged()
        {
            OnReservationBOCoordinatorChanged();
        }
        
        partial void OnCoordinatorChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("ReservationBO.Coordinator must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnReservationBOCoordinatorChanging(value);
        }
        partial void OnCoordinatorChanged();
        partial void OnCoordinatorChanging(int value);
        partial void OnReservationBOCoordinatorChanged();
        partial void OnReservationBOCoordinatorChanging(int value);
        
        partial void OnDistributorChanged()
        {
            OnReservationBODistributorChanged();
        }
        
        partial void OnDistributorChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("ReservationBO.Distributor must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnReservationBODistributorChanging(value);
        }
        partial void OnDistributorChanged();
        partial void OnDistributorChanging(int value);
        partial void OnReservationBODistributorChanged();
        partial void OnReservationBODistributorChanging(int value);
        
        partial void OnClientChanged()
        {
            OnReservationBOClientChanged();
        }
        
        partial void OnClientChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("ReservationBO.Client has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnReservationBOClientChanging(value);
        }
        partial void OnClientChanged();
        partial void OnClientChanging(string value);
        partial void OnReservationBOClientChanged();
        partial void OnReservationBOClientChanging(string value);
        
        partial void OnShipToChanged()
        {
            OnReservationBOShipToChanged();
        }
        
        partial void OnShipToChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("ReservationBO.ShipTo must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnReservationBOShipToChanging(value);
        }
        partial void OnShipToChanged();
        partial void OnShipToChanging(int? value);
        partial void OnReservationBOShipToChanged();
        partial void OnReservationBOShipToChanging(int? value);
        
        partial void OnShipmentModeChanged()
        {
            OnReservationBOShipmentModeChanged();
        }
        
        partial void OnShipmentModeChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("ReservationBO.ShipmentMode must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnReservationBOShipmentModeChanging(value);
        }
        partial void OnShipmentModeChanged();
        partial void OnShipmentModeChanging(int? value);
        partial void OnReservationBOShipmentModeChanged();
        partial void OnReservationBOShipmentModeChanging(int? value);
        
        partial void OnShipmentDateChanged()
        {
            OnReservationBOShipmentDateChanged();
        }
        
        partial void OnShipmentDateChanging(DateTime value)
        {
            OnReservationBOShipmentDateChanging(value);
        }
        partial void OnShipmentDateChanged();
        partial void OnShipmentDateChanging(DateTime value);
        partial void OnReservationBOShipmentDateChanged();
        partial void OnReservationBOShipmentDateChanging(DateTime value);
        
        partial void OnQtyChanged()
        {
            OnReservationBOQtyChanged();
        }
        
        partial void OnQtyChanging(int value)
        {
            OnReservationBOQtyChanging(value);
        }
        partial void OnQtyChanged();
        partial void OnQtyChanging(int value);
        partial void OnReservationBOQtyChanged();
        partial void OnReservationBOQtyChanging(int value);
        
        partial void OnNotesChanged()
        {
            OnReservationBONotesChanged();
        }
        
        partial void OnNotesChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("ReservationBO.Notes has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnReservationBONotesChanging(value);
        }
        partial void OnNotesChanged();
        partial void OnNotesChanging(string value);
        partial void OnReservationBONotesChanged();
        partial void OnReservationBONotesChanging(string value);
        
        partial void OnDateCreatedChanged()
        {
            OnReservationBODateCreatedChanged();
        }
        
        partial void OnDateCreatedChanging(DateTime value)
        {
            OnReservationBODateCreatedChanging(value);
        }
        partial void OnDateCreatedChanged();
        partial void OnDateCreatedChanging(DateTime value);
        partial void OnReservationBODateCreatedChanged();
        partial void OnReservationBODateCreatedChanging(DateTime value);
        
        partial void OnDateModifiedChanged()
        {
            OnReservationBODateModifiedChanged();
        }
        
        partial void OnDateModifiedChanging(DateTime value)
        {
            OnReservationBODateModifiedChanging(value);
        }
        partial void OnDateModifiedChanged();
        partial void OnDateModifiedChanging(DateTime value);
        partial void OnReservationBODateModifiedChanged();
        partial void OnReservationBODateModifiedChanging(DateTime value);
        
        partial void OnCreatorChanged()
        {
            OnReservationBOCreatorChanged();
        }
        
        partial void OnCreatorChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("ReservationBO.Creator must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnReservationBOCreatorChanging(value);
        }
        partial void OnCreatorChanged();
        partial void OnCreatorChanging(int value);
        partial void OnReservationBOCreatorChanged();
        partial void OnReservationBOCreatorChanging(int value);
        
        partial void OnModifierChanged()
        {
            OnReservationBOModifierChanged();
        }
        
        partial void OnModifierChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("ReservationBO.Modifier must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnReservationBOModifierChanging(value);
        }
        partial void OnModifierChanged();
        partial void OnModifierChanging(int value);
        partial void OnReservationBOModifierChanged();
        partial void OnReservationBOModifierChanging(int value);
        
        partial void OnStatusChanged()
        {
            OnReservationBOStatusChanged();
        }
        
        partial void OnStatusChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("ReservationBO.Status must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnReservationBOStatusChanging(value);
        }
        partial void OnStatusChanged();
        partial void OnStatusChanging(int value);
        partial void OnReservationBOStatusChanged();
        partial void OnReservationBOStatusChanging(int value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.ReservationBO))
                return 1;
            Indico.BusinessObjects.ReservationBOComparer c = new Indico.BusinessObjects.ReservationBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.ReservationBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.Reservation)sender);
            }
        }
        
        void OrdersWhereThisIsReservationList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Order obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrdersWhereThisIsReservation.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrdersWhereThisIsReservation.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrdersWhereThisIsReservationList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Order obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrdersWhereThisIsReservation.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrdersWhereThisIsReservation.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrderDetailsWhereThisIsReservationList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.OrderDetail obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrderDetailsWhereThisIsReservation.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrderDetailsWhereThisIsReservation.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrderDetailsWhereThisIsReservationList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.OrderDetail obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrderDetailsWhereThisIsReservation.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrderDetailsWhereThisIsReservation.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
            this._ordersWhereThisIsReservationLoaded = false;
            if (this.ordersWhereThisIsReservationList != null)
            {
                this.ordersWhereThisIsReservationList.OnBeforeRemove -= new EventHandler(OrdersWhereThisIsReservationList_OnBeforeRemove);
                this.ordersWhereThisIsReservationList.OnAfterAdd -= new EventHandler(OrdersWhereThisIsReservationList_OnAfterAdd);
            }
            this._orderDetailsWhereThisIsReservationLoaded = false;
            if (this.orderDetailsWhereThisIsReservationList != null)
            {
                this.orderDetailsWhereThisIsReservationList.OnBeforeRemove -= new EventHandler(OrderDetailsWhereThisIsReservationList_OnBeforeRemove);
                this.orderDetailsWhereThisIsReservationList.OnAfterAdd -= new EventHandler(OrderDetailsWhereThisIsReservationList_OnAfterAdd);
            }
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region ReservationBOComparer
    public class ReservationBOComparer : IComparer<Indico.BusinessObjects.ReservationBO>
    {
        private string propertyToCompareName;
        public ReservationBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.ReservationBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.ReservationBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public ReservationBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.ReservationBO> Members
        public int Compare(Indico.BusinessObjects.ReservationBO x, Indico.BusinessObjects.ReservationBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.ReservationBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.ReservationBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.ReservationBO x, Indico.BusinessObjects.ReservationBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
