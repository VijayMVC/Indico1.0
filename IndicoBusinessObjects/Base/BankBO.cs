// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class BankBO : BusinessObject, IComparable
    {
        #region fields
        #region Scalar Fields
        private int id;
        private string _accountNo = string.Empty;
        private string _address;
        private string _branch = string.Empty;
        private string _city;
        private int? _country;
        private DateTime _createdDate = DateTime.MinValue;
        private int _creator;
        private DateTime _modifiedDate = DateTime.MinValue;
        private int _modifier;
        private string _name = string.Empty;
        private string _number;
        private string _postcode;
        private string _state;
        private string _swiftCode;
        #endregion
        
        #region Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.CountryBO _objCountry;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objCreator;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objModifier;
        #endregion
        
        #region Foreign Table Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.InvoiceBO> invoicesWhereThisIsBankList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _invoicesWhereThisIsBankLoaded;
        #endregion
        
        #region Other fields
        
        private Indico.DAL.Bank _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>Bank AccountNo. of the Company. The maximum length of this property is 100.</summary>
        public string AccountNo
        {   
            get {return _accountNo;}
            set 
            {
                OnAccountNoChanging(value);
                _accountNo = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.AccountNo = value;
                }
                OnAccountNoChanged();
            }
        }
        /// <summary>The address of the branch. The maximum length of this property is 255.</summary>
        public string Address
        {   
            get {return _address;}
            set 
            {
                OnAddressChanging(value);
                _address = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Address = value;
                }
                OnAddressChanged();
            }
        }
        /// <summary>The name of the branch. The maximum length of this property is 255.</summary>
        public string Branch
        {   
            get {return _branch;}
            set 
            {
                OnBranchChanging(value);
                _branch = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Branch = value;
                }
                OnBranchChanged();
            }
        }
        /// <summary>The city of the branch. The maximum length of this property is 68.</summary>
        public string City
        {   
            get {return _city;}
            set 
            {
                OnCityChanging(value);
                _city = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.City = value;
                }
                OnCityChanged();
            }
        }
        /// <summary>The country of the branch.</summary>
        public int? Country
        {   
            get {return _country;}
            set 
            {
                OnCountryChanging(value);
                _country = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (value != null) && ((int)value != 0))
                {
                    this.ObjDAL.Country = (from o in this._context.Context.Country
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Country>()[0];
                }
                else if (value == null || !this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Country = null;
                OnCountryChanged();
            }
        }
        /// <summary>Created Date of the Bank.</summary>
        public DateTime CreatedDate
        {   
            get {return _createdDate;}
            set 
            {
                OnCreatedDateChanging(value);
                _createdDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CreatedDate = value;
                }
                OnCreatedDateChanged();
            }
        }
        /// <summary>Creator of the Bank.</summary>
        public int Creator
        {   
            get {return _creator;}
            set 
            {
                OnCreatorChanging(value);
                _creator = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Creator = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Creator = null;
                OnCreatorChanged();
            }
        }
        /// <summary>Modified Date of the Bank.</summary>
        public DateTime ModifiedDate
        {   
            get {return _modifiedDate;}
            set 
            {
                OnModifiedDateChanging(value);
                _modifiedDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ModifiedDate = value;
                }
                OnModifiedDateChanged();
            }
        }
        /// <summary>Modifier of the Bank.</summary>
        public int Modifier
        {   
            get {return _modifier;}
            set 
            {
                OnModifierChanging(value);
                _modifier = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Modifier = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Modifier = null;
                OnModifierChanged();
            }
        }
        /// <summary>The name of the Bank. The maximum length of this property is 100.</summary>
        public string Name
        {   
            get {return _name;}
            set 
            {
                OnNameChanging(value);
                _name = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Name = value;
                }
                OnNameChanged();
            }
        }
        /// <summary>. The maximum length of this property is 32.</summary>
        public string Number
        {   
            get {return _number;}
            set 
            {
                OnNumberChanging(value);
                _number = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Number = value;
                }
                OnNumberChanged();
            }
        }
        /// <summary>The postalcode of the branch. The maximum length of this property is 20.</summary>
        public string Postcode
        {   
            get {return _postcode;}
            set 
            {
                OnPostcodeChanging(value);
                _postcode = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Postcode = value;
                }
                OnPostcodeChanged();
            }
        }
        /// <summary>The state of the branch. The maximum length of this property is 20.</summary>
        public string State
        {   
            get {return _state;}
            set 
            {
                OnStateChanging(value);
                _state = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.State = value;
                }
                OnStateChanged();
            }
        }
        /// <summary>Bank SwiftCode of the Company. The maximum length of this property is 100.</summary>
        public string SwiftCode
        {   
            get {return _swiftCode;}
            set 
            {
                OnSwiftCodeChanging(value);
                _swiftCode = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.SwiftCode = value;
                }
                OnSwiftCodeChanged();
            }
        }
        
        internal Indico.DAL.Bank ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        ///<summary>The CountryBO object identified by the value of Country</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.CountryBO objCountry
        {
            get
            {
                if (_country != null && _country > 0 && _objCountry == null)
                {
                        if (this._context == null)
                        {
                            _objCountry = new Indico.BusinessObjects.CountryBO();
                        }
                        else
                        {
                            _objCountry = new Indico.BusinessObjects.CountryBO(ref this._context);
                        }
                        _objCountry.ID = Convert.ToInt32(_country);
                        _objCountry.GetObject(); 
                }
                return _objCountry;
            }
            set
            { 
                _objCountry = value;
                _country = _objCountry.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Creator</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objCreator
        {
            get
            {
                if ( _creator > 0 && _objCreator == null)
                {
                        if (this._context == null)
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objCreator.ID = _creator;
                        _objCreator.GetObject(); 
                }
                return _objCreator;
            }
            set
            { 
                _objCreator = value;
                _creator = _objCreator.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Modifier</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objModifier
        {
            get
            {
                if ( _modifier > 0 && _objModifier == null)
                {
                        if (this._context == null)
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objModifier.ID = _modifier;
                        _objModifier.GetObject(); 
                }
                return _objModifier;
            }
            set
            { 
                _objModifier = value;
                _modifier = _objModifier.ID;
            }
        }
        #endregion
        
        #region Foreign Object Foreign Key Collections
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.InvoiceBO> InvoicesWhereThisIsBank // FK_Invoice_Bank
        {
            get
            {
                if (!_invoicesWhereThisIsBankLoaded)
                {
                    _invoicesWhereThisIsBankLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Bank obj = (from o in context.Bank
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.InvoicesWhereThisIsBank.Load();
                        invoicesWhereThisIsBankList = new IndicoList<Indico.BusinessObjects.InvoiceBO>(obj.InvoicesWhereThisIsBank.Count);
                        
                        foreach (Indico.DAL.Invoice o in obj.InvoicesWhereThisIsBank)
                        {
                            Indico.BusinessObjects.InvoiceBO fkObj = new Indico.BusinessObjects.InvoiceBO(o, ref this._context);
                            invoicesWhereThisIsBankList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        invoicesWhereThisIsBankList = new IndicoList<Indico.BusinessObjects.InvoiceBO>();
                    }
                    
                    invoicesWhereThisIsBankList.OnBeforeRemove += new EventHandler(InvoicesWhereThisIsBankList_OnBeforeRemove);
                    invoicesWhereThisIsBankList.OnAfterAdd += new EventHandler(InvoicesWhereThisIsBankList_OnAfterAdd);
                }
                
                return invoicesWhereThisIsBankList;
            }
        }
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the BankBO class using the supplied Indico.DAL.Bank. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.Bank whose properties will be used to initialise the BankBO</param>
        internal BankBO(Indico.DAL.Bank obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.Bank 
            this.ID = obj.ID;
            
            this.AccountNo = obj.AccountNo;
            this.Address = obj.Address;
            this.Branch = obj.Branch;
            this.City = obj.City;
            this.Country = (obj.CountryReference.EntityKey != null && obj.CountryReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CountryReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.CreatedDate = obj.CreatedDate;
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Name = obj.Name;
            this.Number = obj.Number;
            this.Postcode = obj.Postcode;
            this.State = obj.State;
            this.SwiftCode = obj.SwiftCode;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.Bank SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.Bank properties
            Indico.DAL.Bank obj = new Indico.DAL.Bank();
            
            if (this.ID > 0)
            {
                obj = context.Bank.FirstOrDefault<Bank>(o => o.ID == this.ID);
            }
            
            obj.AccountNo = this.AccountNo;
            obj.Address = this.Address;
            obj.Branch = this.Branch;
            obj.City = this.City;
            obj.CreatedDate = this.CreatedDate;
            obj.ModifiedDate = this.ModifiedDate;
            obj.Name = this.Name;
            obj.Number = this.Number;
            obj.Postcode = this.Postcode;
            obj.State = this.State;
            obj.SwiftCode = this.SwiftCode;
            
            if (this.Country != null && this.Country > 0) obj.Country = context.Country.FirstOrDefault(o => o.ID == this.Country);
            if (this.Creator > 0) obj.Creator = context.User.FirstOrDefault(o => o.ID == this.Creator);
            if (this.Modifier > 0) obj.Modifier = context.User.FirstOrDefault(o => o.ID == this.Modifier);
            
            if (_invoicesWhereThisIsBankLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.InvoiceBO.ToEntityList(this.InvoicesWhereThisIsBank, context), 
                    obj.InvoicesWhereThisIsBank);
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.Bank))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.Bank obj = (Indico.DAL.Bank)eObj;
            
            // set the Indico.BusinessObjects.BankBO properties
            this.ID = obj.ID;
            
            this.AccountNo = obj.AccountNo;
            this.Address = obj.Address;
            this.Branch = obj.Branch;
            this.City = obj.City;
            this.CreatedDate = obj.CreatedDate;
            this.ModifiedDate = obj.ModifiedDate;
            this.Name = obj.Name;
            this.Number = obj.Number;
            this.Postcode = obj.Postcode;
            this.State = obj.State;
            this.SwiftCode = obj.SwiftCode;
            
            this.Country = (obj.CountryReference.EntityKey != null && obj.CountryReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CountryReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.BankBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.BankBO properties
            this.ID = obj.ID;
            
            this.AccountNo = obj.AccountNo;
            this.Address = obj.Address;
            this.Branch = obj.Branch;
            this.City = obj.City;
            this.Country = obj.Country;
            this.CreatedDate = obj.CreatedDate;
            this.Creator = obj.Creator;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = obj.Modifier;
            this.Name = obj.Name;
            this.Number = obj.Number;
            this.Postcode = obj.Postcode;
            this.State = obj.State;
            this.SwiftCode = obj.SwiftCode;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.BankBO> IQueryableToList(IQueryable<Indico.DAL.Bank> oQuery)
        {
            List<Indico.DAL.Bank> oList = oQuery.ToList();
            List<Indico.BusinessObjects.BankBO> rList = new List<Indico.BusinessObjects.BankBO>(oList.Count);
            foreach (Indico.DAL.Bank o in oList)
            {
                Indico.BusinessObjects.BankBO obj = new Indico.BusinessObjects.BankBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.BankBO> ToList(IEnumerable<Indico.DAL.Bank> oQuery)
        {
            List<Indico.DAL.Bank> oList = oQuery.ToList();
            List<Indico.BusinessObjects.BankBO> rList = new List<Indico.BusinessObjects.BankBO>(oList.Count);
            foreach (Indico.DAL.Bank o in oList)
            {
                Indico.BusinessObjects.BankBO obj = new Indico.BusinessObjects.BankBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.Bank> ToEntityList(List<BankBO> bos, IndicoEntities context)
        {
            // build a List of Bank entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.Bank.Count() == 0) ? new List<Indico.DAL.Bank>() : (context.Bank.Where(BuildContainsExpression<Bank, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.Bank>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Bank> ToEntityCollection(List<BankBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of Bank entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.Bank> el = (context.Bank.Count() == 0) ? new List<Indico.DAL.Bank>() : 
                context.Bank.Where(BuildContainsExpression<Bank, int>(e => e.ID, ids))
                .ToList<Indico.DAL.Bank>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Bank> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Bank>();
                
            foreach (Indico.DAL.Bank r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.Bank ToEntity(IndicoEntities context)
        {
            return (from o in context.Bank
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToBank(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Bank obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToBank(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.Bank obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Bank obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.BankBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.BankBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.Bank> oQuery =
                        from o in context.Bank
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.Bank> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.BankBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.BankBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.BankBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.BankBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.Bank> oQuery =
                (from o in context.Bank
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.BankBO> banks = IQueryableToList(oQuery);
            context.Dispose();
            return banks;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.BankBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.BankBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.BankBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.BankBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Bank> oQuery =
                (from o in context.Bank
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Name == string.Empty || this.Name == o.Name) &&
                    (this.Branch == string.Empty || this.Branch == o.Branch) &&
                    (this.Number == null || this.Number == o.Number) &&
                    (this.Address == null || this.Address == o.Address) &&
                    (this.City == null || this.City == o.City) &&
                    (this.State == null || this.State == o.State) &&
                    (this.Postcode == null || this.Postcode == o.Postcode) &&
                    (this.Country == null || this.Country == o.Country.ID) &&
                    (this.AccountNo == string.Empty || this.AccountNo == o.AccountNo) &&
                    (this.SwiftCode == null || this.SwiftCode == o.SwiftCode) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.BankBO> banks = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return banks;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Bank
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Name == string.Empty || this.Name == o.Name) &&
                    (this.Branch == string.Empty || this.Branch == o.Branch) &&
                    (this.Number == null || this.Number == o.Number) &&
                    (this.Address == null || this.Address == o.Address) &&
                    (this.City == null || this.City == o.City) &&
                    (this.State == null || this.State == o.State) &&
                    (this.Postcode == null || this.Postcode == o.Postcode) &&
                    (this.Country == null || this.Country == o.Country.ID) &&
                    (this.AccountNo == string.Empty || this.AccountNo == o.AccountNo) &&
                    (this.SwiftCode == null || this.SwiftCode == o.SwiftCode) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.BankBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.BankBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.BankBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.BankBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Bank> oQuery =
                (from o in context.Bank
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Name == string.Empty || o.Name.Contains(this.Name)) &&
                    (this.Branch == string.Empty || o.Branch.Contains(this.Branch)) &&
                    (this.Number == null || o.Number.Contains(this.Number)) &&
                    (this.Address == null || o.Address.Contains(this.Address)) &&
                    (this.City == null || o.City.Contains(this.City)) &&
                    (this.State == null || o.State.Contains(this.State)) &&
                    (this.Postcode == null || o.Postcode.Contains(this.Postcode)) &&
                    (this.Country == null || o.Country.ID == this.Country) &&
                    (this.AccountNo == string.Empty || o.AccountNo.Contains(this.AccountNo)) &&
                    (this.SwiftCode == null || o.SwiftCode.Contains(this.SwiftCode)) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.ModifiedDate == DateTime.MinValue || o.ModifiedDate == this.ModifiedDate) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.BankBO> banks = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return banks;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Bank
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Name == string.Empty || o.Name.Contains(this.Name)) &&
                    (this.Branch == string.Empty || o.Branch.Contains(this.Branch)) &&
                    (this.Number == null || o.Number.Contains(this.Number)) &&
                    (this.Address == null || o.Address.Contains(this.Address)) &&
                    (this.City == null || o.City.Contains(this.City)) &&
                    (this.State == null || o.State.Contains(this.State)) &&
                    (this.Postcode == null || o.Postcode.Contains(this.Postcode)) &&
                    (this.Country == null || o.Country.ID == this.Country) &&
                    (this.AccountNo == string.Empty || o.AccountNo.Contains(this.AccountNo)) &&
                    (this.SwiftCode == null || o.SwiftCode.Contains(this.SwiftCode)) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.ModifiedDate == DateTime.MinValue || o.ModifiedDate == this.ModifiedDate) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.BankBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.BankBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.BankBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.BankBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Bank> oQuery =
                (from o in context.Bank
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Country == null || this.Country == o.Country.ID) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) && 
                    ((o.Name.Contains(this.Name)) ||
                    (o.Branch.Contains(this.Branch)) ||
                    (o.Number.Contains(this.Number)) ||
                    (o.Address.Contains(this.Address)) ||
                    (o.City.Contains(this.City)) ||
                    (o.State.Contains(this.State)) ||
                    (o.Postcode.Contains(this.Postcode)) ||
                    (o.AccountNo.Contains(this.AccountNo)) ||
                    (o.SwiftCode.Contains(this.SwiftCode)) ||
                    (this.Name == null && this.Branch == null && this.Number == null && this.Address == null && this.City == null && this.State == null && this.Postcode == null && this.AccountNo == null && this.SwiftCode == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.BankBO> banks = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return banks;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Bank
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Country == null || this.Country == o.Country.ID) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) && 
                    ((o.Name.Contains(this.Name)) ||
                    (o.Branch.Contains(this.Branch)) ||
                    (o.Number.Contains(this.Number)) ||
                    (o.Address.Contains(this.Address)) ||
                    (o.City.Contains(this.City)) ||
                    (o.State.Contains(this.State)) ||
                    (o.Postcode.Contains(this.Postcode)) ||
                    (o.AccountNo.Contains(this.AccountNo)) ||
                    (o.SwiftCode.Contains(this.SwiftCode)) ||
                    (this.Name == null && this.Branch == null && this.Number == null && this.Address == null && this.City == null && this.State == null && this.Postcode == null && this.AccountNo == null && this.SwiftCode == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.BankBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.BankBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.BankBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.BankBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.BankBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.BankBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnBankBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("BankBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnBankBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnBankBOIDChanged();
        partial void OnBankBOIDChanging(int value);
        
        partial void OnNameChanged()
        {
            OnBankBONameChanged();
        }
        
        partial void OnNameChanging(string value)
        {
            if (value != null && value.Length > 100)
            {
                throw new Exception(String.Format("BankBO.Name has a maximum length of 100. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnBankBONameChanging(value);
        }
        partial void OnNameChanged();
        partial void OnNameChanging(string value);
        partial void OnBankBONameChanged();
        partial void OnBankBONameChanging(string value);
        
        partial void OnBranchChanged()
        {
            OnBankBOBranchChanged();
        }
        
        partial void OnBranchChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("BankBO.Branch has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnBankBOBranchChanging(value);
        }
        partial void OnBranchChanged();
        partial void OnBranchChanging(string value);
        partial void OnBankBOBranchChanged();
        partial void OnBankBOBranchChanging(string value);
        
        partial void OnNumberChanged()
        {
            OnBankBONumberChanged();
        }
        
        partial void OnNumberChanging(string value)
        {
            if (value != null && value.Length > 32)
            {
                throw new Exception(String.Format("BankBO.Number has a maximum length of 32. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnBankBONumberChanging(value);
        }
        partial void OnNumberChanged();
        partial void OnNumberChanging(string value);
        partial void OnBankBONumberChanged();
        partial void OnBankBONumberChanging(string value);
        
        partial void OnAddressChanged()
        {
            OnBankBOAddressChanged();
        }
        
        partial void OnAddressChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("BankBO.Address has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnBankBOAddressChanging(value);
        }
        partial void OnAddressChanged();
        partial void OnAddressChanging(string value);
        partial void OnBankBOAddressChanged();
        partial void OnBankBOAddressChanging(string value);
        
        partial void OnCityChanged()
        {
            OnBankBOCityChanged();
        }
        
        partial void OnCityChanging(string value)
        {
            if (value != null && value.Length > 68)
            {
                throw new Exception(String.Format("BankBO.City has a maximum length of 68. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnBankBOCityChanging(value);
        }
        partial void OnCityChanged();
        partial void OnCityChanging(string value);
        partial void OnBankBOCityChanged();
        partial void OnBankBOCityChanging(string value);
        
        partial void OnStateChanged()
        {
            OnBankBOStateChanged();
        }
        
        partial void OnStateChanging(string value)
        {
            if (value != null && value.Length > 20)
            {
                throw new Exception(String.Format("BankBO.State has a maximum length of 20. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnBankBOStateChanging(value);
        }
        partial void OnStateChanged();
        partial void OnStateChanging(string value);
        partial void OnBankBOStateChanged();
        partial void OnBankBOStateChanging(string value);
        
        partial void OnPostcodeChanged()
        {
            OnBankBOPostcodeChanged();
        }
        
        partial void OnPostcodeChanging(string value)
        {
            if (value != null && value.Length > 20)
            {
                throw new Exception(String.Format("BankBO.Postcode has a maximum length of 20. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnBankBOPostcodeChanging(value);
        }
        partial void OnPostcodeChanged();
        partial void OnPostcodeChanging(string value);
        partial void OnBankBOPostcodeChanged();
        partial void OnBankBOPostcodeChanging(string value);
        
        partial void OnCountryChanged()
        {
            OnBankBOCountryChanged();
        }
        
        partial void OnCountryChanging(int? value)
        {
            if (value != null && value < 0)
            {
                throw new Exception(String.Format("BankBO.Country must be null or more than or equal to 0. The supplied value was {0}.", value));
            }
            OnBankBOCountryChanging(value);
        }
        partial void OnCountryChanged();
        partial void OnCountryChanging(int? value);
        partial void OnBankBOCountryChanged();
        partial void OnBankBOCountryChanging(int? value);
        
        partial void OnAccountNoChanged()
        {
            OnBankBOAccountNoChanged();
        }
        
        partial void OnAccountNoChanging(string value)
        {
            if (value != null && value.Length > 100)
            {
                throw new Exception(String.Format("BankBO.AccountNo has a maximum length of 100. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnBankBOAccountNoChanging(value);
        }
        partial void OnAccountNoChanged();
        partial void OnAccountNoChanging(string value);
        partial void OnBankBOAccountNoChanged();
        partial void OnBankBOAccountNoChanging(string value);
        
        partial void OnSwiftCodeChanged()
        {
            OnBankBOSwiftCodeChanged();
        }
        
        partial void OnSwiftCodeChanging(string value)
        {
            if (value != null && value.Length > 100)
            {
                throw new Exception(String.Format("BankBO.SwiftCode has a maximum length of 100. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnBankBOSwiftCodeChanging(value);
        }
        partial void OnSwiftCodeChanged();
        partial void OnSwiftCodeChanging(string value);
        partial void OnBankBOSwiftCodeChanged();
        partial void OnBankBOSwiftCodeChanging(string value);
        
        partial void OnCreatorChanged()
        {
            OnBankBOCreatorChanged();
        }
        
        partial void OnCreatorChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("BankBO.Creator must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnBankBOCreatorChanging(value);
        }
        partial void OnCreatorChanged();
        partial void OnCreatorChanging(int value);
        partial void OnBankBOCreatorChanged();
        partial void OnBankBOCreatorChanging(int value);
        
        partial void OnCreatedDateChanged()
        {
            OnBankBOCreatedDateChanged();
        }
        
        partial void OnCreatedDateChanging(DateTime value)
        {
            OnBankBOCreatedDateChanging(value);
        }
        partial void OnCreatedDateChanged();
        partial void OnCreatedDateChanging(DateTime value);
        partial void OnBankBOCreatedDateChanged();
        partial void OnBankBOCreatedDateChanging(DateTime value);
        
        partial void OnModifierChanged()
        {
            OnBankBOModifierChanged();
        }
        
        partial void OnModifierChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("BankBO.Modifier must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnBankBOModifierChanging(value);
        }
        partial void OnModifierChanged();
        partial void OnModifierChanging(int value);
        partial void OnBankBOModifierChanged();
        partial void OnBankBOModifierChanging(int value);
        
        partial void OnModifiedDateChanged()
        {
            OnBankBOModifiedDateChanged();
        }
        
        partial void OnModifiedDateChanging(DateTime value)
        {
            OnBankBOModifiedDateChanging(value);
        }
        partial void OnModifiedDateChanged();
        partial void OnModifiedDateChanging(DateTime value);
        partial void OnBankBOModifiedDateChanged();
        partial void OnBankBOModifiedDateChanging(DateTime value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.BankBO))
                return 1;
            Indico.BusinessObjects.BankBOComparer c = new Indico.BusinessObjects.BankBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.BankBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.Bank)sender);
            }
        }
        
        void InvoicesWhereThisIsBankList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Invoice obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.InvoicesWhereThisIsBank.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.InvoicesWhereThisIsBank.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void InvoicesWhereThisIsBankList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Invoice obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.InvoicesWhereThisIsBank.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.InvoicesWhereThisIsBank.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
            this._invoicesWhereThisIsBankLoaded = false;
            if (this.invoicesWhereThisIsBankList != null)
            {
                this.invoicesWhereThisIsBankList.OnBeforeRemove -= new EventHandler(InvoicesWhereThisIsBankList_OnBeforeRemove);
                this.invoicesWhereThisIsBankList.OnAfterAdd -= new EventHandler(InvoicesWhereThisIsBankList_OnAfterAdd);
            }
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region BankBOComparer
    public class BankBOComparer : IComparer<Indico.BusinessObjects.BankBO>
    {
        private string propertyToCompareName;
        public BankBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.BankBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.BankBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public BankBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.BankBO> Members
        public int Compare(Indico.BusinessObjects.BankBO x, Indico.BusinessObjects.BankBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.BankBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.BankBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.BankBO x, Indico.BusinessObjects.BankBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
