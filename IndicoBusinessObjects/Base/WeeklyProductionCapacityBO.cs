// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class WeeklyProductionCapacityBO : BusinessObject, IComparable
    {
        #region fields
        #region Scalar Fields
        private int id;
        private int _capacity;
        private DateTime? _estimatedDateOfArrival;
        private DateTime? _estimatedDateOfDespatch;
        private decimal? _hoursPerDay;
        private int _noOfHolidays;
        private string _notes;
        private DateTime? _orderCutOffDate;
        private decimal? _salesTarget;
        private DateTime _weekendDate = DateTime.MinValue;
        private int _weekNo;
        #endregion
        
        #region Foreign Key fields
        #endregion
        
        #region Foreign Table Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO> distributorSendMailCountsWhereThisIsWeeklyProductionCapacityList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _distributorSendMailCountsWhereThisIsWeeklyProductionCapacityLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.InvoiceBO> invoicesWhereThisIsWeeklyProductionCapacityList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _invoicesWhereThisIsWeeklyProductionCapacityLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.PackingListBO> packingListsWhereThisIsWeeklyProductionCapacityList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _packingListsWhereThisIsWeeklyProductionCapacityLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.ProductionPlanningBO> productionPlanningsWhereThisIsWeeklyProductionCapacityList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _productionPlanningsWhereThisIsWeeklyProductionCapacityLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.WeeklyProductionCapacityDetailsBO> weeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacityList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _weeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacityLoaded;
        #endregion
        
        #region Other fields
        
        private Indico.DAL.WeeklyProductionCapacity _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>The capacity for this period.</summary>
        public int Capacity
        {   
            get {return _capacity;}
            set 
            {
                OnCapacityChanging(value);
                _capacity = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Capacity = value;
                }
                OnCapacityChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime? EstimatedDateOfArrival
        {   
            get {return _estimatedDateOfArrival;}
            set 
            {
                OnEstimatedDateOfArrivalChanging(value);
                _estimatedDateOfArrival = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.EstimatedDateOfArrival = value;
                }
                OnEstimatedDateOfArrivalChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime? EstimatedDateOfDespatch
        {   
            get {return _estimatedDateOfDespatch;}
            set 
            {
                OnEstimatedDateOfDespatchChanging(value);
                _estimatedDateOfDespatch = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.EstimatedDateOfDespatch = value;
                }
                OnEstimatedDateOfDespatchChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? HoursPerDay
        {   
            get {return _hoursPerDay;}
            set 
            {
                OnHoursPerDayChanging(value);
                _hoursPerDay = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.HoursPerDay = value;
                }
                OnHoursPerDayChanged();
            }
        }
        /// <summary>Number of holidays for this period.</summary>
        public int NoOfHolidays
        {   
            get {return _noOfHolidays;}
            set 
            {
                OnNoOfHolidaysChanging(value);
                _noOfHolidays = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.NoOfHolidays = value;
                }
                OnNoOfHolidaysChanged();
            }
        }
        /// <summary>Notes if available for this period. The maximum length of this property is 512.</summary>
        public string Notes
        {   
            get {return _notes;}
            set 
            {
                OnNotesChanging(value);
                _notes = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Notes = value;
                }
                OnNotesChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime? OrderCutOffDate
        {   
            get {return _orderCutOffDate;}
            set 
            {
                OnOrderCutOffDateChanging(value);
                _orderCutOffDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.OrderCutOffDate = value;
                }
                OnOrderCutOffDateChanged();
            }
        }
        /// <summary>.</summary>
        public decimal? SalesTarget
        {   
            get {return _salesTarget;}
            set 
            {
                OnSalesTargetChanging(value);
                _salesTarget = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.SalesTarget = value;
                }
                OnSalesTargetChanged();
            }
        }
        /// <summary>Week end date of the week period.</summary>
        public DateTime WeekendDate
        {   
            get {return _weekendDate;}
            set 
            {
                OnWeekendDateChanging(value);
                _weekendDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.WeekendDate = value;
                }
                OnWeekendDateChanged();
            }
        }
        /// <summary>Week no of the year.</summary>
        public int WeekNo
        {   
            get {return _weekNo;}
            set 
            {
                OnWeekNoChanging(value);
                _weekNo = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.WeekNo = value;
                }
                OnWeekNoChanged();
            }
        }
        
        internal Indico.DAL.WeeklyProductionCapacity ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        #endregion
        
        #region Foreign Object Foreign Key Collections
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO> DistributorSendMailCountsWhereThisIsWeeklyProductionCapacity // FK_DistributorSendMailCount_WeeklyProductionCapacity
        {
            get
            {
                if (!_distributorSendMailCountsWhereThisIsWeeklyProductionCapacityLoaded)
                {
                    _distributorSendMailCountsWhereThisIsWeeklyProductionCapacityLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.WeeklyProductionCapacity obj = (from o in context.WeeklyProductionCapacity
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.DistributorSendMailCountsWhereThisIsWeeklyProductionCapacity.Load();
                        distributorSendMailCountsWhereThisIsWeeklyProductionCapacityList = new IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO>(obj.DistributorSendMailCountsWhereThisIsWeeklyProductionCapacity.Count);
                        
                        foreach (Indico.DAL.DistributorSendMailCount o in obj.DistributorSendMailCountsWhereThisIsWeeklyProductionCapacity)
                        {
                            Indico.BusinessObjects.DistributorSendMailCountBO fkObj = new Indico.BusinessObjects.DistributorSendMailCountBO(o, ref this._context);
                            distributorSendMailCountsWhereThisIsWeeklyProductionCapacityList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        distributorSendMailCountsWhereThisIsWeeklyProductionCapacityList = new IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO>();
                    }
                    
                    distributorSendMailCountsWhereThisIsWeeklyProductionCapacityList.OnBeforeRemove += new EventHandler(DistributorSendMailCountsWhereThisIsWeeklyProductionCapacityList_OnBeforeRemove);
                    distributorSendMailCountsWhereThisIsWeeklyProductionCapacityList.OnAfterAdd += new EventHandler(DistributorSendMailCountsWhereThisIsWeeklyProductionCapacityList_OnAfterAdd);
                }
                
                return distributorSendMailCountsWhereThisIsWeeklyProductionCapacityList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.InvoiceBO> InvoicesWhereThisIsWeeklyProductionCapacity // FK_Invoice_WeeklyProductionCapacity
        {
            get
            {
                if (!_invoicesWhereThisIsWeeklyProductionCapacityLoaded)
                {
                    _invoicesWhereThisIsWeeklyProductionCapacityLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.WeeklyProductionCapacity obj = (from o in context.WeeklyProductionCapacity
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.InvoicesWhereThisIsWeeklyProductionCapacity.Load();
                        invoicesWhereThisIsWeeklyProductionCapacityList = new IndicoList<Indico.BusinessObjects.InvoiceBO>(obj.InvoicesWhereThisIsWeeklyProductionCapacity.Count);
                        
                        foreach (Indico.DAL.Invoice o in obj.InvoicesWhereThisIsWeeklyProductionCapacity)
                        {
                            Indico.BusinessObjects.InvoiceBO fkObj = new Indico.BusinessObjects.InvoiceBO(o, ref this._context);
                            invoicesWhereThisIsWeeklyProductionCapacityList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        invoicesWhereThisIsWeeklyProductionCapacityList = new IndicoList<Indico.BusinessObjects.InvoiceBO>();
                    }
                    
                    invoicesWhereThisIsWeeklyProductionCapacityList.OnBeforeRemove += new EventHandler(InvoicesWhereThisIsWeeklyProductionCapacityList_OnBeforeRemove);
                    invoicesWhereThisIsWeeklyProductionCapacityList.OnAfterAdd += new EventHandler(InvoicesWhereThisIsWeeklyProductionCapacityList_OnAfterAdd);
                }
                
                return invoicesWhereThisIsWeeklyProductionCapacityList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.PackingListBO> PackingListsWhereThisIsWeeklyProductionCapacity // FK_PackingList_WeeklyProductionCapacity
        {
            get
            {
                if (!_packingListsWhereThisIsWeeklyProductionCapacityLoaded)
                {
                    _packingListsWhereThisIsWeeklyProductionCapacityLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.WeeklyProductionCapacity obj = (from o in context.WeeklyProductionCapacity
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.PackingListsWhereThisIsWeeklyProductionCapacity.Load();
                        packingListsWhereThisIsWeeklyProductionCapacityList = new IndicoList<Indico.BusinessObjects.PackingListBO>(obj.PackingListsWhereThisIsWeeklyProductionCapacity.Count);
                        
                        foreach (Indico.DAL.PackingList o in obj.PackingListsWhereThisIsWeeklyProductionCapacity)
                        {
                            Indico.BusinessObjects.PackingListBO fkObj = new Indico.BusinessObjects.PackingListBO(o, ref this._context);
                            packingListsWhereThisIsWeeklyProductionCapacityList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        packingListsWhereThisIsWeeklyProductionCapacityList = new IndicoList<Indico.BusinessObjects.PackingListBO>();
                    }
                    
                    packingListsWhereThisIsWeeklyProductionCapacityList.OnBeforeRemove += new EventHandler(PackingListsWhereThisIsWeeklyProductionCapacityList_OnBeforeRemove);
                    packingListsWhereThisIsWeeklyProductionCapacityList.OnAfterAdd += new EventHandler(PackingListsWhereThisIsWeeklyProductionCapacityList_OnAfterAdd);
                }
                
                return packingListsWhereThisIsWeeklyProductionCapacityList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.ProductionPlanningBO> ProductionPlanningsWhereThisIsWeeklyProductionCapacity // FK_ProductionPlanning_WeeklyProductionCapacity
        {
            get
            {
                if (!_productionPlanningsWhereThisIsWeeklyProductionCapacityLoaded)
                {
                    _productionPlanningsWhereThisIsWeeklyProductionCapacityLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.WeeklyProductionCapacity obj = (from o in context.WeeklyProductionCapacity
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.ProductionPlanningsWhereThisIsWeeklyProductionCapacity.Load();
                        productionPlanningsWhereThisIsWeeklyProductionCapacityList = new IndicoList<Indico.BusinessObjects.ProductionPlanningBO>(obj.ProductionPlanningsWhereThisIsWeeklyProductionCapacity.Count);
                        
                        foreach (Indico.DAL.ProductionPlanning o in obj.ProductionPlanningsWhereThisIsWeeklyProductionCapacity)
                        {
                            Indico.BusinessObjects.ProductionPlanningBO fkObj = new Indico.BusinessObjects.ProductionPlanningBO(o, ref this._context);
                            productionPlanningsWhereThisIsWeeklyProductionCapacityList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        productionPlanningsWhereThisIsWeeklyProductionCapacityList = new IndicoList<Indico.BusinessObjects.ProductionPlanningBO>();
                    }
                    
                    productionPlanningsWhereThisIsWeeklyProductionCapacityList.OnBeforeRemove += new EventHandler(ProductionPlanningsWhereThisIsWeeklyProductionCapacityList_OnBeforeRemove);
                    productionPlanningsWhereThisIsWeeklyProductionCapacityList.OnAfterAdd += new EventHandler(ProductionPlanningsWhereThisIsWeeklyProductionCapacityList_OnAfterAdd);
                }
                
                return productionPlanningsWhereThisIsWeeklyProductionCapacityList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.WeeklyProductionCapacityDetailsBO> WeeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacity // FK_WeeklyProductionCapacityDetails_WeeklyProductionCapacity
        {
            get
            {
                if (!_weeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacityLoaded)
                {
                    _weeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacityLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.WeeklyProductionCapacity obj = (from o in context.WeeklyProductionCapacity
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.WeeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacity.Load();
                        weeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacityList = new IndicoList<Indico.BusinessObjects.WeeklyProductionCapacityDetailsBO>(obj.WeeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacity.Count);
                        
                        foreach (Indico.DAL.WeeklyProductionCapacityDetails o in obj.WeeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacity)
                        {
                            Indico.BusinessObjects.WeeklyProductionCapacityDetailsBO fkObj = new Indico.BusinessObjects.WeeklyProductionCapacityDetailsBO(o, ref this._context);
                            weeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacityList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        weeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacityList = new IndicoList<Indico.BusinessObjects.WeeklyProductionCapacityDetailsBO>();
                    }
                    
                    weeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacityList.OnBeforeRemove += new EventHandler(WeeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacityList_OnBeforeRemove);
                    weeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacityList.OnAfterAdd += new EventHandler(WeeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacityList_OnAfterAdd);
                }
                
                return weeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacityList;
            }
        }
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the WeeklyProductionCapacityBO class using the supplied Indico.DAL.WeeklyProductionCapacity. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.WeeklyProductionCapacity whose properties will be used to initialise the WeeklyProductionCapacityBO</param>
        internal WeeklyProductionCapacityBO(Indico.DAL.WeeklyProductionCapacity obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.WeeklyProductionCapacity 
            this.ID = obj.ID;
            
            this.Capacity = obj.Capacity;
            this.EstimatedDateOfArrival = obj.EstimatedDateOfArrival;
            this.EstimatedDateOfDespatch = obj.EstimatedDateOfDespatch;
            this.HoursPerDay = obj.HoursPerDay;
            this.NoOfHolidays = obj.NoOfHolidays;
            this.Notes = obj.Notes;
            this.OrderCutOffDate = obj.OrderCutOffDate;
            this.SalesTarget = obj.SalesTarget;
            this.WeekendDate = obj.WeekendDate;
            this.WeekNo = obj.WeekNo;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.WeeklyProductionCapacity SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.WeeklyProductionCapacity properties
            Indico.DAL.WeeklyProductionCapacity obj = new Indico.DAL.WeeklyProductionCapacity();
            
            if (this.ID > 0)
            {
                obj = context.WeeklyProductionCapacity.FirstOrDefault<WeeklyProductionCapacity>(o => o.ID == this.ID);
            }
            
            obj.Capacity = this.Capacity;
            obj.EstimatedDateOfArrival = this.EstimatedDateOfArrival;
            obj.EstimatedDateOfDespatch = this.EstimatedDateOfDespatch;
            obj.HoursPerDay = this.HoursPerDay;
            obj.NoOfHolidays = this.NoOfHolidays;
            obj.Notes = this.Notes;
            obj.OrderCutOffDate = this.OrderCutOffDate;
            obj.SalesTarget = this.SalesTarget;
            obj.WeekendDate = this.WeekendDate;
            obj.WeekNo = this.WeekNo;
            
            
            if (_distributorSendMailCountsWhereThisIsWeeklyProductionCapacityLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.DistributorSendMailCountBO.ToEntityList(this.DistributorSendMailCountsWhereThisIsWeeklyProductionCapacity, context), 
                    obj.DistributorSendMailCountsWhereThisIsWeeklyProductionCapacity);
            if (_invoicesWhereThisIsWeeklyProductionCapacityLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.InvoiceBO.ToEntityList(this.InvoicesWhereThisIsWeeklyProductionCapacity, context), 
                    obj.InvoicesWhereThisIsWeeklyProductionCapacity);
            if (_packingListsWhereThisIsWeeklyProductionCapacityLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.PackingListBO.ToEntityList(this.PackingListsWhereThisIsWeeklyProductionCapacity, context), 
                    obj.PackingListsWhereThisIsWeeklyProductionCapacity);
            if (_productionPlanningsWhereThisIsWeeklyProductionCapacityLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.ProductionPlanningBO.ToEntityList(this.ProductionPlanningsWhereThisIsWeeklyProductionCapacity, context), 
                    obj.ProductionPlanningsWhereThisIsWeeklyProductionCapacity);
            if (_weeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacityLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.WeeklyProductionCapacityDetailsBO.ToEntityList(this.WeeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacity, context), 
                    obj.WeeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacity);
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.WeeklyProductionCapacity))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.WeeklyProductionCapacity obj = (Indico.DAL.WeeklyProductionCapacity)eObj;
            
            // set the Indico.BusinessObjects.WeeklyProductionCapacityBO properties
            this.ID = obj.ID;
            
            this.Capacity = obj.Capacity;
            this.EstimatedDateOfArrival = obj.EstimatedDateOfArrival;
            this.EstimatedDateOfDespatch = obj.EstimatedDateOfDespatch;
            this.HoursPerDay = obj.HoursPerDay;
            this.NoOfHolidays = obj.NoOfHolidays;
            this.Notes = obj.Notes;
            this.OrderCutOffDate = obj.OrderCutOffDate;
            this.SalesTarget = obj.SalesTarget;
            this.WeekendDate = obj.WeekendDate;
            this.WeekNo = obj.WeekNo;
            
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.WeeklyProductionCapacityBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.WeeklyProductionCapacityBO properties
            this.ID = obj.ID;
            
            this.Capacity = obj.Capacity;
            this.EstimatedDateOfArrival = obj.EstimatedDateOfArrival;
            this.EstimatedDateOfDespatch = obj.EstimatedDateOfDespatch;
            this.HoursPerDay = obj.HoursPerDay;
            this.NoOfHolidays = obj.NoOfHolidays;
            this.Notes = obj.Notes;
            this.OrderCutOffDate = obj.OrderCutOffDate;
            this.SalesTarget = obj.SalesTarget;
            this.WeekendDate = obj.WeekendDate;
            this.WeekNo = obj.WeekNo;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.WeeklyProductionCapacityBO> IQueryableToList(IQueryable<Indico.DAL.WeeklyProductionCapacity> oQuery)
        {
            List<Indico.DAL.WeeklyProductionCapacity> oList = oQuery.ToList();
            List<Indico.BusinessObjects.WeeklyProductionCapacityBO> rList = new List<Indico.BusinessObjects.WeeklyProductionCapacityBO>(oList.Count);
            foreach (Indico.DAL.WeeklyProductionCapacity o in oList)
            {
                Indico.BusinessObjects.WeeklyProductionCapacityBO obj = new Indico.BusinessObjects.WeeklyProductionCapacityBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.WeeklyProductionCapacityBO> ToList(IEnumerable<Indico.DAL.WeeklyProductionCapacity> oQuery)
        {
            List<Indico.DAL.WeeklyProductionCapacity> oList = oQuery.ToList();
            List<Indico.BusinessObjects.WeeklyProductionCapacityBO> rList = new List<Indico.BusinessObjects.WeeklyProductionCapacityBO>(oList.Count);
            foreach (Indico.DAL.WeeklyProductionCapacity o in oList)
            {
                Indico.BusinessObjects.WeeklyProductionCapacityBO obj = new Indico.BusinessObjects.WeeklyProductionCapacityBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.WeeklyProductionCapacity> ToEntityList(List<WeeklyProductionCapacityBO> bos, IndicoEntities context)
        {
            // build a List of WeeklyProductionCapacity entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.WeeklyProductionCapacity.Count() == 0) ? new List<Indico.DAL.WeeklyProductionCapacity>() : (context.WeeklyProductionCapacity.Where(BuildContainsExpression<WeeklyProductionCapacity, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.WeeklyProductionCapacity>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.WeeklyProductionCapacity> ToEntityCollection(List<WeeklyProductionCapacityBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of WeeklyProductionCapacity entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.WeeklyProductionCapacity> el = (context.WeeklyProductionCapacity.Count() == 0) ? new List<Indico.DAL.WeeklyProductionCapacity>() : 
                context.WeeklyProductionCapacity.Where(BuildContainsExpression<WeeklyProductionCapacity, int>(e => e.ID, ids))
                .ToList<Indico.DAL.WeeklyProductionCapacity>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.WeeklyProductionCapacity> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.WeeklyProductionCapacity>();
                
            foreach (Indico.DAL.WeeklyProductionCapacity r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.WeeklyProductionCapacity ToEntity(IndicoEntities context)
        {
            return (from o in context.WeeklyProductionCapacity
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToWeeklyProductionCapacity(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.WeeklyProductionCapacity obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToWeeklyProductionCapacity(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.WeeklyProductionCapacity obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.WeeklyProductionCapacity obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.WeeklyProductionCapacityBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.WeeklyProductionCapacityBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.WeeklyProductionCapacity> oQuery =
                        from o in context.WeeklyProductionCapacity
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.WeeklyProductionCapacity> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.WeeklyProductionCapacityBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.WeeklyProductionCapacityBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.WeeklyProductionCapacityBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.WeeklyProductionCapacityBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.WeeklyProductionCapacity> oQuery =
                (from o in context.WeeklyProductionCapacity
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.WeeklyProductionCapacityBO> weeklyproductioncapacitys = IQueryableToList(oQuery);
            context.Dispose();
            return weeklyproductioncapacitys;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.WeeklyProductionCapacityBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.WeeklyProductionCapacityBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.WeeklyProductionCapacityBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.WeeklyProductionCapacityBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.WeeklyProductionCapacity> oQuery =
                (from o in context.WeeklyProductionCapacity
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.WeekNo == 0 || this.WeekNo == o.WeekNo) &&
                    (this.WeekendDate == DateTime.MinValue || this.WeekendDate == o.WeekendDate) &&
                    (this.Capacity == 0 || this.Capacity == o.Capacity) &&
                    (this.Notes == null || this.Notes == o.Notes) &&
                    (this.NoOfHolidays == 0 || this.NoOfHolidays == o.NoOfHolidays) &&
                    (this.SalesTarget == null || this.SalesTarget == o.SalesTarget) &&
                    (this.HoursPerDay == null || this.HoursPerDay == o.HoursPerDay) &&
                    (this.OrderCutOffDate == null || this.OrderCutOffDate == o.OrderCutOffDate) &&
                    (this.EstimatedDateOfDespatch == null || this.EstimatedDateOfDespatch == o.EstimatedDateOfDespatch) &&
                    (this.EstimatedDateOfArrival == null || this.EstimatedDateOfArrival == o.EstimatedDateOfArrival) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.WeeklyProductionCapacityBO> weeklyproductioncapacitys = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return weeklyproductioncapacitys;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.WeeklyProductionCapacity
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.WeekNo == 0 || this.WeekNo == o.WeekNo) &&
                    (this.WeekendDate == DateTime.MinValue || this.WeekendDate == o.WeekendDate) &&
                    (this.Capacity == 0 || this.Capacity == o.Capacity) &&
                    (this.Notes == null || this.Notes == o.Notes) &&
                    (this.NoOfHolidays == 0 || this.NoOfHolidays == o.NoOfHolidays) &&
                    (this.SalesTarget == null || this.SalesTarget == o.SalesTarget) &&
                    (this.HoursPerDay == null || this.HoursPerDay == o.HoursPerDay) &&
                    (this.OrderCutOffDate == null || this.OrderCutOffDate == o.OrderCutOffDate) &&
                    (this.EstimatedDateOfDespatch == null || this.EstimatedDateOfDespatch == o.EstimatedDateOfDespatch) &&
                    (this.EstimatedDateOfArrival == null || this.EstimatedDateOfArrival == o.EstimatedDateOfArrival) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.WeeklyProductionCapacityBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.WeeklyProductionCapacityBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.WeeklyProductionCapacityBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.WeeklyProductionCapacityBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.WeeklyProductionCapacity> oQuery =
                (from o in context.WeeklyProductionCapacity
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.WeekNo == 0 || o.WeekNo == this.WeekNo) &&
                    (this.WeekendDate == DateTime.MinValue || o.WeekendDate == this.WeekendDate) &&
                    (this.Capacity == 0 || o.Capacity == this.Capacity) &&
                    (this.Notes == null || o.Notes.Contains(this.Notes)) &&
                    (this.NoOfHolidays == 0 || o.NoOfHolidays == this.NoOfHolidays) &&
                    (this.SalesTarget == null || o.SalesTarget == this.SalesTarget) &&
                    (this.HoursPerDay == null || o.HoursPerDay == this.HoursPerDay) &&
                    (this.OrderCutOffDate == null || o.OrderCutOffDate == this.OrderCutOffDate) &&
                    (this.EstimatedDateOfDespatch == null || o.EstimatedDateOfDespatch == this.EstimatedDateOfDespatch) &&
                    (this.EstimatedDateOfArrival == null || o.EstimatedDateOfArrival == this.EstimatedDateOfArrival) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.WeeklyProductionCapacityBO> weeklyproductioncapacitys = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return weeklyproductioncapacitys;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.WeeklyProductionCapacity
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.WeekNo == 0 || o.WeekNo == this.WeekNo) &&
                    (this.WeekendDate == DateTime.MinValue || o.WeekendDate == this.WeekendDate) &&
                    (this.Capacity == 0 || o.Capacity == this.Capacity) &&
                    (this.Notes == null || o.Notes.Contains(this.Notes)) &&
                    (this.NoOfHolidays == 0 || o.NoOfHolidays == this.NoOfHolidays) &&
                    (this.SalesTarget == null || o.SalesTarget == this.SalesTarget) &&
                    (this.HoursPerDay == null || o.HoursPerDay == this.HoursPerDay) &&
                    (this.OrderCutOffDate == null || o.OrderCutOffDate == this.OrderCutOffDate) &&
                    (this.EstimatedDateOfDespatch == null || o.EstimatedDateOfDespatch == this.EstimatedDateOfDespatch) &&
                    (this.EstimatedDateOfArrival == null || o.EstimatedDateOfArrival == this.EstimatedDateOfArrival) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.WeeklyProductionCapacityBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.WeeklyProductionCapacityBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.WeeklyProductionCapacityBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.WeeklyProductionCapacityBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.WeeklyProductionCapacity> oQuery =
                (from o in context.WeeklyProductionCapacity
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.WeekNo == 0 || this.WeekNo == o.WeekNo) && 
                    (this.WeekendDate == DateTime.MinValue || this.WeekendDate == o.WeekendDate) && 
                    (this.Capacity == 0 || this.Capacity == o.Capacity) && 
                    (this.NoOfHolidays == 0 || this.NoOfHolidays == o.NoOfHolidays) && 
                    (this.SalesTarget == null || this.SalesTarget == o.SalesTarget) && 
                    (this.HoursPerDay == null || this.HoursPerDay == o.HoursPerDay) && 
                    (this.OrderCutOffDate == null || this.OrderCutOffDate == o.OrderCutOffDate) && 
                    (this.EstimatedDateOfDespatch == null || this.EstimatedDateOfDespatch == o.EstimatedDateOfDespatch) && 
                    (this.EstimatedDateOfArrival == null || this.EstimatedDateOfArrival == o.EstimatedDateOfArrival) && 
                    ((o.Notes.Contains(this.Notes)) ||
                    (this.Notes == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.WeeklyProductionCapacityBO> weeklyproductioncapacitys = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return weeklyproductioncapacitys;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.WeeklyProductionCapacity
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.WeekNo == 0 || this.WeekNo == o.WeekNo) && 
                    (this.WeekendDate == DateTime.MinValue || this.WeekendDate == o.WeekendDate) && 
                    (this.Capacity == 0 || this.Capacity == o.Capacity) && 
                    (this.NoOfHolidays == 0 || this.NoOfHolidays == o.NoOfHolidays) && 
                    (this.SalesTarget == null || this.SalesTarget == o.SalesTarget) && 
                    (this.HoursPerDay == null || this.HoursPerDay == o.HoursPerDay) && 
                    (this.OrderCutOffDate == null || this.OrderCutOffDate == o.OrderCutOffDate) && 
                    (this.EstimatedDateOfDespatch == null || this.EstimatedDateOfDespatch == o.EstimatedDateOfDespatch) && 
                    (this.EstimatedDateOfArrival == null || this.EstimatedDateOfArrival == o.EstimatedDateOfArrival) && 
                    ((o.Notes.Contains(this.Notes)) ||
                    (this.Notes == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.WeeklyProductionCapacityBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.WeeklyProductionCapacityBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.WeeklyProductionCapacityBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.WeeklyProductionCapacityBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.WeeklyProductionCapacityBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.WeeklyProductionCapacityBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnWeeklyProductionCapacityBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("WeeklyProductionCapacityBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnWeeklyProductionCapacityBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnWeeklyProductionCapacityBOIDChanged();
        partial void OnWeeklyProductionCapacityBOIDChanging(int value);
        
        partial void OnWeekNoChanged()
        {
            OnWeeklyProductionCapacityBOWeekNoChanged();
        }
        
        partial void OnWeekNoChanging(int value)
        {
            OnWeeklyProductionCapacityBOWeekNoChanging(value);
        }
        partial void OnWeekNoChanged();
        partial void OnWeekNoChanging(int value);
        partial void OnWeeklyProductionCapacityBOWeekNoChanged();
        partial void OnWeeklyProductionCapacityBOWeekNoChanging(int value);
        
        partial void OnWeekendDateChanged()
        {
            OnWeeklyProductionCapacityBOWeekendDateChanged();
        }
        
        partial void OnWeekendDateChanging(DateTime value)
        {
            OnWeeklyProductionCapacityBOWeekendDateChanging(value);
        }
        partial void OnWeekendDateChanged();
        partial void OnWeekendDateChanging(DateTime value);
        partial void OnWeeklyProductionCapacityBOWeekendDateChanged();
        partial void OnWeeklyProductionCapacityBOWeekendDateChanging(DateTime value);
        
        partial void OnCapacityChanged()
        {
            OnWeeklyProductionCapacityBOCapacityChanged();
        }
        
        partial void OnCapacityChanging(int value)
        {
            OnWeeklyProductionCapacityBOCapacityChanging(value);
        }
        partial void OnCapacityChanged();
        partial void OnCapacityChanging(int value);
        partial void OnWeeklyProductionCapacityBOCapacityChanged();
        partial void OnWeeklyProductionCapacityBOCapacityChanging(int value);
        
        partial void OnNotesChanged()
        {
            OnWeeklyProductionCapacityBONotesChanged();
        }
        
        partial void OnNotesChanging(string value)
        {
            if (value != null && value.Length > 512)
            {
                throw new Exception(String.Format("WeeklyProductionCapacityBO.Notes has a maximum length of 512. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnWeeklyProductionCapacityBONotesChanging(value);
        }
        partial void OnNotesChanged();
        partial void OnNotesChanging(string value);
        partial void OnWeeklyProductionCapacityBONotesChanged();
        partial void OnWeeklyProductionCapacityBONotesChanging(string value);
        
        partial void OnNoOfHolidaysChanged()
        {
            OnWeeklyProductionCapacityBONoOfHolidaysChanged();
        }
        
        partial void OnNoOfHolidaysChanging(int value)
        {
            OnWeeklyProductionCapacityBONoOfHolidaysChanging(value);
        }
        partial void OnNoOfHolidaysChanged();
        partial void OnNoOfHolidaysChanging(int value);
        partial void OnWeeklyProductionCapacityBONoOfHolidaysChanged();
        partial void OnWeeklyProductionCapacityBONoOfHolidaysChanging(int value);
        
        partial void OnSalesTargetChanged()
        {
            OnWeeklyProductionCapacityBOSalesTargetChanged();
        }
        
        partial void OnSalesTargetChanging(decimal? value)
        {
            OnWeeklyProductionCapacityBOSalesTargetChanging(value);
        }
        partial void OnSalesTargetChanged();
        partial void OnSalesTargetChanging(decimal? value);
        partial void OnWeeklyProductionCapacityBOSalesTargetChanged();
        partial void OnWeeklyProductionCapacityBOSalesTargetChanging(decimal? value);
        
        partial void OnHoursPerDayChanged()
        {
            OnWeeklyProductionCapacityBOHoursPerDayChanged();
        }
        
        partial void OnHoursPerDayChanging(decimal? value)
        {
            OnWeeklyProductionCapacityBOHoursPerDayChanging(value);
        }
        partial void OnHoursPerDayChanged();
        partial void OnHoursPerDayChanging(decimal? value);
        partial void OnWeeklyProductionCapacityBOHoursPerDayChanged();
        partial void OnWeeklyProductionCapacityBOHoursPerDayChanging(decimal? value);
        
        partial void OnOrderCutOffDateChanged()
        {
            OnWeeklyProductionCapacityBOOrderCutOffDateChanged();
        }
        
        partial void OnOrderCutOffDateChanging(DateTime? value)
        {
            OnWeeklyProductionCapacityBOOrderCutOffDateChanging(value);
        }
        partial void OnOrderCutOffDateChanged();
        partial void OnOrderCutOffDateChanging(DateTime? value);
        partial void OnWeeklyProductionCapacityBOOrderCutOffDateChanged();
        partial void OnWeeklyProductionCapacityBOOrderCutOffDateChanging(DateTime? value);
        
        partial void OnEstimatedDateOfDespatchChanged()
        {
            OnWeeklyProductionCapacityBOEstimatedDateOfDespatchChanged();
        }
        
        partial void OnEstimatedDateOfDespatchChanging(DateTime? value)
        {
            OnWeeklyProductionCapacityBOEstimatedDateOfDespatchChanging(value);
        }
        partial void OnEstimatedDateOfDespatchChanged();
        partial void OnEstimatedDateOfDespatchChanging(DateTime? value);
        partial void OnWeeklyProductionCapacityBOEstimatedDateOfDespatchChanged();
        partial void OnWeeklyProductionCapacityBOEstimatedDateOfDespatchChanging(DateTime? value);
        
        partial void OnEstimatedDateOfArrivalChanged()
        {
            OnWeeklyProductionCapacityBOEstimatedDateOfArrivalChanged();
        }
        
        partial void OnEstimatedDateOfArrivalChanging(DateTime? value)
        {
            OnWeeklyProductionCapacityBOEstimatedDateOfArrivalChanging(value);
        }
        partial void OnEstimatedDateOfArrivalChanged();
        partial void OnEstimatedDateOfArrivalChanging(DateTime? value);
        partial void OnWeeklyProductionCapacityBOEstimatedDateOfArrivalChanged();
        partial void OnWeeklyProductionCapacityBOEstimatedDateOfArrivalChanging(DateTime? value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.WeeklyProductionCapacityBO))
                return 1;
            Indico.BusinessObjects.WeeklyProductionCapacityBOComparer c = new Indico.BusinessObjects.WeeklyProductionCapacityBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.WeeklyProductionCapacityBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.WeeklyProductionCapacity)sender);
            }
        }
        
        void DistributorSendMailCountsWhereThisIsWeeklyProductionCapacityList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.DistributorSendMailCount obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.DistributorSendMailCountsWhereThisIsWeeklyProductionCapacity.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.DistributorSendMailCountsWhereThisIsWeeklyProductionCapacity.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void DistributorSendMailCountsWhereThisIsWeeklyProductionCapacityList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.DistributorSendMailCount obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.DistributorSendMailCountsWhereThisIsWeeklyProductionCapacity.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorSendMailCountBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.DistributorSendMailCountsWhereThisIsWeeklyProductionCapacity.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void InvoicesWhereThisIsWeeklyProductionCapacityList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Invoice obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.InvoicesWhereThisIsWeeklyProductionCapacity.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.InvoicesWhereThisIsWeeklyProductionCapacity.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void InvoicesWhereThisIsWeeklyProductionCapacityList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Invoice obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.InvoicesWhereThisIsWeeklyProductionCapacity.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.InvoicesWhereThisIsWeeklyProductionCapacity.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PackingListsWhereThisIsWeeklyProductionCapacityList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.PackingList obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PackingListBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PackingListBO>)sender)[((IndicoList<Indico.BusinessObjects.PackingListBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PackingListsWhereThisIsWeeklyProductionCapacity.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PackingListBO>)sender)[((IndicoList<Indico.BusinessObjects.PackingListBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PackingListsWhereThisIsWeeklyProductionCapacity.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PackingListsWhereThisIsWeeklyProductionCapacityList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.PackingList obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PackingListBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PackingListBO>)sender)[((IndicoList<Indico.BusinessObjects.PackingListBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PackingListsWhereThisIsWeeklyProductionCapacity.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PackingListBO>)sender)[((IndicoList<Indico.BusinessObjects.PackingListBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PackingListsWhereThisIsWeeklyProductionCapacity.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void ProductionPlanningsWhereThisIsWeeklyProductionCapacityList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.ProductionPlanning obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.ProductionPlanningBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.ProductionPlanningBO>)sender)[((IndicoList<Indico.BusinessObjects.ProductionPlanningBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.ProductionPlanningsWhereThisIsWeeklyProductionCapacity.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.ProductionPlanningBO>)sender)[((IndicoList<Indico.BusinessObjects.ProductionPlanningBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.ProductionPlanningsWhereThisIsWeeklyProductionCapacity.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void ProductionPlanningsWhereThisIsWeeklyProductionCapacityList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.ProductionPlanning obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.ProductionPlanningBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.ProductionPlanningBO>)sender)[((IndicoList<Indico.BusinessObjects.ProductionPlanningBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.ProductionPlanningsWhereThisIsWeeklyProductionCapacity.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.ProductionPlanningBO>)sender)[((IndicoList<Indico.BusinessObjects.ProductionPlanningBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.ProductionPlanningsWhereThisIsWeeklyProductionCapacity.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void WeeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacityList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.WeeklyProductionCapacityDetails obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.WeeklyProductionCapacityDetailsBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.WeeklyProductionCapacityDetailsBO>)sender)[((IndicoList<Indico.BusinessObjects.WeeklyProductionCapacityDetailsBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.WeeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacity.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.WeeklyProductionCapacityDetailsBO>)sender)[((IndicoList<Indico.BusinessObjects.WeeklyProductionCapacityDetailsBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.WeeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacity.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void WeeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacityList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.WeeklyProductionCapacityDetails obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.WeeklyProductionCapacityDetailsBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.WeeklyProductionCapacityDetailsBO>)sender)[((IndicoList<Indico.BusinessObjects.WeeklyProductionCapacityDetailsBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.WeeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacity.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.WeeklyProductionCapacityDetailsBO>)sender)[((IndicoList<Indico.BusinessObjects.WeeklyProductionCapacityDetailsBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.WeeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacity.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
            this._distributorSendMailCountsWhereThisIsWeeklyProductionCapacityLoaded = false;
            if (this.distributorSendMailCountsWhereThisIsWeeklyProductionCapacityList != null)
            {
                this.distributorSendMailCountsWhereThisIsWeeklyProductionCapacityList.OnBeforeRemove -= new EventHandler(DistributorSendMailCountsWhereThisIsWeeklyProductionCapacityList_OnBeforeRemove);
                this.distributorSendMailCountsWhereThisIsWeeklyProductionCapacityList.OnAfterAdd -= new EventHandler(DistributorSendMailCountsWhereThisIsWeeklyProductionCapacityList_OnAfterAdd);
            }
            this._invoicesWhereThisIsWeeklyProductionCapacityLoaded = false;
            if (this.invoicesWhereThisIsWeeklyProductionCapacityList != null)
            {
                this.invoicesWhereThisIsWeeklyProductionCapacityList.OnBeforeRemove -= new EventHandler(InvoicesWhereThisIsWeeklyProductionCapacityList_OnBeforeRemove);
                this.invoicesWhereThisIsWeeklyProductionCapacityList.OnAfterAdd -= new EventHandler(InvoicesWhereThisIsWeeklyProductionCapacityList_OnAfterAdd);
            }
            this._packingListsWhereThisIsWeeklyProductionCapacityLoaded = false;
            if (this.packingListsWhereThisIsWeeklyProductionCapacityList != null)
            {
                this.packingListsWhereThisIsWeeklyProductionCapacityList.OnBeforeRemove -= new EventHandler(PackingListsWhereThisIsWeeklyProductionCapacityList_OnBeforeRemove);
                this.packingListsWhereThisIsWeeklyProductionCapacityList.OnAfterAdd -= new EventHandler(PackingListsWhereThisIsWeeklyProductionCapacityList_OnAfterAdd);
            }
            this._productionPlanningsWhereThisIsWeeklyProductionCapacityLoaded = false;
            if (this.productionPlanningsWhereThisIsWeeklyProductionCapacityList != null)
            {
                this.productionPlanningsWhereThisIsWeeklyProductionCapacityList.OnBeforeRemove -= new EventHandler(ProductionPlanningsWhereThisIsWeeklyProductionCapacityList_OnBeforeRemove);
                this.productionPlanningsWhereThisIsWeeklyProductionCapacityList.OnAfterAdd -= new EventHandler(ProductionPlanningsWhereThisIsWeeklyProductionCapacityList_OnAfterAdd);
            }
            this._weeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacityLoaded = false;
            if (this.weeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacityList != null)
            {
                this.weeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacityList.OnBeforeRemove -= new EventHandler(WeeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacityList_OnBeforeRemove);
                this.weeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacityList.OnAfterAdd -= new EventHandler(WeeklyProductionCapacityDetailssWhereThisIsWeeklyProductionCapacityList_OnAfterAdd);
            }
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region WeeklyProductionCapacityBOComparer
    public class WeeklyProductionCapacityBOComparer : IComparer<Indico.BusinessObjects.WeeklyProductionCapacityBO>
    {
        private string propertyToCompareName;
        public WeeklyProductionCapacityBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.WeeklyProductionCapacityBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.WeeklyProductionCapacityBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public WeeklyProductionCapacityBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.WeeklyProductionCapacityBO> Members
        public int Compare(Indico.BusinessObjects.WeeklyProductionCapacityBO x, Indico.BusinessObjects.WeeklyProductionCapacityBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.WeeklyProductionCapacityBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.WeeklyProductionCapacityBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.WeeklyProductionCapacityBO x, Indico.BusinessObjects.WeeklyProductionCapacityBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
