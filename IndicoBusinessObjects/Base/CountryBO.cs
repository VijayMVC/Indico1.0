// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class CountryBO : BusinessObject, IComparable
    {
        #region fields
        #region Scalar Fields
        private int id;
        private int? _dialingPrefix;
        private bool _hasLocationData;
        private string _iso2 = string.Empty;
        private string _iso3 = string.Empty;
        private int _isoCountryNumber;
        private string _name = string.Empty;
        private string _shortName = string.Empty;
        #endregion
        
        #region Foreign Key fields
        #endregion
        
        #region Foreign Table Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.BankBO> banksWhereThisIsCountryList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _banksWhereThisIsCountryLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.CompanyBO> companysWhereThisIsCountryList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _companysWhereThisIsCountryLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.DistributorClientAddressBO> distributorClientAddresssWhereThisIsCountryList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _distributorClientAddresssWhereThisIsCountryLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.FabricCodeBO> fabricCodesWhereThisIsCountryList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _fabricCodesWhereThisIsCountryLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.PatternSupplierBO> patternSuppliersWhereThisIsCountryList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _patternSuppliersWhereThisIsCountryLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.SupplierBO> suppliersWhereThisIsCountryList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _suppliersWhereThisIsCountryLoaded;
        #endregion
        
        #region Other fields
        
        private Indico.DAL.Country _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>The dialing prefix for the Company.</summary>
        public int? DialingPrefix
        {   
            get {return _dialingPrefix;}
            set 
            {
                OnDialingPrefixChanging(value);
                _dialingPrefix = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.DialingPrefix = value;
                }
                OnDialingPrefixChanged();
            }
        }
        /// <summary>true if the country has location data in the Location table.</summary>
        public bool HasLocationData
        {   
            get {return _hasLocationData;}
            set 
            {
                OnHasLocationDataChanging(value);
                _hasLocationData = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.HasLocationData = value;
                }
                OnHasLocationDataChanged();
            }
        }
        /// <summary>The ISO2 code for the country. The maximum length of this property is 2.</summary>
        public string Iso2
        {   
            get {return _iso2;}
            set 
            {
                OnIso2Changing(value);
                _iso2 = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Iso2 = value;
                }
                OnIso2Changed();
            }
        }
        /// <summary>The ISO3 code for the Country. The maximum length of this property is 3.</summary>
        public string Iso3
        {   
            get {return _iso3;}
            set 
            {
                OnIso3Changing(value);
                _iso3 = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Iso3 = value;
                }
                OnIso3Changed();
            }
        }
        /// <summary>The ISO Country number.</summary>
        public int IsoCountryNumber
        {   
            get {return _isoCountryNumber;}
            set 
            {
                OnIsoCountryNumberChanging(value);
                _isoCountryNumber = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IsoCountryNumber = value;
                }
                OnIsoCountryNumberChanged();
            }
        }
        /// <summary>The Country's name. The maximum length of this property is 50.</summary>
        public string Name
        {   
            get {return _name;}
            set 
            {
                OnNameChanging(value);
                _name = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Name = value;
                }
                OnNameChanged();
            }
        }
        /// <summary>The Country's short name. The maximum length of this property is 50.</summary>
        public string ShortName
        {   
            get {return _shortName;}
            set 
            {
                OnShortNameChanging(value);
                _shortName = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ShortName = value;
                }
                OnShortNameChanged();
            }
        }
        
        internal Indico.DAL.Country ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        #endregion
        
        #region Foreign Object Foreign Key Collections
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.BankBO> BanksWhereThisIsCountry // FK_Bank_Country
        {
            get
            {
                if (!_banksWhereThisIsCountryLoaded)
                {
                    _banksWhereThisIsCountryLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Country obj = (from o in context.Country
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.BanksWhereThisIsCountry.Load();
                        banksWhereThisIsCountryList = new IndicoList<Indico.BusinessObjects.BankBO>(obj.BanksWhereThisIsCountry.Count);
                        
                        foreach (Indico.DAL.Bank o in obj.BanksWhereThisIsCountry)
                        {
                            Indico.BusinessObjects.BankBO fkObj = new Indico.BusinessObjects.BankBO(o, ref this._context);
                            banksWhereThisIsCountryList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        banksWhereThisIsCountryList = new IndicoList<Indico.BusinessObjects.BankBO>();
                    }
                    
                    banksWhereThisIsCountryList.OnBeforeRemove += new EventHandler(BanksWhereThisIsCountryList_OnBeforeRemove);
                    banksWhereThisIsCountryList.OnAfterAdd += new EventHandler(BanksWhereThisIsCountryList_OnAfterAdd);
                }
                
                return banksWhereThisIsCountryList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.CompanyBO> CompanysWhereThisIsCountry // FK_Company_Country
        {
            get
            {
                if (!_companysWhereThisIsCountryLoaded)
                {
                    _companysWhereThisIsCountryLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Country obj = (from o in context.Country
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.CompanysWhereThisIsCountry.Load();
                        companysWhereThisIsCountryList = new IndicoList<Indico.BusinessObjects.CompanyBO>(obj.CompanysWhereThisIsCountry.Count);
                        
                        foreach (Indico.DAL.Company o in obj.CompanysWhereThisIsCountry)
                        {
                            Indico.BusinessObjects.CompanyBO fkObj = new Indico.BusinessObjects.CompanyBO(o, ref this._context);
                            companysWhereThisIsCountryList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        companysWhereThisIsCountryList = new IndicoList<Indico.BusinessObjects.CompanyBO>();
                    }
                    
                    companysWhereThisIsCountryList.OnBeforeRemove += new EventHandler(CompanysWhereThisIsCountryList_OnBeforeRemove);
                    companysWhereThisIsCountryList.OnAfterAdd += new EventHandler(CompanysWhereThisIsCountryList_OnAfterAdd);
                }
                
                return companysWhereThisIsCountryList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.DistributorClientAddressBO> DistributorClientAddresssWhereThisIsCountry // FK_DistributorAddressr_Country
        {
            get
            {
                if (!_distributorClientAddresssWhereThisIsCountryLoaded)
                {
                    _distributorClientAddresssWhereThisIsCountryLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Country obj = (from o in context.Country
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.DistributorClientAddresssWhereThisIsCountry.Load();
                        distributorClientAddresssWhereThisIsCountryList = new IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>(obj.DistributorClientAddresssWhereThisIsCountry.Count);
                        
                        foreach (Indico.DAL.DistributorClientAddress o in obj.DistributorClientAddresssWhereThisIsCountry)
                        {
                            Indico.BusinessObjects.DistributorClientAddressBO fkObj = new Indico.BusinessObjects.DistributorClientAddressBO(o, ref this._context);
                            distributorClientAddresssWhereThisIsCountryList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        distributorClientAddresssWhereThisIsCountryList = new IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>();
                    }
                    
                    distributorClientAddresssWhereThisIsCountryList.OnBeforeRemove += new EventHandler(DistributorClientAddresssWhereThisIsCountryList_OnBeforeRemove);
                    distributorClientAddresssWhereThisIsCountryList.OnAfterAdd += new EventHandler(DistributorClientAddresssWhereThisIsCountryList_OnAfterAdd);
                }
                
                return distributorClientAddresssWhereThisIsCountryList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.FabricCodeBO> FabricCodesWhereThisIsCountry // FK_FabricCode_Country
        {
            get
            {
                if (!_fabricCodesWhereThisIsCountryLoaded)
                {
                    _fabricCodesWhereThisIsCountryLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Country obj = (from o in context.Country
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.FabricCodesWhereThisIsCountry.Load();
                        fabricCodesWhereThisIsCountryList = new IndicoList<Indico.BusinessObjects.FabricCodeBO>(obj.FabricCodesWhereThisIsCountry.Count);
                        
                        foreach (Indico.DAL.FabricCode o in obj.FabricCodesWhereThisIsCountry)
                        {
                            Indico.BusinessObjects.FabricCodeBO fkObj = new Indico.BusinessObjects.FabricCodeBO(o, ref this._context);
                            fabricCodesWhereThisIsCountryList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        fabricCodesWhereThisIsCountryList = new IndicoList<Indico.BusinessObjects.FabricCodeBO>();
                    }
                    
                    fabricCodesWhereThisIsCountryList.OnBeforeRemove += new EventHandler(FabricCodesWhereThisIsCountryList_OnBeforeRemove);
                    fabricCodesWhereThisIsCountryList.OnAfterAdd += new EventHandler(FabricCodesWhereThisIsCountryList_OnAfterAdd);
                }
                
                return fabricCodesWhereThisIsCountryList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.PatternSupplierBO> PatternSuppliersWhereThisIsCountry // FK_PatternSupplier_Country
        {
            get
            {
                if (!_patternSuppliersWhereThisIsCountryLoaded)
                {
                    _patternSuppliersWhereThisIsCountryLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Country obj = (from o in context.Country
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.PatternSuppliersWhereThisIsCountry.Load();
                        patternSuppliersWhereThisIsCountryList = new IndicoList<Indico.BusinessObjects.PatternSupplierBO>(obj.PatternSuppliersWhereThisIsCountry.Count);
                        
                        foreach (Indico.DAL.PatternSupplier o in obj.PatternSuppliersWhereThisIsCountry)
                        {
                            Indico.BusinessObjects.PatternSupplierBO fkObj = new Indico.BusinessObjects.PatternSupplierBO(o, ref this._context);
                            patternSuppliersWhereThisIsCountryList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        patternSuppliersWhereThisIsCountryList = new IndicoList<Indico.BusinessObjects.PatternSupplierBO>();
                    }
                    
                    patternSuppliersWhereThisIsCountryList.OnBeforeRemove += new EventHandler(PatternSuppliersWhereThisIsCountryList_OnBeforeRemove);
                    patternSuppliersWhereThisIsCountryList.OnAfterAdd += new EventHandler(PatternSuppliersWhereThisIsCountryList_OnAfterAdd);
                }
                
                return patternSuppliersWhereThisIsCountryList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.SupplierBO> SuppliersWhereThisIsCountry // FK_Supplier_Country
        {
            get
            {
                if (!_suppliersWhereThisIsCountryLoaded)
                {
                    _suppliersWhereThisIsCountryLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.Country obj = (from o in context.Country
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.SuppliersWhereThisIsCountry.Load();
                        suppliersWhereThisIsCountryList = new IndicoList<Indico.BusinessObjects.SupplierBO>(obj.SuppliersWhereThisIsCountry.Count);
                        
                        foreach (Indico.DAL.Supplier o in obj.SuppliersWhereThisIsCountry)
                        {
                            Indico.BusinessObjects.SupplierBO fkObj = new Indico.BusinessObjects.SupplierBO(o, ref this._context);
                            suppliersWhereThisIsCountryList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        suppliersWhereThisIsCountryList = new IndicoList<Indico.BusinessObjects.SupplierBO>();
                    }
                    
                    suppliersWhereThisIsCountryList.OnBeforeRemove += new EventHandler(SuppliersWhereThisIsCountryList_OnBeforeRemove);
                    suppliersWhereThisIsCountryList.OnAfterAdd += new EventHandler(SuppliersWhereThisIsCountryList_OnAfterAdd);
                }
                
                return suppliersWhereThisIsCountryList;
            }
        }
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the CountryBO class using the supplied Indico.DAL.Country. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.Country whose properties will be used to initialise the CountryBO</param>
        internal CountryBO(Indico.DAL.Country obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.Country 
            this.ID = obj.ID;
            
            this.DialingPrefix = obj.DialingPrefix;
            this.HasLocationData = obj.HasLocationData;
            this.Iso2 = obj.Iso2;
            this.Iso3 = obj.Iso3;
            this.IsoCountryNumber = obj.IsoCountryNumber;
            this.Name = obj.Name;
            this.ShortName = obj.ShortName;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.Country SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.Country properties
            Indico.DAL.Country obj = new Indico.DAL.Country();
            
            if (this.ID > 0)
            {
                obj = context.Country.FirstOrDefault<Country>(o => o.ID == this.ID);
            }
            
            obj.DialingPrefix = this.DialingPrefix;
            obj.HasLocationData = this.HasLocationData;
            obj.Iso2 = this.Iso2;
            obj.Iso3 = this.Iso3;
            obj.IsoCountryNumber = this.IsoCountryNumber;
            obj.Name = this.Name;
            obj.ShortName = this.ShortName;
            
            
            if (_banksWhereThisIsCountryLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.BankBO.ToEntityList(this.BanksWhereThisIsCountry, context), 
                    obj.BanksWhereThisIsCountry);
            if (_companysWhereThisIsCountryLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.CompanyBO.ToEntityList(this.CompanysWhereThisIsCountry, context), 
                    obj.CompanysWhereThisIsCountry);
            if (_distributorClientAddresssWhereThisIsCountryLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.DistributorClientAddressBO.ToEntityList(this.DistributorClientAddresssWhereThisIsCountry, context), 
                    obj.DistributorClientAddresssWhereThisIsCountry);
            if (_fabricCodesWhereThisIsCountryLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.FabricCodeBO.ToEntityList(this.FabricCodesWhereThisIsCountry, context), 
                    obj.FabricCodesWhereThisIsCountry);
            if (_patternSuppliersWhereThisIsCountryLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.PatternSupplierBO.ToEntityList(this.PatternSuppliersWhereThisIsCountry, context), 
                    obj.PatternSuppliersWhereThisIsCountry);
            if (_suppliersWhereThisIsCountryLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.SupplierBO.ToEntityList(this.SuppliersWhereThisIsCountry, context), 
                    obj.SuppliersWhereThisIsCountry);
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.Country))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.Country obj = (Indico.DAL.Country)eObj;
            
            // set the Indico.BusinessObjects.CountryBO properties
            this.ID = obj.ID;
            
            this.DialingPrefix = obj.DialingPrefix;
            this.HasLocationData = obj.HasLocationData;
            this.Iso2 = obj.Iso2;
            this.Iso3 = obj.Iso3;
            this.IsoCountryNumber = obj.IsoCountryNumber;
            this.Name = obj.Name;
            this.ShortName = obj.ShortName;
            
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.CountryBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.CountryBO properties
            this.ID = obj.ID;
            
            this.DialingPrefix = obj.DialingPrefix;
            this.HasLocationData = obj.HasLocationData;
            this.Iso2 = obj.Iso2;
            this.Iso3 = obj.Iso3;
            this.IsoCountryNumber = obj.IsoCountryNumber;
            this.Name = obj.Name;
            this.ShortName = obj.ShortName;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.CountryBO> IQueryableToList(IQueryable<Indico.DAL.Country> oQuery)
        {
            List<Indico.DAL.Country> oList = oQuery.ToList();
            List<Indico.BusinessObjects.CountryBO> rList = new List<Indico.BusinessObjects.CountryBO>(oList.Count);
            foreach (Indico.DAL.Country o in oList)
            {
                Indico.BusinessObjects.CountryBO obj = new Indico.BusinessObjects.CountryBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.CountryBO> ToList(IEnumerable<Indico.DAL.Country> oQuery)
        {
            List<Indico.DAL.Country> oList = oQuery.ToList();
            List<Indico.BusinessObjects.CountryBO> rList = new List<Indico.BusinessObjects.CountryBO>(oList.Count);
            foreach (Indico.DAL.Country o in oList)
            {
                Indico.BusinessObjects.CountryBO obj = new Indico.BusinessObjects.CountryBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.Country> ToEntityList(List<CountryBO> bos, IndicoEntities context)
        {
            // build a List of Country entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.Country.Count() == 0) ? new List<Indico.DAL.Country>() : (context.Country.Where(BuildContainsExpression<Country, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.Country>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Country> ToEntityCollection(List<CountryBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of Country entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.Country> el = (context.Country.Count() == 0) ? new List<Indico.DAL.Country>() : 
                context.Country.Where(BuildContainsExpression<Country, int>(e => e.ID, ids))
                .ToList<Indico.DAL.Country>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Country> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.Country>();
                
            foreach (Indico.DAL.Country r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.Country ToEntity(IndicoEntities context)
        {
            return (from o in context.Country
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToCountry(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Country obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToCountry(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.Country obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.Country obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.CountryBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.CountryBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.Country> oQuery =
                        from o in context.Country
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.Country> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.CountryBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.CountryBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.CountryBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.CountryBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.Country> oQuery =
                (from o in context.Country
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.CountryBO> countrys = IQueryableToList(oQuery);
            context.Dispose();
            return countrys;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.CountryBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.CountryBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.CountryBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.CountryBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Country> oQuery =
                (from o in context.Country
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Iso2 == string.Empty || this.Iso2 == o.Iso2) &&
                    (this.Iso3 == string.Empty || this.Iso3 == o.Iso3) &&
                    (this.IsoCountryNumber == 0 || this.IsoCountryNumber == o.IsoCountryNumber) &&
                    (this.DialingPrefix == null || this.DialingPrefix == o.DialingPrefix) &&
                    (this.Name == string.Empty || this.Name == o.Name) &&
                    (this.ShortName == string.Empty || this.ShortName == o.ShortName) &&
                    (this.HasLocationData == false || this.HasLocationData == o.HasLocationData) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.CountryBO> countrys = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return countrys;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Country
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Iso2 == string.Empty || this.Iso2 == o.Iso2) &&
                    (this.Iso3 == string.Empty || this.Iso3 == o.Iso3) &&
                    (this.IsoCountryNumber == 0 || this.IsoCountryNumber == o.IsoCountryNumber) &&
                    (this.DialingPrefix == null || this.DialingPrefix == o.DialingPrefix) &&
                    (this.Name == string.Empty || this.Name == o.Name) &&
                    (this.ShortName == string.Empty || this.ShortName == o.ShortName) &&
                    (this.HasLocationData == false || this.HasLocationData == o.HasLocationData) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.CountryBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.CountryBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.CountryBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.CountryBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Country> oQuery =
                (from o in context.Country
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Iso2 == string.Empty || o.Iso2.Contains(this.Iso2)) &&
                    (this.Iso3 == string.Empty || o.Iso3.Contains(this.Iso3)) &&
                    (this.IsoCountryNumber == 0 || o.IsoCountryNumber == this.IsoCountryNumber) &&
                    (this.DialingPrefix == null || o.DialingPrefix == this.DialingPrefix) &&
                    (this.Name == string.Empty || o.Name.Contains(this.Name)) &&
                    (this.ShortName == string.Empty || o.ShortName.Contains(this.ShortName)) &&
                    (this.HasLocationData == false || o.HasLocationData == this.HasLocationData) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.CountryBO> countrys = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return countrys;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Country
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Iso2 == string.Empty || o.Iso2.Contains(this.Iso2)) &&
                    (this.Iso3 == string.Empty || o.Iso3.Contains(this.Iso3)) &&
                    (this.IsoCountryNumber == 0 || o.IsoCountryNumber == this.IsoCountryNumber) &&
                    (this.DialingPrefix == null || o.DialingPrefix == this.DialingPrefix) &&
                    (this.Name == string.Empty || o.Name.Contains(this.Name)) &&
                    (this.ShortName == string.Empty || o.ShortName.Contains(this.ShortName)) &&
                    (this.HasLocationData == false || o.HasLocationData == this.HasLocationData) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.CountryBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.CountryBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.CountryBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.CountryBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.Country> oQuery =
                (from o in context.Country
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.IsoCountryNumber == 0 || this.IsoCountryNumber == o.IsoCountryNumber) && 
                    (this.DialingPrefix == null || this.DialingPrefix == o.DialingPrefix) && 
                    (this.HasLocationData == false || this.HasLocationData == o.HasLocationData) && 
                    ((o.Iso2.Contains(this.Iso2)) ||
                    (o.Iso3.Contains(this.Iso3)) ||
                    (o.Name.Contains(this.Name)) ||
                    (o.ShortName.Contains(this.ShortName)) ||
                    (this.Iso2 == null && this.Iso3 == null && this.Name == null && this.ShortName == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.CountryBO> countrys = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return countrys;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.Country
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.IsoCountryNumber == 0 || this.IsoCountryNumber == o.IsoCountryNumber) && 
                    (this.DialingPrefix == null || this.DialingPrefix == o.DialingPrefix) && 
                    (this.HasLocationData == false || this.HasLocationData == o.HasLocationData) && 
                    ((o.Iso2.Contains(this.Iso2)) ||
                    (o.Iso3.Contains(this.Iso3)) ||
                    (o.Name.Contains(this.Name)) ||
                    (o.ShortName.Contains(this.ShortName)) ||
                    (this.Iso2 == null && this.Iso3 == null && this.Name == null && this.ShortName == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.CountryBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.CountryBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.CountryBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.CountryBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.CountryBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.CountryBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnCountryBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("CountryBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnCountryBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnCountryBOIDChanged();
        partial void OnCountryBOIDChanging(int value);
        
        partial void OnIso2Changed()
        {
            OnCountryBOIso2Changed();
        }
        
        partial void OnIso2Changing(string value)
        {
            if (value != null && value.Length > 2)
            {
                throw new Exception(String.Format("CountryBO.Iso2 has a maximum length of 2. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnCountryBOIso2Changing(value);
        }
        partial void OnIso2Changed();
        partial void OnIso2Changing(string value);
        partial void OnCountryBOIso2Changed();
        partial void OnCountryBOIso2Changing(string value);
        
        partial void OnIso3Changed()
        {
            OnCountryBOIso3Changed();
        }
        
        partial void OnIso3Changing(string value)
        {
            if (value != null && value.Length > 3)
            {
                throw new Exception(String.Format("CountryBO.Iso3 has a maximum length of 3. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnCountryBOIso3Changing(value);
        }
        partial void OnIso3Changed();
        partial void OnIso3Changing(string value);
        partial void OnCountryBOIso3Changed();
        partial void OnCountryBOIso3Changing(string value);
        
        partial void OnIsoCountryNumberChanged()
        {
            OnCountryBOIsoCountryNumberChanged();
        }
        
        partial void OnIsoCountryNumberChanging(int value)
        {
            OnCountryBOIsoCountryNumberChanging(value);
        }
        partial void OnIsoCountryNumberChanged();
        partial void OnIsoCountryNumberChanging(int value);
        partial void OnCountryBOIsoCountryNumberChanged();
        partial void OnCountryBOIsoCountryNumberChanging(int value);
        
        partial void OnDialingPrefixChanged()
        {
            OnCountryBODialingPrefixChanged();
        }
        
        partial void OnDialingPrefixChanging(int? value)
        {
            OnCountryBODialingPrefixChanging(value);
        }
        partial void OnDialingPrefixChanged();
        partial void OnDialingPrefixChanging(int? value);
        partial void OnCountryBODialingPrefixChanged();
        partial void OnCountryBODialingPrefixChanging(int? value);
        
        partial void OnNameChanged()
        {
            OnCountryBONameChanged();
        }
        
        partial void OnNameChanging(string value)
        {
            if (value != null && value.Length > 50)
            {
                throw new Exception(String.Format("CountryBO.Name has a maximum length of 50. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnCountryBONameChanging(value);
        }
        partial void OnNameChanged();
        partial void OnNameChanging(string value);
        partial void OnCountryBONameChanged();
        partial void OnCountryBONameChanging(string value);
        
        partial void OnShortNameChanged()
        {
            OnCountryBOShortNameChanged();
        }
        
        partial void OnShortNameChanging(string value)
        {
            if (value != null && value.Length > 50)
            {
                throw new Exception(String.Format("CountryBO.ShortName has a maximum length of 50. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnCountryBOShortNameChanging(value);
        }
        partial void OnShortNameChanged();
        partial void OnShortNameChanging(string value);
        partial void OnCountryBOShortNameChanged();
        partial void OnCountryBOShortNameChanging(string value);
        
        partial void OnHasLocationDataChanged()
        {
            OnCountryBOHasLocationDataChanged();
        }
        
        partial void OnHasLocationDataChanging(bool value)
        {
            OnCountryBOHasLocationDataChanging(value);
        }
        partial void OnHasLocationDataChanged();
        partial void OnHasLocationDataChanging(bool value);
        partial void OnCountryBOHasLocationDataChanged();
        partial void OnCountryBOHasLocationDataChanging(bool value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.CountryBO))
                return 1;
            Indico.BusinessObjects.CountryBOComparer c = new Indico.BusinessObjects.CountryBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.CountryBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.Country)sender);
            }
        }
        
        void BanksWhereThisIsCountryList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Bank obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.BankBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.BankBO>)sender)[((IndicoList<Indico.BusinessObjects.BankBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.BanksWhereThisIsCountry.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.BankBO>)sender)[((IndicoList<Indico.BusinessObjects.BankBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.BanksWhereThisIsCountry.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void BanksWhereThisIsCountryList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Bank obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.BankBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.BankBO>)sender)[((IndicoList<Indico.BusinessObjects.BankBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.BanksWhereThisIsCountry.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.BankBO>)sender)[((IndicoList<Indico.BusinessObjects.BankBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.BanksWhereThisIsCountry.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void CompanysWhereThisIsCountryList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Company obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.CompanyBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.CompanyBO>)sender)[((IndicoList<Indico.BusinessObjects.CompanyBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.CompanysWhereThisIsCountry.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.CompanyBO>)sender)[((IndicoList<Indico.BusinessObjects.CompanyBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.CompanysWhereThisIsCountry.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void CompanysWhereThisIsCountryList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Company obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.CompanyBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.CompanyBO>)sender)[((IndicoList<Indico.BusinessObjects.CompanyBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.CompanysWhereThisIsCountry.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.CompanyBO>)sender)[((IndicoList<Indico.BusinessObjects.CompanyBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.CompanysWhereThisIsCountry.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void DistributorClientAddresssWhereThisIsCountryList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.DistributorClientAddress obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.DistributorClientAddresssWhereThisIsCountry.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.DistributorClientAddresssWhereThisIsCountry.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void DistributorClientAddresssWhereThisIsCountryList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.DistributorClientAddress obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.DistributorClientAddresssWhereThisIsCountry.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorClientAddressBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.DistributorClientAddresssWhereThisIsCountry.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void FabricCodesWhereThisIsCountryList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.FabricCode obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.FabricCodeBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.FabricCodeBO>)sender)[((IndicoList<Indico.BusinessObjects.FabricCodeBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.FabricCodesWhereThisIsCountry.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.FabricCodeBO>)sender)[((IndicoList<Indico.BusinessObjects.FabricCodeBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.FabricCodesWhereThisIsCountry.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void FabricCodesWhereThisIsCountryList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.FabricCode obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.FabricCodeBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.FabricCodeBO>)sender)[((IndicoList<Indico.BusinessObjects.FabricCodeBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.FabricCodesWhereThisIsCountry.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.FabricCodeBO>)sender)[((IndicoList<Indico.BusinessObjects.FabricCodeBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.FabricCodesWhereThisIsCountry.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PatternSuppliersWhereThisIsCountryList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.PatternSupplier obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PatternSupplierBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PatternSupplierBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternSupplierBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternSuppliersWhereThisIsCountry.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PatternSupplierBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternSupplierBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternSuppliersWhereThisIsCountry.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void PatternSuppliersWhereThisIsCountryList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.PatternSupplier obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.PatternSupplierBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.PatternSupplierBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternSupplierBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.PatternSuppliersWhereThisIsCountry.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.PatternSupplierBO>)sender)[((IndicoList<Indico.BusinessObjects.PatternSupplierBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.PatternSuppliersWhereThisIsCountry.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void SuppliersWhereThisIsCountryList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Supplier obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.SupplierBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.SupplierBO>)sender)[((IndicoList<Indico.BusinessObjects.SupplierBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.SuppliersWhereThisIsCountry.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.SupplierBO>)sender)[((IndicoList<Indico.BusinessObjects.SupplierBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.SuppliersWhereThisIsCountry.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void SuppliersWhereThisIsCountryList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Supplier obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.SupplierBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.SupplierBO>)sender)[((IndicoList<Indico.BusinessObjects.SupplierBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.SuppliersWhereThisIsCountry.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.SupplierBO>)sender)[((IndicoList<Indico.BusinessObjects.SupplierBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.SuppliersWhereThisIsCountry.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
            this._banksWhereThisIsCountryLoaded = false;
            if (this.banksWhereThisIsCountryList != null)
            {
                this.banksWhereThisIsCountryList.OnBeforeRemove -= new EventHandler(BanksWhereThisIsCountryList_OnBeforeRemove);
                this.banksWhereThisIsCountryList.OnAfterAdd -= new EventHandler(BanksWhereThisIsCountryList_OnAfterAdd);
            }
            this._companysWhereThisIsCountryLoaded = false;
            if (this.companysWhereThisIsCountryList != null)
            {
                this.companysWhereThisIsCountryList.OnBeforeRemove -= new EventHandler(CompanysWhereThisIsCountryList_OnBeforeRemove);
                this.companysWhereThisIsCountryList.OnAfterAdd -= new EventHandler(CompanysWhereThisIsCountryList_OnAfterAdd);
            }
            this._distributorClientAddresssWhereThisIsCountryLoaded = false;
            if (this.distributorClientAddresssWhereThisIsCountryList != null)
            {
                this.distributorClientAddresssWhereThisIsCountryList.OnBeforeRemove -= new EventHandler(DistributorClientAddresssWhereThisIsCountryList_OnBeforeRemove);
                this.distributorClientAddresssWhereThisIsCountryList.OnAfterAdd -= new EventHandler(DistributorClientAddresssWhereThisIsCountryList_OnAfterAdd);
            }
            this._fabricCodesWhereThisIsCountryLoaded = false;
            if (this.fabricCodesWhereThisIsCountryList != null)
            {
                this.fabricCodesWhereThisIsCountryList.OnBeforeRemove -= new EventHandler(FabricCodesWhereThisIsCountryList_OnBeforeRemove);
                this.fabricCodesWhereThisIsCountryList.OnAfterAdd -= new EventHandler(FabricCodesWhereThisIsCountryList_OnAfterAdd);
            }
            this._patternSuppliersWhereThisIsCountryLoaded = false;
            if (this.patternSuppliersWhereThisIsCountryList != null)
            {
                this.patternSuppliersWhereThisIsCountryList.OnBeforeRemove -= new EventHandler(PatternSuppliersWhereThisIsCountryList_OnBeforeRemove);
                this.patternSuppliersWhereThisIsCountryList.OnAfterAdd -= new EventHandler(PatternSuppliersWhereThisIsCountryList_OnAfterAdd);
            }
            this._suppliersWhereThisIsCountryLoaded = false;
            if (this.suppliersWhereThisIsCountryList != null)
            {
                this.suppliersWhereThisIsCountryList.OnBeforeRemove -= new EventHandler(SuppliersWhereThisIsCountryList_OnBeforeRemove);
                this.suppliersWhereThisIsCountryList.OnAfterAdd -= new EventHandler(SuppliersWhereThisIsCountryList_OnAfterAdd);
            }
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region CountryBOComparer
    public class CountryBOComparer : IComparer<Indico.BusinessObjects.CountryBO>
    {
        private string propertyToCompareName;
        public CountryBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.CountryBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.CountryBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public CountryBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.CountryBO> Members
        public int Compare(Indico.BusinessObjects.CountryBO x, Indico.BusinessObjects.CountryBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.CountryBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.CountryBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.CountryBO x, Indico.BusinessObjects.CountryBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
