// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

//using Indico.BusinessObjects.Util;
//using Indico.BusinessObjects;
using Indico.DAL;


namespace Indico.BusinessObjects
{
    /// <summary>
    /// DistributorClientAddressDetailsViewBO provides the business logic for maintaining Indico.DAL.DistributorClientAddressDetailsView records in the data store.
    /// </summary>
    /// <remarks>
    /// DistributorClientAddressDetailsViewBO provides the business logic for maintaining Indico.DAL.DistributorClientAddressDetailsView records in the data store. 
    /// By default it provides basic Search methods for retrieving Indico.DAL.DistributorClientAddressDetailsView
    /// records using the DistributorClientAddressDetailsView DAL class. Other methods implement atomic chunks of Business Logic according to
    /// the business rules.
    /// </remarks>
    public partial class DistributorClientAddressDetailsViewBO : BusinessObject, IComparable
    {
        #region fields
        private int? _iD;
        private string _address;
        private string _suburb;
        private string _postCode;
        private int? _countryID;
        private string _country;
        private string _contactName;
        private string _emailAddress;
        private string _contactPhone;
        private string _companyName;
        private int? _addressType;
        private string _state;
        private string _port;
        private int? _portID;
        private int? _clientID;
        private string _client;
        #endregion
        
        #region Properties
        /// <summary></summary>
        public int? ID
        {   get {return _iD;}
            set 
            {
                _iD = value;
            }
        }
        /// <summary></summary>
        public string Address
        {   get {return _address;}
            set 
            {
                _address = value;
            }
        }
        /// <summary></summary>
        public string Suburb
        {   get {return _suburb;}
            set 
            {
                _suburb = value;
            }
        }
        /// <summary></summary>
        public string PostCode
        {   get {return _postCode;}
            set 
            {
                _postCode = value;
            }
        }
        /// <summary></summary>
        public int? CountryID
        {   get {return _countryID;}
            set 
            {
                _countryID = value;
            }
        }
        /// <summary></summary>
        public string Country
        {   get {return _country;}
            set 
            {
                _country = value;
            }
        }
        /// <summary></summary>
        public string ContactName
        {   get {return _contactName;}
            set 
            {
                _contactName = value;
            }
        }
        /// <summary></summary>
        public string EmailAddress
        {   get {return _emailAddress;}
            set 
            {
                _emailAddress = value;
            }
        }
        /// <summary></summary>
        public string ContactPhone
        {   get {return _contactPhone;}
            set 
            {
                _contactPhone = value;
            }
        }
        /// <summary></summary>
        public string CompanyName
        {   get {return _companyName;}
            set 
            {
                _companyName = value;
            }
        }
        /// <summary></summary>
        public int? AddressType
        {   get {return _addressType;}
            set 
            {
                _addressType = value;
            }
        }
        /// <summary></summary>
        public string State
        {   get {return _state;}
            set 
            {
                _state = value;
            }
        }
        /// <summary></summary>
        public string Port
        {   get {return _port;}
            set 
            {
                _port = value;
            }
        }
        /// <summary></summary>
        public int? PortID
        {   get {return _portID;}
            set 
            {
                _portID = value;
            }
        }
        /// <summary></summary>
        public int? ClientID
        {   get {return _clientID;}
            set 
            {
                _clientID = value;
            }
        }
        /// <summary></summary>
        public string Client
        {   get {return _client;}
            set 
            {
                _client = value;
            }
        }
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the DistributorClientAddressDetailsViewBO class using the supplied Indico.DAL.DistributorClientAddressDetailsView. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.DistributorClientAddressDetailsView whose properties will be used to initialise the DistributorClientAddressDetailsViewBO</param>
        internal DistributorClientAddressDetailsViewBO(Indico.DAL.DistributorClientAddressDetailsView obj)
        {
            // set the properties from the Indico.DAL.DistributorClientAddressDetailsView 
            this.ID = obj.ID;
            this.Address = obj.Address;
            this.Suburb = obj.Suburb;
            this.PostCode = obj.PostCode;
            this.CountryID = obj.CountryID;
            this.Country = obj.Country;
            this.ContactName = obj.ContactName;
            this.EmailAddress = obj.EmailAddress;
            this.ContactPhone = obj.ContactPhone;
            this.CompanyName = obj.CompanyName;
            this.AddressType = obj.AddressType;
            this.State = obj.State;
            this.Port = obj.Port;
            this.PortID = obj.PortID;
            this.ClientID = obj.ClientID;
            this.Client = obj.Client;
        }
        #endregion
        
        #region Internal utility methods
        internal void SetDAL(Indico.DAL.DistributorClientAddressDetailsView obj, IndicoEntities context)
        {
            // set the Indico.DAL.DistributorClientAddressDetailsView properties
            obj.ID = Convert.ToInt32(ID);
            obj.Address = Address;
            obj.Suburb = Suburb;
            obj.PostCode = PostCode;
            obj.CountryID = Convert.ToInt32(CountryID);
            obj.Country = Country;
            obj.ContactName = ContactName;
            obj.EmailAddress = EmailAddress;
            obj.ContactPhone = ContactPhone;
            obj.CompanyName = CompanyName;
            obj.AddressType = Convert.ToInt32(AddressType);
            obj.State = State;
            obj.Port = Port;
            obj.PortID = Convert.ToInt32(PortID);
            obj.ClientID = Convert.ToInt32(ClientID);
            obj.Client = Client;
        }
        
        internal void SetBO(Indico.DAL.DistributorClientAddressDetailsView obj)
        {
            // set the Indico.BusinessObjects.DistributorClientAddressDetailsViewBO properties    
            this.ID = obj.ID;
            this.Address = obj.Address;
            this.Suburb = obj.Suburb;
            this.PostCode = obj.PostCode;
            this.CountryID = obj.CountryID;
            this.Country = obj.Country;
            this.ContactName = obj.ContactName;
            this.EmailAddress = obj.EmailAddress;
            this.ContactPhone = obj.ContactPhone;
            this.CompanyName = obj.CompanyName;
            this.AddressType = obj.AddressType;
            this.State = obj.State;
            this.Port = obj.Port;
            this.PortID = obj.PortID;
            this.ClientID = obj.ClientID;
            this.Client = obj.Client;
        }
        
        internal void SetBO(Indico.BusinessObjects.DistributorClientAddressDetailsViewBO obj)
        {
            // set this Indico.BusinessObjects.DistributorClientAddressDetailsViewBO properties
            this.ID = obj.ID;
            this.Address = obj.Address;
            this.Suburb = obj.Suburb;
            this.PostCode = obj.PostCode;
            this.CountryID = obj.CountryID;
            this.Country = obj.Country;
            this.ContactName = obj.ContactName;
            this.EmailAddress = obj.EmailAddress;
            this.ContactPhone = obj.ContactPhone;
            this.CompanyName = obj.CompanyName;
            this.AddressType = obj.AddressType;
            this.State = obj.State;
            this.Port = obj.Port;
            this.PortID = obj.PortID;
            this.ClientID = obj.ClientID;
            this.Client = obj.Client;
        }
        
        private static List<Indico.BusinessObjects.DistributorClientAddressDetailsViewBO> IQueryableToList(IQueryable<Indico.DAL.DistributorClientAddressDetailsView> oQuery)
        {
            List<Indico.DAL.DistributorClientAddressDetailsView> oList = oQuery.ToList();
            List<Indico.BusinessObjects.DistributorClientAddressDetailsViewBO> rList = new List<Indico.BusinessObjects.DistributorClientAddressDetailsViewBO>(oList.Count);
            foreach (Indico.DAL.DistributorClientAddressDetailsView o in oList)
            {
                Indico.BusinessObjects.DistributorClientAddressDetailsViewBO obj = new Indico.BusinessObjects.DistributorClientAddressDetailsViewBO(o);
                rList.Add(obj);
            }
            return rList;
        }
        #endregion
        
        #region BusinessObject methods
        
        #region GetAllObject
        public static List<Indico.BusinessObjects.DistributorClientAddressDetailsViewBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public static List<Indico.BusinessObjects.DistributorClientAddressDetailsViewBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public static List<Indico.BusinessObjects.DistributorClientAddressDetailsViewBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public static List<Indico.BusinessObjects.DistributorClientAddressDetailsViewBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.DistributorClientAddressDetailsView> oQuery =
                (from o in context.DistributorClientAddressDetailsView
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.DistributorClientAddressDetailsViewBO> distributorclientaddressdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return distributorclientaddressdetailsviews;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.DistributorClientAddressDetailsViewBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.DistributorClientAddressDetailsViewBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.DistributorClientAddressDetailsViewBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.DistributorClientAddressDetailsViewBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.DistributorClientAddressDetailsView> oQuery =
                (from o in context.DistributorClientAddressDetailsView
                 where
                    (this.ID == null || this.ID == o.ID) &&
                    (this.Address == null || this.Address == o.Address) &&
                    (this.Suburb == null || this.Suburb == o.Suburb) &&
                    (this.PostCode == null || this.PostCode == o.PostCode) &&
                    (this.CountryID == null || this.CountryID == o.CountryID) &&
                    (this.Country == null || this.Country == o.Country) &&
                    (this.ContactName == null || this.ContactName == o.ContactName) &&
                    (this.EmailAddress == null || this.EmailAddress == o.EmailAddress) &&
                    (this.ContactPhone == null || this.ContactPhone == o.ContactPhone) &&
                    (this.CompanyName == null || this.CompanyName == o.CompanyName) &&
                    (this.AddressType == null || this.AddressType == o.AddressType) &&
                    (this.State == null || this.State == o.State) &&
                    (this.Port == null || this.Port == o.Port) &&
                    (this.PortID == null || this.PortID == o.PortID) &&
                    (this.ClientID == null || this.ClientID == o.ClientID) &&
                    (this.Client == null || this.Client == o.Client) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.DistributorClientAddressDetailsViewBO> distributorclientaddressdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return distributorclientaddressdetailsviews;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.DistributorClientAddressDetailsView
                 where
                    (this.ID == null || this.ID == o.ID) &&
                    (this.Address == null || this.Address == o.Address) &&
                    (this.Suburb == null || this.Suburb == o.Suburb) &&
                    (this.PostCode == null || this.PostCode == o.PostCode) &&
                    (this.CountryID == null || this.CountryID == o.CountryID) &&
                    (this.Country == null || this.Country == o.Country) &&
                    (this.ContactName == null || this.ContactName == o.ContactName) &&
                    (this.EmailAddress == null || this.EmailAddress == o.EmailAddress) &&
                    (this.ContactPhone == null || this.ContactPhone == o.ContactPhone) &&
                    (this.CompanyName == null || this.CompanyName == o.CompanyName) &&
                    (this.AddressType == null || this.AddressType == o.AddressType) &&
                    (this.State == null || this.State == o.State) &&
                    (this.Port == null || this.Port == o.Port) &&
                    (this.PortID == null || this.PortID == o.PortID) &&
                    (this.ClientID == null || this.ClientID == o.ClientID) &&
                    (this.Client == null || this.Client == o.Client) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.DistributorClientAddressDetailsViewBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.DistributorClientAddressDetailsViewBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.DistributorClientAddressDetailsViewBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.DistributorClientAddressDetailsViewBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.DistributorClientAddressDetailsView> oQuery =
                (from o in context.DistributorClientAddressDetailsView
                 where
                    (this.ID == null || o.ID == this.ID) &&
                    (this.Address == null || o.Address.Contains(this.Address)) &&
                    (this.Suburb == null || o.Suburb.Contains(this.Suburb)) &&
                    (this.PostCode == null || o.PostCode.Contains(this.PostCode)) &&
                    (this.CountryID == null || o.CountryID == this.CountryID) &&
                    (this.Country == null || o.Country.Contains(this.Country)) &&
                    (this.ContactName == null || o.ContactName.Contains(this.ContactName)) &&
                    (this.EmailAddress == null || o.EmailAddress.Contains(this.EmailAddress)) &&
                    (this.ContactPhone == null || o.ContactPhone.Contains(this.ContactPhone)) &&
                    (this.CompanyName == null || o.CompanyName.Contains(this.CompanyName)) &&
                    (this.AddressType == null || o.AddressType == this.AddressType) &&
                    (this.State == null || o.State.Contains(this.State)) &&
                    (this.Port == null || o.Port.Contains(this.Port)) &&
                    (this.PortID == null || o.PortID == this.PortID) &&
                    (this.ClientID == null || o.ClientID == this.ClientID) &&
                    (this.Client == null || o.Client.Contains(this.Client)) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.DistributorClientAddressDetailsViewBO> distributorclientaddressdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return distributorclientaddressdetailsviews;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.DistributorClientAddressDetailsView
                 where
                    (this.ID == null || o.ID == this.ID) &&
                    (this.Address == null || o.Address.Contains(this.Address)) &&
                    (this.Suburb == null || o.Suburb.Contains(this.Suburb)) &&
                    (this.PostCode == null || o.PostCode.Contains(this.PostCode)) &&
                    (this.CountryID == null || o.CountryID == this.CountryID) &&
                    (this.Country == null || o.Country.Contains(this.Country)) &&
                    (this.ContactName == null || o.ContactName.Contains(this.ContactName)) &&
                    (this.EmailAddress == null || o.EmailAddress.Contains(this.EmailAddress)) &&
                    (this.ContactPhone == null || o.ContactPhone.Contains(this.ContactPhone)) &&
                    (this.CompanyName == null || o.CompanyName.Contains(this.CompanyName)) &&
                    (this.AddressType == null || o.AddressType == this.AddressType) &&
                    (this.State == null || o.State.Contains(this.State)) &&
                    (this.Port == null || o.Port.Contains(this.Port)) &&
                    (this.PortID == null || o.PortID == this.PortID) &&
                    (this.ClientID == null || o.ClientID == this.ClientID) &&
                    (this.Client == null || o.Client.Contains(this.Client)) 
                 orderby o.ID
                 select o).Count();
            
        }
        
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.DistributorClientAddressDetailsViewBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.DistributorClientAddressDetailsViewBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.DistributorClientAddressDetailsViewBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.DistributorClientAddressDetailsViewBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.DistributorClientAddressDetailsView> oQuery =
                (from o in context.DistributorClientAddressDetailsView
                 where
                    (this.ID == null || this.ID == o.ID) && 
                    (this.CountryID == null || this.CountryID == o.CountryID) && 
                    (this.AddressType == null || this.AddressType == o.AddressType) && 
                    (this.PortID == null || this.PortID == o.PortID) && 
                    (this.ClientID == null || this.ClientID == o.ClientID) && 
                    ((o.Address.Contains(this.Address)) ||
                    (o.Suburb.Contains(this.Suburb)) ||
                    (o.PostCode.Contains(this.PostCode)) ||
                    (o.Country.Contains(this.Country)) ||
                    (o.ContactName.Contains(this.ContactName)) ||
                    (o.EmailAddress.Contains(this.EmailAddress)) ||
                    (o.ContactPhone.Contains(this.ContactPhone)) ||
                    (o.CompanyName.Contains(this.CompanyName)) ||
                    (o.State.Contains(this.State)) ||
                    (o.Port.Contains(this.Port)) ||
                    (o.Client.Contains(this.Client)) ||
                    (this.Address == null && this.Suburb == null && this.PostCode == null && this.Country == null && this.ContactName == null && this.EmailAddress == null && this.ContactPhone == null && this.CompanyName == null && this.State == null && this.Port == null && this.Client == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.DistributorClientAddressDetailsViewBO> distributorclientaddressdetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return distributorclientaddressdetailsviews;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.DistributorClientAddressDetailsView
                 where
                    (this.ID == null || this.ID == o.ID) && 
                    (this.CountryID == null || this.CountryID == o.CountryID) && 
                    (this.AddressType == null || this.AddressType == o.AddressType) && 
                    (this.PortID == null || this.PortID == o.PortID) && 
                    (this.ClientID == null || this.ClientID == o.ClientID) && 
                    ((o.Address.Contains(this.Address)) ||
                    (o.Suburb.Contains(this.Suburb)) ||
                    (o.PostCode.Contains(this.PostCode)) ||
                    (o.Country.Contains(this.Country)) ||
                    (o.ContactName.Contains(this.ContactName)) ||
                    (o.EmailAddress.Contains(this.EmailAddress)) ||
                    (o.ContactPhone.Contains(this.ContactPhone)) ||
                    (o.CompanyName.Contains(this.CompanyName)) ||
                    (o.State.Contains(this.State)) ||
                    (o.Port.Contains(this.Port)) ||
                    (o.Client.Contains(this.Client)) ||
                    (this.Address == null && this.Suburb == null && this.PostCode == null && this.Country == null && this.ContactName == null && this.EmailAddress == null && this.ContactPhone == null && this.CompanyName == null && this.State == null && this.Port == null && this.Client == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.DistributorClientAddressDetailsViewBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.DistributorClientAddressDetailsViewBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.DistributorClientAddressDetailsViewBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.DistributorClientAddressDetailsViewBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.DistributorClientAddressDetailsViewBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.DistributorClientAddressDetailsViewBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.DistributorClientAddressDetailsViewBO))
                return 1;
            Indico.BusinessObjects.DistributorClientAddressDetailsViewBOComparer c = new Indico.BusinessObjects.DistributorClientAddressDetailsViewBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.DistributorClientAddressDetailsViewBO);
        }

        #endregion
        #endregion
    }
    
    #region DistributorClientAddressDetailsViewBOComparer
    public class DistributorClientAddressDetailsViewBOComparer : IComparer<Indico.BusinessObjects.DistributorClientAddressDetailsViewBO>
    {
        private string propertyToCompareName;
        public DistributorClientAddressDetailsViewBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.DistributorClientAddressDetailsViewBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.DistributorClientAddressDetailsViewBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public DistributorClientAddressDetailsViewBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.DistributorClientAddressDetailsViewBO> Members
        public int Compare(Indico.BusinessObjects.DistributorClientAddressDetailsViewBO x, Indico.BusinessObjects.DistributorClientAddressDetailsViewBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.DistributorClientAddressDetailsViewBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.DistributorClientAddressDetailsViewBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.DistributorClientAddressDetailsViewBO x, Indico.BusinessObjects.DistributorClientAddressDetailsViewBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
