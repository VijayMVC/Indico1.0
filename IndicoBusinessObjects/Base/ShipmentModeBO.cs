// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class ShipmentModeBO : BusinessObject, IComparable
    {
        #region fields
        #region Scalar Fields
        private int id;
        private string _description;
        private string _name = string.Empty;
        #endregion
        
        #region Foreign Key fields
        #endregion
        
        #region Foreign Table Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.InvoiceBO> invoicesWhereThisIsShipmentModeList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _invoicesWhereThisIsShipmentModeLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.OrderBO> ordersWhereThisIsShipmentModeList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _ordersWhereThisIsShipmentModeLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.OrderDetailBO> orderDetailsWhereThisIsShipmentModeList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _orderDetailsWhereThisIsShipmentModeLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.ReservationBO> reservationsWhereThisIsShipmentModeList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _reservationsWhereThisIsShipmentModeLoaded;
        #endregion
        
        #region Other fields
        
        private Indico.DAL.ShipmentMode _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>The description of the Shipment Mode. The maximum length of this property is 255.</summary>
        public string Description
        {   
            get {return _description;}
            set 
            {
                OnDescriptionChanging(value);
                _description = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Description = value;
                }
                OnDescriptionChanged();
            }
        }
        /// <summary>The name of the Shipment Mode. The maximum length of this property is 64.</summary>
        public string Name
        {   
            get {return _name;}
            set 
            {
                OnNameChanging(value);
                _name = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.Name = value;
                }
                OnNameChanged();
            }
        }
        
        internal Indico.DAL.ShipmentMode ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        #endregion
        
        #region Foreign Object Foreign Key Collections
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.InvoiceBO> InvoicesWhereThisIsShipmentMode // FK_Invoice_ShipmentMode
        {
            get
            {
                if (!_invoicesWhereThisIsShipmentModeLoaded)
                {
                    _invoicesWhereThisIsShipmentModeLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.ShipmentMode obj = (from o in context.ShipmentMode
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.InvoicesWhereThisIsShipmentMode.Load();
                        invoicesWhereThisIsShipmentModeList = new IndicoList<Indico.BusinessObjects.InvoiceBO>(obj.InvoicesWhereThisIsShipmentMode.Count);
                        
                        foreach (Indico.DAL.Invoice o in obj.InvoicesWhereThisIsShipmentMode)
                        {
                            Indico.BusinessObjects.InvoiceBO fkObj = new Indico.BusinessObjects.InvoiceBO(o, ref this._context);
                            invoicesWhereThisIsShipmentModeList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        invoicesWhereThisIsShipmentModeList = new IndicoList<Indico.BusinessObjects.InvoiceBO>();
                    }
                    
                    invoicesWhereThisIsShipmentModeList.OnBeforeRemove += new EventHandler(InvoicesWhereThisIsShipmentModeList_OnBeforeRemove);
                    invoicesWhereThisIsShipmentModeList.OnAfterAdd += new EventHandler(InvoicesWhereThisIsShipmentModeList_OnAfterAdd);
                }
                
                return invoicesWhereThisIsShipmentModeList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.OrderBO> OrdersWhereThisIsShipmentMode // FK_Order_ShipmentMode
        {
            get
            {
                if (!_ordersWhereThisIsShipmentModeLoaded)
                {
                    _ordersWhereThisIsShipmentModeLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.ShipmentMode obj = (from o in context.ShipmentMode
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.OrdersWhereThisIsShipmentMode.Load();
                        ordersWhereThisIsShipmentModeList = new IndicoList<Indico.BusinessObjects.OrderBO>(obj.OrdersWhereThisIsShipmentMode.Count);
                        
                        foreach (Indico.DAL.Order o in obj.OrdersWhereThisIsShipmentMode)
                        {
                            Indico.BusinessObjects.OrderBO fkObj = new Indico.BusinessObjects.OrderBO(o, ref this._context);
                            ordersWhereThisIsShipmentModeList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        ordersWhereThisIsShipmentModeList = new IndicoList<Indico.BusinessObjects.OrderBO>();
                    }
                    
                    ordersWhereThisIsShipmentModeList.OnBeforeRemove += new EventHandler(OrdersWhereThisIsShipmentModeList_OnBeforeRemove);
                    ordersWhereThisIsShipmentModeList.OnAfterAdd += new EventHandler(OrdersWhereThisIsShipmentModeList_OnAfterAdd);
                }
                
                return ordersWhereThisIsShipmentModeList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.OrderDetailBO> OrderDetailsWhereThisIsShipmentMode // FK_OrderDetail_ShipmentMode
        {
            get
            {
                if (!_orderDetailsWhereThisIsShipmentModeLoaded)
                {
                    _orderDetailsWhereThisIsShipmentModeLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.ShipmentMode obj = (from o in context.ShipmentMode
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.OrderDetailsWhereThisIsShipmentMode.Load();
                        orderDetailsWhereThisIsShipmentModeList = new IndicoList<Indico.BusinessObjects.OrderDetailBO>(obj.OrderDetailsWhereThisIsShipmentMode.Count);
                        
                        foreach (Indico.DAL.OrderDetail o in obj.OrderDetailsWhereThisIsShipmentMode)
                        {
                            Indico.BusinessObjects.OrderDetailBO fkObj = new Indico.BusinessObjects.OrderDetailBO(o, ref this._context);
                            orderDetailsWhereThisIsShipmentModeList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        orderDetailsWhereThisIsShipmentModeList = new IndicoList<Indico.BusinessObjects.OrderDetailBO>();
                    }
                    
                    orderDetailsWhereThisIsShipmentModeList.OnBeforeRemove += new EventHandler(OrderDetailsWhereThisIsShipmentModeList_OnBeforeRemove);
                    orderDetailsWhereThisIsShipmentModeList.OnAfterAdd += new EventHandler(OrderDetailsWhereThisIsShipmentModeList_OnAfterAdd);
                }
                
                return orderDetailsWhereThisIsShipmentModeList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.ReservationBO> ReservationsWhereThisIsShipmentMode // FK_Reservation_ShipmentMode
        {
            get
            {
                if (!_reservationsWhereThisIsShipmentModeLoaded)
                {
                    _reservationsWhereThisIsShipmentModeLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.ShipmentMode obj = (from o in context.ShipmentMode
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.ReservationsWhereThisIsShipmentMode.Load();
                        reservationsWhereThisIsShipmentModeList = new IndicoList<Indico.BusinessObjects.ReservationBO>(obj.ReservationsWhereThisIsShipmentMode.Count);
                        
                        foreach (Indico.DAL.Reservation o in obj.ReservationsWhereThisIsShipmentMode)
                        {
                            Indico.BusinessObjects.ReservationBO fkObj = new Indico.BusinessObjects.ReservationBO(o, ref this._context);
                            reservationsWhereThisIsShipmentModeList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        reservationsWhereThisIsShipmentModeList = new IndicoList<Indico.BusinessObjects.ReservationBO>();
                    }
                    
                    reservationsWhereThisIsShipmentModeList.OnBeforeRemove += new EventHandler(ReservationsWhereThisIsShipmentModeList_OnBeforeRemove);
                    reservationsWhereThisIsShipmentModeList.OnAfterAdd += new EventHandler(ReservationsWhereThisIsShipmentModeList_OnAfterAdd);
                }
                
                return reservationsWhereThisIsShipmentModeList;
            }
        }
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the ShipmentModeBO class using the supplied Indico.DAL.ShipmentMode. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.ShipmentMode whose properties will be used to initialise the ShipmentModeBO</param>
        internal ShipmentModeBO(Indico.DAL.ShipmentMode obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.ShipmentMode 
            this.ID = obj.ID;
            
            this.Description = obj.Description;
            this.Name = obj.Name;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.ShipmentMode SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.ShipmentMode properties
            Indico.DAL.ShipmentMode obj = new Indico.DAL.ShipmentMode();
            
            if (this.ID > 0)
            {
                obj = context.ShipmentMode.FirstOrDefault<ShipmentMode>(o => o.ID == this.ID);
            }
            
            obj.Description = this.Description;
            obj.Name = this.Name;
            
            
            if (_invoicesWhereThisIsShipmentModeLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.InvoiceBO.ToEntityList(this.InvoicesWhereThisIsShipmentMode, context), 
                    obj.InvoicesWhereThisIsShipmentMode);
            if (_ordersWhereThisIsShipmentModeLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.OrderBO.ToEntityList(this.OrdersWhereThisIsShipmentMode, context), 
                    obj.OrdersWhereThisIsShipmentMode);
            if (_orderDetailsWhereThisIsShipmentModeLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.OrderDetailBO.ToEntityList(this.OrderDetailsWhereThisIsShipmentMode, context), 
                    obj.OrderDetailsWhereThisIsShipmentMode);
            if (_reservationsWhereThisIsShipmentModeLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.ReservationBO.ToEntityList(this.ReservationsWhereThisIsShipmentMode, context), 
                    obj.ReservationsWhereThisIsShipmentMode);
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.ShipmentMode))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.ShipmentMode obj = (Indico.DAL.ShipmentMode)eObj;
            
            // set the Indico.BusinessObjects.ShipmentModeBO properties
            this.ID = obj.ID;
            
            this.Description = obj.Description;
            this.Name = obj.Name;
            
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.ShipmentModeBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.ShipmentModeBO properties
            this.ID = obj.ID;
            
            this.Description = obj.Description;
            this.Name = obj.Name;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.ShipmentModeBO> IQueryableToList(IQueryable<Indico.DAL.ShipmentMode> oQuery)
        {
            List<Indico.DAL.ShipmentMode> oList = oQuery.ToList();
            List<Indico.BusinessObjects.ShipmentModeBO> rList = new List<Indico.BusinessObjects.ShipmentModeBO>(oList.Count);
            foreach (Indico.DAL.ShipmentMode o in oList)
            {
                Indico.BusinessObjects.ShipmentModeBO obj = new Indico.BusinessObjects.ShipmentModeBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.ShipmentModeBO> ToList(IEnumerable<Indico.DAL.ShipmentMode> oQuery)
        {
            List<Indico.DAL.ShipmentMode> oList = oQuery.ToList();
            List<Indico.BusinessObjects.ShipmentModeBO> rList = new List<Indico.BusinessObjects.ShipmentModeBO>(oList.Count);
            foreach (Indico.DAL.ShipmentMode o in oList)
            {
                Indico.BusinessObjects.ShipmentModeBO obj = new Indico.BusinessObjects.ShipmentModeBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.ShipmentMode> ToEntityList(List<ShipmentModeBO> bos, IndicoEntities context)
        {
            // build a List of ShipmentMode entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.ShipmentMode.Count() == 0) ? new List<Indico.DAL.ShipmentMode>() : (context.ShipmentMode.Where(BuildContainsExpression<ShipmentMode, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.ShipmentMode>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.ShipmentMode> ToEntityCollection(List<ShipmentModeBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of ShipmentMode entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.ShipmentMode> el = (context.ShipmentMode.Count() == 0) ? new List<Indico.DAL.ShipmentMode>() : 
                context.ShipmentMode.Where(BuildContainsExpression<ShipmentMode, int>(e => e.ID, ids))
                .ToList<Indico.DAL.ShipmentMode>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.ShipmentMode> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.ShipmentMode>();
                
            foreach (Indico.DAL.ShipmentMode r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.ShipmentMode ToEntity(IndicoEntities context)
        {
            return (from o in context.ShipmentMode
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToShipmentMode(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.ShipmentMode obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToShipmentMode(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.ShipmentMode obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.ShipmentMode obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.ShipmentModeBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.ShipmentModeBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.ShipmentMode> oQuery =
                        from o in context.ShipmentMode
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.ShipmentMode> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.ShipmentModeBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.ShipmentModeBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ShipmentModeBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ShipmentModeBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ShipmentMode> oQuery =
                (from o in context.ShipmentMode
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ShipmentModeBO> shipmentmodes = IQueryableToList(oQuery);
            context.Dispose();
            return shipmentmodes;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.ShipmentModeBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.ShipmentModeBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ShipmentModeBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ShipmentModeBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.ShipmentMode> oQuery =
                (from o in context.ShipmentMode
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Name == string.Empty || this.Name == o.Name) &&
                    (this.Description == null || this.Description == o.Description) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ShipmentModeBO> shipmentmodes = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return shipmentmodes;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.ShipmentMode
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Name == string.Empty || this.Name == o.Name) &&
                    (this.Description == null || this.Description == o.Description) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.ShipmentModeBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.ShipmentModeBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ShipmentModeBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ShipmentModeBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.ShipmentMode> oQuery =
                (from o in context.ShipmentMode
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Name == string.Empty || o.Name.Contains(this.Name)) &&
                    (this.Description == null || o.Description.Contains(this.Description)) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ShipmentModeBO> shipmentmodes = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return shipmentmodes;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.ShipmentMode
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Name == string.Empty || o.Name.Contains(this.Name)) &&
                    (this.Description == null || o.Description.Contains(this.Description)) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.ShipmentModeBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.ShipmentModeBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ShipmentModeBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ShipmentModeBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.ShipmentMode> oQuery =
                (from o in context.ShipmentMode
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    ((o.Name.Contains(this.Name)) ||
                    (o.Description.Contains(this.Description)) ||
                    (this.Name == null && this.Description == null ))
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ShipmentModeBO> shipmentmodes = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return shipmentmodes;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.ShipmentMode
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    ((o.Name.Contains(this.Name)) ||
                    (o.Description.Contains(this.Description)) ||
                    (this.Name == null && this.Description == null ))
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.ShipmentModeBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.ShipmentModeBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.ShipmentModeBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.ShipmentModeBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.ShipmentModeBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.ShipmentModeBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnShipmentModeBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("ShipmentModeBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnShipmentModeBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnShipmentModeBOIDChanged();
        partial void OnShipmentModeBOIDChanging(int value);
        
        partial void OnNameChanged()
        {
            OnShipmentModeBONameChanged();
        }
        
        partial void OnNameChanging(string value)
        {
            if (value != null && value.Length > 64)
            {
                throw new Exception(String.Format("ShipmentModeBO.Name has a maximum length of 64. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnShipmentModeBONameChanging(value);
        }
        partial void OnNameChanged();
        partial void OnNameChanging(string value);
        partial void OnShipmentModeBONameChanged();
        partial void OnShipmentModeBONameChanging(string value);
        
        partial void OnDescriptionChanged()
        {
            OnShipmentModeBODescriptionChanged();
        }
        
        partial void OnDescriptionChanging(string value)
        {
            if (value != null && value.Length > 255)
            {
                throw new Exception(String.Format("ShipmentModeBO.Description has a maximum length of 255. The supplied value \"{0}\" has a length of {1}", value, value.Length));
            }
            OnShipmentModeBODescriptionChanging(value);
        }
        partial void OnDescriptionChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnShipmentModeBODescriptionChanged();
        partial void OnShipmentModeBODescriptionChanging(string value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.ShipmentModeBO))
                return 1;
            Indico.BusinessObjects.ShipmentModeBOComparer c = new Indico.BusinessObjects.ShipmentModeBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.ShipmentModeBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.ShipmentMode)sender);
            }
        }
        
        void InvoicesWhereThisIsShipmentModeList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Invoice obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.InvoicesWhereThisIsShipmentMode.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.InvoicesWhereThisIsShipmentMode.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void InvoicesWhereThisIsShipmentModeList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Invoice obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.InvoicesWhereThisIsShipmentMode.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender)[((IndicoList<Indico.BusinessObjects.InvoiceBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.InvoicesWhereThisIsShipmentMode.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrdersWhereThisIsShipmentModeList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Order obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrdersWhereThisIsShipmentMode.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrdersWhereThisIsShipmentMode.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrdersWhereThisIsShipmentModeList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Order obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrdersWhereThisIsShipmentMode.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrdersWhereThisIsShipmentMode.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrderDetailsWhereThisIsShipmentModeList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.OrderDetail obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrderDetailsWhereThisIsShipmentMode.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrderDetailsWhereThisIsShipmentMode.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void OrderDetailsWhereThisIsShipmentModeList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.OrderDetail obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.OrderDetailsWhereThisIsShipmentMode.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender)[((IndicoList<Indico.BusinessObjects.OrderDetailBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.OrderDetailsWhereThisIsShipmentMode.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void ReservationsWhereThisIsShipmentModeList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.Reservation obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.ReservationBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.ReservationBO>)sender)[((IndicoList<Indico.BusinessObjects.ReservationBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.ReservationsWhereThisIsShipmentMode.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.ReservationBO>)sender)[((IndicoList<Indico.BusinessObjects.ReservationBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.ReservationsWhereThisIsShipmentMode.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void ReservationsWhereThisIsShipmentModeList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.Reservation obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.ReservationBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.ReservationBO>)sender)[((IndicoList<Indico.BusinessObjects.ReservationBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.ReservationsWhereThisIsShipmentMode.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.ReservationBO>)sender)[((IndicoList<Indico.BusinessObjects.ReservationBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.ReservationsWhereThisIsShipmentMode.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
            this._invoicesWhereThisIsShipmentModeLoaded = false;
            if (this.invoicesWhereThisIsShipmentModeList != null)
            {
                this.invoicesWhereThisIsShipmentModeList.OnBeforeRemove -= new EventHandler(InvoicesWhereThisIsShipmentModeList_OnBeforeRemove);
                this.invoicesWhereThisIsShipmentModeList.OnAfterAdd -= new EventHandler(InvoicesWhereThisIsShipmentModeList_OnAfterAdd);
            }
            this._ordersWhereThisIsShipmentModeLoaded = false;
            if (this.ordersWhereThisIsShipmentModeList != null)
            {
                this.ordersWhereThisIsShipmentModeList.OnBeforeRemove -= new EventHandler(OrdersWhereThisIsShipmentModeList_OnBeforeRemove);
                this.ordersWhereThisIsShipmentModeList.OnAfterAdd -= new EventHandler(OrdersWhereThisIsShipmentModeList_OnAfterAdd);
            }
            this._orderDetailsWhereThisIsShipmentModeLoaded = false;
            if (this.orderDetailsWhereThisIsShipmentModeList != null)
            {
                this.orderDetailsWhereThisIsShipmentModeList.OnBeforeRemove -= new EventHandler(OrderDetailsWhereThisIsShipmentModeList_OnBeforeRemove);
                this.orderDetailsWhereThisIsShipmentModeList.OnAfterAdd -= new EventHandler(OrderDetailsWhereThisIsShipmentModeList_OnAfterAdd);
            }
            this._reservationsWhereThisIsShipmentModeLoaded = false;
            if (this.reservationsWhereThisIsShipmentModeList != null)
            {
                this.reservationsWhereThisIsShipmentModeList.OnBeforeRemove -= new EventHandler(ReservationsWhereThisIsShipmentModeList_OnBeforeRemove);
                this.reservationsWhereThisIsShipmentModeList.OnAfterAdd -= new EventHandler(ReservationsWhereThisIsShipmentModeList_OnAfterAdd);
            }
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region ShipmentModeBOComparer
    public class ShipmentModeBOComparer : IComparer<Indico.BusinessObjects.ShipmentModeBO>
    {
        private string propertyToCompareName;
        public ShipmentModeBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.ShipmentModeBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.ShipmentModeBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public ShipmentModeBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.ShipmentModeBO> Members
        public int Compare(Indico.BusinessObjects.ShipmentModeBO x, Indico.BusinessObjects.ShipmentModeBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.ShipmentModeBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.ShipmentModeBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.ShipmentModeBO x, Indico.BusinessObjects.ShipmentModeBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
