// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

//using Indico.BusinessObjects.Util;
//using Indico.BusinessObjects;
using Indico.DAL;


namespace Indico.BusinessObjects
{
    /// <summary>
    /// ReturnDistributorDetailsViewBO provides the business logic for maintaining Indico.DAL.ReturnDistributorDetailsView records in the data store.
    /// </summary>
    /// <remarks>
    /// ReturnDistributorDetailsViewBO provides the business logic for maintaining Indico.DAL.ReturnDistributorDetailsView records in the data store. 
    /// By default it provides basic Search methods for retrieving Indico.DAL.ReturnDistributorDetailsView
    /// records using the ReturnDistributorDetailsView DAL class. Other methods implement atomic chunks of Business Logic according to
    /// the business rules.
    /// </remarks>
    public partial class ReturnDistributorDetailsViewBO : BusinessObject, IComparable
    {
        #region fields
        private int? _distributor;
        private string _type;
        private bool? _isDistributor;
        private string _name;
        private string _number;
        private string _address1;
        private string _address2;
        private string _city;
        private string _state;
        private string _postCode;
        private string _country;
        private string _phone1;
        private string _phone2;
        private string _fax;
        private string _nickName;
        private string _primaryCoordinator;
        private string _owner;
        private string _creator;
        private DateTime? _createdDate;
        private string _modifier;
        private DateTime? _modifiedDate;
        private string _secondaryCoordinator;
        private bool? _isActive;
        private bool? _isDelete;
        private bool? _clients;
        private bool? _distributorLabels;
        private bool? _distributorPriceLevelCosts;
        private bool? _distributorPriceMarkups;
        private bool? _despatchTo;
        private bool? _order;
        private bool? _shipTo;
        #endregion
        
        #region Properties
        /// <summary></summary>
        public int? Distributor
        {   get {return _distributor;}
            set 
            {
                _distributor = value;
            }
        }
        /// <summary></summary>
        public string Type
        {   get {return _type;}
            set 
            {
                _type = value;
            }
        }
        /// <summary></summary>
        public bool? IsDistributor
        {   get {return _isDistributor;}
            set 
            {
                _isDistributor = value;
            }
        }
        /// <summary></summary>
        public string Name
        {   get {return _name;}
            set 
            {
                _name = value;
            }
        }
        /// <summary></summary>
        public string Number
        {   get {return _number;}
            set 
            {
                _number = value;
            }
        }
        /// <summary></summary>
        public string Address1
        {   get {return _address1;}
            set 
            {
                _address1 = value;
            }
        }
        /// <summary></summary>
        public string Address2
        {   get {return _address2;}
            set 
            {
                _address2 = value;
            }
        }
        /// <summary></summary>
        public string City
        {   get {return _city;}
            set 
            {
                _city = value;
            }
        }
        /// <summary></summary>
        public string State
        {   get {return _state;}
            set 
            {
                _state = value;
            }
        }
        /// <summary></summary>
        public string PostCode
        {   get {return _postCode;}
            set 
            {
                _postCode = value;
            }
        }
        /// <summary></summary>
        public string Country
        {   get {return _country;}
            set 
            {
                _country = value;
            }
        }
        /// <summary></summary>
        public string Phone1
        {   get {return _phone1;}
            set 
            {
                _phone1 = value;
            }
        }
        /// <summary></summary>
        public string Phone2
        {   get {return _phone2;}
            set 
            {
                _phone2 = value;
            }
        }
        /// <summary></summary>
        public string Fax
        {   get {return _fax;}
            set 
            {
                _fax = value;
            }
        }
        /// <summary></summary>
        public string NickName
        {   get {return _nickName;}
            set 
            {
                _nickName = value;
            }
        }
        /// <summary></summary>
        public string PrimaryCoordinator
        {   get {return _primaryCoordinator;}
            set 
            {
                _primaryCoordinator = value;
            }
        }
        /// <summary></summary>
        public string Owner
        {   get {return _owner;}
            set 
            {
                _owner = value;
            }
        }
        /// <summary></summary>
        public string Creator
        {   get {return _creator;}
            set 
            {
                _creator = value;
            }
        }
        /// <summary></summary>
        public DateTime? CreatedDate
        {   get {return _createdDate;}
            set 
            {
                _createdDate = value;
            }
        }
        /// <summary></summary>
        public string Modifier
        {   get {return _modifier;}
            set 
            {
                _modifier = value;
            }
        }
        /// <summary></summary>
        public DateTime? ModifiedDate
        {   get {return _modifiedDate;}
            set 
            {
                _modifiedDate = value;
            }
        }
        /// <summary></summary>
        public string SecondaryCoordinator
        {   get {return _secondaryCoordinator;}
            set 
            {
                _secondaryCoordinator = value;
            }
        }
        /// <summary></summary>
        public bool? IsActive
        {   get {return _isActive;}
            set 
            {
                _isActive = value;
            }
        }
        /// <summary></summary>
        public bool? IsDelete
        {   get {return _isDelete;}
            set 
            {
                _isDelete = value;
            }
        }
        /// <summary></summary>
        public bool? Clients
        {   get {return _clients;}
            set 
            {
                _clients = value;
            }
        }
        /// <summary></summary>
        public bool? DistributorLabels
        {   get {return _distributorLabels;}
            set 
            {
                _distributorLabels = value;
            }
        }
        /// <summary></summary>
        public bool? DistributorPriceLevelCosts
        {   get {return _distributorPriceLevelCosts;}
            set 
            {
                _distributorPriceLevelCosts = value;
            }
        }
        /// <summary></summary>
        public bool? DistributorPriceMarkups
        {   get {return _distributorPriceMarkups;}
            set 
            {
                _distributorPriceMarkups = value;
            }
        }
        /// <summary></summary>
        public bool? DespatchTo
        {   get {return _despatchTo;}
            set 
            {
                _despatchTo = value;
            }
        }
        /// <summary></summary>
        public bool? Order
        {   get {return _order;}
            set 
            {
                _order = value;
            }
        }
        /// <summary></summary>
        public bool? ShipTo
        {   get {return _shipTo;}
            set 
            {
                _shipTo = value;
            }
        }
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the ReturnDistributorDetailsViewBO class using the supplied Indico.DAL.ReturnDistributorDetailsView. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.ReturnDistributorDetailsView whose properties will be used to initialise the ReturnDistributorDetailsViewBO</param>
        internal ReturnDistributorDetailsViewBO(Indico.DAL.ReturnDistributorDetailsView obj)
        {
            // set the properties from the Indico.DAL.ReturnDistributorDetailsView 
            this.Distributor = obj.Distributor;
            this.Type = obj.Type;
            this.IsDistributor = obj.IsDistributor;
            this.Name = obj.Name;
            this.Number = obj.Number;
            this.Address1 = obj.Address1;
            this.Address2 = obj.Address2;
            this.City = obj.City;
            this.State = obj.State;
            this.PostCode = obj.PostCode;
            this.Country = obj.Country;
            this.Phone1 = obj.Phone1;
            this.Phone2 = obj.Phone2;
            this.Fax = obj.Fax;
            this.NickName = obj.NickName;
            this.PrimaryCoordinator = obj.PrimaryCoordinator;
            this.Owner = obj.Owner;
            this.Creator = obj.Creator;
            this.CreatedDate = obj.CreatedDate;
            this.Modifier = obj.Modifier;
            this.ModifiedDate = obj.ModifiedDate;
            this.SecondaryCoordinator = obj.SecondaryCoordinator;
            this.IsActive = obj.IsActive;
            this.IsDelete = obj.IsDelete;
            this.Clients = obj.Clients;
            this.DistributorLabels = obj.DistributorLabels;
            this.DistributorPriceLevelCosts = obj.DistributorPriceLevelCosts;
            this.DistributorPriceMarkups = obj.DistributorPriceMarkups;
            this.DespatchTo = obj.DespatchTo;
            this.Order = obj.Order;
            this.ShipTo = obj.ShipTo;
        }
        #endregion
        
        #region Internal utility methods
        internal void SetDAL(Indico.DAL.ReturnDistributorDetailsView obj, IndicoEntities context)
        {
            // set the Indico.DAL.ReturnDistributorDetailsView properties
            obj.Distributor = Convert.ToInt32(Distributor);
            obj.Type = Type;
            obj.IsDistributor = Convert.ToBoolean(IsDistributor);
            obj.Name = Name;
            obj.Number = Number;
            obj.Address1 = Address1;
            obj.Address2 = Address2;
            obj.City = City;
            obj.State = State;
            obj.PostCode = PostCode;
            obj.Country = Country;
            obj.Phone1 = Phone1;
            obj.Phone2 = Phone2;
            obj.Fax = Fax;
            obj.NickName = NickName;
            obj.PrimaryCoordinator = PrimaryCoordinator;
            obj.Owner = Owner;
            obj.Creator = Creator;
            obj.CreatedDate = Convert.ToDateTime(CreatedDate);
            obj.Modifier = Modifier;
            obj.ModifiedDate = Convert.ToDateTime(ModifiedDate);
            obj.SecondaryCoordinator = SecondaryCoordinator;
            obj.IsActive = Convert.ToBoolean(IsActive);
            obj.IsDelete = Convert.ToBoolean(IsDelete);
            obj.Clients = Convert.ToBoolean(Clients);
            obj.DistributorLabels = Convert.ToBoolean(DistributorLabels);
            obj.DistributorPriceLevelCosts = Convert.ToBoolean(DistributorPriceLevelCosts);
            obj.DistributorPriceMarkups = Convert.ToBoolean(DistributorPriceMarkups);
            obj.DespatchTo = Convert.ToBoolean(DespatchTo);
            obj.Order = Convert.ToBoolean(Order);
            obj.ShipTo = Convert.ToBoolean(ShipTo);
        }
        
        internal void SetBO(Indico.DAL.ReturnDistributorDetailsView obj)
        {
            // set the Indico.BusinessObjects.ReturnDistributorDetailsViewBO properties    
            this.Distributor = obj.Distributor;
            this.Type = obj.Type;
            this.IsDistributor = obj.IsDistributor;
            this.Name = obj.Name;
            this.Number = obj.Number;
            this.Address1 = obj.Address1;
            this.Address2 = obj.Address2;
            this.City = obj.City;
            this.State = obj.State;
            this.PostCode = obj.PostCode;
            this.Country = obj.Country;
            this.Phone1 = obj.Phone1;
            this.Phone2 = obj.Phone2;
            this.Fax = obj.Fax;
            this.NickName = obj.NickName;
            this.PrimaryCoordinator = obj.PrimaryCoordinator;
            this.Owner = obj.Owner;
            this.Creator = obj.Creator;
            this.CreatedDate = obj.CreatedDate;
            this.Modifier = obj.Modifier;
            this.ModifiedDate = obj.ModifiedDate;
            this.SecondaryCoordinator = obj.SecondaryCoordinator;
            this.IsActive = obj.IsActive;
            this.IsDelete = obj.IsDelete;
            this.Clients = obj.Clients;
            this.DistributorLabels = obj.DistributorLabels;
            this.DistributorPriceLevelCosts = obj.DistributorPriceLevelCosts;
            this.DistributorPriceMarkups = obj.DistributorPriceMarkups;
            this.DespatchTo = obj.DespatchTo;
            this.Order = obj.Order;
            this.ShipTo = obj.ShipTo;
        }
        
        internal void SetBO(Indico.BusinessObjects.ReturnDistributorDetailsViewBO obj)
        {
            // set this Indico.BusinessObjects.ReturnDistributorDetailsViewBO properties
            this.Distributor = obj.Distributor;
            this.Type = obj.Type;
            this.IsDistributor = obj.IsDistributor;
            this.Name = obj.Name;
            this.Number = obj.Number;
            this.Address1 = obj.Address1;
            this.Address2 = obj.Address2;
            this.City = obj.City;
            this.State = obj.State;
            this.PostCode = obj.PostCode;
            this.Country = obj.Country;
            this.Phone1 = obj.Phone1;
            this.Phone2 = obj.Phone2;
            this.Fax = obj.Fax;
            this.NickName = obj.NickName;
            this.PrimaryCoordinator = obj.PrimaryCoordinator;
            this.Owner = obj.Owner;
            this.Creator = obj.Creator;
            this.CreatedDate = obj.CreatedDate;
            this.Modifier = obj.Modifier;
            this.ModifiedDate = obj.ModifiedDate;
            this.SecondaryCoordinator = obj.SecondaryCoordinator;
            this.IsActive = obj.IsActive;
            this.IsDelete = obj.IsDelete;
            this.Clients = obj.Clients;
            this.DistributorLabels = obj.DistributorLabels;
            this.DistributorPriceLevelCosts = obj.DistributorPriceLevelCosts;
            this.DistributorPriceMarkups = obj.DistributorPriceMarkups;
            this.DespatchTo = obj.DespatchTo;
            this.Order = obj.Order;
            this.ShipTo = obj.ShipTo;
        }
        
        private static List<Indico.BusinessObjects.ReturnDistributorDetailsViewBO> IQueryableToList(IQueryable<Indico.DAL.ReturnDistributorDetailsView> oQuery)
        {
            List<Indico.DAL.ReturnDistributorDetailsView> oList = oQuery.ToList();
            List<Indico.BusinessObjects.ReturnDistributorDetailsViewBO> rList = new List<Indico.BusinessObjects.ReturnDistributorDetailsViewBO>(oList.Count);
            foreach (Indico.DAL.ReturnDistributorDetailsView o in oList)
            {
                Indico.BusinessObjects.ReturnDistributorDetailsViewBO obj = new Indico.BusinessObjects.ReturnDistributorDetailsViewBO(o);
                rList.Add(obj);
            }
            return rList;
        }
        #endregion
        
        #region BusinessObject methods
        
        #region GetAllObject
        public static List<Indico.BusinessObjects.ReturnDistributorDetailsViewBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public static List<Indico.BusinessObjects.ReturnDistributorDetailsViewBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public static List<Indico.BusinessObjects.ReturnDistributorDetailsViewBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public static List<Indico.BusinessObjects.ReturnDistributorDetailsViewBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnDistributorDetailsView> oQuery =
                (from o in context.ReturnDistributorDetailsView
                 orderby o.Distributor
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.Distributor).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnDistributorDetailsViewBO> returndistributordetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return returndistributordetailsviews;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.ReturnDistributorDetailsViewBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.ReturnDistributorDetailsViewBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnDistributorDetailsViewBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnDistributorDetailsViewBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnDistributorDetailsView> oQuery =
                (from o in context.ReturnDistributorDetailsView
                 where
                    (this.Distributor == null || this.Distributor == o.Distributor) &&
                    (this.Type == null || this.Type == o.Type) &&
                    (this.IsDistributor == null || this.IsDistributor == o.IsDistributor) &&
                    (this.Name == null || this.Name == o.Name) &&
                    (this.Number == null || this.Number == o.Number) &&
                    (this.Address1 == null || this.Address1 == o.Address1) &&
                    (this.Address2 == null || this.Address2 == o.Address2) &&
                    (this.City == null || this.City == o.City) &&
                    (this.State == null || this.State == o.State) &&
                    (this.PostCode == null || this.PostCode == o.PostCode) &&
                    (this.Country == null || this.Country == o.Country) &&
                    (this.Phone1 == null || this.Phone1 == o.Phone1) &&
                    (this.Phone2 == null || this.Phone2 == o.Phone2) &&
                    (this.Fax == null || this.Fax == o.Fax) &&
                    (this.NickName == null || this.NickName == o.NickName) &&
                    (this.PrimaryCoordinator == null || this.PrimaryCoordinator == o.PrimaryCoordinator) &&
                    (this.Owner == null || this.Owner == o.Owner) &&
                    (this.Creator == null || this.Creator == o.Creator) &&
                    (this.CreatedDate == null || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == null || this.Modifier == o.Modifier) &&
                    (this.ModifiedDate == null || this.ModifiedDate == o.ModifiedDate) &&
                    (this.SecondaryCoordinator == null || this.SecondaryCoordinator == o.SecondaryCoordinator) &&
                    (this.IsActive == null || this.IsActive == o.IsActive) &&
                    (this.IsDelete == null || this.IsDelete == o.IsDelete) &&
                    (this.Clients == null || this.Clients == o.Clients) &&
                    (this.DistributorLabels == null || this.DistributorLabels == o.DistributorLabels) &&
                    (this.DistributorPriceLevelCosts == null || this.DistributorPriceLevelCosts == o.DistributorPriceLevelCosts) &&
                    (this.DistributorPriceMarkups == null || this.DistributorPriceMarkups == o.DistributorPriceMarkups) &&
                    (this.DespatchTo == null || this.DespatchTo == o.DespatchTo) &&
                    (this.Order == null || this.Order == o.Order) &&
                    (this.ShipTo == null || this.ShipTo == o.ShipTo) 
                 orderby o.Distributor
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.Distributor).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnDistributorDetailsViewBO> returndistributordetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return returndistributordetailsviews;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnDistributorDetailsView
                 where
                    (this.Distributor == null || this.Distributor == o.Distributor) &&
                    (this.Type == null || this.Type == o.Type) &&
                    (this.IsDistributor == null || this.IsDistributor == o.IsDistributor) &&
                    (this.Name == null || this.Name == o.Name) &&
                    (this.Number == null || this.Number == o.Number) &&
                    (this.Address1 == null || this.Address1 == o.Address1) &&
                    (this.Address2 == null || this.Address2 == o.Address2) &&
                    (this.City == null || this.City == o.City) &&
                    (this.State == null || this.State == o.State) &&
                    (this.PostCode == null || this.PostCode == o.PostCode) &&
                    (this.Country == null || this.Country == o.Country) &&
                    (this.Phone1 == null || this.Phone1 == o.Phone1) &&
                    (this.Phone2 == null || this.Phone2 == o.Phone2) &&
                    (this.Fax == null || this.Fax == o.Fax) &&
                    (this.NickName == null || this.NickName == o.NickName) &&
                    (this.PrimaryCoordinator == null || this.PrimaryCoordinator == o.PrimaryCoordinator) &&
                    (this.Owner == null || this.Owner == o.Owner) &&
                    (this.Creator == null || this.Creator == o.Creator) &&
                    (this.CreatedDate == null || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == null || this.Modifier == o.Modifier) &&
                    (this.ModifiedDate == null || this.ModifiedDate == o.ModifiedDate) &&
                    (this.SecondaryCoordinator == null || this.SecondaryCoordinator == o.SecondaryCoordinator) &&
                    (this.IsActive == null || this.IsActive == o.IsActive) &&
                    (this.IsDelete == null || this.IsDelete == o.IsDelete) &&
                    (this.Clients == null || this.Clients == o.Clients) &&
                    (this.DistributorLabels == null || this.DistributorLabels == o.DistributorLabels) &&
                    (this.DistributorPriceLevelCosts == null || this.DistributorPriceLevelCosts == o.DistributorPriceLevelCosts) &&
                    (this.DistributorPriceMarkups == null || this.DistributorPriceMarkups == o.DistributorPriceMarkups) &&
                    (this.DespatchTo == null || this.DespatchTo == o.DespatchTo) &&
                    (this.Order == null || this.Order == o.Order) &&
                    (this.ShipTo == null || this.ShipTo == o.ShipTo) 
                 orderby o.Distributor
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.ReturnDistributorDetailsViewBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.ReturnDistributorDetailsViewBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnDistributorDetailsViewBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnDistributorDetailsViewBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnDistributorDetailsView> oQuery =
                (from o in context.ReturnDistributorDetailsView
                 where
                    (this.Distributor == null || o.Distributor == this.Distributor) &&
                    (this.Type == null || o.Type.Contains(this.Type)) &&
                    (this.IsDistributor == null || o.IsDistributor == this.IsDistributor) &&
                    (this.Name == null || o.Name.Contains(this.Name)) &&
                    (this.Number == null || o.Number.Contains(this.Number)) &&
                    (this.Address1 == null || o.Address1.Contains(this.Address1)) &&
                    (this.Address2 == null || o.Address2.Contains(this.Address2)) &&
                    (this.City == null || o.City.Contains(this.City)) &&
                    (this.State == null || o.State.Contains(this.State)) &&
                    (this.PostCode == null || o.PostCode.Contains(this.PostCode)) &&
                    (this.Country == null || o.Country.Contains(this.Country)) &&
                    (this.Phone1 == null || o.Phone1.Contains(this.Phone1)) &&
                    (this.Phone2 == null || o.Phone2.Contains(this.Phone2)) &&
                    (this.Fax == null || o.Fax.Contains(this.Fax)) &&
                    (this.NickName == null || o.NickName.Contains(this.NickName)) &&
                    (this.PrimaryCoordinator == null || o.PrimaryCoordinator.Contains(this.PrimaryCoordinator)) &&
                    (this.Owner == null || o.Owner.Contains(this.Owner)) &&
                    (this.Creator == null || o.Creator.Contains(this.Creator)) &&
                    (this.CreatedDate == null || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == null || o.Modifier.Contains(this.Modifier)) &&
                    (this.ModifiedDate == null || o.ModifiedDate == this.ModifiedDate) &&
                    (this.SecondaryCoordinator == null || o.SecondaryCoordinator.Contains(this.SecondaryCoordinator)) &&
                    (this.IsActive == null || o.IsActive == this.IsActive) &&
                    (this.IsDelete == null || o.IsDelete == this.IsDelete) &&
                    (this.Clients == null || o.Clients == this.Clients) &&
                    (this.DistributorLabels == null || o.DistributorLabels == this.DistributorLabels) &&
                    (this.DistributorPriceLevelCosts == null || o.DistributorPriceLevelCosts == this.DistributorPriceLevelCosts) &&
                    (this.DistributorPriceMarkups == null || o.DistributorPriceMarkups == this.DistributorPriceMarkups) &&
                    (this.DespatchTo == null || o.DespatchTo == this.DespatchTo) &&
                    (this.Order == null || o.Order == this.Order) &&
                    (this.ShipTo == null || o.ShipTo == this.ShipTo) 
                 orderby o.Distributor
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.Distributor).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnDistributorDetailsViewBO> returndistributordetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return returndistributordetailsviews;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnDistributorDetailsView
                 where
                    (this.Distributor == null || o.Distributor == this.Distributor) &&
                    (this.Type == null || o.Type.Contains(this.Type)) &&
                    (this.IsDistributor == null || o.IsDistributor == this.IsDistributor) &&
                    (this.Name == null || o.Name.Contains(this.Name)) &&
                    (this.Number == null || o.Number.Contains(this.Number)) &&
                    (this.Address1 == null || o.Address1.Contains(this.Address1)) &&
                    (this.Address2 == null || o.Address2.Contains(this.Address2)) &&
                    (this.City == null || o.City.Contains(this.City)) &&
                    (this.State == null || o.State.Contains(this.State)) &&
                    (this.PostCode == null || o.PostCode.Contains(this.PostCode)) &&
                    (this.Country == null || o.Country.Contains(this.Country)) &&
                    (this.Phone1 == null || o.Phone1.Contains(this.Phone1)) &&
                    (this.Phone2 == null || o.Phone2.Contains(this.Phone2)) &&
                    (this.Fax == null || o.Fax.Contains(this.Fax)) &&
                    (this.NickName == null || o.NickName.Contains(this.NickName)) &&
                    (this.PrimaryCoordinator == null || o.PrimaryCoordinator.Contains(this.PrimaryCoordinator)) &&
                    (this.Owner == null || o.Owner.Contains(this.Owner)) &&
                    (this.Creator == null || o.Creator.Contains(this.Creator)) &&
                    (this.CreatedDate == null || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == null || o.Modifier.Contains(this.Modifier)) &&
                    (this.ModifiedDate == null || o.ModifiedDate == this.ModifiedDate) &&
                    (this.SecondaryCoordinator == null || o.SecondaryCoordinator.Contains(this.SecondaryCoordinator)) &&
                    (this.IsActive == null || o.IsActive == this.IsActive) &&
                    (this.IsDelete == null || o.IsDelete == this.IsDelete) &&
                    (this.Clients == null || o.Clients == this.Clients) &&
                    (this.DistributorLabels == null || o.DistributorLabels == this.DistributorLabels) &&
                    (this.DistributorPriceLevelCosts == null || o.DistributorPriceLevelCosts == this.DistributorPriceLevelCosts) &&
                    (this.DistributorPriceMarkups == null || o.DistributorPriceMarkups == this.DistributorPriceMarkups) &&
                    (this.DespatchTo == null || o.DespatchTo == this.DespatchTo) &&
                    (this.Order == null || o.Order == this.Order) &&
                    (this.ShipTo == null || o.ShipTo == this.ShipTo) 
                 orderby o.Distributor
                 select o).Count();
            
        }
        
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.ReturnDistributorDetailsViewBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.ReturnDistributorDetailsViewBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.ReturnDistributorDetailsViewBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.ReturnDistributorDetailsViewBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.ReturnDistributorDetailsView> oQuery =
                (from o in context.ReturnDistributorDetailsView
                 where
                    (this.Distributor == null || this.Distributor == o.Distributor) && 
                    (this.IsDistributor == null || this.IsDistributor == o.IsDistributor) && 
                    (this.CreatedDate == null || this.CreatedDate == o.CreatedDate) && 
                    (this.ModifiedDate == null || this.ModifiedDate == o.ModifiedDate) && 
                    (this.IsActive == null || this.IsActive == o.IsActive) && 
                    (this.IsDelete == null || this.IsDelete == o.IsDelete) && 
                    (this.Clients == null || this.Clients == o.Clients) && 
                    (this.DistributorLabels == null || this.DistributorLabels == o.DistributorLabels) && 
                    (this.DistributorPriceLevelCosts == null || this.DistributorPriceLevelCosts == o.DistributorPriceLevelCosts) && 
                    (this.DistributorPriceMarkups == null || this.DistributorPriceMarkups == o.DistributorPriceMarkups) && 
                    (this.DespatchTo == null || this.DespatchTo == o.DespatchTo) && 
                    (this.Order == null || this.Order == o.Order) && 
                    (this.ShipTo == null || this.ShipTo == o.ShipTo) && 
                    ((o.Type.Contains(this.Type)) ||
                    (o.Name.Contains(this.Name)) ||
                    (o.Number.Contains(this.Number)) ||
                    (o.Address1.Contains(this.Address1)) ||
                    (o.Address2.Contains(this.Address2)) ||
                    (o.City.Contains(this.City)) ||
                    (o.State.Contains(this.State)) ||
                    (o.PostCode.Contains(this.PostCode)) ||
                    (o.Country.Contains(this.Country)) ||
                    (o.Phone1.Contains(this.Phone1)) ||
                    (o.Phone2.Contains(this.Phone2)) ||
                    (o.Fax.Contains(this.Fax)) ||
                    (o.NickName.Contains(this.NickName)) ||
                    (o.PrimaryCoordinator.Contains(this.PrimaryCoordinator)) ||
                    (o.Owner.Contains(this.Owner)) ||
                    (o.Creator.Contains(this.Creator)) ||
                    (o.Modifier.Contains(this.Modifier)) ||
                    (o.SecondaryCoordinator.Contains(this.SecondaryCoordinator)) ||
                    (this.Type == null && this.Name == null && this.Number == null && this.Address1 == null && this.Address2 == null && this.City == null && this.State == null && this.PostCode == null && this.Country == null && this.Phone1 == null && this.Phone2 == null && this.Fax == null && this.NickName == null && this.PrimaryCoordinator == null && this.Owner == null && this.Creator == null && this.Modifier == null && this.SecondaryCoordinator == null ))
                 orderby o.Distributor
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.Distributor).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.ReturnDistributorDetailsViewBO> returndistributordetailsviews = IQueryableToList(oQuery);
            context.Dispose();
            return returndistributordetailsviews;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = new IndicoEntities();
            return (from o in context.ReturnDistributorDetailsView
                 where
                    (this.Distributor == null || this.Distributor == o.Distributor) && 
                    (this.IsDistributor == null || this.IsDistributor == o.IsDistributor) && 
                    (this.CreatedDate == null || this.CreatedDate == o.CreatedDate) && 
                    (this.ModifiedDate == null || this.ModifiedDate == o.ModifiedDate) && 
                    (this.IsActive == null || this.IsActive == o.IsActive) && 
                    (this.IsDelete == null || this.IsDelete == o.IsDelete) && 
                    (this.Clients == null || this.Clients == o.Clients) && 
                    (this.DistributorLabels == null || this.DistributorLabels == o.DistributorLabels) && 
                    (this.DistributorPriceLevelCosts == null || this.DistributorPriceLevelCosts == o.DistributorPriceLevelCosts) && 
                    (this.DistributorPriceMarkups == null || this.DistributorPriceMarkups == o.DistributorPriceMarkups) && 
                    (this.DespatchTo == null || this.DespatchTo == o.DespatchTo) && 
                    (this.Order == null || this.Order == o.Order) && 
                    (this.ShipTo == null || this.ShipTo == o.ShipTo) && 
                    ((o.Type.Contains(this.Type)) ||
                    (o.Name.Contains(this.Name)) ||
                    (o.Number.Contains(this.Number)) ||
                    (o.Address1.Contains(this.Address1)) ||
                    (o.Address2.Contains(this.Address2)) ||
                    (o.City.Contains(this.City)) ||
                    (o.State.Contains(this.State)) ||
                    (o.PostCode.Contains(this.PostCode)) ||
                    (o.Country.Contains(this.Country)) ||
                    (o.Phone1.Contains(this.Phone1)) ||
                    (o.Phone2.Contains(this.Phone2)) ||
                    (o.Fax.Contains(this.Fax)) ||
                    (o.NickName.Contains(this.NickName)) ||
                    (o.PrimaryCoordinator.Contains(this.PrimaryCoordinator)) ||
                    (o.Owner.Contains(this.Owner)) ||
                    (o.Creator.Contains(this.Creator)) ||
                    (o.Modifier.Contains(this.Modifier)) ||
                    (o.SecondaryCoordinator.Contains(this.SecondaryCoordinator)) ||
                    (this.Type == null && this.Name == null && this.Number == null && this.Address1 == null && this.Address2 == null && this.City == null && this.State == null && this.PostCode == null && this.Country == null && this.Phone1 == null && this.Phone2 == null && this.Fax == null && this.NickName == null && this.PrimaryCoordinator == null && this.Owner == null && this.Creator == null && this.Modifier == null && this.SecondaryCoordinator == null ))
                 orderby o.Distributor
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.ReturnDistributorDetailsViewBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.ReturnDistributorDetailsViewBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.ReturnDistributorDetailsViewBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.ReturnDistributorDetailsViewBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.ReturnDistributorDetailsViewBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.ReturnDistributorDetailsViewBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.ReturnDistributorDetailsViewBO))
                return 1;
            Indico.BusinessObjects.ReturnDistributorDetailsViewBOComparer c = new Indico.BusinessObjects.ReturnDistributorDetailsViewBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.ReturnDistributorDetailsViewBO);
        }

        #endregion
        #endregion
    }
    
    #region ReturnDistributorDetailsViewBOComparer
    public class ReturnDistributorDetailsViewBOComparer : IComparer<Indico.BusinessObjects.ReturnDistributorDetailsViewBO>
    {
        private string propertyToCompareName;
        public ReturnDistributorDetailsViewBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.ReturnDistributorDetailsViewBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.ReturnDistributorDetailsViewBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public ReturnDistributorDetailsViewBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.ReturnDistributorDetailsViewBO> Members
        public int Compare(Indico.BusinessObjects.ReturnDistributorDetailsViewBO x, Indico.BusinessObjects.ReturnDistributorDetailsViewBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.ReturnDistributorDetailsViewBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.ReturnDistributorDetailsViewBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.ReturnDistributorDetailsViewBO x, Indico.BusinessObjects.ReturnDistributorDetailsViewBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
