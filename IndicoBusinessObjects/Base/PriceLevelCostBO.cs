// This file is generated by CodeSmith. Do not edit. All edits to this file will be lost. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Reflection;
using System.Xml.Serialization;

using Indico.DAL;

//namespace Indico.BusinessObjects
namespace Indico.BusinessObjects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class PriceLevelCostBO : BusinessObject, IComparable
    {
        #region fields
        #region Scalar Fields
        private int id;
        private DateTime _createdDate = DateTime.MinValue;
        private int _creator;
        private decimal _factoryCost;
        private decimal _indimanCost;
        private DateTime _modifiedDate = DateTime.MinValue;
        private int _modifier;
        private int _price;
        private int _priceLevel;
        #endregion
        
        #region Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objCreator;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.UserBO _objModifier;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.PriceBO _objPrice;
        [NonSerialized][XmlIgnoreAttribute]
        private Indico.BusinessObjects.PriceLevelBO _objPriceLevel;
        #endregion
        
        #region Foreign Table Foreign Key fields
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO> distributorPriceLevelCostsWhereThisIsPriceLevelCostList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _distributorPriceLevelCostsWhereThisIsPriceLevelCostLoaded;
        [NonSerialized][XmlIgnoreAttribute]
        private IndicoList<Indico.BusinessObjects.LabelPriceLevelCostBO> labelPriceLevelCostsWhereThisIsPriceLevelCostList;
        [NonSerialized][XmlIgnoreAttribute]
        private bool _labelPriceLevelCostsWhereThisIsPriceLevelCostLoaded;
        #endregion
        
        #region Other fields
        
        private Indico.DAL.PriceLevelCost _objDAL = null;
        private bool _doNotUpdateDALObject = false;
        
        #endregion
        
        #endregion
        
        #region Properties
        /// <summary>The Primary Key for this object</summary>
        public int ID
        {   get {return id;}
            set 
            {
                OnIDChanging(value);
                id = value;
                OnIDChanged();
            }
        }
        
        /// <summary>.</summary>
        public DateTime CreatedDate
        {   
            get {return _createdDate;}
            set 
            {
                OnCreatedDateChanging(value);
                _createdDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.CreatedDate = value;
                }
                OnCreatedDateChanged();
            }
        }
        /// <summary>.</summary>
        public int Creator
        {   
            get {return _creator;}
            set 
            {
                OnCreatorChanging(value);
                _creator = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Creator = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Creator = null;
                OnCreatorChanged();
            }
        }
        /// <summary>.</summary>
        public decimal FactoryCost
        {   
            get {return _factoryCost;}
            set 
            {
                OnFactoryCostChanging(value);
                _factoryCost = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.FactoryCost = value;
                }
                OnFactoryCostChanged();
            }
        }
        /// <summary>.</summary>
        public decimal IndimanCost
        {   
            get {return _indimanCost;}
            set 
            {
                OnIndimanCostChanging(value);
                _indimanCost = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.IndimanCost = value;
                }
                OnIndimanCostChanged();
            }
        }
        /// <summary>.</summary>
        public DateTime ModifiedDate
        {   
            get {return _modifiedDate;}
            set 
            {
                OnModifiedDateChanging(value);
                _modifiedDate = value;
                if (!this._doNotUpdateDALObject && this.Context != null && this.ObjDAL != null){
                    this.ObjDAL.ModifiedDate = value;
                }
                OnModifiedDateChanged();
            }
        }
        /// <summary>.</summary>
        public int Modifier
        {   
            get {return _modifier;}
            set 
            {
                OnModifierChanging(value);
                _modifier = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Modifier = (from o in this._context.Context.User
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.User>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Modifier = null;
                OnModifierChanged();
            }
        }
        /// <summary>.</summary>
        public int Price
        {   
            get {return _price;}
            set 
            {
                OnPriceChanging(value);
                _price = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.Price = (from o in this._context.Context.Price
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.Price>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.Price = null;
                OnPriceChanged();
            }
        }
        /// <summary>.</summary>
        public int PriceLevel
        {   
            get {return _priceLevel;}
            set 
            {
                OnPriceLevelChanging(value);
                _priceLevel = value;
                if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && ((int)value != 0))
                {
                    this.ObjDAL.PriceLevel = (from o in this._context.Context.PriceLevel
                                           where o.ID == (int)value
                                           select o).ToList<Indico.DAL.PriceLevel>()[0];
                }
                else if (!this._doNotUpdateDALObject && this._context != null && this.ObjDAL != null && (int)value == 0)
                    this.ObjDAL.PriceLevel = null;
                OnPriceLevelChanged();
            }
        }
        
        internal Indico.DAL.PriceLevelCost ObjDAL
        {
            get 
            {
                if (_objDAL == null && base._createDAL)
                {
                    _objDAL = this.SetDAL(this.Context.Context);
                    this.ObjDAL.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(obj_PropertyChanged);
                }

                return _objDAL;
            }
            set 
            {
                _objDAL = value;
            }
        }
        
        #endregion
        
        #region Non-scalar Properties
        
        #region Foreign Key Objects
        ///<summary>The UserBO object identified by the value of Creator</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objCreator
        {
            get
            {
                if ( _creator > 0 && _objCreator == null)
                {
                        if (this._context == null)
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objCreator = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objCreator.ID = _creator;
                        _objCreator.GetObject(); 
                }
                return _objCreator;
            }
            set
            { 
                _objCreator = value;
                _creator = _objCreator.ID;
            }
        }
        ///<summary>The UserBO object identified by the value of Modifier</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.UserBO objModifier
        {
            get
            {
                if ( _modifier > 0 && _objModifier == null)
                {
                        if (this._context == null)
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO();
                        }
                        else
                        {
                            _objModifier = new Indico.BusinessObjects.UserBO(ref this._context);
                        }
                        _objModifier.ID = _modifier;
                        _objModifier.GetObject(); 
                }
                return _objModifier;
            }
            set
            { 
                _objModifier = value;
                _modifier = _objModifier.ID;
            }
        }
        ///<summary>The PriceBO object identified by the value of Price</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.PriceBO objPrice
        {
            get
            {
                if ( _price > 0 && _objPrice == null)
                {
                        if (this._context == null)
                        {
                            _objPrice = new Indico.BusinessObjects.PriceBO();
                        }
                        else
                        {
                            _objPrice = new Indico.BusinessObjects.PriceBO(ref this._context);
                        }
                        _objPrice.ID = _price;
                        _objPrice.GetObject(); 
                }
                return _objPrice;
            }
            set
            { 
                _objPrice = value;
                _price = _objPrice.ID;
            }
        }
        ///<summary>The PriceLevelBO object identified by the value of PriceLevel</summary>
        [XmlIgnoreAttribute]
        public Indico.BusinessObjects.PriceLevelBO objPriceLevel
        {
            get
            {
                if ( _priceLevel > 0 && _objPriceLevel == null)
                {
                        if (this._context == null)
                        {
                            _objPriceLevel = new Indico.BusinessObjects.PriceLevelBO();
                        }
                        else
                        {
                            _objPriceLevel = new Indico.BusinessObjects.PriceLevelBO(ref this._context);
                        }
                        _objPriceLevel.ID = _priceLevel;
                        _objPriceLevel.GetObject(); 
                }
                return _objPriceLevel;
            }
            set
            { 
                _objPriceLevel = value;
                _priceLevel = _objPriceLevel.ID;
            }
        }
        #endregion
        
        #region Foreign Object Foreign Key Collections
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO> DistributorPriceLevelCostsWhereThisIsPriceLevelCost // FK_DistributorPriceLevelCost_PriceLevelCost
        {
            get
            {
                if (!_distributorPriceLevelCostsWhereThisIsPriceLevelCostLoaded)
                {
                    _distributorPriceLevelCostsWhereThisIsPriceLevelCostLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.PriceLevelCost obj = (from o in context.PriceLevelCost
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.DistributorPriceLevelCostsWhereThisIsPriceLevelCost.Load();
                        distributorPriceLevelCostsWhereThisIsPriceLevelCostList = new IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO>(obj.DistributorPriceLevelCostsWhereThisIsPriceLevelCost.Count);
                        
                        foreach (Indico.DAL.DistributorPriceLevelCost o in obj.DistributorPriceLevelCostsWhereThisIsPriceLevelCost)
                        {
                            Indico.BusinessObjects.DistributorPriceLevelCostBO fkObj = new Indico.BusinessObjects.DistributorPriceLevelCostBO(o, ref this._context);
                            distributorPriceLevelCostsWhereThisIsPriceLevelCostList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        distributorPriceLevelCostsWhereThisIsPriceLevelCostList = new IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO>();
                    }
                    
                    distributorPriceLevelCostsWhereThisIsPriceLevelCostList.OnBeforeRemove += new EventHandler(DistributorPriceLevelCostsWhereThisIsPriceLevelCostList_OnBeforeRemove);
                    distributorPriceLevelCostsWhereThisIsPriceLevelCostList.OnAfterAdd += new EventHandler(DistributorPriceLevelCostsWhereThisIsPriceLevelCostList_OnAfterAdd);
                }
                
                return distributorPriceLevelCostsWhereThisIsPriceLevelCostList;
            }
        }
        [XmlIgnoreAttribute]
        public IndicoList<Indico.BusinessObjects.LabelPriceLevelCostBO> LabelPriceLevelCostsWhereThisIsPriceLevelCost // FK_LabelPriceLevelCost_PriceLevelCost
        {
            get
            {
                if (!_labelPriceLevelCostsWhereThisIsPriceLevelCostLoaded)
                {
                    _labelPriceLevelCostsWhereThisIsPriceLevelCostLoaded = true;
                    if (this.ID > 0)
                    {
                         IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                        Indico.DAL.PriceLevelCost obj = (from o in context.PriceLevelCost
                                     where o.ID == this.ID
                                     select o).FirstOrDefault();

                        obj.LabelPriceLevelCostsWhereThisIsPriceLevelCost.Load();
                        labelPriceLevelCostsWhereThisIsPriceLevelCostList = new IndicoList<Indico.BusinessObjects.LabelPriceLevelCostBO>(obj.LabelPriceLevelCostsWhereThisIsPriceLevelCost.Count);
                        
                        foreach (Indico.DAL.LabelPriceLevelCost o in obj.LabelPriceLevelCostsWhereThisIsPriceLevelCost)
                        {
                            Indico.BusinessObjects.LabelPriceLevelCostBO fkObj = new Indico.BusinessObjects.LabelPriceLevelCostBO(o, ref this._context);
                            labelPriceLevelCostsWhereThisIsPriceLevelCostList.Add(fkObj);
                        }
                        
                        if (this.Context == null)
                        {
                            context.Dispose();
                        }
                    }
                    else
                    {
                        labelPriceLevelCostsWhereThisIsPriceLevelCostList = new IndicoList<Indico.BusinessObjects.LabelPriceLevelCostBO>();
                    }
                    
                    labelPriceLevelCostsWhereThisIsPriceLevelCostList.OnBeforeRemove += new EventHandler(LabelPriceLevelCostsWhereThisIsPriceLevelCostList_OnBeforeRemove);
                    labelPriceLevelCostsWhereThisIsPriceLevelCostList.OnAfterAdd += new EventHandler(LabelPriceLevelCostsWhereThisIsPriceLevelCostList_OnAfterAdd);
                }
                
                return labelPriceLevelCostsWhereThisIsPriceLevelCostList;
            }
        }
        #endregion
        
        #endregion
        
        #region Internal Constructors
        /// <summary>
        /// Creates an instance of the PriceLevelCostBO class using the supplied Indico.DAL.PriceLevelCost. 
        /// </summary>
        /// <param name="obj">a Indico.DAL.PriceLevelCost whose properties will be used to initialise the PriceLevelCostBO</param>
        internal PriceLevelCostBO(Indico.DAL.PriceLevelCost obj, ref IndicoContext context)
        {
            this._doNotUpdateDALObject = true;
            
            this.Context = context;
        
            // set the properties from the Indico.DAL.PriceLevelCost 
            this.ID = obj.ID;
            
            this.CreatedDate = obj.CreatedDate;
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.FactoryCost = obj.FactoryCost;
            this.IndimanCost = obj.IndimanCost;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Price = (obj.PriceReference.EntityKey != null && obj.PriceReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PriceReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.PriceLevel = (obj.PriceLevelReference.EntityKey != null && obj.PriceLevelReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PriceLevelReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        #endregion
        
        #region Internal utility methods
        internal Indico.DAL.PriceLevelCost SetDAL(IndicoEntities context)
        {
            this._doNotUpdateDALObject = true;
        
            // set the Indico.DAL.PriceLevelCost properties
            Indico.DAL.PriceLevelCost obj = new Indico.DAL.PriceLevelCost();
            
            if (this.ID > 0)
            {
                obj = context.PriceLevelCost.FirstOrDefault<PriceLevelCost>(o => o.ID == this.ID);
            }
            
            obj.CreatedDate = this.CreatedDate;
            obj.FactoryCost = this.FactoryCost;
            obj.IndimanCost = this.IndimanCost;
            obj.ModifiedDate = this.ModifiedDate;
            
            if (this.Creator > 0) obj.Creator = context.User.FirstOrDefault(o => o.ID == this.Creator);
            if (this.Modifier > 0) obj.Modifier = context.User.FirstOrDefault(o => o.ID == this.Modifier);
            if (this.Price > 0) obj.Price = context.Price.FirstOrDefault(o => o.ID == this.Price);
            if (this.PriceLevel > 0) obj.PriceLevel = context.PriceLevel.FirstOrDefault(o => o.ID == this.PriceLevel);
            
            if (_distributorPriceLevelCostsWhereThisIsPriceLevelCostLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.DistributorPriceLevelCostBO.ToEntityList(this.DistributorPriceLevelCostsWhereThisIsPriceLevelCost, context), 
                    obj.DistributorPriceLevelCostsWhereThisIsPriceLevelCost);
            if (_labelPriceLevelCostsWhereThisIsPriceLevelCostLoaded)
                BusinessObject.SynchroniseEntityList(
                    Indico.BusinessObjects.LabelPriceLevelCostBO.ToEntityList(this.LabelPriceLevelCostsWhereThisIsPriceLevelCost, context), 
                    obj.LabelPriceLevelCostsWhereThisIsPriceLevelCost);
            
            this._doNotUpdateDALObject = false;
            
            return obj;
        }
        
        internal void SetBO(System.Data.Objects.DataClasses.EntityObject eObj)
        {
            this._doNotUpdateDALObject = true;
            
            // Check the received type
            if (eObj.GetType() != typeof(Indico.DAL.PriceLevelCost))
            {
                throw new FormatException("Received wrong parameter type...");
            }

            Indico.DAL.PriceLevelCost obj = (Indico.DAL.PriceLevelCost)eObj;
            
            // set the Indico.BusinessObjects.PriceLevelCostBO properties
            this.ID = obj.ID;
            
            this.CreatedDate = obj.CreatedDate;
            this.FactoryCost = obj.FactoryCost;
            this.IndimanCost = obj.IndimanCost;
            this.ModifiedDate = obj.ModifiedDate;
            
            this.Creator = (obj.CreatorReference.EntityKey != null && obj.CreatorReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.CreatorReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Modifier = (obj.ModifierReference.EntityKey != null && obj.ModifierReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.ModifierReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.Price = (obj.PriceReference.EntityKey != null && obj.PriceReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PriceReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            this.PriceLevel = (obj.PriceLevelReference.EntityKey != null && obj.PriceLevelReference.EntityKey.EntityKeyValues.Count() > 0)
                ? (int)((System.Data.EntityKeyMember)obj.PriceLevelReference.EntityKey.EntityKeyValues.GetValue(0)).Value
                : 0;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal void SetBO(Indico.BusinessObjects.PriceLevelCostBO obj)
        {
            this._doNotUpdateDALObject = true;
            
            // set this Indico.BusinessObjects.PriceLevelCostBO properties
            this.ID = obj.ID;
            
            this.CreatedDate = obj.CreatedDate;
            this.Creator = obj.Creator;
            this.FactoryCost = obj.FactoryCost;
            this.IndimanCost = obj.IndimanCost;
            this.ModifiedDate = obj.ModifiedDate;
            this.Modifier = obj.Modifier;
            this.Price = obj.Price;
            this.PriceLevel = obj.PriceLevel;
            
            this._doNotUpdateDALObject = false;
        }
        
        internal List<Indico.BusinessObjects.PriceLevelCostBO> IQueryableToList(IQueryable<Indico.DAL.PriceLevelCost> oQuery)
        {
            List<Indico.DAL.PriceLevelCost> oList = oQuery.ToList();
            List<Indico.BusinessObjects.PriceLevelCostBO> rList = new List<Indico.BusinessObjects.PriceLevelCostBO>(oList.Count);
            foreach (Indico.DAL.PriceLevelCost o in oList)
            {
                Indico.BusinessObjects.PriceLevelCostBO obj = new Indico.BusinessObjects.PriceLevelCostBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal List<Indico.BusinessObjects.PriceLevelCostBO> ToList(IEnumerable<Indico.DAL.PriceLevelCost> oQuery)
        {
            List<Indico.DAL.PriceLevelCost> oList = oQuery.ToList();
            List<Indico.BusinessObjects.PriceLevelCostBO> rList = new List<Indico.BusinessObjects.PriceLevelCostBO>(oList.Count);
            foreach (Indico.DAL.PriceLevelCost o in oList)
            {
                Indico.BusinessObjects.PriceLevelCostBO obj = new Indico.BusinessObjects.PriceLevelCostBO(o, ref this._context);
                rList.Add(obj);
            }
            return rList;
        }
        
        internal static List<Indico.DAL.PriceLevelCost> ToEntityList(List<PriceLevelCostBO> bos, IndicoEntities context)
        {
            // build a List of PriceLevelCost entities from the business objects
            List<Int32> ids = (from o in bos
                                   select o.ID).ToList<Int32>();

            return (context.PriceLevelCost.Count() == 0) ? new List<Indico.DAL.PriceLevelCost>() : (context.PriceLevelCost.Where(BuildContainsExpression<PriceLevelCost, int>(e => e.ID, ids)))
                .ToList<Indico.DAL.PriceLevelCost>();
        }
        
        internal static System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.PriceLevelCost> ToEntityCollection(List<PriceLevelCostBO> bos, IndicoEntities context)
        {
            // build an EntityCollection of PriceLevelCost entities from the business objects
            List<Int32> ids = (from o in bos
                               select o.ID).ToList<Int32>();

            List<Indico.DAL.PriceLevelCost> el = (context.PriceLevelCost.Count() == 0) ? new List<Indico.DAL.PriceLevelCost>() : 
                context.PriceLevelCost.Where(BuildContainsExpression<PriceLevelCost, int>(e => e.ID, ids))
                .ToList<Indico.DAL.PriceLevelCost>();
                
            System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.PriceLevelCost> ec 
                = new System.Data.Objects.DataClasses.EntityCollection<Indico.DAL.PriceLevelCost>();
                
            foreach (Indico.DAL.PriceLevelCost r in el) 
            {
                ec.Add(r);
            }
            return ec;
        }

        internal Indico.DAL.PriceLevelCost ToEntity(IndicoEntities context)
        {
            return (from o in context.PriceLevelCost
                    where o.ID == this.ID
                    select o).FirstOrDefault();
        }
        #endregion
        
        #region BusinessObject methods
        
        #region Add Object
        
        public void Add()
        {
            if (this.Context != null)
            {
                this.Context.Context.AddToPriceLevelCost(this.ObjDAL);
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.PriceLevelCost obj = this.SetDAL(objContext.Context);
                objContext.Context.AddToPriceLevelCost(obj);
                objContext.SaveChanges();
                objContext.Dispose(); 
            }
        }
        
        #endregion
        
        #region Delete Object
        
        public void Delete()
        {
            if (this.Context != null)
            {
                if (this.ObjDAL != null && this.ObjDAL.EntityKey != null)
                {
                    if (this.ObjDAL.EntityState == System.Data.EntityState.Detached)
                    {
                        this.Context.Context.Attach(this.ObjDAL);
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                    else
                    {
                        this.Context.Context.DeleteObject(this.ObjDAL);
                    }
                }
                else
                {
                    Indico.DAL.PriceLevelCost obj = this.SetDAL(this.Context.Context);
                    this.Context.Context.DeleteObject(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                Indico.DAL.PriceLevelCost obj = this.SetDAL(objContext.Context);
                this.Context.Context.DeleteObject(obj);
                objContext.Context.SaveChanges();
                objContext.Dispose();
            }
        }
        
        #endregion
        
        #region Get Single Object
        
        public bool GetObject()
        {
            return GetObject(true);
        }
        public bool GetObject(bool blnCache)
        {
            Indico.BusinessObjects.PriceLevelCostBO data = null;
            
            if (blnCache)
            {
                data = this.GetFromCache(this.ID) as Indico.BusinessObjects.PriceLevelCostBO; 
            }

            if (data != null)
            {
                SetBO(data);
            }
            else
            {
                try
                {
                    IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
                    IQueryable<Indico.DAL.PriceLevelCost> oQuery =
                        from o in context.PriceLevelCost
                        where o.ID == this.ID
                        select o;

                    List<Indico.DAL.PriceLevelCost> oList = oQuery.ToList();
                    if (oList.Count != 1)
                        return false;
                    else
                    {
                        SetBO(oList[0]);
                        this.Cache();
                    }
                    
                    if (this.Context == null)
                    {
                        context.Dispose();
                    }
                }
                catch (System.Exception e)
                {
                    throw new IndicoException(String.Format(System.Globalization.CultureInfo.InvariantCulture, ResourceManager.GetString("Could not Retrieve a {0} from the data store", System.Globalization.CultureInfo.CurrentCulture), this.ToString()), e, IndicoException.Severities.USER, IndicoException.ERRNO.INT_ERR_BO_SELECT_FAIL);
                }
            }
            return true;
        }
        #endregion
        
        #region GetAllObject
        public List<Indico.BusinessObjects.PriceLevelCostBO> GetAllObject()
        {
            return GetAllObject(0, 0);
        }
        public List<Indico.BusinessObjects.PriceLevelCostBO> GetAllObject(int maximumRows)
        {
            return GetAllObject(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PriceLevelCostBO> GetAllObject(int maximumRows, int startIndex)
        {
            return GetAllObject(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PriceLevelCostBO> GetAllObject(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = new IndicoEntities();
            IQueryable<Indico.DAL.PriceLevelCost> oQuery =
                (from o in context.PriceLevelCost
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PriceLevelCostBO> pricelevelcosts = IQueryableToList(oQuery);
            context.Dispose();
            return pricelevelcosts;
        }
        #endregion
        
        #region SearchObjects
        public List<Indico.BusinessObjects.PriceLevelCostBO> SearchObjects()
        {
            return SearchObjects(0,0);
        }
        public List<Indico.BusinessObjects.PriceLevelCostBO> SearchObjects(int maximumRows)
        {
            return SearchObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PriceLevelCostBO> SearchObjects(int maximumRows, int startIndex)
        {
            return SearchObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PriceLevelCostBO> SearchObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.PriceLevelCost> oQuery =
                (from o in context.PriceLevelCost
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Price == 0 || this.Price == o.Price.ID) &&
                    (this.PriceLevel == 0 || this.PriceLevel == o.PriceLevel.ID) &&
                    (this.FactoryCost == 0 || this.FactoryCost == o.FactoryCost) &&
                    (this.IndimanCost == 0 || this.IndimanCost == o.IndimanCost) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PriceLevelCostBO> pricelevelcosts = IQueryableToList(oQuery);
            
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return pricelevelcosts;
        }
        
        public int SearchObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.PriceLevelCost
                 where
                    (this.ID == 0 || this.ID == o.ID) &&
                    (this.Price == 0 || this.Price == o.Price.ID) &&
                    (this.PriceLevel == 0 || this.PriceLevel == o.PriceLevel.ID) &&
                    (this.FactoryCost == 0 || this.FactoryCost == o.FactoryCost) &&
                    (this.IndimanCost == 0 || this.IndimanCost == o.IndimanCost) &&
                    (this.Creator == 0 || this.Creator == o.Creator.ID) &&
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) &&
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) &&
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) 
                 orderby o.ID
                 select o).Count();
        }
        #endregion
        
        #region SearchObjectsLikeAnd
        public List<Indico.BusinessObjects.PriceLevelCostBO> SearchLikeAndObjects()
        {
            return SearchLikeAndObjects(0);
        }
        public List<Indico.BusinessObjects.PriceLevelCostBO> SearchLikeAndObjects(int maximumRows)
        {
            return SearchLikeAndObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PriceLevelCostBO> SearchLikeAndObjects(int maximumRows, int startIndex)
        {
            return SearchLikeAndObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PriceLevelCostBO> SearchLikeAndObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.PriceLevelCost> oQuery =
                (from o in context.PriceLevelCost
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Price == 0 || o.Price.ID == this.Price) &&
                    (this.PriceLevel == 0 || o.PriceLevel.ID == this.PriceLevel) &&
                    (this.FactoryCost == 0 || o.FactoryCost == this.FactoryCost) &&
                    (this.IndimanCost == 0 || o.IndimanCost == this.IndimanCost) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.ModifiedDate == DateTime.MinValue || o.ModifiedDate == this.ModifiedDate) 
                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PriceLevelCostBO> pricelevelcosts = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return pricelevelcosts;
        }
        
        public int SearchLikeAndObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.PriceLevelCost
                 where
                    (this.ID == 0 || o.ID == this.ID) &&
                    (this.Price == 0 || o.Price.ID == this.Price) &&
                    (this.PriceLevel == 0 || o.PriceLevel.ID == this.PriceLevel) &&
                    (this.FactoryCost == 0 || o.FactoryCost == this.FactoryCost) &&
                    (this.IndimanCost == 0 || o.IndimanCost == this.IndimanCost) &&
                    (this.Creator == 0 || o.Creator.ID == this.Creator) &&
                    (this.CreatedDate == DateTime.MinValue || o.CreatedDate == this.CreatedDate) &&
                    (this.Modifier == 0 || o.Modifier.ID == this.Modifier) &&
                    (this.ModifiedDate == DateTime.MinValue || o.ModifiedDate == this.ModifiedDate) 
                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region SearchObjectsLikeOr
        public List<Indico.BusinessObjects.PriceLevelCostBO> SearchLikeOrObjects()
        {
            return SearchLikeOrObjects(0);
        }
        public List<Indico.BusinessObjects.PriceLevelCostBO> SearchLikeOrObjects(int maximumRows)
        {
            return SearchLikeOrObjects(maximumRows, 0);
        }
        public List<Indico.BusinessObjects.PriceLevelCostBO> SearchLikeOrObjects(int maximumRows, int startIndex)
        {
            return SearchLikeOrObjects(maximumRows, startIndex, null, false);
        }
        public List<Indico.BusinessObjects.PriceLevelCostBO> SearchLikeOrObjects(int maximumRows, int startIndex, string sortExpression, bool sortDescending)
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            IQueryable<Indico.DAL.PriceLevelCost> oQuery =
                (from o in context.PriceLevelCost
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Price == 0 || this.Price == o.Price.ID) && 
                    (this.PriceLevel == 0 || this.PriceLevel == o.PriceLevel.ID) && 
                    (this.FactoryCost == 0 || this.FactoryCost == o.FactoryCost) && 
                    (this.IndimanCost == 0 || this.IndimanCost == o.IndimanCost) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) 

                 orderby o.ID
                 select o);

            if (sortExpression != null && sortExpression.Length > 0)
            {
                // using System.Linq.Dynamic here in Dynamic.cs;
                if (sortDescending)
                    oQuery = oQuery.OrderBy(sortExpression + " desc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
                else
                    oQuery = oQuery.OrderBy(sortExpression + " asc").Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);
            }
            else
                oQuery = oQuery.OrderBy(obj => obj.ID).Skip(startIndex).Take((maximumRows == 0) ? Int32.MaxValue : maximumRows);

            List<Indico.BusinessObjects.PriceLevelCostBO> pricelevelcosts = IQueryableToList(oQuery);
            if (this.Context == null)
            {
                context.Dispose();
            }
            
            return pricelevelcosts;
        }
        
        public int SearchLikeOrObjectsCount()
        {
            IndicoEntities context = (this.Context != null) ? this.Context.Context : new IndicoEntities();
            return (from o in context.PriceLevelCost
                 where
                    (this.ID == 0 || this.ID == o.ID) && 
                    (this.Price == 0 || this.Price == o.Price.ID) && 
                    (this.PriceLevel == 0 || this.PriceLevel == o.PriceLevel.ID) && 
                    (this.FactoryCost == 0 || this.FactoryCost == o.FactoryCost) && 
                    (this.IndimanCost == 0 || this.IndimanCost == o.IndimanCost) && 
                    (this.Creator == 0 || this.Creator == o.Creator.ID) && 
                    (this.CreatedDate == DateTime.MinValue || this.CreatedDate == o.CreatedDate) && 
                    (this.Modifier == 0 || this.Modifier == o.Modifier.ID) && 
                    (this.ModifiedDate == DateTime.MinValue || this.ModifiedDate == o.ModifiedDate) 

                 orderby o.ID
                 select o).Count();
            
        }
        #endregion
        
        #region Serialization methods
        /// <summary>
        /// Serializes the Indico.BusinessObjects.PriceLevelCostBO to an XML representation
        /// </summary>
        /// <returns>a XML string serialized representation</returns>
        public string SerializeObject()
        {
            string strReturn = "";

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();

            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            x.Serialize(objStream, this);

            System.Text.Encoding encoding = System.Text.Encoding.UTF8;
            // Read string from binary file with UTF8 encoding
            strReturn = encoding.GetString(objStream.GetBuffer());

            objStream.Close();
            return strReturn;

        }

        /// <summary>
        /// Deserializes Indico.BusinessObjects.PriceLevelCostBO object from an XML representation
        /// </summary>
        /// <param name="strXML">a XML string serialized representation</param>
        public Indico.BusinessObjects.PriceLevelCostBO DeserializeObject(string strXML)
        {
            Indico.BusinessObjects.PriceLevelCostBO objTemp = null;
            System.Xml.XmlDocument objXML = new System.Xml.XmlDocument();

            objXML.LoadXml(strXML);
            System.Text.Encoding encoding = System.Text.Encoding.UTF8;

            System.IO.MemoryStream objStream = new System.IO.MemoryStream();
            byte[] b = encoding.GetBytes(objXML.OuterXml);

            objStream.Write(b, 0, (int)b.Length);
            objStream.Position = 0;
            System.Xml.Serialization.XmlSerializer x = new System.Xml.Serialization.XmlSerializer(this.GetType());

            objTemp = (Indico.BusinessObjects.PriceLevelCostBO)x.Deserialize(objStream);
            objStream.Close();
            return objTemp;
        }

        /// <summary>
        /// Returns a simple XML representation of Indico.BusinessObjects.PriceLevelCostBO object in an XmlElement
        /// </summary>
        /// <returns>An XML snippet representing the object</returns>
        public string ToXmlString()
        {
            // MW TODO - implement this better.
            return SerializeObject();
        }
        #endregion
        
        #region OnPropertyChange Methods
        partial void OnIDChanged()
        {
            OnPriceLevelCostBOIDChanged();
        }
        
        partial void OnIDChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PriceLevelCostBO.ID must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPriceLevelCostBOIDChanging(value);
        }
        partial void OnIDChanged();
        partial void OnIDChanging(int value);
        partial void OnPriceLevelCostBOIDChanged();
        partial void OnPriceLevelCostBOIDChanging(int value);
        
        partial void OnPriceChanged()
        {
            OnPriceLevelCostBOPriceChanged();
        }
        
        partial void OnPriceChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PriceLevelCostBO.Price must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPriceLevelCostBOPriceChanging(value);
        }
        partial void OnPriceChanged();
        partial void OnPriceChanging(int value);
        partial void OnPriceLevelCostBOPriceChanged();
        partial void OnPriceLevelCostBOPriceChanging(int value);
        
        partial void OnPriceLevelChanged()
        {
            OnPriceLevelCostBOPriceLevelChanged();
        }
        
        partial void OnPriceLevelChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PriceLevelCostBO.PriceLevel must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPriceLevelCostBOPriceLevelChanging(value);
        }
        partial void OnPriceLevelChanged();
        partial void OnPriceLevelChanging(int value);
        partial void OnPriceLevelCostBOPriceLevelChanged();
        partial void OnPriceLevelCostBOPriceLevelChanging(int value);
        
        partial void OnFactoryCostChanged()
        {
            OnPriceLevelCostBOFactoryCostChanged();
        }
        
        partial void OnFactoryCostChanging(decimal value)
        {
            OnPriceLevelCostBOFactoryCostChanging(value);
        }
        partial void OnFactoryCostChanged();
        partial void OnFactoryCostChanging(decimal value);
        partial void OnPriceLevelCostBOFactoryCostChanged();
        partial void OnPriceLevelCostBOFactoryCostChanging(decimal value);
        
        partial void OnIndimanCostChanged()
        {
            OnPriceLevelCostBOIndimanCostChanged();
        }
        
        partial void OnIndimanCostChanging(decimal value)
        {
            OnPriceLevelCostBOIndimanCostChanging(value);
        }
        partial void OnIndimanCostChanged();
        partial void OnIndimanCostChanging(decimal value);
        partial void OnPriceLevelCostBOIndimanCostChanged();
        partial void OnPriceLevelCostBOIndimanCostChanging(decimal value);
        
        partial void OnCreatorChanged()
        {
            OnPriceLevelCostBOCreatorChanged();
        }
        
        partial void OnCreatorChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PriceLevelCostBO.Creator must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPriceLevelCostBOCreatorChanging(value);
        }
        partial void OnCreatorChanged();
        partial void OnCreatorChanging(int value);
        partial void OnPriceLevelCostBOCreatorChanged();
        partial void OnPriceLevelCostBOCreatorChanging(int value);
        
        partial void OnCreatedDateChanged()
        {
            OnPriceLevelCostBOCreatedDateChanged();
        }
        
        partial void OnCreatedDateChanging(DateTime value)
        {
            OnPriceLevelCostBOCreatedDateChanging(value);
        }
        partial void OnCreatedDateChanged();
        partial void OnCreatedDateChanging(DateTime value);
        partial void OnPriceLevelCostBOCreatedDateChanged();
        partial void OnPriceLevelCostBOCreatedDateChanging(DateTime value);
        
        partial void OnModifierChanged()
        {
            OnPriceLevelCostBOModifierChanged();
        }
        
        partial void OnModifierChanging(int value)
        {
            if (value < 0)
            {
                throw new Exception(String.Format("PriceLevelCostBO.Modifier must be more than or equal to 0. The supplied value was {0}.", value));
            }
            OnPriceLevelCostBOModifierChanging(value);
        }
        partial void OnModifierChanged();
        partial void OnModifierChanging(int value);
        partial void OnPriceLevelCostBOModifierChanged();
        partial void OnPriceLevelCostBOModifierChanging(int value);
        
        partial void OnModifiedDateChanged()
        {
            OnPriceLevelCostBOModifiedDateChanged();
        }
        
        partial void OnModifiedDateChanging(DateTime value)
        {
            OnPriceLevelCostBOModifiedDateChanging(value);
        }
        partial void OnModifiedDateChanged();
        partial void OnModifiedDateChanging(DateTime value);
        partial void OnPriceLevelCostBOModifiedDateChanged();
        partial void OnPriceLevelCostBOModifiedDateChanging(DateTime value);
        
        #endregion
        
        #region IComparable Members

        public int CompareTo(object obj)
        {
            if (!(obj is Indico.BusinessObjects.PriceLevelCostBO))
                return 1;
            Indico.BusinessObjects.PriceLevelCostBOComparer c = new Indico.BusinessObjects.PriceLevelCostBOComparer();
            return c.Compare(this, obj as Indico.BusinessObjects.PriceLevelCostBO);
        }

        #endregion
        #endregion
        
        #region Events
        
        void obj_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ID")
            {
                // reload me
                this.SetBO((Indico.DAL.PriceLevelCost)sender);
            }
        }
        
        void DistributorPriceLevelCostsWhereThisIsPriceLevelCostList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.DistributorPriceLevelCost obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.DistributorPriceLevelCostsWhereThisIsPriceLevelCost.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.DistributorPriceLevelCostsWhereThisIsPriceLevelCost.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void DistributorPriceLevelCostsWhereThisIsPriceLevelCostList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.DistributorPriceLevelCost obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.DistributorPriceLevelCostsWhereThisIsPriceLevelCost.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO>)sender)[((IndicoList<Indico.BusinessObjects.DistributorPriceLevelCostBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.DistributorPriceLevelCostsWhereThisIsPriceLevelCost.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void LabelPriceLevelCostsWhereThisIsPriceLevelCostList_OnAfterAdd(object sender, EventArgs e)
        {
            Indico.DAL.LabelPriceLevelCost obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.LabelPriceLevelCostBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.LabelPriceLevelCostBO>)sender)[((IndicoList<Indico.BusinessObjects.LabelPriceLevelCostBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.LabelPriceLevelCostsWhereThisIsPriceLevelCost.Add(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.LabelPriceLevelCostBO>)sender)[((IndicoList<Indico.BusinessObjects.LabelPriceLevelCostBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.LabelPriceLevelCostsWhereThisIsPriceLevelCost.Add(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void LabelPriceLevelCostsWhereThisIsPriceLevelCostList_OnBeforeRemove(object sender, EventArgs e)
        {
            Indico.DAL.LabelPriceLevelCost obj = null;
            if (this.Context != null)
            {
                if (((IndicoList<Indico.BusinessObjects.LabelPriceLevelCostBO>)sender).Count > 0)
                {
                    obj = ((IndicoList<Indico.BusinessObjects.LabelPriceLevelCostBO>)sender)[((IndicoList<Indico.BusinessObjects.LabelPriceLevelCostBO>)sender).Count - 1].ObjDAL;
                    this.ObjDAL.LabelPriceLevelCostsWhereThisIsPriceLevelCost.Remove(obj);
                }
            }
            else
            {
                IndicoContext objContext = new IndicoContext();
                obj = ((IndicoList<Indico.BusinessObjects.LabelPriceLevelCostBO>)sender)[((IndicoList<Indico.BusinessObjects.LabelPriceLevelCostBO>)sender).Count - 1].SetDAL(objContext.Context);
                this.ObjDAL.LabelPriceLevelCostsWhereThisIsPriceLevelCost.Remove(obj);
                objContext.SaveChanges();
                objContext.Dispose();
            }
        }
        
        void Context_OnSendBeforeChanges(object sender, EventArgs e)
        {        
            this._distributorPriceLevelCostsWhereThisIsPriceLevelCostLoaded = false;
            if (this.distributorPriceLevelCostsWhereThisIsPriceLevelCostList != null)
            {
                this.distributorPriceLevelCostsWhereThisIsPriceLevelCostList.OnBeforeRemove -= new EventHandler(DistributorPriceLevelCostsWhereThisIsPriceLevelCostList_OnBeforeRemove);
                this.distributorPriceLevelCostsWhereThisIsPriceLevelCostList.OnAfterAdd -= new EventHandler(DistributorPriceLevelCostsWhereThisIsPriceLevelCostList_OnAfterAdd);
            }
            this._labelPriceLevelCostsWhereThisIsPriceLevelCostLoaded = false;
            if (this.labelPriceLevelCostsWhereThisIsPriceLevelCostList != null)
            {
                this.labelPriceLevelCostsWhereThisIsPriceLevelCostList.OnBeforeRemove -= new EventHandler(LabelPriceLevelCostsWhereThisIsPriceLevelCostList_OnBeforeRemove);
                this.labelPriceLevelCostsWhereThisIsPriceLevelCostList.OnAfterAdd -= new EventHandler(LabelPriceLevelCostsWhereThisIsPriceLevelCostList_OnAfterAdd);
            }
        }
        
        void Context_OnSendAfterChanges(object sender, EventArgs e)
        {   
            if (this.ID > 0)
            {
                this.Cache();
            }
        }

        #endregion
    }
    
    #region PriceLevelCostBOComparer
    public class PriceLevelCostBOComparer : IComparer<Indico.BusinessObjects.PriceLevelCostBO>
    {
        private string propertyToCompareName;
        public PriceLevelCostBOComparer(string propertyToCompare)
        {
            PropertyInfo p = typeof(Indico.BusinessObjects.PriceLevelCostBO).GetProperty(propertyToCompare);
            if (p == null)
                throw new ArgumentException("is not a public property of Indico.BusinessObjects.PriceLevelCostBO", "propertyToCompare");
            this.propertyToCompareName = propertyToCompare;
        }
        
        public PriceLevelCostBOComparer()
        {
        
        }

        #region IComparer<Indico.BusinessObjects.PriceLevelCostBO> Members
        public int Compare(Indico.BusinessObjects.PriceLevelCostBO x, Indico.BusinessObjects.PriceLevelCostBO y)
        {
            if (propertyToCompareName != null)
            {
                PropertyInfo p = typeof(Indico.BusinessObjects.PriceLevelCostBO).GetProperty(propertyToCompareName);
                return compare(p, x, y);
            }
            else
            {
                PropertyInfo[] arrP = typeof(Indico.BusinessObjects.PriceLevelCostBO).GetProperties();
                foreach (PropertyInfo p in arrP)
                {
                    int v = compare(p, x, y);
                    if (v != 0)
                        return v;
                }
                return 0;
            }
        }

        private int compare(PropertyInfo p, Indico.BusinessObjects.PriceLevelCostBO x, Indico.BusinessObjects.PriceLevelCostBO y)
        {
            object xVal = p.GetValue(x, null);
            object yVal = p.GetValue(y, null);

            if (xVal == null)
            {
                if (yVal == null)
                    return 0;
                else
                    return -1; // x is null, y is not, y is greater
            }
            else
            {
                if (y == null)
                    return 1; // x non null, y is null, x is greater
                else if (xVal is string)
                {
                    return StringComparer.OrdinalIgnoreCase.Compare(xVal, yVal);
                }
                else if (xVal is IComparable)
                {
                    return ((IComparable)xVal).CompareTo((IComparable)yVal);
                }
                else
                    throw new ArgumentException
                        ("is not string or valuetype that implements IComparable", "propertyToCompare");

            }
        }

        #endregion
    }
    #endregion
}
